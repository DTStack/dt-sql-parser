// Generated from dt-sql-parser/src/grammar/postgresql/PostgreSqlParser.g4 by ANTLR 4.13.1

// @ts-nocheck

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { PostgreSqlParserListener } from "./PostgreSqlParserListener.js";
import { PostgreSqlParserVisitor } from "./PostgreSqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


import { SQLParserBase } from '../SQLParserBase';


export class PostgreSqlParser extends SQLParserBase {
    public static readonly Dollar = 1;
    public static readonly OPEN_PAREN = 2;
    public static readonly CLOSE_PAREN = 3;
    public static readonly OPEN_BRACKET = 4;
    public static readonly CLOSE_BRACKET = 5;
    public static readonly COMMA = 6;
    public static readonly SEMI = 7;
    public static readonly COLON = 8;
    public static readonly STAR = 9;
    public static readonly EQUAL = 10;
    public static readonly DOT = 11;
    public static readonly PLUS = 12;
    public static readonly MINUS = 13;
    public static readonly SLASH = 14;
    public static readonly CARET = 15;
    public static readonly LT = 16;
    public static readonly GT = 17;
    public static readonly LESS_LESS = 18;
    public static readonly GREATER_GREATER = 19;
    public static readonly COLON_EQUALS = 20;
    public static readonly LESS_EQUALS = 21;
    public static readonly EQUALS_GREATER = 22;
    public static readonly GREATER_EQUALS = 23;
    public static readonly DOT_DOT = 24;
    public static readonly NOT_EQUALS = 25;
    public static readonly TYPECAST = 26;
    public static readonly PERCENT = 27;
    public static readonly PARAM = 28;
    public static readonly Operator = 29;
    public static readonly KW_ALL = 30;
    public static readonly KW_ANALYSE = 31;
    public static readonly KW_ANALYZE = 32;
    public static readonly KW_AND = 33;
    public static readonly KW_ANY = 34;
    public static readonly KW_ARRAY = 35;
    public static readonly KW_AS = 36;
    public static readonly KW_ASC = 37;
    public static readonly KW_ASYMMETRIC = 38;
    public static readonly KW_BOTH = 39;
    public static readonly KW_CASE = 40;
    public static readonly KW_CAST = 41;
    public static readonly KW_CHECK = 42;
    public static readonly KW_COLLATE = 43;
    public static readonly KW_COLUMN = 44;
    public static readonly KW_CONSTRAINT = 45;
    public static readonly KW_CREATE = 46;
    public static readonly KW_CURRENT_CATALOG = 47;
    public static readonly KW_CURRENT_DATE = 48;
    public static readonly KW_CURRENT_ROLE = 49;
    public static readonly KW_CURRENT_TIME = 50;
    public static readonly KW_CURRENT_TIMESTAMP = 51;
    public static readonly KW_CURRENT_USER = 52;
    public static readonly KW_DEFAULT = 53;
    public static readonly KW_DEFERRABLE = 54;
    public static readonly KW_DESC = 55;
    public static readonly KW_DISTINCT = 56;
    public static readonly KW_DO = 57;
    public static readonly KW_ELSE = 58;
    public static readonly KW_EXCEPT = 59;
    public static readonly KW_FALSE = 60;
    public static readonly KW_FETCH = 61;
    public static readonly KW_FOR = 62;
    public static readonly KW_FOREIGN = 63;
    public static readonly KW_FROM = 64;
    public static readonly KW_GRANT = 65;
    public static readonly KW_GROUP = 66;
    public static readonly KW_HAVING = 67;
    public static readonly KW_IN = 68;
    public static readonly KW_INITIALLY = 69;
    public static readonly KW_INTERSECT = 70;
    public static readonly KW_INTO = 71;
    public static readonly KW_LATERAL = 72;
    public static readonly KW_LEADING = 73;
    public static readonly KW_LIMIT = 74;
    public static readonly KW_LOCALTIME = 75;
    public static readonly KW_LOCALTIMESTAMP = 76;
    public static readonly KW_NOT = 77;
    public static readonly KW_NULL = 78;
    public static readonly KW_OFFSET = 79;
    public static readonly KW_ON = 80;
    public static readonly KW_ONLY = 81;
    public static readonly KW_OR = 82;
    public static readonly KW_ORDER = 83;
    public static readonly KW_PLACING = 84;
    public static readonly KW_PRIMARY = 85;
    public static readonly KW_REFERENCES = 86;
    public static readonly KW_RETURNING = 87;
    public static readonly KW_SELECT = 88;
    public static readonly KW_SESSION_USER = 89;
    public static readonly KW_SOME = 90;
    public static readonly KW_SYMMETRIC = 91;
    public static readonly KW_TABLE = 92;
    public static readonly KW_THEN = 93;
    public static readonly KW_TO = 94;
    public static readonly KW_TRAILING = 95;
    public static readonly KW_TRUE = 96;
    public static readonly KW_UNION = 97;
    public static readonly KW_UNIQUE = 98;
    public static readonly KW_USER = 99;
    public static readonly KW_USING = 100;
    public static readonly KW_VARIADIC = 101;
    public static readonly KW_WHEN = 102;
    public static readonly KW_WHERE = 103;
    public static readonly KW_WINDOW = 104;
    public static readonly KW_WITH = 105;
    public static readonly KW_AUTHORIZATION = 106;
    public static readonly KW_BINARY = 107;
    public static readonly KW_COLLATION = 108;
    public static readonly KW_CONCURRENTLY = 109;
    public static readonly KW_CROSS = 110;
    public static readonly KW_CURRENT_SCHEMA = 111;
    public static readonly KW_FREEZE = 112;
    public static readonly KW_FULL = 113;
    public static readonly KW_ILIKE = 114;
    public static readonly KW_INNER = 115;
    public static readonly KW_IS = 116;
    public static readonly KW_ISNULL = 117;
    public static readonly KW_JOIN = 118;
    public static readonly KW_LEFT = 119;
    public static readonly KW_LIKE = 120;
    public static readonly KW_NATURAL = 121;
    public static readonly KW_NOTNULL = 122;
    public static readonly KW_OUTER = 123;
    public static readonly KW_OVER = 124;
    public static readonly KW_OVERLAPS = 125;
    public static readonly KW_RIGHT = 126;
    public static readonly KW_SIMILAR = 127;
    public static readonly KW_VERBOSE = 128;
    public static readonly KW_ABORT = 129;
    public static readonly KW_ABSOLUTE = 130;
    public static readonly KW_ACCESS = 131;
    public static readonly KW_ACTION = 132;
    public static readonly KW_ADD = 133;
    public static readonly KW_ADMIN = 134;
    public static readonly KW_AFTER = 135;
    public static readonly KW_AGGREGATE = 136;
    public static readonly KW_ALSO = 137;
    public static readonly KW_ALTER = 138;
    public static readonly KW_ALWAYS = 139;
    public static readonly KW_ASSERTION = 140;
    public static readonly KW_ASSIGNMENT = 141;
    public static readonly KW_AT = 142;
    public static readonly KW_ATTRIBUTE = 143;
    public static readonly KW_BACKWARD = 144;
    public static readonly KW_BEFORE = 145;
    public static readonly KW_BEGIN = 146;
    public static readonly KW_BY = 147;
    public static readonly KW_CACHE = 148;
    public static readonly KW_CALLED = 149;
    public static readonly KW_CASCADE = 150;
    public static readonly KW_CASCADED = 151;
    public static readonly KW_CATALOG = 152;
    public static readonly KW_CHAIN = 153;
    public static readonly KW_CHARACTERISTICS = 154;
    public static readonly KW_CHECKPOINT = 155;
    public static readonly KW_CLASS = 156;
    public static readonly KW_CLOSE = 157;
    public static readonly KW_CLUSTER = 158;
    public static readonly KW_COMMENT = 159;
    public static readonly KW_COMMENTS = 160;
    public static readonly KW_COMMIT = 161;
    public static readonly KW_COMMITTED = 162;
    public static readonly KW_CONFIGURATION = 163;
    public static readonly KW_CONNECTION = 164;
    public static readonly KW_CONSTRAINTS = 165;
    public static readonly KW_CONTENT = 166;
    public static readonly KW_CONTINUE = 167;
    public static readonly KW_CONVERSION = 168;
    public static readonly KW_COPY = 169;
    public static readonly KW_COST = 170;
    public static readonly KW_CSV = 171;
    public static readonly KW_CURSOR = 172;
    public static readonly KW_CYCLE = 173;
    public static readonly KW_DATA = 174;
    public static readonly KW_DATABASE = 175;
    public static readonly KW_DAY = 176;
    public static readonly KW_DEALLOCATE = 177;
    public static readonly KW_DECLARE = 178;
    public static readonly KW_DEFAULTS = 179;
    public static readonly KW_DEFERRED = 180;
    public static readonly KW_DEFINER = 181;
    public static readonly KW_DELETE = 182;
    public static readonly KW_DELIMITER = 183;
    public static readonly KW_DELIMITERS = 184;
    public static readonly KW_DICTIONARY = 185;
    public static readonly KW_DISABLE = 186;
    public static readonly KW_DISCARD = 187;
    public static readonly KW_DOCUMENT = 188;
    public static readonly KW_DOMAIN = 189;
    public static readonly KW_DOUBLE = 190;
    public static readonly KW_DROP = 191;
    public static readonly KW_EACH = 192;
    public static readonly KW_ENABLE = 193;
    public static readonly KW_ENCODING = 194;
    public static readonly KW_ENCRYPTED = 195;
    public static readonly KW_ENUM = 196;
    public static readonly KW_ESCAPE = 197;
    public static readonly KW_EVENT = 198;
    public static readonly KW_EXCLUDE = 199;
    public static readonly KW_EXCLUDING = 200;
    public static readonly KW_EXCLUSIVE = 201;
    public static readonly KW_EXECUTE = 202;
    public static readonly KW_EXPLAIN = 203;
    public static readonly KW_EXTENSION = 204;
    public static readonly KW_EXTERNAL = 205;
    public static readonly KW_FAMILY = 206;
    public static readonly KW_FIRST = 207;
    public static readonly KW_FOLLOWING = 208;
    public static readonly KW_FORCE = 209;
    public static readonly KW_FORWARD = 210;
    public static readonly KW_FUNCTION = 211;
    public static readonly KW_FUNCTIONS = 212;
    public static readonly KW_GLOBAL = 213;
    public static readonly KW_GRANTED = 214;
    public static readonly KW_HANDLER = 215;
    public static readonly KW_HEADER = 216;
    public static readonly KW_HOLD = 217;
    public static readonly KW_HOUR = 218;
    public static readonly KW_IDENTITY = 219;
    public static readonly KW_IF = 220;
    public static readonly KW_IMMEDIATE = 221;
    public static readonly KW_IMMUTABLE = 222;
    public static readonly KW_IMPLICIT = 223;
    public static readonly KW_INCLUDING = 224;
    public static readonly KW_INCREMENT = 225;
    public static readonly KW_INDEX = 226;
    public static readonly KW_INDEXES = 227;
    public static readonly KW_INHERIT = 228;
    public static readonly KW_NOINHERIT = 229;
    public static readonly KW_SUPERUSER = 230;
    public static readonly KW_NOSUPERUSER = 231;
    public static readonly KW_CREATEDB = 232;
    public static readonly KW_NOCREATEDB = 233;
    public static readonly KW_CREATEROLE = 234;
    public static readonly KW_NOCREATEROLE = 235;
    public static readonly KW_CREATEUSER = 236;
    public static readonly KW_NOCREATEUSER = 237;
    public static readonly KW_INHERITS = 238;
    public static readonly KW_INLINE = 239;
    public static readonly KW_INSENSITIVE = 240;
    public static readonly KW_INSERT = 241;
    public static readonly KW_INSTEAD = 242;
    public static readonly KW_INVOKER = 243;
    public static readonly KW_ISOLATION = 244;
    public static readonly KW_KEY = 245;
    public static readonly KW_LABEL = 246;
    public static readonly KW_LANGUAGE = 247;
    public static readonly KW_LARGE = 248;
    public static readonly KW_LAST = 249;
    public static readonly KW_LEAKPROOF = 250;
    public static readonly KW_LEVEL = 251;
    public static readonly KW_LISTEN = 252;
    public static readonly KW_LOAD = 253;
    public static readonly KW_LOCAL = 254;
    public static readonly KW_LOCATION = 255;
    public static readonly KW_LOCK = 256;
    public static readonly KW_MAPPING = 257;
    public static readonly KW_MATCH = 258;
    public static readonly KW_MATERIALIZED = 259;
    public static readonly KW_MAXVALUE = 260;
    public static readonly KW_MINUTE = 261;
    public static readonly KW_MINVALUE = 262;
    public static readonly KW_MODE = 263;
    public static readonly KW_MONTH = 264;
    public static readonly KW_MOVE = 265;
    public static readonly KW_NAME = 266;
    public static readonly KW_NAMES = 267;
    public static readonly KW_NEXT = 268;
    public static readonly KW_NO = 269;
    public static readonly KW_NOTHING = 270;
    public static readonly KW_NOTIFY = 271;
    public static readonly KW_NOWAIT = 272;
    public static readonly KW_NULLS = 273;
    public static readonly KW_OBJECT = 274;
    public static readonly KW_OF = 275;
    public static readonly KW_OFF = 276;
    public static readonly KW_OIDS = 277;
    public static readonly KW_OPERATOR = 278;
    public static readonly KW_OPTION = 279;
    public static readonly KW_OPTIONS = 280;
    public static readonly KW_OWNED = 281;
    public static readonly KW_OWNER = 282;
    public static readonly KW_PARSER = 283;
    public static readonly KW_PARTIAL = 284;
    public static readonly KW_PARTITION = 285;
    public static readonly KW_PASSING = 286;
    public static readonly KW_PASSWORD = 287;
    public static readonly KW_PLANS = 288;
    public static readonly KW_PRECEDING = 289;
    public static readonly KW_PREPARE = 290;
    public static readonly KW_PREPARED = 291;
    public static readonly KW_PRESERVE = 292;
    public static readonly KW_PRIOR = 293;
    public static readonly KW_PRIVILEGES = 294;
    public static readonly KW_PROCEDURAL = 295;
    public static readonly KW_PROCEDURE = 296;
    public static readonly KW_PROGRAM = 297;
    public static readonly KW_QUOTE = 298;
    public static readonly KW_RANGE = 299;
    public static readonly KW_READ = 300;
    public static readonly KW_REASSIGN = 301;
    public static readonly KW_RECHECK = 302;
    public static readonly KW_RECURSIVE = 303;
    public static readonly KW_REF = 304;
    public static readonly KW_REFRESH = 305;
    public static readonly KW_REINDEX = 306;
    public static readonly KW_RELATIVE = 307;
    public static readonly KW_RELEASE = 308;
    public static readonly KW_RENAME = 309;
    public static readonly KW_REPEATABLE = 310;
    public static readonly KW_REPLACE = 311;
    public static readonly KW_REPLICA = 312;
    public static readonly KW_RESET = 313;
    public static readonly KW_RESTART = 314;
    public static readonly KW_RESTRICT = 315;
    public static readonly KW_RETURNS = 316;
    public static readonly KW_REVOKE = 317;
    public static readonly KW_ROLE = 318;
    public static readonly KW_ROLLBACK = 319;
    public static readonly KW_ROWS = 320;
    public static readonly KW_RULE = 321;
    public static readonly KW_SAVEPOINT = 322;
    public static readonly KW_SCHEMA = 323;
    public static readonly KW_SCROLL = 324;
    public static readonly KW_SEARCH = 325;
    public static readonly KW_SECOND = 326;
    public static readonly KW_SECURITY = 327;
    public static readonly KW_SEQUENCE = 328;
    public static readonly KW_SEQUENCES = 329;
    public static readonly KW_SERIALIZABLE = 330;
    public static readonly KW_SERVER = 331;
    public static readonly KW_SESSION = 332;
    public static readonly KW_SET = 333;
    public static readonly KW_SHARE = 334;
    public static readonly KW_SHOW = 335;
    public static readonly KW_SIMPLE = 336;
    public static readonly KW_SNAPSHOT = 337;
    public static readonly KW_STABLE = 338;
    public static readonly KW_STANDALONE = 339;
    public static readonly KW_START = 340;
    public static readonly KW_STATEMENT = 341;
    public static readonly KW_STATISTICS = 342;
    public static readonly KW_STDIN = 343;
    public static readonly KW_STDOUT = 344;
    public static readonly KW_STORAGE = 345;
    public static readonly KW_STRICT = 346;
    public static readonly KW_STRIP = 347;
    public static readonly KW_SYSID = 348;
    public static readonly KW_SYSTEM = 349;
    public static readonly KW_TABLES = 350;
    public static readonly KW_TABLESPACE = 351;
    public static readonly KW_TEMP = 352;
    public static readonly KW_TEMPLATE = 353;
    public static readonly KW_TEMPORARY = 354;
    public static readonly KW_TEXT = 355;
    public static readonly KW_TRANSACTION = 356;
    public static readonly KW_TRIGGER = 357;
    public static readonly KW_TRUNCATE = 358;
    public static readonly KW_TRUSTED = 359;
    public static readonly KW_TYPE = 360;
    public static readonly KW_TYPES = 361;
    public static readonly KW_UNBOUNDED = 362;
    public static readonly KW_UNCOMMITTED = 363;
    public static readonly KW_UNENCRYPTED = 364;
    public static readonly KW_UNKNOWN = 365;
    public static readonly KW_UNLISTEN = 366;
    public static readonly KW_UNLOGGED = 367;
    public static readonly KW_UNTIL = 368;
    public static readonly KW_UPDATE = 369;
    public static readonly KW_VACUUM = 370;
    public static readonly KW_VALID = 371;
    public static readonly KW_VALIDATE = 372;
    public static readonly KW_VALIDATOR = 373;
    public static readonly KW_VARYING = 374;
    public static readonly KW_VERSION = 375;
    public static readonly KW_VIEW = 376;
    public static readonly KW_VOLATILE = 377;
    public static readonly KW_WHITESPACE = 378;
    public static readonly KW_WITHOUT = 379;
    public static readonly KW_WORK = 380;
    public static readonly KW_WRAPPER = 381;
    public static readonly KW_WRITE = 382;
    public static readonly KW_XML = 383;
    public static readonly KW_YEAR = 384;
    public static readonly KW_YES = 385;
    public static readonly KW_ZONE = 386;
    public static readonly KW_BETWEEN = 387;
    public static readonly KW_BIGINT = 388;
    public static readonly KW_BIT = 389;
    public static readonly KW_BOOLEAN = 390;
    public static readonly KW_CHAR = 391;
    public static readonly KW_CHARACTER = 392;
    public static readonly KW_COALESCE = 393;
    public static readonly KW_DEC = 394;
    public static readonly KW_DECIMAL = 395;
    public static readonly KW_EXISTS = 396;
    public static readonly KW_EXTRACT = 397;
    public static readonly KW_FLOAT = 398;
    public static readonly KW_GREATEST = 399;
    public static readonly KW_INOUT = 400;
    public static readonly KW_INT = 401;
    public static readonly KW_INTEGER = 402;
    public static readonly KW_INTERVAL = 403;
    public static readonly KW_LEAST = 404;
    public static readonly KW_NATIONAL = 405;
    public static readonly KW_NCHAR = 406;
    public static readonly KW_NONE = 407;
    public static readonly KW_NULLIF = 408;
    public static readonly KW_NUMERIC = 409;
    public static readonly KW_OVERLAY = 410;
    public static readonly KW_POSITION = 411;
    public static readonly KW_PRECISION = 412;
    public static readonly KW_REAL = 413;
    public static readonly KW_ROW = 414;
    public static readonly KW_SETOF = 415;
    public static readonly KW_SMALLINT = 416;
    public static readonly KW_SUBSTRING = 417;
    public static readonly KW_TIME = 418;
    public static readonly KW_TIMESTAMP = 419;
    public static readonly KW_TREAT = 420;
    public static readonly KW_TRIM = 421;
    public static readonly KW_VALUES = 422;
    public static readonly KW_VARCHAR = 423;
    public static readonly KW_XMLATTRIBUTES = 424;
    public static readonly KW_XMLCONCAT = 425;
    public static readonly KW_XMLELEMENT = 426;
    public static readonly KW_XMLEXISTS = 427;
    public static readonly KW_XMLFOREST = 428;
    public static readonly KW_XMLPARSE = 429;
    public static readonly KW_XMLPI = 430;
    public static readonly KW_XMLROOT = 431;
    public static readonly KW_XMLSERIALIZE = 432;
    public static readonly KW_CALL = 433;
    public static readonly KW_CURRENT = 434;
    public static readonly KW_ATTACH = 435;
    public static readonly KW_DETACH = 436;
    public static readonly KW_EXPRESSION = 437;
    public static readonly KW_GENERATED = 438;
    public static readonly KW_LOGGED = 439;
    public static readonly KW_STORED = 440;
    public static readonly KW_INCLUDE = 441;
    public static readonly KW_ROUTINE = 442;
    public static readonly KW_TRANSFORM = 443;
    public static readonly KW_IMPORT = 444;
    public static readonly KW_POLICY = 445;
    public static readonly KW_METHOD = 446;
    public static readonly KW_REFERENCING = 447;
    public static readonly KW_NEW = 448;
    public static readonly KW_OLD = 449;
    public static readonly KW_VALUE = 450;
    public static readonly KW_SUBSCRIPTION = 451;
    public static readonly KW_PUBLICATION = 452;
    public static readonly KW_OUT = 453;
    public static readonly KW_END = 454;
    public static readonly KW_ROUTINES = 455;
    public static readonly KW_SCHEMAS = 456;
    public static readonly KW_PROCEDURES = 457;
    public static readonly KW_INPUT = 458;
    public static readonly KW_SUPPORT = 459;
    public static readonly KW_PARALLEL = 460;
    public static readonly KW_SQL = 461;
    public static readonly KW_DEPENDS = 462;
    public static readonly KW_OVERRIDING = 463;
    public static readonly KW_CONFLICT = 464;
    public static readonly KW_SKIP = 465;
    public static readonly KW_LOCKED = 466;
    public static readonly KW_TIES = 467;
    public static readonly KW_ROLLUP = 468;
    public static readonly KW_CUBE = 469;
    public static readonly KW_GROUPING = 470;
    public static readonly KW_SETS = 471;
    public static readonly KW_TABLESAMPLE = 472;
    public static readonly KW_ORDINALITY = 473;
    public static readonly KW_XMLTABLE = 474;
    public static readonly KW_COLUMNS = 475;
    public static readonly KW_XMLNAMESPACES = 476;
    public static readonly KW_ROWTYPE = 477;
    public static readonly KW_NORMALIZED = 478;
    public static readonly KW_WITHIN = 479;
    public static readonly KW_FILTER = 480;
    public static readonly KW_GROUPS = 481;
    public static readonly KW_OTHERS = 482;
    public static readonly KW_NFC = 483;
    public static readonly KW_NFD = 484;
    public static readonly KW_NFKC = 485;
    public static readonly KW_NFKD = 486;
    public static readonly KW_UESCAPE = 487;
    public static readonly KW_VIEWS = 488;
    public static readonly KW_NORMALIZE = 489;
    public static readonly KW_DUMP = 490;
    public static readonly KW_PRINT_STRICT_PARAMS = 491;
    public static readonly KW_VARIABLE_CONFLICT = 492;
    public static readonly KW_ERROR = 493;
    public static readonly KW_USE_VARIABLE = 494;
    public static readonly KW_USE_COLUMN = 495;
    public static readonly KW_ALIAS = 496;
    public static readonly KW_CONSTANT = 497;
    public static readonly KW_PERFORM = 498;
    public static readonly KW_GET = 499;
    public static readonly KW_DIAGNOSTICS = 500;
    public static readonly KW_STACKED = 501;
    public static readonly KW_ELSIF = 502;
    public static readonly KW_WHILE = 503;
    public static readonly KW_REVERSE = 504;
    public static readonly KW_FOREACH = 505;
    public static readonly KW_SLICE = 506;
    public static readonly KW_EXIT = 507;
    public static readonly KW_RETURN = 508;
    public static readonly KW_QUERY = 509;
    public static readonly KW_RAISE = 510;
    public static readonly KW_SQLSTATE = 511;
    public static readonly KW_DEBUG = 512;
    public static readonly KW_LOG = 513;
    public static readonly KW_INFO = 514;
    public static readonly KW_NOTICE = 515;
    public static readonly KW_WARNING = 516;
    public static readonly KW_EXCEPTION = 517;
    public static readonly KW_ASSERT = 518;
    public static readonly KW_LOOP = 519;
    public static readonly KW_OPEN = 520;
    public static readonly KW_PEFERENCES = 521;
    public static readonly KW_USAGE = 522;
    public static readonly KW_CONNECT = 523;
    public static readonly KW_PUBLIC = 524;
    public static readonly KW_MERGE = 525;
    public static readonly KW_MATCHED = 526;
    public static readonly KW_BREADTH = 527;
    public static readonly KW_DEPTH = 528;
    public static readonly KW_UNSAFE = 529;
    public static readonly KW_RESTRICTED = 530;
    public static readonly KW_SAFE = 531;
    public static readonly KW_FINALIZE = 532;
    public static readonly KW_MODULUS = 533;
    public static readonly KW_REMAINDER = 534;
    public static readonly KW_LOGIN = 535;
    public static readonly KW_NOLOGIN = 536;
    public static readonly KW_REPLICATION = 537;
    public static readonly KW_NOREPLICATION = 538;
    public static readonly KW_BYPASSRLS = 539;
    public static readonly KW_NOBYPASSRLS = 540;
    public static readonly KW_PERMISSIVE = 541;
    public static readonly KW_RESTRICTIVE = 542;
    public static readonly KW_COMPRESSION = 543;
    public static readonly KW_PLAIN = 544;
    public static readonly KW_EXTENDED = 545;
    public static readonly KW_MAIN = 546;
    public static readonly KW_SKIP_LOCKED = 547;
    public static readonly KW_BUFFER_USAGE_LIMIT = 548;
    public static readonly KW_FORCE_QUOTE = 549;
    public static readonly KW_FORCE_NOT_NULL = 550;
    public static readonly KW_FORCE_NULL = 551;
    public static readonly Identifier = 552;
    public static readonly QuotedIdentifier = 553;
    public static readonly UnterminatedQuotedIdentifier = 554;
    public static readonly InvalidQuotedIdentifier = 555;
    public static readonly InvalidUnterminatedQuotedIdentifier = 556;
    public static readonly UnicodeQuotedIdentifier = 557;
    public static readonly UnterminatedUnicodeQuotedIdentifier = 558;
    public static readonly InvalidUnicodeQuotedIdentifier = 559;
    public static readonly InvalidUnterminatedUnicodeQuotedIdentifier = 560;
    public static readonly StringConstant = 561;
    public static readonly UnterminatedStringConstant = 562;
    public static readonly UnicodeEscapeStringConstant = 563;
    public static readonly UnterminatedUnicodeEscapeStringConstant = 564;
    public static readonly BeginDollarStringConstant = 565;
    public static readonly BinaryStringConstant = 566;
    public static readonly UnterminatedBinaryStringConstant = 567;
    public static readonly InvalidBinaryStringConstant = 568;
    public static readonly InvalidUnterminatedBinaryStringConstant = 569;
    public static readonly HexadecimalStringConstant = 570;
    public static readonly UnterminatedHexadecimalStringConstant = 571;
    public static readonly InvalidHexadecimalStringConstant = 572;
    public static readonly InvalidUnterminatedHexadecimalStringConstant = 573;
    public static readonly Integral = 574;
    public static readonly NumericFail = 575;
    public static readonly Numeric = 576;
    public static readonly PLSQLVARIABLENAME = 577;
    public static readonly PLSQLIDENTIFIER = 578;
    public static readonly Whitespace = 579;
    public static readonly Newline = 580;
    public static readonly LineComment = 581;
    public static readonly BlockComment = 582;
    public static readonly UnterminatedBlockComment = 583;
    public static readonly MetaCommand = 584;
    public static readonly EndMetaCommand = 585;
    public static readonly ErrorCharacter = 586;
    public static readonly EscapeStringConstant = 587;
    public static readonly UnterminatedEscapeStringConstant = 588;
    public static readonly InvalidEscapeStringConstant = 589;
    public static readonly InvalidUnterminatedEscapeStringConstant = 590;
    public static readonly DollarText = 591;
    public static readonly EndDollarStringConstant = 592;
    public static readonly AfterEscapeStringConstantWithNewlineMode_Continued = 593;
    public static readonly RULE_program = 0;
    public static readonly RULE_singleStmt = 1;
    public static readonly RULE_stmt = 2;
    public static readonly RULE_callStmt = 3;
    public static readonly RULE_createRoleStmt = 4;
    public static readonly RULE_alterOperatorRoleElem = 5;
    public static readonly RULE_createOperatorRoleElem = 6;
    public static readonly RULE_createUserStmt = 7;
    public static readonly RULE_alterRoleStmt = 8;
    public static readonly RULE_alterRoleSetStmt = 9;
    public static readonly RULE_alterRoutineStmt = 10;
    public static readonly RULE_alterRoutineClause = 11;
    public static readonly RULE_routineAction = 12;
    public static readonly RULE_createGroupStmt = 13;
    public static readonly RULE_alterGroupStmt = 14;
    public static readonly RULE_createSchemaStmt = 15;
    public static readonly RULE_schemaNameCreate = 16;
    public static readonly RULE_schemaStmt = 17;
    public static readonly RULE_variableSetStmt = 18;
    public static readonly RULE_setRest = 19;
    public static readonly RULE_genericSet = 20;
    public static readonly RULE_setRestMore = 21;
    public static readonly RULE_varName = 22;
    public static readonly RULE_varList = 23;
    public static readonly RULE_varValue = 24;
    public static readonly RULE_isoLevel = 25;
    public static readonly RULE_optBooleanOrStringColumn = 26;
    public static readonly RULE_booleanOrString = 27;
    public static readonly RULE_zoneValue = 28;
    public static readonly RULE_nonReservedWordOrStringConst = 29;
    public static readonly RULE_variableResetStmt = 30;
    public static readonly RULE_resetRest = 31;
    public static readonly RULE_setOrResetClause = 32;
    public static readonly RULE_functionSetOrResetClause = 33;
    public static readonly RULE_variableShowStmt = 34;
    public static readonly RULE_constraintsSetStmt = 35;
    public static readonly RULE_checkPointStmt = 36;
    public static readonly RULE_discardStmt = 37;
    public static readonly RULE_alterTableStmt = 38;
    public static readonly RULE_alterTableCmds = 39;
    public static readonly RULE_partitionCmd = 40;
    public static readonly RULE_indexPartitionCmd = 41;
    public static readonly RULE_alterTableCmd = 42;
    public static readonly RULE_alterColumnDefault = 43;
    public static readonly RULE_optDropBehavior = 44;
    public static readonly RULE_collateClause = 45;
    public static readonly RULE_relOptions = 46;
    public static readonly RULE_optRelOptions = 47;
    public static readonly RULE_relOptionElem = 48;
    public static readonly RULE_partitionBoundSpec = 49;
    public static readonly RULE_alterCompositeTypeStmt = 50;
    public static readonly RULE_alterTypeCmd = 51;
    public static readonly RULE_closePortalStmt = 52;
    public static readonly RULE_copyStmt = 53;
    public static readonly RULE_copyOptionsNoparens = 54;
    public static readonly RULE_copyOptions = 55;
    public static readonly RULE_copyGenericOptElem = 56;
    public static readonly RULE_createStmt = 57;
    public static readonly RULE_optTemp = 58;
    public static readonly RULE_optTypedTableElEmentList = 59;
    public static readonly RULE_tableElementList = 60;
    public static readonly RULE_tableElement = 61;
    public static readonly RULE_typedTableElement = 62;
    public static readonly RULE_column_def = 63;
    public static readonly RULE_colConstraint = 64;
    public static readonly RULE_colConstraintElem = 65;
    public static readonly RULE_generatedWhen = 66;
    public static readonly RULE_tableLikeOption = 67;
    public static readonly RULE_constraintElem = 68;
    public static readonly RULE_optColumnList = 69;
    public static readonly RULE_columnListCreate = 70;
    public static readonly RULE_columnList = 71;
    public static readonly RULE_columnListInclude = 72;
    public static readonly RULE_keyMatch = 73;
    public static readonly RULE_exclusionConstraintElem = 74;
    public static readonly RULE_keyActions = 75;
    public static readonly RULE_keyUpdate = 76;
    public static readonly RULE_keyDelete = 77;
    public static readonly RULE_keyAction = 78;
    public static readonly RULE_optInherit = 79;
    public static readonly RULE_partitionSpec = 80;
    public static readonly RULE_partElem = 81;
    public static readonly RULE_tableAccessMethodClause = 82;
    public static readonly RULE_optWith = 83;
    public static readonly RULE_onCommitOption = 84;
    public static readonly RULE_optTableSpace = 85;
    public static readonly RULE_optConstableSpace = 86;
    public static readonly RULE_existingIndex = 87;
    public static readonly RULE_createStatsStmt = 88;
    public static readonly RULE_alterStatsStmt = 89;
    public static readonly RULE_createAsStmt = 90;
    public static readonly RULE_createAsTarget = 91;
    public static readonly RULE_optWithData = 92;
    public static readonly RULE_createMaterializedViewStmt = 93;
    public static readonly RULE_refreshMaterializedViewStmt = 94;
    public static readonly RULE_createSeqStmt = 95;
    public static readonly RULE_alterSeqStmt = 96;
    public static readonly RULE_seqOptElem = 97;
    public static readonly RULE_numericOnly = 98;
    public static readonly RULE_createProceduralLangStmt = 99;
    public static readonly RULE_createTableSpaceStmt = 100;
    public static readonly RULE_createExtensionStmt = 101;
    public static readonly RULE_alterExtensionStmt = 102;
    public static readonly RULE_alterExtensionContentsStmt = 103;
    public static readonly RULE_createFdwStmt = 104;
    public static readonly RULE_fdwOption = 105;
    public static readonly RULE_alterFdwStmt = 106;
    public static readonly RULE_createGenericOptions = 107;
    public static readonly RULE_alterGenericOptions = 108;
    public static readonly RULE_alterGenericOptionElem = 109;
    public static readonly RULE_genericOptionElem = 110;
    public static readonly RULE_createForeignServerStmt = 111;
    public static readonly RULE_foreignServerVersion = 112;
    public static readonly RULE_alterForeignServerStmt = 113;
    public static readonly RULE_createForeignTableStmt = 114;
    public static readonly RULE_importForeignSchemaStmt = 115;
    public static readonly RULE_createUserMappingStmt = 116;
    public static readonly RULE_alterUserMappingStmt = 117;
    public static readonly RULE_createPolicyStmt = 118;
    public static readonly RULE_alterPolicyStmt = 119;
    public static readonly RULE_alterProcedureStmt = 120;
    public static readonly RULE_procedureAction = 121;
    public static readonly RULE_rowSecurityOptionalExpr = 122;
    public static readonly RULE_rowSecurityOptionalWithCheck = 123;
    public static readonly RULE_createAccessMethodStmt = 124;
    public static readonly RULE_createTrigStmt = 125;
    public static readonly RULE_triggerActionTime = 126;
    public static readonly RULE_triggerEvents = 127;
    public static readonly RULE_triggerOneEvent = 128;
    public static readonly RULE_triggerWhen = 129;
    public static readonly RULE_functionOrProcedure = 130;
    public static readonly RULE_triggerFuncArgs = 131;
    public static readonly RULE_triggerFuncArg = 132;
    public static readonly RULE_constraintAttributeElem = 133;
    public static readonly RULE_createEventTrigStmt = 134;
    public static readonly RULE_eventTriggerWhenItem = 135;
    public static readonly RULE_alterEventTrigStmt = 136;
    public static readonly RULE_createAssertionStmt = 137;
    public static readonly RULE_defineStmt = 138;
    public static readonly RULE_definition = 139;
    public static readonly RULE_defElem = 140;
    public static readonly RULE_defArg = 141;
    public static readonly RULE_oldAggregateElem = 142;
    public static readonly RULE_alterEnumStmt = 143;
    public static readonly RULE_ifNotExists = 144;
    public static readonly RULE_createOperatorClassStmt = 145;
    public static readonly RULE_opClassItem = 146;
    public static readonly RULE_createOperatorFamilyStmt = 147;
    public static readonly RULE_alterOperatorFamilyStmt = 148;
    public static readonly RULE_opClassDrop = 149;
    public static readonly RULE_reassignOwnedStmt = 150;
    public static readonly RULE_dropStmt = 151;
    public static readonly RULE_objectTypeAnyName = 152;
    public static readonly RULE_objectTypeName = 153;
    public static readonly RULE_anyNameList = 154;
    public static readonly RULE_anyName = 155;
    public static readonly RULE_attrs = 156;
    public static readonly RULE_truncateStmt = 157;
    public static readonly RULE_truncateTable = 158;
    public static readonly RULE_commentStmt = 159;
    public static readonly RULE_secLabelStmt = 160;
    public static readonly RULE_fetchStmt = 161;
    public static readonly RULE_fetch_args = 162;
    public static readonly RULE_fromIn = 163;
    public static readonly RULE_grantStmt = 164;
    public static readonly RULE_revokeStmt = 165;
    public static readonly RULE_privileges = 166;
    public static readonly RULE_beforePrivilegeSelect = 167;
    public static readonly RULE_privilege = 168;
    public static readonly RULE_privilegeTarget = 169;
    public static readonly RULE_granteeList = 170;
    public static readonly RULE_grantRoleStmt = 171;
    public static readonly RULE_revokeRoleStmt = 172;
    public static readonly RULE_alterDefaultPrivilegesStmt = 173;
    public static readonly RULE_defaclaction = 174;
    public static readonly RULE_defaclPrivilegeTarget = 175;
    public static readonly RULE_indexStmt = 176;
    public static readonly RULE_indexParams = 177;
    public static readonly RULE_indexElem = 178;
    public static readonly RULE_createFunctionStmt = 179;
    public static readonly RULE_orReplaceOpt = 180;
    public static readonly RULE_funcArgs = 181;
    public static readonly RULE_funcArgsList = 182;
    public static readonly RULE_routineWithArgTypesList = 183;
    public static readonly RULE_routineWithArgTypes = 184;
    public static readonly RULE_procedureWithArgTypesList = 185;
    public static readonly RULE_procedureWithArgTypes = 186;
    public static readonly RULE_functionWithArgTypesList = 187;
    public static readonly RULE_functionWithArgTypes = 188;
    public static readonly RULE_funcArg = 189;
    public static readonly RULE_argClass = 190;
    public static readonly RULE_funcType = 191;
    public static readonly RULE_funcArgWithDefault = 192;
    public static readonly RULE_aggregateArgs = 193;
    public static readonly RULE_aggregateWithArgTypes = 194;
    public static readonly RULE_commonFuncOptItem = 195;
    public static readonly RULE_createFuncOptItem = 196;
    public static readonly RULE_optDefinition = 197;
    public static readonly RULE_tableFuncColumn = 198;
    public static readonly RULE_alterFunctionStmt = 199;
    public static readonly RULE_removeFuncStmt = 200;
    public static readonly RULE_removeAggregateStmt = 201;
    public static readonly RULE_removeOperatorStmt = 202;
    public static readonly RULE_operatorArgTypes = 203;
    public static readonly RULE_anyOperator = 204;
    public static readonly RULE_operatorWithArgTypes = 205;
    public static readonly RULE_doStmt = 206;
    public static readonly RULE_createCastStmt = 207;
    public static readonly RULE_ifExists = 208;
    public static readonly RULE_createTransformStmt = 209;
    public static readonly RULE_sqlWithFunction = 210;
    public static readonly RULE_reindexStmt = 211;
    public static readonly RULE_alterTblSpcStmt = 212;
    public static readonly RULE_renameStmt = 213;
    public static readonly RULE_alterObjectDependsStmt = 214;
    public static readonly RULE_alterObjectSchemaStmt = 215;
    public static readonly RULE_alterOperatorStmt = 216;
    public static readonly RULE_operatorDefList = 217;
    public static readonly RULE_operatorDefElem = 218;
    public static readonly RULE_alterTypeStmt = 219;
    public static readonly RULE_alterOwnerStmt = 220;
    public static readonly RULE_createPublicationStmt = 221;
    public static readonly RULE_alterPublicationStmt = 222;
    public static readonly RULE_createSubscriptionStmt = 223;
    public static readonly RULE_alterSubscriptionStmt = 224;
    public static readonly RULE_ruleStmt = 225;
    public static readonly RULE_ruleActionStmt = 226;
    public static readonly RULE_notifyStmt = 227;
    public static readonly RULE_notifyPayload = 228;
    public static readonly RULE_listenStmt = 229;
    public static readonly RULE_unListenStmt = 230;
    public static readonly RULE_transactionStmt = 231;
    public static readonly RULE_optTransaction = 232;
    public static readonly RULE_transactionModeItem = 233;
    public static readonly RULE_transactionModeList = 234;
    public static readonly RULE_viewStmt = 235;
    public static readonly RULE_loadStmt = 236;
    public static readonly RULE_createDbStmt = 237;
    public static readonly RULE_createDbOptItem = 238;
    public static readonly RULE_alterDatabaseStmt = 239;
    public static readonly RULE_alterDatabaseSetStmt = 240;
    public static readonly RULE_alterCollationStmt = 241;
    public static readonly RULE_alterSystemStmt = 242;
    public static readonly RULE_createDomainStmt = 243;
    public static readonly RULE_alterDomainStmt = 244;
    public static readonly RULE_alterSearchDictionaryStmt = 245;
    public static readonly RULE_alterSearchConfigurationStmt = 246;
    public static readonly RULE_createConversionStmt = 247;
    public static readonly RULE_clusterStmt = 248;
    public static readonly RULE_vacuumStmt = 249;
    public static readonly RULE_analyzeStmt = 250;
    public static readonly RULE_analyzeKeyword = 251;
    public static readonly RULE_vacAnalyzeOptionElem = 252;
    public static readonly RULE_analyzeOptionElem = 253;
    public static readonly RULE_optVerbose = 254;
    public static readonly RULE_vacuumRelation = 255;
    public static readonly RULE_vacuumRelationList = 256;
    public static readonly RULE_explainStmt = 257;
    public static readonly RULE_explainableStmt = 258;
    public static readonly RULE_explainOptionList = 259;
    public static readonly RULE_prepareStmt = 260;
    public static readonly RULE_prepTypeClause = 261;
    public static readonly RULE_preParableStmt = 262;
    public static readonly RULE_executeStmt = 263;
    public static readonly RULE_executeParamClause = 264;
    public static readonly RULE_dealLocateStmt = 265;
    public static readonly RULE_insertStmt = 266;
    public static readonly RULE_insertRest = 267;
    public static readonly RULE_insertColumnList = 268;
    public static readonly RULE_insertColumnItem = 269;
    public static readonly RULE_returningClause = 270;
    public static readonly RULE_deleteStmt = 271;
    public static readonly RULE_lockStmt = 272;
    public static readonly RULE_updateStmt = 273;
    public static readonly RULE_setClauseList = 274;
    public static readonly RULE_setClause = 275;
    public static readonly RULE_declareCursorStmt = 276;
    public static readonly RULE_selectStmt = 277;
    public static readonly RULE_selectWithParens = 278;
    public static readonly RULE_selectNoParens = 279;
    public static readonly RULE_selectClause = 280;
    public static readonly RULE_simpleSelect = 281;
    public static readonly RULE_setOperatorWithAllOrDistinct = 282;
    public static readonly RULE_withClause = 283;
    public static readonly RULE_commonTableExpr = 284;
    public static readonly RULE_searchClause = 285;
    public static readonly RULE_cycleClause = 286;
    public static readonly RULE_intoClause = 287;
    public static readonly RULE_optTempTableName = 288;
    public static readonly RULE_distinctClause = 289;
    public static readonly RULE_sortClause = 290;
    public static readonly RULE_sortBy = 291;
    public static readonly RULE_selectLimit = 292;
    public static readonly RULE_limitClause = 293;
    public static readonly RULE_fetchClause = 294;
    public static readonly RULE_offsetClause = 295;
    public static readonly RULE_selectFetchFirstValue = 296;
    public static readonly RULE_groupClause = 297;
    public static readonly RULE_groupByList = 298;
    public static readonly RULE_groupByItem = 299;
    public static readonly RULE_forLockingClause = 300;
    public static readonly RULE_valuesClause = 301;
    public static readonly RULE_fromClause = 302;
    public static readonly RULE_fromList = 303;
    public static readonly RULE_tableRef = 304;
    public static readonly RULE_aliasClause = 305;
    public static readonly RULE_funcAliasClause = 306;
    public static readonly RULE_joinType = 307;
    public static readonly RULE_joinQual = 308;
    public static readonly RULE_relationExpr = 309;
    public static readonly RULE_publicationRelationExpr = 310;
    public static readonly RULE_relationExprList = 311;
    public static readonly RULE_relationExprOptAlias = 312;
    public static readonly RULE_tableSampleClause = 313;
    public static readonly RULE_funcTable = 314;
    public static readonly RULE_rowsFromItem = 315;
    public static readonly RULE_whereClause = 316;
    public static readonly RULE_whereOrCurrentClause = 317;
    public static readonly RULE_tableFuncElementList = 318;
    public static readonly RULE_tableFuncElement = 319;
    public static readonly RULE_xmlTable = 320;
    public static readonly RULE_xmlTableColumnEl = 321;
    public static readonly RULE_xmlNamespaceEle = 322;
    public static readonly RULE_typename = 323;
    public static readonly RULE_simpleTypeName = 324;
    public static readonly RULE_constTypeName = 325;
    public static readonly RULE_numeric = 326;
    public static readonly RULE_optFloat = 327;
    public static readonly RULE_bit = 328;
    public static readonly RULE_character = 329;
    public static readonly RULE_constDatetime = 330;
    public static readonly RULE_optInterval = 331;
    public static readonly RULE_intervalSecond = 332;
    public static readonly RULE_comparisonOperator = 333;
    public static readonly RULE_expression = 334;
    public static readonly RULE_booleanExpression = 335;
    public static readonly RULE_predicate = 336;
    public static readonly RULE_valueExpression = 337;
    public static readonly RULE_primaryExpression = 338;
    public static readonly RULE_funcApplication = 339;
    public static readonly RULE_func_expr = 340;
    public static readonly RULE_funcExprWindowless = 341;
    public static readonly RULE_funcExprCommonSubExpr = 342;
    public static readonly RULE_xmlAttributeList = 343;
    public static readonly RULE_xmlAttributeEl = 344;
    public static readonly RULE_documentOrContent = 345;
    public static readonly RULE_xmlExistsArgument = 346;
    public static readonly RULE_xmlPassingMech = 347;
    public static readonly RULE_windowClause = 348;
    public static readonly RULE_windowDefinition = 349;
    public static readonly RULE_over_clause = 350;
    public static readonly RULE_windowSpecification = 351;
    public static readonly RULE_optFrameClause = 352;
    public static readonly RULE_frameBound = 353;
    public static readonly RULE_row = 354;
    public static readonly RULE_explicitRow = 355;
    public static readonly RULE_subType = 356;
    public static readonly RULE_allOp = 357;
    public static readonly RULE_mathOp = 358;
    public static readonly RULE_qualOp = 359;
    public static readonly RULE_qualAllOp = 360;
    public static readonly RULE_subqueryOperator = 361;
    public static readonly RULE_exprList = 362;
    public static readonly RULE_columnExpr = 363;
    public static readonly RULE_columnExprNoParen = 364;
    public static readonly RULE_funcArgList = 365;
    public static readonly RULE_funcArgExpr = 366;
    public static readonly RULE_arrayExpr = 367;
    public static readonly RULE_extractArg = 368;
    public static readonly RULE_unicodeNormalForm = 369;
    public static readonly RULE_substrList = 370;
    public static readonly RULE_when_clause = 371;
    public static readonly RULE_indirectionEl = 372;
    public static readonly RULE_indirection = 373;
    public static readonly RULE_optIndirection = 374;
    public static readonly RULE_targetList = 375;
    public static readonly RULE_targetEl = 376;
    public static readonly RULE_qualifiedNameList = 377;
    public static readonly RULE_tableNameList = 378;
    public static readonly RULE_schemaNameList = 379;
    public static readonly RULE_databaseNameList = 380;
    public static readonly RULE_tableSpaceNameCreate = 381;
    public static readonly RULE_tableSpaceName = 382;
    public static readonly RULE_tableNameCreate = 383;
    public static readonly RULE_tableName = 384;
    public static readonly RULE_viewNameCreate = 385;
    public static readonly RULE_viewName = 386;
    public static readonly RULE_qualifiedName = 387;
    public static readonly RULE_tableSpaceNameList = 388;
    public static readonly RULE_nameList = 389;
    public static readonly RULE_databaseNameCreate = 390;
    public static readonly RULE_databaseName = 391;
    public static readonly RULE_schemaName = 392;
    public static readonly RULE_routineNameCreate = 393;
    public static readonly RULE_routineName = 394;
    public static readonly RULE_procedureName = 395;
    public static readonly RULE_procedureNameCreate = 396;
    public static readonly RULE_columnName = 397;
    public static readonly RULE_columnNameCreate = 398;
    public static readonly RULE_functionNameCreate = 399;
    public static readonly RULE_functionName = 400;
    public static readonly RULE_stringConst = 401;
    public static readonly RULE_anysconst = 402;
    public static readonly RULE_signedConst = 403;
    public static readonly RULE_roleSpec = 404;
    public static readonly RULE_roleList = 405;
    public static readonly RULE_colId = 406;
    public static readonly RULE_typeFunctionName = 407;
    public static readonly RULE_nonReservedWord = 408;
    public static readonly RULE_colLabel = 409;
    public static readonly RULE_identifier = 410;
    public static readonly RULE_unreservedKeyword = 411;
    public static readonly RULE_colNameKeyword = 412;
    public static readonly RULE_typeFuncNameKeyword = 413;
    public static readonly RULE_reservedKeyword = 414;
    public static readonly RULE_plBlock = 415;
    public static readonly RULE_labelDecl = 416;
    public static readonly RULE_declStatement = 417;
    public static readonly RULE_declCursorArg = 418;
    public static readonly RULE_assignOperator = 419;
    public static readonly RULE_procStmt = 420;
    public static readonly RULE_stmtPerform = 421;
    public static readonly RULE_stmtCall = 422;
    public static readonly RULE_stmtAssign = 423;
    public static readonly RULE_stmtGetdiag = 424;
    public static readonly RULE_getdiagListItem = 425;
    public static readonly RULE_assignVar = 426;
    public static readonly RULE_stmtIf = 427;
    public static readonly RULE_stmtElse = 428;
    public static readonly RULE_stmtCase = 429;
    public static readonly RULE_stmtLoopWhileFor = 430;
    public static readonly RULE_forControl = 431;
    public static readonly RULE_stmtForeach = 432;
    public static readonly RULE_stmtExit = 433;
    public static readonly RULE_stmtReturn = 434;
    public static readonly RULE_stmtRaise = 435;
    public static readonly RULE_optRaiseUsingElem = 436;
    public static readonly RULE_stmtAssert = 437;
    public static readonly RULE_loopBody = 438;
    public static readonly RULE_stmtExecsql = 439;
    public static readonly RULE_stmtDynexecute = 440;
    public static readonly RULE_optExecuteInto = 441;
    public static readonly RULE_stmtOpen = 442;
    public static readonly RULE_optOpenBoundListItem = 443;
    public static readonly RULE_stmtFetch = 444;
    public static readonly RULE_optFetchFirection = 445;
    public static readonly RULE_stmtMove = 446;
    public static readonly RULE_mergeStmt = 447;
    public static readonly RULE_dataSource = 448;
    public static readonly RULE_mergeWhenClause = 449;
    public static readonly RULE_mergeInsert = 450;
    public static readonly RULE_mergeUpdate = 451;
    public static readonly RULE_defaultValuesOrValues = 452;
    public static readonly RULE_exprofdefault = 453;
    public static readonly RULE_stmtClose = 454;
    public static readonly RULE_stmtNull = 455;
    public static readonly RULE_stmtCommitOrRollback = 456;
    public static readonly RULE_stmtSet = 457;
    public static readonly RULE_cursorVariable = 458;
    public static readonly RULE_exceptionSect = 459;
    public static readonly RULE_procCondition = 460;
    public static readonly RULE_anyIdentifier = 461;
    public static readonly RULE_sqlExpression = 462;

    public static readonly literalNames = [
        null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", 
        "'='", "'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", 
        "'>>'", "':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", 
        "'%'", null, null, "'ALL'", "'ANALYSE'", "'ANALYZE'", "'AND'", "'ANY'", 
        "'ARRAY'", "'AS'", "'ASC'", "'ASYMMETRIC'", "'BOTH'", "'CASE'", 
        "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONSTRAINT'", "'CREATE'", 
        "'CURRENT_CATALOG'", "'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DEFAULT'", "'DEFERRABLE'", 
        "'DESC'", "'DISTINCT'", "'DO'", "'ELSE'", "'EXCEPT'", "'FALSE'", 
        "'FETCH'", "'FOR'", "'FOREIGN'", "'FROM'", "'GRANT'", "'GROUP'", 
        "'HAVING'", "'IN'", "'INITIALLY'", "'INTERSECT'", "'INTO'", "'LATERAL'", 
        "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'NOT'", 
        "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", "'ORDER'", "'PLACING'", 
        "'PRIMARY'", "'REFERENCES'", "'RETURNING'", "'SELECT'", "'SESSION_USER'", 
        "'SOME'", "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", 
        "'TRUE'", "'UNION'", "'UNIQUE'", "'USER'", "'USING'", "'VARIADIC'", 
        "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'AUTHORIZATION'", "'BINARY'", 
        "'COLLATION'", "'CONCURRENTLY'", "'CROSS'", "'CURRENT_SCHEMA'", 
        "'FREEZE'", "'FULL'", "'ILIKE'", "'INNER'", "'IS'", "'ISNULL'", 
        "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", "'OUTER'", 
        "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", "'ABORT'", 
        "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", "'AFTER'", 
        "'AGGREGATE'", "'ALSO'", "'ALTER'", "'ALWAYS'", "'ASSERTION'", "'ASSIGNMENT'", 
        "'AT'", "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", "'BY'", 
        "'CACHE'", "'CALLED'", "'CASCADE'", "'CASCADED'", "'CATALOG'", "'CHAIN'", 
        "'CHARACTERISTICS'", "'CHECKPOINT'", "'CLASS'", "'CLOSE'", "'CLUSTER'", 
        "'COMMENT'", "'COMMENTS'", "'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", 
        "'CONNECTION'", "'CONSTRAINTS'", "'CONTENT'", "'CONTINUE'", "'CONVERSION'", 
        "'COPY'", "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", 
        "'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULTS'", "'DEFERRED'", 
        "'DEFINER'", "'DELETE'", "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", 
        "'DISABLE'", "'DISCARD'", "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", 
        "'DROP'", "'EACH'", "'ENABLE'", "'ENCODING'", "'ENCRYPTED'", "'ENUM'", 
        "'ESCAPE'", "'EVENT'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
        "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", "'EXTERNAL'", "'FAMILY'", 
        "'FIRST'", "'FOLLOWING'", "'FORCE'", "'FORWARD'", "'FUNCTION'", 
        "'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", "'HEADER'", 
        "'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IMMUTABLE'", 
        "'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", "'INDEXES'", 
        "'INHERIT'", "'NOINHERIT'", "'SUPERUSER'", "'NOSUPERUSER'", "'CREATEDB'", 
        "'NOCREATEDB'", "'CREATEROLE'", "'NOCREATEROLE'", "'CREATEUSER'", 
        "'NOCREATEUSER'", "'INHERITS'", "'INLINE'", "'INSENSITIVE'", "'INSERT'", 
        "'INSTEAD'", "'INVOKER'", "'ISOLATION'", "'KEY'", "'LABEL'", "'LANGUAGE'", 
        "'LARGE'", "'LAST'", "'LEAKPROOF'", "'LEVEL'", "'LISTEN'", "'LOAD'", 
        "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", "'MATCH'", "'MATERIALIZED'", 
        "'MAXVALUE'", "'MINUTE'", "'MINVALUE'", "'MODE'", "'MONTH'", "'MOVE'", 
        "'NAME'", "'NAMES'", "'NEXT'", "'NO'", "'NOTHING'", "'NOTIFY'", 
        "'NOWAIT'", "'NULLS'", "'OBJECT'", "'OF'", "'OFF'", "'OIDS'", "'OPERATOR'", 
        "'OPTION'", "'OPTIONS'", "'OWNED'", "'OWNER'", "'PARSER'", "'PARTIAL'", 
        "'PARTITION'", "'PASSING'", "'PASSWORD'", "'PLANS'", "'PRECEDING'", 
        "'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", "'PRIVILEGES'", 
        "'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", "'QUOTE'", "'RANGE'", 
        "'READ'", "'REASSIGN'", "'RECHECK'", "'RECURSIVE'", "'REF'", "'REFRESH'", 
        "'REINDEX'", "'RELATIVE'", "'RELEASE'", "'RENAME'", "'REPEATABLE'", 
        "'REPLACE'", "'REPLICA'", "'RESET'", "'RESTART'", "'RESTRICT'", 
        "'RETURNS'", "'REVOKE'", "'ROLE'", "'ROLLBACK'", "'ROWS'", "'RULE'", 
        "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", "'SEARCH'", "'SECOND'", "'SECURITY'", 
        "'SEQUENCE'", "'SEQUENCES'", "'SERIALIZABLE'", "'SERVER'", "'SESSION'", 
        "'SET'", "'SHARE'", "'SHOW'", "'SIMPLE'", "'SNAPSHOT'", "'STABLE'", 
        "'STANDALONE'", "'START'", "'STATEMENT'", "'STATISTICS'", "'STDIN'", 
        "'STDOUT'", "'STORAGE'", "'STRICT'", "'STRIP'", "'SYSID'", "'SYSTEM'", 
        "'TABLES'", "'TABLESPACE'", "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", 
        "'TEXT'", "'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", 
        "'TYPE'", "'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", 
        "'UNKNOWN'", "'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", 
        "'VACUUM'", "'VALID'", "'VALIDATE'", "'VALIDATOR'", "'VARYING'", 
        "'VERSION'", "'VIEW'", "'VOLATILE'", "'WHITESPACE'", "'WITHOUT'", 
        "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", "'YEAR'", "'YES'", "'ZONE'", 
        "'BETWEEN'", "'BIGINT'", "'BIT'", "'BOOLEAN'", "'CHAR'", "'CHARACTER'", 
        "'COALESCE'", "'DEC'", "'DECIMAL'", "'EXISTS'", "'EXTRACT'", "'FLOAT'", 
        "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", "'INTERVAL'", "'LEAST'", 
        "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", "'NUMERIC'", "'OVERLAY'", 
        "'POSITION'", "'PRECISION'", "'REAL'", "'ROW'", "'SETOF'", "'SMALLINT'", 
        "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", "'TREAT'", "'TRIM'", "'VALUES'", 
        "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCONCAT'", "'XMLELEMENT'", "'XMLEXISTS'", 
        "'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", "'XMLROOT'", "'XMLSERIALIZE'", 
        "'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", "'EXPRESSION'", "'GENERATED'", 
        "'LOGGED'", "'STORED'", "'INCLUDE'", "'ROUTINE'", "'TRANSFORM'", 
        "'IMPORT'", "'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", "'OLD'", 
        "'VALUE'", "'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", 
        "'ROUTINES'", "'SCHEMAS'", "'PROCEDURES'", "'INPUT'", "'SUPPORT'", 
        "'PARALLEL'", "'SQL'", "'DEPENDS'", "'OVERRIDING'", "'CONFLICT'", 
        "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", "'CUBE'", "'GROUPING'", 
        "'SETS'", "'TABLESAMPLE'", "'ORDINALITY'", "'XMLTABLE'", "'COLUMNS'", 
        "'XMLNAMESPACES'", "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", "'FILTER'", 
        "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'UESCAPE'", 
        "'VIEWS'", "'NORMALIZE'", "'DUMP'", "'PRINT_STRICT_PARAMS'", "'VARIABLE_CONFLICT'", 
        "'ERROR'", "'USE_VARIABLE'", "'USE_COLUMN'", "'ALIAS'", "'CONSTANT'", 
        "'PERFORM'", "'GET'", "'DIAGNOSTICS'", "'STACKED'", "'ELSIF'", "'WHILE'", 
        "'REVERSE'", "'FOREACH'", "'SLICE'", "'EXIT'", "'RETURN'", "'QUERY'", 
        "'RAISE'", "'SQLSTATE'", "'DEBUG'", "'LOG'", "'INFO'", "'NOTICE'", 
        "'WARNING'", "'EXCEPTION'", "'ASSERT'", "'LOOP'", "'OPEN'", "'PEFERENCES'", 
        "'USAGE'", "'CONNECT'", "'PUBLIC'", "'MERGE'", "'MATCHED'", "'BREADTH'", 
        "'DEPTH'", "'UNSAFE'", "'RESTRICTED'", "'SAFE'", "'FINALIZE'", "'MODULUS'", 
        "'REMAINDER'", "'LOGIN'", "'NOLOGIN'", "'REPLICATION'", "'NOREPLICATION'", 
        "'BYPASSRLS'", "'NOBYPASSRLS'", "'PERMISSIVE'", "'RESTRICTIVE'", 
        "'COMPRESSION'", "'PLAIN'", "'EXTENDED'", "'MAIN'", "'SKIP_LOCKED'", 
        "'BUFFER_USAGE_LIMIT'", "'FORCE_QUOTE'", "'FORCE_NOT_NULL'", "'FORCE_NULL'", 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        "'\\\\'", null, null, null, null, null, null, null, "'''"
    ];

    public static readonly symbolicNames = [
        null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
        "COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", 
        "SLASH", "CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", 
        "LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", 
        "TYPECAST", "PERCENT", "PARAM", "Operator", "KW_ALL", "KW_ANALYSE", 
        "KW_ANALYZE", "KW_AND", "KW_ANY", "KW_ARRAY", "KW_AS", "KW_ASC", 
        "KW_ASYMMETRIC", "KW_BOTH", "KW_CASE", "KW_CAST", "KW_CHECK", "KW_COLLATE", 
        "KW_COLUMN", "KW_CONSTRAINT", "KW_CREATE", "KW_CURRENT_CATALOG", 
        "KW_CURRENT_DATE", "KW_CURRENT_ROLE", "KW_CURRENT_TIME", "KW_CURRENT_TIMESTAMP", 
        "KW_CURRENT_USER", "KW_DEFAULT", "KW_DEFERRABLE", "KW_DESC", "KW_DISTINCT", 
        "KW_DO", "KW_ELSE", "KW_EXCEPT", "KW_FALSE", "KW_FETCH", "KW_FOR", 
        "KW_FOREIGN", "KW_FROM", "KW_GRANT", "KW_GROUP", "KW_HAVING", "KW_IN", 
        "KW_INITIALLY", "KW_INTERSECT", "KW_INTO", "KW_LATERAL", "KW_LEADING", 
        "KW_LIMIT", "KW_LOCALTIME", "KW_LOCALTIMESTAMP", "KW_NOT", "KW_NULL", 
        "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OR", "KW_ORDER", "KW_PLACING", 
        "KW_PRIMARY", "KW_REFERENCES", "KW_RETURNING", "KW_SELECT", "KW_SESSION_USER", 
        "KW_SOME", "KW_SYMMETRIC", "KW_TABLE", "KW_THEN", "KW_TO", "KW_TRAILING", 
        "KW_TRUE", "KW_UNION", "KW_UNIQUE", "KW_USER", "KW_USING", "KW_VARIADIC", 
        "KW_WHEN", "KW_WHERE", "KW_WINDOW", "KW_WITH", "KW_AUTHORIZATION", 
        "KW_BINARY", "KW_COLLATION", "KW_CONCURRENTLY", "KW_CROSS", "KW_CURRENT_SCHEMA", 
        "KW_FREEZE", "KW_FULL", "KW_ILIKE", "KW_INNER", "KW_IS", "KW_ISNULL", 
        "KW_JOIN", "KW_LEFT", "KW_LIKE", "KW_NATURAL", "KW_NOTNULL", "KW_OUTER", 
        "KW_OVER", "KW_OVERLAPS", "KW_RIGHT", "KW_SIMILAR", "KW_VERBOSE", 
        "KW_ABORT", "KW_ABSOLUTE", "KW_ACCESS", "KW_ACTION", "KW_ADD", "KW_ADMIN", 
        "KW_AFTER", "KW_AGGREGATE", "KW_ALSO", "KW_ALTER", "KW_ALWAYS", 
        "KW_ASSERTION", "KW_ASSIGNMENT", "KW_AT", "KW_ATTRIBUTE", "KW_BACKWARD", 
        "KW_BEFORE", "KW_BEGIN", "KW_BY", "KW_CACHE", "KW_CALLED", "KW_CASCADE", 
        "KW_CASCADED", "KW_CATALOG", "KW_CHAIN", "KW_CHARACTERISTICS", "KW_CHECKPOINT", 
        "KW_CLASS", "KW_CLOSE", "KW_CLUSTER", "KW_COMMENT", "KW_COMMENTS", 
        "KW_COMMIT", "KW_COMMITTED", "KW_CONFIGURATION", "KW_CONNECTION", 
        "KW_CONSTRAINTS", "KW_CONTENT", "KW_CONTINUE", "KW_CONVERSION", 
        "KW_COPY", "KW_COST", "KW_CSV", "KW_CURSOR", "KW_CYCLE", "KW_DATA", 
        "KW_DATABASE", "KW_DAY", "KW_DEALLOCATE", "KW_DECLARE", "KW_DEFAULTS", 
        "KW_DEFERRED", "KW_DEFINER", "KW_DELETE", "KW_DELIMITER", "KW_DELIMITERS", 
        "KW_DICTIONARY", "KW_DISABLE", "KW_DISCARD", "KW_DOCUMENT", "KW_DOMAIN", 
        "KW_DOUBLE", "KW_DROP", "KW_EACH", "KW_ENABLE", "KW_ENCODING", "KW_ENCRYPTED", 
        "KW_ENUM", "KW_ESCAPE", "KW_EVENT", "KW_EXCLUDE", "KW_EXCLUDING", 
        "KW_EXCLUSIVE", "KW_EXECUTE", "KW_EXPLAIN", "KW_EXTENSION", "KW_EXTERNAL", 
        "KW_FAMILY", "KW_FIRST", "KW_FOLLOWING", "KW_FORCE", "KW_FORWARD", 
        "KW_FUNCTION", "KW_FUNCTIONS", "KW_GLOBAL", "KW_GRANTED", "KW_HANDLER", 
        "KW_HEADER", "KW_HOLD", "KW_HOUR", "KW_IDENTITY", "KW_IF", "KW_IMMEDIATE", 
        "KW_IMMUTABLE", "KW_IMPLICIT", "KW_INCLUDING", "KW_INCREMENT", "KW_INDEX", 
        "KW_INDEXES", "KW_INHERIT", "KW_NOINHERIT", "KW_SUPERUSER", "KW_NOSUPERUSER", 
        "KW_CREATEDB", "KW_NOCREATEDB", "KW_CREATEROLE", "KW_NOCREATEROLE", 
        "KW_CREATEUSER", "KW_NOCREATEUSER", "KW_INHERITS", "KW_INLINE", 
        "KW_INSENSITIVE", "KW_INSERT", "KW_INSTEAD", "KW_INVOKER", "KW_ISOLATION", 
        "KW_KEY", "KW_LABEL", "KW_LANGUAGE", "KW_LARGE", "KW_LAST", "KW_LEAKPROOF", 
        "KW_LEVEL", "KW_LISTEN", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", 
        "KW_MAPPING", "KW_MATCH", "KW_MATERIALIZED", "KW_MAXVALUE", "KW_MINUTE", 
        "KW_MINVALUE", "KW_MODE", "KW_MONTH", "KW_MOVE", "KW_NAME", "KW_NAMES", 
        "KW_NEXT", "KW_NO", "KW_NOTHING", "KW_NOTIFY", "KW_NOWAIT", "KW_NULLS", 
        "KW_OBJECT", "KW_OF", "KW_OFF", "KW_OIDS", "KW_OPERATOR", "KW_OPTION", 
        "KW_OPTIONS", "KW_OWNED", "KW_OWNER", "KW_PARSER", "KW_PARTIAL", 
        "KW_PARTITION", "KW_PASSING", "KW_PASSWORD", "KW_PLANS", "KW_PRECEDING", 
        "KW_PREPARE", "KW_PREPARED", "KW_PRESERVE", "KW_PRIOR", "KW_PRIVILEGES", 
        "KW_PROCEDURAL", "KW_PROCEDURE", "KW_PROGRAM", "KW_QUOTE", "KW_RANGE", 
        "KW_READ", "KW_REASSIGN", "KW_RECHECK", "KW_RECURSIVE", "KW_REF", 
        "KW_REFRESH", "KW_REINDEX", "KW_RELATIVE", "KW_RELEASE", "KW_RENAME", 
        "KW_REPEATABLE", "KW_REPLACE", "KW_REPLICA", "KW_RESET", "KW_RESTART", 
        "KW_RESTRICT", "KW_RETURNS", "KW_REVOKE", "KW_ROLE", "KW_ROLLBACK", 
        "KW_ROWS", "KW_RULE", "KW_SAVEPOINT", "KW_SCHEMA", "KW_SCROLL", 
        "KW_SEARCH", "KW_SECOND", "KW_SECURITY", "KW_SEQUENCE", "KW_SEQUENCES", 
        "KW_SERIALIZABLE", "KW_SERVER", "KW_SESSION", "KW_SET", "KW_SHARE", 
        "KW_SHOW", "KW_SIMPLE", "KW_SNAPSHOT", "KW_STABLE", "KW_STANDALONE", 
        "KW_START", "KW_STATEMENT", "KW_STATISTICS", "KW_STDIN", "KW_STDOUT", 
        "KW_STORAGE", "KW_STRICT", "KW_STRIP", "KW_SYSID", "KW_SYSTEM", 
        "KW_TABLES", "KW_TABLESPACE", "KW_TEMP", "KW_TEMPLATE", "KW_TEMPORARY", 
        "KW_TEXT", "KW_TRANSACTION", "KW_TRIGGER", "KW_TRUNCATE", "KW_TRUSTED", 
        "KW_TYPE", "KW_TYPES", "KW_UNBOUNDED", "KW_UNCOMMITTED", "KW_UNENCRYPTED", 
        "KW_UNKNOWN", "KW_UNLISTEN", "KW_UNLOGGED", "KW_UNTIL", "KW_UPDATE", 
        "KW_VACUUM", "KW_VALID", "KW_VALIDATE", "KW_VALIDATOR", "KW_VARYING", 
        "KW_VERSION", "KW_VIEW", "KW_VOLATILE", "KW_WHITESPACE", "KW_WITHOUT", 
        "KW_WORK", "KW_WRAPPER", "KW_WRITE", "KW_XML", "KW_YEAR", "KW_YES", 
        "KW_ZONE", "KW_BETWEEN", "KW_BIGINT", "KW_BIT", "KW_BOOLEAN", "KW_CHAR", 
        "KW_CHARACTER", "KW_COALESCE", "KW_DEC", "KW_DECIMAL", "KW_EXISTS", 
        "KW_EXTRACT", "KW_FLOAT", "KW_GREATEST", "KW_INOUT", "KW_INT", "KW_INTEGER", 
        "KW_INTERVAL", "KW_LEAST", "KW_NATIONAL", "KW_NCHAR", "KW_NONE", 
        "KW_NULLIF", "KW_NUMERIC", "KW_OVERLAY", "KW_POSITION", "KW_PRECISION", 
        "KW_REAL", "KW_ROW", "KW_SETOF", "KW_SMALLINT", "KW_SUBSTRING", 
        "KW_TIME", "KW_TIMESTAMP", "KW_TREAT", "KW_TRIM", "KW_VALUES", "KW_VARCHAR", 
        "KW_XMLATTRIBUTES", "KW_XMLCONCAT", "KW_XMLELEMENT", "KW_XMLEXISTS", 
        "KW_XMLFOREST", "KW_XMLPARSE", "KW_XMLPI", "KW_XMLROOT", "KW_XMLSERIALIZE", 
        "KW_CALL", "KW_CURRENT", "KW_ATTACH", "KW_DETACH", "KW_EXPRESSION", 
        "KW_GENERATED", "KW_LOGGED", "KW_STORED", "KW_INCLUDE", "KW_ROUTINE", 
        "KW_TRANSFORM", "KW_IMPORT", "KW_POLICY", "KW_METHOD", "KW_REFERENCING", 
        "KW_NEW", "KW_OLD", "KW_VALUE", "KW_SUBSCRIPTION", "KW_PUBLICATION", 
        "KW_OUT", "KW_END", "KW_ROUTINES", "KW_SCHEMAS", "KW_PROCEDURES", 
        "KW_INPUT", "KW_SUPPORT", "KW_PARALLEL", "KW_SQL", "KW_DEPENDS", 
        "KW_OVERRIDING", "KW_CONFLICT", "KW_SKIP", "KW_LOCKED", "KW_TIES", 
        "KW_ROLLUP", "KW_CUBE", "KW_GROUPING", "KW_SETS", "KW_TABLESAMPLE", 
        "KW_ORDINALITY", "KW_XMLTABLE", "KW_COLUMNS", "KW_XMLNAMESPACES", 
        "KW_ROWTYPE", "KW_NORMALIZED", "KW_WITHIN", "KW_FILTER", "KW_GROUPS", 
        "KW_OTHERS", "KW_NFC", "KW_NFD", "KW_NFKC", "KW_NFKD", "KW_UESCAPE", 
        "KW_VIEWS", "KW_NORMALIZE", "KW_DUMP", "KW_PRINT_STRICT_PARAMS", 
        "KW_VARIABLE_CONFLICT", "KW_ERROR", "KW_USE_VARIABLE", "KW_USE_COLUMN", 
        "KW_ALIAS", "KW_CONSTANT", "KW_PERFORM", "KW_GET", "KW_DIAGNOSTICS", 
        "KW_STACKED", "KW_ELSIF", "KW_WHILE", "KW_REVERSE", "KW_FOREACH", 
        "KW_SLICE", "KW_EXIT", "KW_RETURN", "KW_QUERY", "KW_RAISE", "KW_SQLSTATE", 
        "KW_DEBUG", "KW_LOG", "KW_INFO", "KW_NOTICE", "KW_WARNING", "KW_EXCEPTION", 
        "KW_ASSERT", "KW_LOOP", "KW_OPEN", "KW_PEFERENCES", "KW_USAGE", 
        "KW_CONNECT", "KW_PUBLIC", "KW_MERGE", "KW_MATCHED", "KW_BREADTH", 
        "KW_DEPTH", "KW_UNSAFE", "KW_RESTRICTED", "KW_SAFE", "KW_FINALIZE", 
        "KW_MODULUS", "KW_REMAINDER", "KW_LOGIN", "KW_NOLOGIN", "KW_REPLICATION", 
        "KW_NOREPLICATION", "KW_BYPASSRLS", "KW_NOBYPASSRLS", "KW_PERMISSIVE", 
        "KW_RESTRICTIVE", "KW_COMPRESSION", "KW_PLAIN", "KW_EXTENDED", "KW_MAIN", 
        "KW_SKIP_LOCKED", "KW_BUFFER_USAGE_LIMIT", "KW_FORCE_QUOTE", "KW_FORCE_NOT_NULL", 
        "KW_FORCE_NULL", "Identifier", "QuotedIdentifier", "UnterminatedQuotedIdentifier", 
        "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
        "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
        "InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
        "StringConstant", "UnterminatedStringConstant", "UnicodeEscapeStringConstant", 
        "UnterminatedUnicodeEscapeStringConstant", "BeginDollarStringConstant", 
        "BinaryStringConstant", "UnterminatedBinaryStringConstant", "InvalidBinaryStringConstant", 
        "InvalidUnterminatedBinaryStringConstant", "HexadecimalStringConstant", 
        "UnterminatedHexadecimalStringConstant", "InvalidHexadecimalStringConstant", 
        "InvalidUnterminatedHexadecimalStringConstant", "Integral", "NumericFail", 
        "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", "Whitespace", 
        "Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
        "MetaCommand", "EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", 
        "UnterminatedEscapeStringConstant", "InvalidEscapeStringConstant", 
        "InvalidUnterminatedEscapeStringConstant", "DollarText", "EndDollarStringConstant", 
        "AfterEscapeStringConstantWithNewlineMode_Continued"
    ];
    public static readonly ruleNames = [
        "program", "singleStmt", "stmt", "callStmt", "createRoleStmt", "alterOperatorRoleElem", 
        "createOperatorRoleElem", "createUserStmt", "alterRoleStmt", "alterRoleSetStmt", 
        "alterRoutineStmt", "alterRoutineClause", "routineAction", "createGroupStmt", 
        "alterGroupStmt", "createSchemaStmt", "schemaNameCreate", "schemaStmt", 
        "variableSetStmt", "setRest", "genericSet", "setRestMore", "varName", 
        "varList", "varValue", "isoLevel", "optBooleanOrStringColumn", "booleanOrString", 
        "zoneValue", "nonReservedWordOrStringConst", "variableResetStmt", 
        "resetRest", "setOrResetClause", "functionSetOrResetClause", "variableShowStmt", 
        "constraintsSetStmt", "checkPointStmt", "discardStmt", "alterTableStmt", 
        "alterTableCmds", "partitionCmd", "indexPartitionCmd", "alterTableCmd", 
        "alterColumnDefault", "optDropBehavior", "collateClause", "relOptions", 
        "optRelOptions", "relOptionElem", "partitionBoundSpec", "alterCompositeTypeStmt", 
        "alterTypeCmd", "closePortalStmt", "copyStmt", "copyOptionsNoparens", 
        "copyOptions", "copyGenericOptElem", "createStmt", "optTemp", "optTypedTableElEmentList", 
        "tableElementList", "tableElement", "typedTableElement", "column_def", 
        "colConstraint", "colConstraintElem", "generatedWhen", "tableLikeOption", 
        "constraintElem", "optColumnList", "columnListCreate", "columnList", 
        "columnListInclude", "keyMatch", "exclusionConstraintElem", "keyActions", 
        "keyUpdate", "keyDelete", "keyAction", "optInherit", "partitionSpec", 
        "partElem", "tableAccessMethodClause", "optWith", "onCommitOption", 
        "optTableSpace", "optConstableSpace", "existingIndex", "createStatsStmt", 
        "alterStatsStmt", "createAsStmt", "createAsTarget", "optWithData", 
        "createMaterializedViewStmt", "refreshMaterializedViewStmt", "createSeqStmt", 
        "alterSeqStmt", "seqOptElem", "numericOnly", "createProceduralLangStmt", 
        "createTableSpaceStmt", "createExtensionStmt", "alterExtensionStmt", 
        "alterExtensionContentsStmt", "createFdwStmt", "fdwOption", "alterFdwStmt", 
        "createGenericOptions", "alterGenericOptions", "alterGenericOptionElem", 
        "genericOptionElem", "createForeignServerStmt", "foreignServerVersion", 
        "alterForeignServerStmt", "createForeignTableStmt", "importForeignSchemaStmt", 
        "createUserMappingStmt", "alterUserMappingStmt", "createPolicyStmt", 
        "alterPolicyStmt", "alterProcedureStmt", "procedureAction", "rowSecurityOptionalExpr", 
        "rowSecurityOptionalWithCheck", "createAccessMethodStmt", "createTrigStmt", 
        "triggerActionTime", "triggerEvents", "triggerOneEvent", "triggerWhen", 
        "functionOrProcedure", "triggerFuncArgs", "triggerFuncArg", "constraintAttributeElem", 
        "createEventTrigStmt", "eventTriggerWhenItem", "alterEventTrigStmt", 
        "createAssertionStmt", "defineStmt", "definition", "defElem", "defArg", 
        "oldAggregateElem", "alterEnumStmt", "ifNotExists", "createOperatorClassStmt", 
        "opClassItem", "createOperatorFamilyStmt", "alterOperatorFamilyStmt", 
        "opClassDrop", "reassignOwnedStmt", "dropStmt", "objectTypeAnyName", 
        "objectTypeName", "anyNameList", "anyName", "attrs", "truncateStmt", 
        "truncateTable", "commentStmt", "secLabelStmt", "fetchStmt", "fetch_args", 
        "fromIn", "grantStmt", "revokeStmt", "privileges", "beforePrivilegeSelect", 
        "privilege", "privilegeTarget", "granteeList", "grantRoleStmt", 
        "revokeRoleStmt", "alterDefaultPrivilegesStmt", "defaclaction", 
        "defaclPrivilegeTarget", "indexStmt", "indexParams", "indexElem", 
        "createFunctionStmt", "orReplaceOpt", "funcArgs", "funcArgsList", 
        "routineWithArgTypesList", "routineWithArgTypes", "procedureWithArgTypesList", 
        "procedureWithArgTypes", "functionWithArgTypesList", "functionWithArgTypes", 
        "funcArg", "argClass", "funcType", "funcArgWithDefault", "aggregateArgs", 
        "aggregateWithArgTypes", "commonFuncOptItem", "createFuncOptItem", 
        "optDefinition", "tableFuncColumn", "alterFunctionStmt", "removeFuncStmt", 
        "removeAggregateStmt", "removeOperatorStmt", "operatorArgTypes", 
        "anyOperator", "operatorWithArgTypes", "doStmt", "createCastStmt", 
        "ifExists", "createTransformStmt", "sqlWithFunction", "reindexStmt", 
        "alterTblSpcStmt", "renameStmt", "alterObjectDependsStmt", "alterObjectSchemaStmt", 
        "alterOperatorStmt", "operatorDefList", "operatorDefElem", "alterTypeStmt", 
        "alterOwnerStmt", "createPublicationStmt", "alterPublicationStmt", 
        "createSubscriptionStmt", "alterSubscriptionStmt", "ruleStmt", "ruleActionStmt", 
        "notifyStmt", "notifyPayload", "listenStmt", "unListenStmt", "transactionStmt", 
        "optTransaction", "transactionModeItem", "transactionModeList", 
        "viewStmt", "loadStmt", "createDbStmt", "createDbOptItem", "alterDatabaseStmt", 
        "alterDatabaseSetStmt", "alterCollationStmt", "alterSystemStmt", 
        "createDomainStmt", "alterDomainStmt", "alterSearchDictionaryStmt", 
        "alterSearchConfigurationStmt", "createConversionStmt", "clusterStmt", 
        "vacuumStmt", "analyzeStmt", "analyzeKeyword", "vacAnalyzeOptionElem", 
        "analyzeOptionElem", "optVerbose", "vacuumRelation", "vacuumRelationList", 
        "explainStmt", "explainableStmt", "explainOptionList", "prepareStmt", 
        "prepTypeClause", "preParableStmt", "executeStmt", "executeParamClause", 
        "dealLocateStmt", "insertStmt", "insertRest", "insertColumnList", 
        "insertColumnItem", "returningClause", "deleteStmt", "lockStmt", 
        "updateStmt", "setClauseList", "setClause", "declareCursorStmt", 
        "selectStmt", "selectWithParens", "selectNoParens", "selectClause", 
        "simpleSelect", "setOperatorWithAllOrDistinct", "withClause", "commonTableExpr", 
        "searchClause", "cycleClause", "intoClause", "optTempTableName", 
        "distinctClause", "sortClause", "sortBy", "selectLimit", "limitClause", 
        "fetchClause", "offsetClause", "selectFetchFirstValue", "groupClause", 
        "groupByList", "groupByItem", "forLockingClause", "valuesClause", 
        "fromClause", "fromList", "tableRef", "aliasClause", "funcAliasClause", 
        "joinType", "joinQual", "relationExpr", "publicationRelationExpr", 
        "relationExprList", "relationExprOptAlias", "tableSampleClause", 
        "funcTable", "rowsFromItem", "whereClause", "whereOrCurrentClause", 
        "tableFuncElementList", "tableFuncElement", "xmlTable", "xmlTableColumnEl", 
        "xmlNamespaceEle", "typename", "simpleTypeName", "constTypeName", 
        "numeric", "optFloat", "bit", "character", "constDatetime", "optInterval", 
        "intervalSecond", "comparisonOperator", "expression", "booleanExpression", 
        "predicate", "valueExpression", "primaryExpression", "funcApplication", 
        "func_expr", "funcExprWindowless", "funcExprCommonSubExpr", "xmlAttributeList", 
        "xmlAttributeEl", "documentOrContent", "xmlExistsArgument", "xmlPassingMech", 
        "windowClause", "windowDefinition", "over_clause", "windowSpecification", 
        "optFrameClause", "frameBound", "row", "explicitRow", "subType", 
        "allOp", "mathOp", "qualOp", "qualAllOp", "subqueryOperator", "exprList", 
        "columnExpr", "columnExprNoParen", "funcArgList", "funcArgExpr", 
        "arrayExpr", "extractArg", "unicodeNormalForm", "substrList", "when_clause", 
        "indirectionEl", "indirection", "optIndirection", "targetList", 
        "targetEl", "qualifiedNameList", "tableNameList", "schemaNameList", 
        "databaseNameList", "tableSpaceNameCreate", "tableSpaceName", "tableNameCreate", 
        "tableName", "viewNameCreate", "viewName", "qualifiedName", "tableSpaceNameList", 
        "nameList", "databaseNameCreate", "databaseName", "schemaName", 
        "routineNameCreate", "routineName", "procedureName", "procedureNameCreate", 
        "columnName", "columnNameCreate", "functionNameCreate", "functionName", 
        "stringConst", "anysconst", "signedConst", "roleSpec", "roleList", 
        "colId", "typeFunctionName", "nonReservedWord", "colLabel", "identifier", 
        "unreservedKeyword", "colNameKeyword", "typeFuncNameKeyword", "reservedKeyword", 
        "plBlock", "labelDecl", "declStatement", "declCursorArg", "assignOperator", 
        "procStmt", "stmtPerform", "stmtCall", "stmtAssign", "stmtGetdiag", 
        "getdiagListItem", "assignVar", "stmtIf", "stmtElse", "stmtCase", 
        "stmtLoopWhileFor", "forControl", "stmtForeach", "stmtExit", "stmtReturn", 
        "stmtRaise", "optRaiseUsingElem", "stmtAssert", "loopBody", "stmtExecsql", 
        "stmtDynexecute", "optExecuteInto", "stmtOpen", "optOpenBoundListItem", 
        "stmtFetch", "optFetchFirection", "stmtMove", "mergeStmt", "dataSource", 
        "mergeWhenClause", "mergeInsert", "mergeUpdate", "defaultValuesOrValues", 
        "exprofdefault", "stmtClose", "stmtNull", "stmtCommitOrRollback", 
        "stmtSet", "cursorVariable", "exceptionSect", "procCondition", "anyIdentifier", 
        "sqlExpression",
    ];

    public get grammarFileName(): string { return "PostgreSqlParser.g4"; }
    public get literalNames(): (string | null)[] { return PostgreSqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return PostgreSqlParser.symbolicNames; }
    public get ruleNames(): string[] { return PostgreSqlParser.ruleNames; }
    public get serializedATN(): number[] { return PostgreSqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, PostgreSqlParser._ATN, PostgreSqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, PostgreSqlParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 929;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 2 || _la === 31 || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 570441729) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 142606337) !== 0) || _la === 105 || _la === 129 || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & 2159673601) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & 100680739) !== 0) || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & 1090557953) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 679839745) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 272417) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 6401) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4196353) !== 0) || _la === 454 || _la === 525 || _la === 584) {
                {
                {
                this.state = 926;
                this.singleStmt();
                }
                }
                this.state = 931;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 932;
            this.match(PostgreSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleStmt(): SingleStmtContext {
        let localContext = new SingleStmtContext(this.context, this.state);
        this.enterRule(localContext, 2, PostgreSqlParser.RULE_singleStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 934;
            this.stmt();
            this.state = 936;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 7) {
                {
                this.state = 935;
                this.match(PostgreSqlParser.SEMI);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt(): StmtContext {
        let localContext = new StmtContext(this.context, this.state);
        this.enterRule(localContext, 4, PostgreSqlParser.RULE_stmt);
        let _la: number;
        try {
            this.state = 1058;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 938;
                this.alterEventTrigStmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 939;
                this.alterCollationStmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 940;
                this.alterDatabaseStmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 941;
                this.alterDatabaseSetStmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 942;
                this.alterDefaultPrivilegesStmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 943;
                this.alterDomainStmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 944;
                this.alterEnumStmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 945;
                this.alterExtensionStmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 946;
                this.alterExtensionContentsStmt();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 947;
                this.alterFdwStmt();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 948;
                this.alterForeignServerStmt();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 949;
                this.alterFunctionStmt();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 950;
                this.alterGroupStmt();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 951;
                this.alterObjectDependsStmt();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 952;
                this.alterObjectSchemaStmt();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 953;
                this.alterOwnerStmt();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 954;
                this.alterOperatorStmt();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 955;
                this.alterTypeStmt();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 956;
                this.alterPolicyStmt();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 957;
                this.alterProcedureStmt();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 958;
                this.alterSeqStmt();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 959;
                this.alterSystemStmt();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 960;
                this.alterTableStmt();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 961;
                this.alterTblSpcStmt();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 962;
                this.alterCompositeTypeStmt();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 963;
                this.alterPublicationStmt();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 964;
                this.alterRoleSetStmt();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 965;
                this.alterRoutineStmt();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 966;
                this.alterRoleStmt();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 967;
                this.alterSubscriptionStmt();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 968;
                this.alterStatsStmt();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 969;
                this.alterSearchConfigurationStmt();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 970;
                this.alterSearchDictionaryStmt();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 971;
                this.alterUserMappingStmt();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 972;
                this.analyzeStmt();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 973;
                this.callStmt();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 974;
                this.checkPointStmt();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 975;
                this.closePortalStmt();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 976;
                this.clusterStmt();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 977;
                this.commentStmt();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 978;
                this.constraintsSetStmt();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 979;
                this.copyStmt();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 980;
                this.createAccessMethodStmt();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 981;
                this.createAsStmt();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 982;
                this.createAssertionStmt();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 983;
                this.createCastStmt();
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 984;
                this.createConversionStmt();
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 985;
                this.createDomainStmt();
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 986;
                this.createExtensionStmt();
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 987;
                this.createFdwStmt();
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 988;
                this.createForeignServerStmt();
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 989;
                this.createForeignTableStmt();
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 990;
                this.createFunctionStmt();
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 991;
                this.createGroupStmt();
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 992;
                this.createMaterializedViewStmt();
                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 993;
                this.createOperatorClassStmt();
                }
                break;
            case 57:
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 994;
                this.createOperatorFamilyStmt();
                }
                break;
            case 58:
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 995;
                this.createPublicationStmt();
                }
                break;
            case 59:
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 996;
                this.alterOperatorFamilyStmt();
                }
                break;
            case 60:
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 997;
                this.createPolicyStmt();
                }
                break;
            case 61:
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 998;
                this.createProceduralLangStmt();
                }
                break;
            case 62:
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 999;
                this.createSchemaStmt();
                }
                break;
            case 63:
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1000;
                this.createSeqStmt();
                }
                break;
            case 64:
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1001;
                this.createStmt();
                }
                break;
            case 65:
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1002;
                this.createSubscriptionStmt();
                }
                break;
            case 66:
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1003;
                this.createStatsStmt();
                }
                break;
            case 67:
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1004;
                this.createTableSpaceStmt();
                }
                break;
            case 68:
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1005;
                this.createTransformStmt();
                }
                break;
            case 69:
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1006;
                this.createTrigStmt();
                }
                break;
            case 70:
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1007;
                this.createEventTrigStmt();
                }
                break;
            case 71:
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1008;
                this.createRoleStmt();
                }
                break;
            case 72:
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1009;
                this.createUserStmt();
                }
                break;
            case 73:
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1010;
                this.createUserMappingStmt();
                }
                break;
            case 74:
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1011;
                this.createDbStmt();
                }
                break;
            case 75:
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1012;
                this.dealLocateStmt();
                }
                break;
            case 76:
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1013;
                this.declareCursorStmt();
                }
                break;
            case 77:
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1014;
                this.defineStmt();
                }
                break;
            case 78:
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1015;
                this.deleteStmt();
                }
                break;
            case 79:
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1016;
                this.discardStmt();
                }
                break;
            case 80:
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1017;
                this.doStmt();
                }
                break;
            case 81:
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1018;
                this.dropStmt();
                }
                break;
            case 82:
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1019;
                this.executeStmt();
                }
                break;
            case 83:
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1020;
                this.explainStmt();
                }
                break;
            case 84:
                this.enterOuterAlt(localContext, 84);
                {
                this.state = 1021;
                this.fetchStmt();
                }
                break;
            case 85:
                this.enterOuterAlt(localContext, 85);
                {
                this.state = 1022;
                this.grantStmt();
                }
                break;
            case 86:
                this.enterOuterAlt(localContext, 86);
                {
                this.state = 1023;
                this.grantRoleStmt();
                }
                break;
            case 87:
                this.enterOuterAlt(localContext, 87);
                {
                this.state = 1024;
                this.mergeStmt();
                }
                break;
            case 88:
                this.enterOuterAlt(localContext, 88);
                {
                this.state = 1025;
                this.importForeignSchemaStmt();
                }
                break;
            case 89:
                this.enterOuterAlt(localContext, 89);
                {
                this.state = 1026;
                this.indexStmt();
                }
                break;
            case 90:
                this.enterOuterAlt(localContext, 90);
                {
                this.state = 1027;
                this.insertStmt();
                }
                break;
            case 91:
                this.enterOuterAlt(localContext, 91);
                {
                this.state = 1028;
                this.listenStmt();
                }
                break;
            case 92:
                this.enterOuterAlt(localContext, 92);
                {
                this.state = 1029;
                this.refreshMaterializedViewStmt();
                }
                break;
            case 93:
                this.enterOuterAlt(localContext, 93);
                {
                this.state = 1030;
                this.loadStmt();
                }
                break;
            case 94:
                this.enterOuterAlt(localContext, 94);
                {
                this.state = 1031;
                this.lockStmt();
                }
                break;
            case 95:
                this.enterOuterAlt(localContext, 95);
                {
                this.state = 1032;
                this.notifyStmt();
                }
                break;
            case 96:
                this.enterOuterAlt(localContext, 96);
                {
                this.state = 1033;
                this.prepareStmt();
                }
                break;
            case 97:
                this.enterOuterAlt(localContext, 97);
                {
                this.state = 1034;
                this.reassignOwnedStmt();
                }
                break;
            case 98:
                this.enterOuterAlt(localContext, 98);
                {
                this.state = 1035;
                this.reindexStmt();
                }
                break;
            case 99:
                this.enterOuterAlt(localContext, 99);
                {
                this.state = 1036;
                this.removeAggregateStmt();
                }
                break;
            case 100:
                this.enterOuterAlt(localContext, 100);
                {
                this.state = 1037;
                this.removeFuncStmt();
                }
                break;
            case 101:
                this.enterOuterAlt(localContext, 101);
                {
                this.state = 1038;
                this.removeOperatorStmt();
                }
                break;
            case 102:
                this.enterOuterAlt(localContext, 102);
                {
                this.state = 1039;
                this.renameStmt();
                }
                break;
            case 103:
                this.enterOuterAlt(localContext, 103);
                {
                this.state = 1040;
                this.revokeStmt();
                }
                break;
            case 104:
                this.enterOuterAlt(localContext, 104);
                {
                this.state = 1041;
                this.revokeRoleStmt();
                }
                break;
            case 105:
                this.enterOuterAlt(localContext, 105);
                {
                this.state = 1042;
                this.ruleStmt();
                }
                break;
            case 106:
                this.enterOuterAlt(localContext, 106);
                {
                this.state = 1043;
                this.secLabelStmt();
                }
                break;
            case 107:
                this.enterOuterAlt(localContext, 107);
                {
                this.state = 1044;
                this.selectStmt();
                }
                break;
            case 108:
                this.enterOuterAlt(localContext, 108);
                {
                this.state = 1045;
                this.transactionStmt();
                }
                break;
            case 109:
                this.enterOuterAlt(localContext, 109);
                {
                this.state = 1046;
                this.truncateStmt();
                }
                break;
            case 110:
                this.enterOuterAlt(localContext, 110);
                {
                this.state = 1047;
                this.unListenStmt();
                }
                break;
            case 111:
                this.enterOuterAlt(localContext, 111);
                {
                this.state = 1048;
                this.updateStmt();
                }
                break;
            case 112:
                this.enterOuterAlt(localContext, 112);
                {
                this.state = 1049;
                this.vacuumStmt();
                }
                break;
            case 113:
                this.enterOuterAlt(localContext, 113);
                {
                this.state = 1050;
                this.variableResetStmt();
                }
                break;
            case 114:
                this.enterOuterAlt(localContext, 114);
                {
                this.state = 1051;
                this.variableSetStmt();
                }
                break;
            case 115:
                this.enterOuterAlt(localContext, 115);
                {
                this.state = 1052;
                this.variableShowStmt();
                }
                break;
            case 116:
                this.enterOuterAlt(localContext, 116);
                {
                this.state = 1053;
                this.viewStmt();
                }
                break;
            case 117:
                this.enterOuterAlt(localContext, 117);
                {
                this.state = 1054;
                this.match(PostgreSqlParser.MetaCommand);
                this.state = 1056;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 585) {
                    {
                    this.state = 1055;
                    this.match(PostgreSqlParser.EndMetaCommand);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callStmt(): CallStmtContext {
        let localContext = new CallStmtContext(this.context, this.state);
        this.enterRule(localContext, 6, PostgreSqlParser.RULE_callStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1060;
            this.match(PostgreSqlParser.KW_CALL);
            this.state = 1061;
            this.funcApplication();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRoleStmt(): CreateRoleStmtContext {
        let localContext = new CreateRoleStmtContext(this.context, this.state);
        this.enterRule(localContext, 8, PostgreSqlParser.RULE_createRoleStmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1063;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1064;
            this.match(PostgreSqlParser.KW_ROLE);
            this.state = 1065;
            this.roleSpec();
            this.state = 1067;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {
            case 1:
                {
                this.state = 1066;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1072;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 5, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1069;
                    this.createOperatorRoleElem();
                    }
                    }
                }
                this.state = 1074;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 5, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterOperatorRoleElem(): AlterOperatorRoleElemContext {
        let localContext = new AlterOperatorRoleElemContext(this.context, this.state);
        this.enterRule(localContext, 10, PostgreSqlParser.RULE_alterOperatorRoleElem);
        let _la: number;
        try {
            this.state = 1113;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1075;
                this.match(PostgreSqlParser.KW_PASSWORD);
                this.state = 1078;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1076;
                    this.stringConst();
                    }
                    break;
                case PostgreSqlParser.KW_NULL:
                    {
                    this.state = 1077;
                    this.match(PostgreSqlParser.KW_NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1080;
                _la = this.tokenStream.LA(1);
                if(!(_la === 195 || _la === 364)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1081;
                this.match(PostgreSqlParser.KW_PASSWORD);
                this.state = 1082;
                this.stringConst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1083;
                this.match(PostgreSqlParser.KW_INHERIT);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1084;
                this.match(PostgreSqlParser.KW_NOINHERIT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1085;
                this.match(PostgreSqlParser.KW_CREATEUSER);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1086;
                this.match(PostgreSqlParser.KW_NOCREATEUSER);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1087;
                this.match(PostgreSqlParser.KW_CREATEROLE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1088;
                this.match(PostgreSqlParser.KW_NOCREATEROLE);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1089;
                this.match(PostgreSqlParser.KW_CREATEDB);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1090;
                this.match(PostgreSqlParser.KW_NOCREATEDB);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1091;
                this.match(PostgreSqlParser.KW_SUPERUSER);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1092;
                this.match(PostgreSqlParser.KW_NOSUPERUSER);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1093;
                this.match(PostgreSqlParser.KW_LOGIN);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1094;
                this.match(PostgreSqlParser.KW_NOLOGIN);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1095;
                this.match(PostgreSqlParser.KW_REPLICATION);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1096;
                this.match(PostgreSqlParser.KW_NOREPLICATION);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1097;
                this.match(PostgreSqlParser.KW_BYPASSRLS);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1098;
                this.match(PostgreSqlParser.KW_NOBYPASSRLS);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1099;
                this.match(PostgreSqlParser.KW_CONNECTION);
                this.state = 1100;
                this.match(PostgreSqlParser.KW_LIMIT);
                this.state = 1101;
                this.signedConst();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1102;
                this.match(PostgreSqlParser.KW_VALID);
                this.state = 1103;
                this.match(PostgreSqlParser.KW_UNTIL);
                this.state = 1104;
                this.stringConst();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1105;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1106;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1107;
                this.nameList();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1108;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1109;
                this.roleList();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1110;
                this.match(PostgreSqlParser.KW_ADMIN);
                this.state = 1111;
                this.nameList();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1112;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOperatorRoleElem(): CreateOperatorRoleElemContext {
        let localContext = new CreateOperatorRoleElemContext(this.context, this.state);
        this.enterRule(localContext, 12, PostgreSqlParser.RULE_createOperatorRoleElem);
        let _la: number;
        try {
            this.state = 1123;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 8, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1115;
                this.alterOperatorRoleElem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1116;
                this.match(PostgreSqlParser.KW_SYSID);
                this.state = 1117;
                this.match(PostgreSqlParser.Integral);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1118;
                _la = this.tokenStream.LA(1);
                if(!(_la === 134 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1119;
                this.roleList();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1120;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1121;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1122;
                this.roleList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserStmt(): CreateUserStmtContext {
        let localContext = new CreateUserStmtContext(this.context, this.state);
        this.enterRule(localContext, 14, PostgreSqlParser.RULE_createUserStmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1125;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1126;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 1127;
            this.roleSpec();
            this.state = 1129;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
            case 1:
                {
                this.state = 1128;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1134;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 10, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1131;
                    this.createOperatorRoleElem();
                    }
                    }
                }
                this.state = 1136;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 10, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterRoleStmt(): AlterRoleStmtContext {
        let localContext = new AlterRoleStmtContext(this.context, this.state);
        this.enterRule(localContext, 16, PostgreSqlParser.RULE_alterRoleStmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1137;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1138;
            _la = this.tokenStream.LA(1);
            if(!(_la === 99 || _la === 318)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1139;
            this.roleSpec();
            this.state = 1141;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 11, this.context) ) {
            case 1:
                {
                this.state = 1140;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1146;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 12, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1143;
                    this.alterOperatorRoleElem();
                    }
                    }
                }
                this.state = 1148;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 12, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterRoleSetStmt(): AlterRoleSetStmtContext {
        let localContext = new AlterRoleSetStmtContext(this.context, this.state);
        this.enterRule(localContext, 18, PostgreSqlParser.RULE_alterRoleSetStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1149;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1150;
            _la = this.tokenStream.LA(1);
            if(!(_la === 99 || _la === 318)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1153;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1151;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1152;
                this.roleSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1155;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 1156;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 1157;
            this.databaseName();
            this.state = 1158;
            this.setOrResetClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterRoutineStmt(): AlterRoutineStmtContext {
        let localContext = new AlterRoutineStmtContext(this.context, this.state);
        this.enterRule(localContext, 20, PostgreSqlParser.RULE_alterRoutineStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1160;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1161;
            this.match(PostgreSqlParser.KW_ROUTINE);
            this.state = 1162;
            this.routineName();
            this.state = 1164;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 1163;
                this.funcArgs();
                }
            }

            this.state = 1166;
            this.alterRoutineClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterRoutineClause(): AlterRoutineClauseContext {
        let localContext = new AlterRoutineClauseContext(this.context, this.state);
        this.enterRule(localContext, 22, PostgreSqlParser.RULE_alterRoutineClause);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1194;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1168;
                this.routineAction();
                this.state = 1172;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 15, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1169;
                        this.routineAction();
                        }
                        }
                    }
                    this.state = 1174;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 15, this.context);
                }
                this.state = 1176;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context) ) {
                case 1:
                    {
                    this.state = 1175;
                    this.match(PostgreSqlParser.KW_RESTRICT);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1178;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 1179;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1180;
                this.routineNameCreate();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1181;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 1182;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1183;
                this.roleSpec();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1184;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1185;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 1186;
                this.schemaNameCreate();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1188;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 1187;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 1190;
                this.match(PostgreSqlParser.KW_DEPENDS);
                this.state = 1191;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 1192;
                this.match(PostgreSqlParser.KW_EXTENSION);
                this.state = 1193;
                this.colId();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineAction(): RoutineActionContext {
        let localContext = new RoutineActionContext(this.context, this.state);
        this.enterRule(localContext, 24, PostgreSqlParser.RULE_routineAction);
        let _la: number;
        try {
            this.state = 1238;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1196;
                this.match(PostgreSqlParser.KW_IMMUTABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1197;
                this.match(PostgreSqlParser.KW_STABLE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1198;
                this.match(PostgreSqlParser.KW_VOLATILE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1200;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 1199;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 1202;
                this.match(PostgreSqlParser.KW_LEAKPROOF);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1213;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 22, this.context) ) {
                case 1:
                    {
                    this.state = 1204;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 1203;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 1206;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 1207;
                    this.match(PostgreSqlParser.KW_INVOKER);
                    }
                    break;
                case 2:
                    {
                    this.state = 1209;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 1208;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 1211;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 1212;
                    this.match(PostgreSqlParser.KW_DEFINER);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1215;
                this.match(PostgreSqlParser.KW_PARALLEL);
                this.state = 1216;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 529)) & ~0x1F) === 0 && ((1 << (_la - 529)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1217;
                this.match(PostgreSqlParser.KW_COST);
                this.state = 1218;
                this.colLabel();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1219;
                this.match(PostgreSqlParser.KW_ROWS);
                this.state = 1220;
                this.colId();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1221;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1222;
                this.colId();
                this.state = 1223;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1226;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
                case 1:
                    {
                    this.state = 1224;
                    this.colId();
                    }
                    break;
                case 2:
                    {
                    this.state = 1225;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1228;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1229;
                this.colId();
                this.state = 1230;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 1231;
                this.match(PostgreSqlParser.KW_CURRENT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1233;
                this.match(PostgreSqlParser.KW_RESET);
                this.state = 1236;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1234;
                    this.colId();
                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 1235;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createGroupStmt(): CreateGroupStmtContext {
        let localContext = new CreateGroupStmtContext(this.context, this.state);
        this.enterRule(localContext, 26, PostgreSqlParser.RULE_createGroupStmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1240;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1241;
            this.match(PostgreSqlParser.KW_GROUP);
            this.state = 1242;
            this.roleSpec();
            this.state = 1244;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 26, this.context) ) {
            case 1:
                {
                this.state = 1243;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1249;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 27, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1246;
                    this.createOperatorRoleElem();
                    }
                    }
                }
                this.state = 1251;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 27, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterGroupStmt(): AlterGroupStmtContext {
        let localContext = new AlterGroupStmtContext(this.context, this.state);
        this.enterRule(localContext, 28, PostgreSqlParser.RULE_alterGroupStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1252;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1253;
            this.match(PostgreSqlParser.KW_GROUP);
            this.state = 1254;
            this.roleSpec();
            this.state = 1255;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 191)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1256;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 1257;
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createSchemaStmt(): CreateSchemaStmtContext {
        let localContext = new CreateSchemaStmtContext(this.context, this.state);
        this.enterRule(localContext, 30, PostgreSqlParser.RULE_createSchemaStmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1259;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1260;
            this.match(PostgreSqlParser.KW_SCHEMA);
            this.state = 1262;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
            case 1:
                {
                this.state = 1261;
                this.ifNotExists();
                }
                break;
            }
            this.state = 1270;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
            case 1:
                {
                this.state = 1265;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                    {
                    this.state = 1264;
                    this.schemaNameCreate();
                    }
                }

                this.state = 1267;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                this.state = 1268;
                this.roleSpec();
                }
                break;
            case 2:
                {
                this.state = 1269;
                this.schemaNameCreate();
                }
                break;
            }
            this.state = 1275;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 31, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1272;
                    this.schemaStmt();
                    }
                    }
                }
                this.state = 1277;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 31, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaNameCreate(): SchemaNameCreateContext {
        let localContext = new SchemaNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 32, PostgreSqlParser.RULE_schemaNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1278;
            this.anyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaStmt(): SchemaStmtContext {
        let localContext = new SchemaStmtContext(this.context, this.state);
        this.enterRule(localContext, 34, PostgreSqlParser.RULE_schemaStmt);
        try {
            this.state = 1286;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1280;
                this.createStmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1281;
                this.indexStmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1282;
                this.createSeqStmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1283;
                this.createTrigStmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1284;
                this.grantStmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1285;
                this.viewStmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableSetStmt(): VariableSetStmtContext {
        let localContext = new VariableSetStmtContext(this.context, this.state);
        this.enterRule(localContext, 36, PostgreSqlParser.RULE_variableSetStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1288;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 1290;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 33, this.context) ) {
            case 1:
                {
                this.state = 1289;
                _la = this.tokenStream.LA(1);
                if(!(_la === 254 || _la === 332)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1292;
            this.setRest();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setRest(): SetRestContext {
        let localContext = new SetRestContext(this.context, this.state);
        this.enterRule(localContext, 38, PostgreSqlParser.RULE_setRest);
        try {
            this.state = 1302;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1294;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1295;
                this.transactionModeList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1296;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1297;
                this.match(PostgreSqlParser.KW_CHARACTERISTICS);
                this.state = 1298;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 1299;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1300;
                this.transactionModeList();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1301;
                this.setRestMore();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public genericSet(): GenericSetContext {
        let localContext = new GenericSetContext(this.context, this.state);
        this.enterRule(localContext, 40, PostgreSqlParser.RULE_genericSet);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1306;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1304;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1305;
                this.varName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1309;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 94) {
                {
                this.state = 1308;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1313;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
            case 1:
                {
                this.state = 1311;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            case 2:
                {
                this.state = 1312;
                this.varList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setRestMore(): SetRestMoreContext {
        let localContext = new SetRestMoreContext(this.context, this.state);
        this.enterRule(localContext, 42, PostgreSqlParser.RULE_setRestMore);
        try {
            this.state = 1343;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1315;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 1316;
                this.match(PostgreSqlParser.KW_ZONE);
                this.state = 1317;
                this.zoneValue();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1318;
                this.match(PostgreSqlParser.KW_CATALOG);
                this.state = 1319;
                this.stringConst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1320;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 1321;
                this.schemaName();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1322;
                this.match(PostgreSqlParser.KW_NAMES);
                this.state = 1325;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 38, this.context) ) {
                case 1:
                    {
                    this.state = 1323;
                    this.stringConst();
                    }
                    break;
                case 2:
                    {
                    this.state = 1324;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1327;
                this.match(PostgreSqlParser.KW_ROLE);
                this.state = 1328;
                this.nonReservedWordOrStringConst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1329;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1330;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                this.state = 1331;
                this.nonReservedWordOrStringConst();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1332;
                this.match(PostgreSqlParser.KW_XML);
                this.state = 1333;
                this.match(PostgreSqlParser.KW_OPTION);
                this.state = 1334;
                this.documentOrContent();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1335;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1336;
                this.match(PostgreSqlParser.KW_SNAPSHOT);
                this.state = 1337;
                this.stringConst();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1338;
                this.varName();
                this.state = 1339;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 1340;
                this.match(PostgreSqlParser.KW_CURRENT);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1342;
                this.genericSet();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public varName(): VarNameContext {
        let localContext = new VarNameContext(this.context, this.state);
        this.enterRule(localContext, 44, PostgreSqlParser.RULE_varName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1345;
            this.colId();
            this.state = 1350;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 11) {
                {
                {
                this.state = 1346;
                this.match(PostgreSqlParser.DOT);
                this.state = 1347;
                this.colId();
                }
                }
                this.state = 1352;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public varList(): VarListContext {
        let localContext = new VarListContext(this.context, this.state);
        this.enterRule(localContext, 46, PostgreSqlParser.RULE_varList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1353;
            this.varValue();
            this.state = 1358;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1354;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1355;
                this.varValue();
                }
                }
                this.state = 1360;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public varValue(): VarValueContext {
        let localContext = new VarValueContext(this.context, this.state);
        this.enterRule(localContext, 48, PostgreSqlParser.RULE_varValue);
        try {
            this.state = 1363;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1361;
                this.booleanOrString();
                }
                break;
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1362;
                this.numericOnly();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isoLevel(): IsoLevelContext {
        let localContext = new IsoLevelContext(this.context, this.state);
        this.enterRule(localContext, 50, PostgreSqlParser.RULE_isoLevel);
        let _la: number;
        try {
            this.state = 1370;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_READ:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1365;
                this.match(PostgreSqlParser.KW_READ);
                this.state = 1366;
                _la = this.tokenStream.LA(1);
                if(!(_la === 162 || _la === 363)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_REPEATABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1367;
                this.match(PostgreSqlParser.KW_REPEATABLE);
                this.state = 1368;
                this.match(PostgreSqlParser.KW_READ);
                }
                break;
            case PostgreSqlParser.KW_SERIALIZABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1369;
                this.match(PostgreSqlParser.KW_SERIALIZABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optBooleanOrStringColumn(): OptBooleanOrStringColumnContext {
        let localContext = new OptBooleanOrStringColumnContext(this.context, this.state);
        this.enterRule(localContext, 52, PostgreSqlParser.RULE_optBooleanOrStringColumn);
        try {
            this.state = 1378;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1372;
                this.match(PostgreSqlParser.KW_TRUE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1373;
                this.match(PostgreSqlParser.KW_FALSE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1374;
                this.match(PostgreSqlParser.KW_ON);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1375;
                this.columnName();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1376;
                this.typeFuncNameKeyword();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1377;
                this.stringConst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanOrString(): BooleanOrStringContext {
        let localContext = new BooleanOrStringContext(this.context, this.state);
        this.enterRule(localContext, 54, PostgreSqlParser.RULE_booleanOrString);
        try {
            this.state = 1384;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_TRUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1380;
                this.match(PostgreSqlParser.KW_TRUE);
                }
                break;
            case PostgreSqlParser.KW_FALSE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1381;
                this.match(PostgreSqlParser.KW_FALSE);
                }
                break;
            case PostgreSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1382;
                this.match(PostgreSqlParser.KW_ON);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1383;
                this.nonReservedWordOrStringConst();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zoneValue(): ZoneValueContext {
        let localContext = new ZoneValueContext(this.context, this.state);
        this.enterRule(localContext, 56, PostgreSqlParser.RULE_zoneValue);
        try {
            this.state = 1400;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1386;
                this.stringConst();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1387;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1388;
                this.identifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1389;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 1390;
                this.stringConst();
                this.state = 1392;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
                case 1:
                    {
                    this.state = 1391;
                    this.optInterval();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1394;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 1395;
                this.optFloat();
                this.state = 1396;
                this.stringConst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1398;
                this.numericOnly();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1399;
                this.match(PostgreSqlParser.KW_LOCAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReservedWordOrStringConst(): NonReservedWordOrStringConstContext {
        let localContext = new NonReservedWordOrStringConstContext(this.context, this.state);
        this.enterRule(localContext, 58, PostgreSqlParser.RULE_nonReservedWordOrStringConst);
        try {
            this.state = 1404;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 48, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1402;
                this.nonReservedWord();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1403;
                this.stringConst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableResetStmt(): VariableResetStmtContext {
        let localContext = new VariableResetStmtContext(this.context, this.state);
        this.enterRule(localContext, 60, PostgreSqlParser.RULE_variableResetStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1406;
            this.match(PostgreSqlParser.KW_RESET);
            this.state = 1407;
            this.resetRest();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resetRest(): ResetRestContext {
        let localContext = new ResetRestContext(this.context, this.state);
        this.enterRule(localContext, 62, PostgreSqlParser.RULE_resetRest);
        try {
            this.state = 1418;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 49, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1409;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 1410;
                this.match(PostgreSqlParser.KW_ZONE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1411;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1412;
                this.match(PostgreSqlParser.KW_ISOLATION);
                this.state = 1413;
                this.match(PostgreSqlParser.KW_LEVEL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1414;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1415;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1416;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1417;
                this.varName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setOrResetClause(): SetOrResetClauseContext {
        let localContext = new SetOrResetClauseContext(this.context, this.state);
        this.enterRule(localContext, 64, PostgreSqlParser.RULE_setOrResetClause);
        try {
            this.state = 1423;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1420;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1421;
                this.setRest();
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1422;
                this.variableResetStmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionSetOrResetClause(): FunctionSetOrResetClauseContext {
        let localContext = new FunctionSetOrResetClauseContext(this.context, this.state);
        this.enterRule(localContext, 66, PostgreSqlParser.RULE_functionSetOrResetClause);
        try {
            this.state = 1428;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1425;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1426;
                this.setRestMore();
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1427;
                this.variableResetStmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableShowStmt(): VariableShowStmtContext {
        let localContext = new VariableShowStmtContext(this.context, this.state);
        this.enterRule(localContext, 68, PostgreSqlParser.RULE_variableShowStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1430;
            this.match(PostgreSqlParser.KW_SHOW);
            this.state = 1440;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 52, this.context) ) {
            case 1:
                {
                this.state = 1431;
                this.varName();
                }
                break;
            case 2:
                {
                this.state = 1432;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 1433;
                this.match(PostgreSqlParser.KW_ZONE);
                }
                break;
            case 3:
                {
                this.state = 1434;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1435;
                this.match(PostgreSqlParser.KW_ISOLATION);
                this.state = 1436;
                this.match(PostgreSqlParser.KW_LEVEL);
                }
                break;
            case 4:
                {
                this.state = 1437;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1438;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                }
                break;
            case 5:
                {
                this.state = 1439;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintsSetStmt(): ConstraintsSetStmtContext {
        let localContext = new ConstraintsSetStmtContext(this.context, this.state);
        this.enterRule(localContext, 70, PostgreSqlParser.RULE_constraintsSetStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1442;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 1443;
            this.match(PostgreSqlParser.KW_CONSTRAINTS);
            this.state = 1446;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1444;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1445;
                this.qualifiedNameList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1448;
            _la = this.tokenStream.LA(1);
            if(!(_la === 180 || _la === 221)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkPointStmt(): CheckPointStmtContext {
        let localContext = new CheckPointStmtContext(this.context, this.state);
        this.enterRule(localContext, 72, PostgreSqlParser.RULE_checkPointStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1450;
            this.match(PostgreSqlParser.KW_CHECKPOINT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public discardStmt(): DiscardStmtContext {
        let localContext = new DiscardStmtContext(this.context, this.state);
        this.enterRule(localContext, 74, PostgreSqlParser.RULE_discardStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1452;
            this.match(PostgreSqlParser.KW_DISCARD);
            this.state = 1453;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || _la === 288 || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 41943041) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableStmt(): AlterTableStmtContext {
        let localContext = new AlterTableStmtContext(this.context, this.state);
        this.enterRule(localContext, 76, PostgreSqlParser.RULE_alterTableStmt);
        let _la: number;
        try {
            this.state = 1572;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1455;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1456;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1458;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                case 1:
                    {
                    this.state = 1457;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1460;
                this.relationExpr();
                this.state = 1463;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_VALIDATE:
                    {
                    this.state = 1461;
                    this.alterTableCmds();
                    }
                    break;
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                    {
                    this.state = 1462;
                    this.partitionCmd();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1465;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1466;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1467;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 1468;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1469;
                this.optTableSpace();
                this.state = 1473;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 1470;
                    this.match(PostgreSqlParser.KW_OWNED);
                    this.state = 1471;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 1472;
                    this.roleList();
                    }
                }

                this.state = 1475;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1476;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 1477;
                this.tableSpaceName();
                this.state = 1479;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 57, this.context) ) {
                case 1:
                    {
                    this.state = 1478;
                    this.match(PostgreSqlParser.KW_NOWAIT);
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1481;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1482;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1484;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
                case 1:
                    {
                    this.state = 1483;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1486;
                this.tableName();
                this.state = 1487;
                this.indexPartitionCmd();
                this.state = 1488;
                this.partitionBoundSpec();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1490;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1491;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1493;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 59, this.context) ) {
                case 1:
                    {
                    this.state = 1492;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1495;
                this.tableName();
                this.state = 1496;
                this.match(PostgreSqlParser.KW_DETACH);
                this.state = 1497;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 1498;
                this.qualifiedName();
                this.state = 1500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109 || _la === 532) {
                    {
                    this.state = 1499;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 109 || _la === 532)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1502;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1503;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 1505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 61, this.context) ) {
                case 1:
                    {
                    this.state = 1504;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1507;
                this.qualifiedName();
                this.state = 1510;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_VALIDATE:
                    {
                    this.state = 1508;
                    this.alterTableCmds();
                    }
                    break;
                case PostgreSqlParser.KW_ATTACH:
                    {
                    this.state = 1509;
                    this.indexPartitionCmd();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1512;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1513;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 1514;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 1515;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1516;
                this.optTableSpace();
                this.state = 1520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 1517;
                    this.match(PostgreSqlParser.KW_OWNED);
                    this.state = 1518;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 1519;
                    this.roleList();
                    }
                }

                this.state = 1522;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1523;
                this.optTableSpace();
                this.state = 1525;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 64, this.context) ) {
                case 1:
                    {
                    this.state = 1524;
                    this.match(PostgreSqlParser.KW_NOWAIT);
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1527;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1528;
                this.match(PostgreSqlParser.KW_SEQUENCE);
                this.state = 1530;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 65, this.context) ) {
                case 1:
                    {
                    this.state = 1529;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1532;
                this.qualifiedName();
                this.state = 1533;
                this.alterTableCmds();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1535;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1537;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 1536;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 1539;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 1541;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 67, this.context) ) {
                case 1:
                    {
                    this.state = 1540;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1543;
                this.viewName();
                this.state = 1544;
                this.alterTableCmds();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1546;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1547;
                this.match(PostgreSqlParser.KW_MATERIALIZED);
                this.state = 1548;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 1549;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 1550;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1551;
                this.optTableSpace();
                this.state = 1555;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 1552;
                    this.match(PostgreSqlParser.KW_OWNED);
                    this.state = 1553;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 1554;
                    this.roleList();
                    }
                }

                this.state = 1557;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1558;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 1559;
                this.tableSpaceName();
                this.state = 1561;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 69, this.context) ) {
                case 1:
                    {
                    this.state = 1560;
                    this.match(PostgreSqlParser.KW_NOWAIT);
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1563;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1564;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 1565;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1567;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 70, this.context) ) {
                case 1:
                    {
                    this.state = 1566;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1569;
                this.relationExpr();
                this.state = 1570;
                this.alterTableCmds();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableCmds(): AlterTableCmdsContext {
        let localContext = new AlterTableCmdsContext(this.context, this.state);
        this.enterRule(localContext, 78, PostgreSqlParser.RULE_alterTableCmds);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1574;
            this.alterTableCmd();
            this.state = 1579;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1575;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1576;
                this.alterTableCmd();
                }
                }
                this.state = 1581;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionCmd(): PartitionCmdContext {
        let localContext = new PartitionCmdContext(this.context, this.state);
        this.enterRule(localContext, 80, PostgreSqlParser.RULE_partitionCmd);
        try {
            this.state = 1588;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ATTACH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1582;
                this.indexPartitionCmd();
                this.state = 1583;
                this.partitionBoundSpec();
                }
                break;
            case PostgreSqlParser.KW_DETACH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1585;
                this.match(PostgreSqlParser.KW_DETACH);
                this.state = 1586;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 1587;
                this.qualifiedName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexPartitionCmd(): IndexPartitionCmdContext {
        let localContext = new IndexPartitionCmdContext(this.context, this.state);
        this.enterRule(localContext, 82, PostgreSqlParser.RULE_indexPartitionCmd);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1590;
            this.match(PostgreSqlParser.KW_ATTACH);
            this.state = 1591;
            this.match(PostgreSqlParser.KW_PARTITION);
            this.state = 1592;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableCmd(): AlterTableCmdContext {
        let localContext = new AlterTableCmdContext(this.context, this.state);
        this.enterRule(localContext, 84, PostgreSqlParser.RULE_alterTableCmd);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1827;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 113, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1594;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 1597;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 1595;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 1596;
                    this.colId();
                    }
                }

                this.state = 1599;
                this.constraintElem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1600;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1601;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 1602;
                this.colId();
                this.state = 1606;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 75, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1603;
                        this.constraintAttributeElem();
                        }
                        }
                    }
                    this.state = 1608;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 75, this.context);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1609;
                this.match(PostgreSqlParser.KW_VALIDATE);
                this.state = 1610;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 1611;
                this.colId();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1612;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1613;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 1615;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 76, this.context) ) {
                case 1:
                    {
                    this.state = 1614;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1617;
                this.colId();
                this.state = 1619;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 1618;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1621;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1622;
                this.match(PostgreSqlParser.KW_WITHOUT);
                this.state = 1623;
                _la = this.tokenStream.LA(1);
                if(!(_la === 158 || _la === 277)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1624;
                this.match(PostgreSqlParser.KW_CLUSTER);
                this.state = 1625;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 1626;
                this.colId();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1627;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1628;
                _la = this.tokenStream.LA(1);
                if(!(_la === 367 || _la === 439)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1629;
                this.match(PostgreSqlParser.KW_ENABLE);
                this.state = 1631;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139 || _la === 312) {
                    {
                    this.state = 1630;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 139 || _la === 312)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1633;
                this.match(PostgreSqlParser.KW_TRIGGER);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1634;
                this.match(PostgreSqlParser.KW_DISABLE);
                this.state = 1635;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 1639;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 1636;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                case PostgreSqlParser.KW_USER:
                    {
                    this.state = 1637;
                    this.match(PostgreSqlParser.KW_USER);
                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1638;
                    this.colId();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1641;
                this.match(PostgreSqlParser.KW_ENABLE);
                this.state = 1642;
                _la = this.tokenStream.LA(1);
                if(!(_la === 139 || _la === 312)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1643;
                this.match(PostgreSqlParser.KW_RULE);
                this.state = 1644;
                this.colId();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1645;
                this.match(PostgreSqlParser.KW_DISABLE);
                this.state = 1646;
                this.match(PostgreSqlParser.KW_RULE);
                this.state = 1647;
                this.colId();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1649;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 1648;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 1651;
                this.match(PostgreSqlParser.KW_INHERIT);
                this.state = 1652;
                this.qualifiedName();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1653;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 1654;
                this.anyName();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1655;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 1656;
                this.match(PostgreSqlParser.KW_OF);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1657;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 1658;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1659;
                this.roleSpec();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1660;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1661;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 1662;
                this.tableSpaceName();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1663;
                this.match(PostgreSqlParser.KW_REPLICA);
                this.state = 1664;
                this.match(PostgreSqlParser.KW_IDENTITY);
                this.state = 1669;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NOTHING:
                    {
                    this.state = 1665;
                    this.match(PostgreSqlParser.KW_NOTHING);
                    }
                    break;
                case PostgreSqlParser.KW_FULL:
                    {
                    this.state = 1666;
                    this.match(PostgreSqlParser.KW_FULL);
                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                    {
                    this.state = 1667;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                case PostgreSqlParser.KW_USING:
                    {
                    this.state = 1668;
                    this.existingIndex();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1677;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ENABLE:
                    {
                    this.state = 1671;
                    this.match(PostgreSqlParser.KW_ENABLE);
                    }
                    break;
                case PostgreSqlParser.KW_DISABLE:
                    {
                    this.state = 1672;
                    this.match(PostgreSqlParser.KW_DISABLE);
                    }
                    break;
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_NO:
                    {
                    {
                    this.state = 1674;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 1673;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 1676;
                    this.match(PostgreSqlParser.KW_FORCE);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1679;
                this.match(PostgreSqlParser.KW_ROW);
                this.state = 1680;
                this.match(PostgreSqlParser.KW_LEVEL);
                this.state = 1681;
                this.match(PostgreSqlParser.KW_SECURITY);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1682;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1684;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
                case 1:
                    {
                    this.state = 1683;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1687;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 85, this.context) ) {
                case 1:
                    {
                    this.state = 1686;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1689;
                this.columnName();
                this.state = 1691;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 86, this.context) ) {
                case 1:
                    {
                    this.state = 1690;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1693;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 1695;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 44) {
                    {
                    this.state = 1694;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                }

                this.state = 1698;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
                case 1:
                    {
                    this.state = 1697;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 1700;
                this.column_def();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1701;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1703;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                case 1:
                    {
                    this.state = 1702;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1705;
                this.columnName();
                this.state = 1708;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_SET:
                    {
                    this.state = 1706;
                    this.alterColumnDefault();
                    }
                    break;
                case PostgreSqlParser.KW_OPTIONS:
                    {
                    this.state = 1707;
                    this.alterGenericOptions();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1710;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1712;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 91, this.context) ) {
                case 1:
                    {
                    this.state = 1711;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1714;
                this.columnName();
                this.state = 1715;
                _la = this.tokenStream.LA(1);
                if(!(_la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1716;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 1717;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1719;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1721;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 92, this.context) ) {
                case 1:
                    {
                    this.state = 1720;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1723;
                this.columnName();
                this.state = 1724;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1725;
                this.match(PostgreSqlParser.KW_EXPRESSION);
                this.state = 1727;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 93, this.context) ) {
                case 1:
                    {
                    this.state = 1726;
                    this.ifExists();
                    }
                    break;
                }
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1729;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1731;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 94, this.context) ) {
                case 1:
                    {
                    this.state = 1730;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1733;
                this.columnName();
                this.state = 1734;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1735;
                this.match(PostgreSqlParser.KW_STATISTICS);
                this.state = 1736;
                this.signedConst();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1743;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 1738;
                    this.match(PostgreSqlParser.KW_ALTER);
                    this.state = 1740;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 95, this.context) ) {
                    case 1:
                        {
                        this.state = 1739;
                        this.match(PostgreSqlParser.KW_COLUMN);
                        }
                        break;
                    }
                    this.state = 1742;
                    this.columnName();
                    }
                }

                this.state = 1745;
                _la = this.tokenStream.LA(1);
                if(!(_la === 313 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1746;
                this.relOptions();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1747;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1749;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 97, this.context) ) {
                case 1:
                    {
                    this.state = 1748;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1751;
                this.columnName();
                this.state = 1752;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1753;
                this.match(PostgreSqlParser.KW_STORAGE);
                this.state = 1754;
                this.colId();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1756;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1758;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 98, this.context) ) {
                case 1:
                    {
                    this.state = 1757;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1760;
                this.columnName();
                this.state = 1761;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 1762;
                this.match(PostgreSqlParser.KW_GENERATED);
                this.state = 1763;
                this.generatedWhen();
                this.state = 1764;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 1765;
                this.match(PostgreSqlParser.KW_IDENTITY);
                this.state = 1774;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 100, this.context) ) {
                case 1:
                    {
                    this.state = 1766;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 1768;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 1767;
                        this.seqOptElem();
                        }
                        }
                        this.state = 1770;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 36 || _la === 148 || _la === 225 || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 2097669) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & 67125249) !== 0));
                    this.state = 1772;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1776;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1778;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 101, this.context) ) {
                case 1:
                    {
                    this.state = 1777;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1780;
                this.columnName();
                this.state = 1794;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        this.state = 1794;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case PostgreSqlParser.KW_RESTART:
                            {
                            this.state = 1781;
                            this.match(PostgreSqlParser.KW_RESTART);
                            this.state = 1786;
                            this.errorHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this.tokenStream, 103, this.context) ) {
                            case 1:
                                {
                                this.state = 1783;
                                this.errorHandler.sync(this);
                                _la = this.tokenStream.LA(1);
                                if (_la === 105) {
                                    {
                                    this.state = 1782;
                                    this.match(PostgreSqlParser.KW_WITH);
                                    }
                                }

                                this.state = 1785;
                                this.numericOnly();
                                }
                                break;
                            }
                            }
                            break;
                        case PostgreSqlParser.KW_SET:
                            {
                            this.state = 1788;
                            this.match(PostgreSqlParser.KW_SET);
                            this.state = 1792;
                            this.errorHandler.sync(this);
                            switch (this.tokenStream.LA(1)) {
                            case PostgreSqlParser.KW_AS:
                            case PostgreSqlParser.KW_CACHE:
                            case PostgreSqlParser.KW_INCREMENT:
                            case PostgreSqlParser.KW_MAXVALUE:
                            case PostgreSqlParser.KW_MINVALUE:
                            case PostgreSqlParser.KW_NO:
                            case PostgreSqlParser.KW_OWNED:
                            case PostgreSqlParser.KW_RESTART:
                            case PostgreSqlParser.KW_SEQUENCE:
                            case PostgreSqlParser.KW_START:
                                {
                                this.state = 1789;
                                this.seqOptElem();
                                }
                                break;
                            case PostgreSqlParser.KW_GENERATED:
                                {
                                this.state = 1790;
                                this.match(PostgreSqlParser.KW_GENERATED);
                                this.state = 1791;
                                this.generatedWhen();
                                }
                                break;
                            default:
                                throw new antlr.NoViableAltException(this);
                            }
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1796;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 106, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1798;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1800;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 107, this.context) ) {
                case 1:
                    {
                    this.state = 1799;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1802;
                this.columnName();
                this.state = 1803;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1804;
                this.match(PostgreSqlParser.KW_IDENTITY);
                this.state = 1806;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 108, this.context) ) {
                case 1:
                    {
                    this.state = 1805;
                    this.ifExists();
                    }
                    break;
                }
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1808;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1810;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 109, this.context) ) {
                case 1:
                    {
                    this.state = 1809;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1812;
                this.columnName();
                this.state = 1815;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 333) {
                    {
                    this.state = 1813;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 1814;
                    this.match(PostgreSqlParser.KW_DATA);
                    }
                }

                this.state = 1817;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 1818;
                this.typename();
                this.state = 1820;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 43) {
                    {
                    this.state = 1819;
                    this.collateClause();
                    }
                }

                this.state = 1824;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 1822;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 1823;
                    this.expression();
                    }
                }

                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1826;
                this.alterGenericOptions();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColumnDefault(): AlterColumnDefaultContext {
        let localContext = new AlterColumnDefaultContext(this.context, this.state);
        this.enterRule(localContext, 86, PostgreSqlParser.RULE_alterColumnDefault);
        try {
            this.state = 1834;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1829;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1830;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 1831;
                this.expression();
                }
                break;
            case PostgreSqlParser.KW_DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1832;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1833;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optDropBehavior(): OptDropBehaviorContext {
        let localContext = new OptDropBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 88, PostgreSqlParser.RULE_optDropBehavior);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1836;
            _la = this.tokenStream.LA(1);
            if(!(_la === 150 || _la === 315)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collateClause(): CollateClauseContext {
        let localContext = new CollateClauseContext(this.context, this.state);
        this.enterRule(localContext, 90, PostgreSqlParser.RULE_collateClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1838;
            this.match(PostgreSqlParser.KW_COLLATE);
            this.state = 1839;
            this.anyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relOptions(): RelOptionsContext {
        let localContext = new RelOptionsContext(this.context, this.state);
        this.enterRule(localContext, 92, PostgreSqlParser.RULE_relOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1841;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 1842;
            this.relOptionElem();
            this.state = 1847;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1843;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1844;
                this.relOptionElem();
                }
                }
                this.state = 1849;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1850;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optRelOptions(): OptRelOptionsContext {
        let localContext = new OptRelOptionsContext(this.context, this.state);
        this.enterRule(localContext, 94, PostgreSqlParser.RULE_optRelOptions);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1852;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 1853;
            this.relOptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relOptionElem(): RelOptionElemContext {
        let localContext = new RelOptionElemContext(this.context, this.state);
        this.enterRule(localContext, 96, PostgreSqlParser.RULE_relOptionElem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1855;
            this.colLabel();
            this.state = 1860;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.EQUAL:
                {
                this.state = 1856;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 1857;
                this.defArg();
                }
                break;
            case PostgreSqlParser.DOT:
                {
                this.state = 1858;
                this.match(PostgreSqlParser.DOT);
                this.state = 1859;
                this.defElem();
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.COMMA:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionBoundSpec(): PartitionBoundSpecContext {
        let localContext = new PartitionBoundSpecContext(this.context, this.state);
        this.enterRule(localContext, 98, PostgreSqlParser.RULE_partitionBoundSpec);
        try {
            this.state = 1885;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 117, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1862;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 1863;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 1864;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 1865;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 1866;
                this.match(PostgreSqlParser.KW_MODULUS);
                this.state = 1867;
                this.numericOnly();
                this.state = 1868;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1869;
                this.match(PostgreSqlParser.KW_REMAINDER);
                this.state = 1870;
                this.numericOnly();
                this.state = 1871;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1873;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 1874;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 1875;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1876;
                this.executeParamClause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1877;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 1878;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 1879;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 1880;
                this.executeParamClause();
                this.state = 1881;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1882;
                this.executeParamClause();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1884;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterCompositeTypeStmt(): AlterCompositeTypeStmtContext {
        let localContext = new AlterCompositeTypeStmtContext(this.context, this.state);
        this.enterRule(localContext, 100, PostgreSqlParser.RULE_alterCompositeTypeStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1887;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1888;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 1889;
            this.anyName();
            this.state = 1890;
            this.alterTypeCmd();
            this.state = 1895;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1891;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1892;
                this.alterTypeCmd();
                }
                }
                this.state = 1897;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTypeCmd(): AlterTypeCmdContext {
        let localContext = new AlterTypeCmdContext(this.context, this.state);
        this.enterRule(localContext, 102, PostgreSqlParser.RULE_alterTypeCmd);
        let _la: number;
        try {
            this.state = 1928;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1898;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 1899;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 1900;
                this.tableFuncElement();
                this.state = 1902;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 119, this.context) ) {
                case 1:
                    {
                    this.state = 1901;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1904;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1905;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 1907;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
                case 1:
                    {
                    this.state = 1906;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1909;
                this.colId();
                this.state = 1911;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 121, this.context) ) {
                case 1:
                    {
                    this.state = 1910;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_ALTER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1913;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1914;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 1915;
                this.colId();
                this.state = 1918;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 333) {
                    {
                    this.state = 1916;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 1917;
                    this.match(PostgreSqlParser.KW_DATA);
                    }
                }

                this.state = 1920;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 1921;
                this.typename();
                this.state = 1923;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 43) {
                    {
                    this.state = 1922;
                    this.collateClause();
                    }
                }

                this.state = 1926;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 124, this.context) ) {
                case 1:
                    {
                    this.state = 1925;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public closePortalStmt(): ClosePortalStmtContext {
        let localContext = new ClosePortalStmtContext(this.context, this.state);
        this.enterRule(localContext, 104, PostgreSqlParser.RULE_closePortalStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1930;
            this.match(PostgreSqlParser.KW_CLOSE);
            this.state = 1933;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1931;
                this.colId();
                }
                break;
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1932;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copyStmt(): CopyStmtContext {
        let localContext = new CopyStmtContext(this.context, this.state);
        this.enterRule(localContext, 106, PostgreSqlParser.RULE_copyStmt);
        let _la: number;
        try {
            this.state = 1984;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 138, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1935;
                this.match(PostgreSqlParser.KW_COPY);
                this.state = 1937;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 107) {
                    {
                    this.state = 1936;
                    this.match(PostgreSqlParser.KW_BINARY);
                    }
                }

                this.state = 1939;
                this.tableName();
                this.state = 1941;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 1940;
                    this.optColumnList();
                    }
                }

                this.state = 1943;
                _la = this.tokenStream.LA(1);
                if(!(_la === 64 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1945;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 1944;
                    this.match(PostgreSqlParser.KW_PROGRAM);
                    }
                }

                this.state = 1950;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1947;
                    this.stringConst();
                    }
                    break;
                case PostgreSqlParser.KW_STDIN:
                    {
                    this.state = 1948;
                    this.match(PostgreSqlParser.KW_STDIN);
                    }
                    break;
                case PostgreSqlParser.KW_STDOUT:
                    {
                    this.state = 1949;
                    this.match(PostgreSqlParser.KW_STDOUT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1957;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 132, this.context) ) {
                case 1:
                    {
                    this.state = 1953;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 1952;
                        this.match(PostgreSqlParser.KW_USING);
                        }
                    }

                    this.state = 1955;
                    this.match(PostgreSqlParser.KW_DELIMITERS);
                    this.state = 1956;
                    this.stringConst();
                    }
                    break;
                }
                this.state = 1960;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 133, this.context) ) {
                case 1:
                    {
                    this.state = 1959;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                    break;
                }
                this.state = 1962;
                this.copyOptions();
                this.state = 1964;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 1963;
                    this.whereClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1966;
                this.match(PostgreSqlParser.KW_COPY);
                this.state = 1967;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 1968;
                this.preParableStmt();
                this.state = 1969;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 1970;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1972;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 1971;
                    this.match(PostgreSqlParser.KW_PROGRAM);
                    }
                }

                this.state = 1977;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1974;
                    this.stringConst();
                    }
                    break;
                case PostgreSqlParser.KW_STDIN:
                    {
                    this.state = 1975;
                    this.match(PostgreSqlParser.KW_STDIN);
                    }
                    break;
                case PostgreSqlParser.KW_STDOUT:
                    {
                    this.state = 1976;
                    this.match(PostgreSqlParser.KW_STDOUT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1980;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 137, this.context) ) {
                case 1:
                    {
                    this.state = 1979;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                    break;
                }
                this.state = 1982;
                this.copyOptions();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copyOptionsNoparens(): CopyOptionsNoparensContext {
        let localContext = new CopyOptionsNoparensContext(this.context, this.state);
        this.enterRule(localContext, 108, PostgreSqlParser.RULE_copyOptionsNoparens);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2030;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 147, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 2028;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 146, this.context) ) {
                    case 1:
                        {
                        this.state = 1986;
                        this.match(PostgreSqlParser.KW_BINARY);
                        }
                        break;
                    case 2:
                        {
                        this.state = 1987;
                        this.match(PostgreSqlParser.KW_FREEZE);
                        }
                        break;
                    case 3:
                        {
                        this.state = 1988;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 78 || _la === 183 || _la === 197 || _la === 298)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1990;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 36) {
                            {
                            this.state = 1989;
                            this.match(PostgreSqlParser.KW_AS);
                            }
                        }

                        this.state = 1992;
                        this.stringConst();
                        }
                        break;
                    case 4:
                        {
                        this.state = 1993;
                        this.match(PostgreSqlParser.KW_CSV);
                        }
                        break;
                    case 5:
                        {
                        this.state = 1994;
                        this.match(PostgreSqlParser.KW_HEADER);
                        }
                        break;
                    case 6:
                        {
                        this.state = 1995;
                        this.match(PostgreSqlParser.KW_FORCE);
                        this.state = 1996;
                        this.match(PostgreSqlParser.KW_QUOTE);
                        this.state = 1999;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 140, this.context) ) {
                        case 1:
                            {
                            this.state = 1997;
                            this.columnList();
                            }
                            break;
                        case 2:
                            {
                            this.state = 1998;
                            this.match(PostgreSqlParser.STAR);
                            }
                            break;
                        }
                        }
                        break;
                    case 7:
                        {
                        this.state = 2001;
                        this.match(PostgreSqlParser.KW_FORCE);
                        this.state = 2003;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 77) {
                            {
                            this.state = 2002;
                            this.match(PostgreSqlParser.KW_NOT);
                            }
                        }

                        this.state = 2005;
                        this.match(PostgreSqlParser.KW_NULL);
                        this.state = 2006;
                        this.columnList();
                        }
                        break;
                    case 8:
                        {
                        this.state = 2007;
                        this.match(PostgreSqlParser.KW_ENCODING);
                        this.state = 2008;
                        this.stringConst();
                        }
                        break;
                    case 9:
                        {
                        this.state = 2009;
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 549)) & ~0x1F) === 0 && ((1 << (_la - 549)) & 7) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2026;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 145, this.context) ) {
                        case 1:
                            {
                            this.state = 2010;
                            this.match(PostgreSqlParser.OPEN_PAREN);
                            this.state = 2013;
                            this.errorHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this.tokenStream, 142, this.context) ) {
                            case 1:
                                {
                                this.state = 2011;
                                this.columnList();
                                }
                                break;
                            case 2:
                                {
                                this.state = 2012;
                                this.match(PostgreSqlParser.STAR);
                                }
                                break;
                            }
                            this.state = 2022;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            while (_la === 6) {
                                {
                                {
                                this.state = 2015;
                                this.match(PostgreSqlParser.COMMA);
                                this.state = 2018;
                                this.errorHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this.tokenStream, 143, this.context) ) {
                                case 1:
                                    {
                                    this.state = 2016;
                                    this.columnList();
                                    }
                                    break;
                                case 2:
                                    {
                                    this.state = 2017;
                                    this.match(PostgreSqlParser.STAR);
                                    }
                                    break;
                                }
                                }
                                }
                                this.state = 2024;
                                this.errorHandler.sync(this);
                                _la = this.tokenStream.LA(1);
                            }
                            this.state = 2025;
                            this.match(PostgreSqlParser.CLOSE_PAREN);
                            }
                            break;
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 2032;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 147, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copyOptions(): CopyOptionsContext {
        let localContext = new CopyOptionsContext(this.context, this.state);
        this.enterRule(localContext, 110, PostgreSqlParser.RULE_copyOptions);
        let _la: number;
        try {
            this.state = 2051;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 151, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2033;
                this.copyOptionsNoparens();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2034;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2037;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 148, this.context) ) {
                case 1:
                    {
                    this.state = 2035;
                    this.copyOptionsNoparens();
                    }
                    break;
                case 2:
                    {
                    this.state = 2036;
                    this.copyGenericOptElem();
                    }
                    break;
                }
                this.state = 2046;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 2039;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2042;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 149, this.context) ) {
                    case 1:
                        {
                        this.state = 2040;
                        this.copyOptionsNoparens();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2041;
                        this.copyGenericOptElem();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 2048;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2049;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copyGenericOptElem(): CopyGenericOptElemContext {
        let localContext = new CopyGenericOptElemContext(this.context, this.state);
        this.enterRule(localContext, 112, PostgreSqlParser.RULE_copyGenericOptElem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2053;
            this.colLabel();
            this.state = 2068;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 2054;
                this.booleanOrString();
                }
                break;
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
                {
                this.state = 2055;
                this.numericOnly();
                }
                break;
            case PostgreSqlParser.STAR:
                {
                this.state = 2056;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 2057;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2058;
                this.optBooleanOrStringColumn();
                this.state = 2063;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 2059;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2060;
                    this.optBooleanOrStringColumn();
                    }
                    }
                    this.state = 2065;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2066;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.COMMA:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createStmt(): CreateStmtContext {
        let localContext = new CreateStmtContext(this.context, this.state);
        this.enterRule(localContext, 114, PostgreSqlParser.RULE_createStmt);
        let _la: number;
        try {
            localContext = new ColumnCreateTableContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2070;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2072;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 2071;
                this.optTemp();
                }
            }

            this.state = 2074;
            this.match(PostgreSqlParser.KW_TABLE);
            this.state = 2076;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 155, this.context) ) {
            case 1:
                {
                this.state = 2075;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2078;
            this.tableNameCreate();
            this.state = 2144;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 2079;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2081;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & 2099209) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2147491841) !== 0) || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & 4294966809) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 4294967295) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 4294967295) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290781183) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & 4294967295) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & 4294967295) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 4294967295) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 4294967295) !== 0) || ((((_la - 376)) & ~0x1F) === 0 && ((1 << (_la - 376)) & 4294967295) !== 0) || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & 4294967295) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & 4294950911) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & 3221225471) !== 0) || ((((_la - 506)) & ~0x1F) === 0 && ((1 << (_la - 506)) & 286719) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                    {
                    this.state = 2080;
                    this.tableElementList();
                    }
                }

                this.state = 2083;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2085;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 157, this.context) ) {
                case 1:
                    {
                    this.state = 2084;
                    this.optInherit();
                    }
                    break;
                }
                this.state = 2088;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 158, this.context) ) {
                case 1:
                    {
                    this.state = 2087;
                    this.partitionSpec();
                    }
                    break;
                }
                this.state = 2091;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2090;
                    this.tableAccessMethodClause();
                    }
                }

                this.state = 2094;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 160, this.context) ) {
                case 1:
                    {
                    this.state = 2093;
                    this.optWith();
                    }
                    break;
                }
                this.state = 2097;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2096;
                    this.onCommitOption();
                    }
                }

                this.state = 2100;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 162, this.context) ) {
                case 1:
                    {
                    this.state = 2099;
                    this.optTableSpace();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_OF:
                {
                this.state = 2102;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 2103;
                this.anyName();
                this.state = 2105;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
                case 1:
                    {
                    this.state = 2104;
                    this.optTypedTableElEmentList();
                    }
                    break;
                }
                this.state = 2108;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 164, this.context) ) {
                case 1:
                    {
                    this.state = 2107;
                    this.partitionSpec();
                    }
                    break;
                }
                this.state = 2111;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2110;
                    this.tableAccessMethodClause();
                    }
                }

                this.state = 2114;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 166, this.context) ) {
                case 1:
                    {
                    this.state = 2113;
                    this.optWith();
                    }
                    break;
                }
                this.state = 2117;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2116;
                    this.onCommitOption();
                    }
                }

                this.state = 2120;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 168, this.context) ) {
                case 1:
                    {
                    this.state = 2119;
                    this.optTableSpace();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_PARTITION:
                {
                this.state = 2122;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 2123;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 2124;
                this.qualifiedName();
                this.state = 2126;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2125;
                    this.optTypedTableElEmentList();
                    }
                }

                this.state = 2128;
                this.partitionBoundSpec();
                this.state = 2130;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 170, this.context) ) {
                case 1:
                    {
                    this.state = 2129;
                    this.partitionSpec();
                    }
                    break;
                }
                this.state = 2133;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2132;
                    this.tableAccessMethodClause();
                    }
                }

                this.state = 2136;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
                case 1:
                    {
                    this.state = 2135;
                    this.optWith();
                    }
                    break;
                }
                this.state = 2139;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2138;
                    this.onCommitOption();
                    }
                }

                this.state = 2142;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 174, this.context) ) {
                case 1:
                    {
                    this.state = 2141;
                    this.optTableSpace();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optTemp(): OptTempContext {
        let localContext = new OptTempContext(this.context, this.state);
        this.enterRule(localContext, 116, PostgreSqlParser.RULE_optTemp);
        let _la: number;
        try {
            this.state = 2151;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_TEMPORARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2146;
                this.match(PostgreSqlParser.KW_TEMPORARY);
                }
                break;
            case PostgreSqlParser.KW_TEMP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2147;
                this.match(PostgreSqlParser.KW_TEMP);
                }
                break;
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_LOCAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2148;
                _la = this.tokenStream.LA(1);
                if(!(_la === 213 || _la === 254)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2149;
                _la = this.tokenStream.LA(1);
                if(!(_la === 352 || _la === 354)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_UNLOGGED:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2150;
                this.match(PostgreSqlParser.KW_UNLOGGED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optTypedTableElEmentList(): OptTypedTableElEmentListContext {
        let localContext = new OptTypedTableElEmentListContext(this.context, this.state);
        this.enterRule(localContext, 118, PostgreSqlParser.RULE_optTypedTableElEmentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2153;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2154;
            this.typedTableElement();
            this.state = 2159;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2155;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2156;
                this.typedTableElement();
                }
                }
                this.state = 2161;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2162;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElementList(): TableElementListContext {
        let localContext = new TableElementListContext(this.context, this.state);
        this.enterRule(localContext, 120, PostgreSqlParser.RULE_tableElementList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2164;
            this.tableElement();
            this.state = 2169;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2165;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2166;
                this.tableElement();
                }
                }
                this.state = 2171;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElement(): TableElementContext {
        let localContext = new TableElementContext(this.context, this.state);
        this.enterRule(localContext, 122, PostgreSqlParser.RULE_tableElement);
        let _la: number;
        try {
            this.state = 2187;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 181, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2174;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 2172;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 2173;
                    this.colId();
                    }
                }

                this.state = 2176;
                this.constraintElem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2177;
                this.column_def();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2178;
                this.match(PostgreSqlParser.KW_LIKE);
                this.state = 2179;
                this.qualifiedName();
                this.state = 2184;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 200 || _la === 224) {
                    {
                    {
                    this.state = 2180;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 200 || _la === 224)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2181;
                    this.tableLikeOption();
                    }
                    }
                    this.state = 2186;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typedTableElement(): TypedTableElementContext {
        let localContext = new TypedTableElementContext(this.context, this.state);
        this.enterRule(localContext, 124, PostgreSqlParser.RULE_typedTableElement);
        let _la: number;
        try {
            this.state = 2205;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2189;
                this.columnNameCreate();
                this.state = 2192;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 2190;
                    this.match(PostgreSqlParser.KW_WITH);
                    this.state = 2191;
                    this.match(PostgreSqlParser.KW_OPTIONS);
                    }
                }

                this.state = 2197;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & 2059) !== 0) || ((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & 2097923) !== 0) || _la === 438) {
                    {
                    {
                    this.state = 2194;
                    this.colConstraint();
                    }
                    }
                    this.state = 2199;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2202;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 2200;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 2201;
                    this.colId();
                    }
                }

                this.state = 2204;
                this.constraintElem();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_def(): Column_defContext {
        let localContext = new Column_defContext(this.context, this.state);
        this.enterRule(localContext, 126, PostgreSqlParser.RULE_column_def);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2207;
            this.columnNameCreate();
            this.state = 2208;
            localContext._colType = this.typename();
            this.state = 2210;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 186, this.context) ) {
            case 1:
                {
                this.state = 2209;
                this.createGenericOptions();
                }
                break;
            }
            this.state = 2221;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 188, this.context) ) {
            case 1:
                {
                this.state = 2212;
                this.match(PostgreSqlParser.KW_STORAGE);
                this.state = 2219;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 187, this.context) ) {
                case 1:
                    {
                    this.state = 2213;
                    this.match(PostgreSqlParser.KW_PLAIN);
                    }
                    break;
                case 2:
                    {
                    this.state = 2214;
                    this.match(PostgreSqlParser.KW_EXTERNAL);
                    }
                    break;
                case 3:
                    {
                    this.state = 2215;
                    this.match(PostgreSqlParser.KW_EXTENDED);
                    }
                    break;
                case 4:
                    {
                    this.state = 2216;
                    this.match(PostgreSqlParser.KW_MAIN);
                    }
                    break;
                case 5:
                    {
                    this.state = 2217;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                case 6:
                    {
                    this.state = 2218;
                    this.colId();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 2225;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 543) {
                {
                this.state = 2223;
                this.match(PostgreSqlParser.KW_COMPRESSION);
                this.state = 2224;
                this.colId();
                }
            }

            this.state = 2228;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 190, this.context) ) {
            case 1:
                {
                this.state = 2227;
                this.collateClause();
                }
                break;
            }
            this.state = 2232;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 191, this.context) ) {
            case 1:
                {
                this.state = 2230;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 2231;
                this.match(PostgreSqlParser.KW_OPTIONS);
                }
                break;
            }
            this.state = 2237;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 192, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2234;
                    this.colConstraint();
                    }
                    }
                }
                this.state = 2239;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 192, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colConstraint(): ColConstraintContext {
        let localContext = new ColConstraintContext(this.context, this.state);
        this.enterRule(localContext, 128, PostgreSqlParser.RULE_colConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2242;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 2240;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 2241;
                this.colId();
                }
            }

            this.state = 2244;
            this.colConstraintElem();
            this.state = 2249;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 195, this.context) ) {
            case 1:
                {
                this.state = 2246;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 2245;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 2248;
                this.match(PostgreSqlParser.KW_DEFERRABLE);
                }
                break;
            }
            this.state = 2253;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 69) {
                {
                this.state = 2251;
                this.match(PostgreSqlParser.KW_INITIALLY);
                this.state = 2252;
                _la = this.tokenStream.LA(1);
                if(!(_la === 180 || _la === 221)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colConstraintElem(): ColConstraintElemContext {
        let localContext = new ColConstraintElemContext(this.context, this.state);
        this.enterRule(localContext, 130, PostgreSqlParser.RULE_colConstraintElem);
        let _la: number;
        try {
            this.state = 2335;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 214, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2256;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 2255;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 2258;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2259;
                this.match(PostgreSqlParser.KW_UNIQUE);
                this.state = 2261;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 198, this.context) ) {
                case 1:
                    {
                    this.state = 2260;
                    this.optDefinition();
                    }
                    break;
                }
                this.state = 2264;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2263;
                    this.optConstableSpace();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2266;
                this.match(PostgreSqlParser.KW_UNIQUE);
                this.state = 2272;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
                case 1:
                    {
                    this.state = 2267;
                    this.match(PostgreSqlParser.KW_NULLS);
                    this.state = 2269;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 77) {
                        {
                        this.state = 2268;
                        this.match(PostgreSqlParser.KW_NOT);
                        }
                    }

                    this.state = 2271;
                    this.match(PostgreSqlParser.KW_DISTINCT);
                    }
                    break;
                }
                {
                this.state = 2276;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 202, this.context) ) {
                case 1:
                    {
                    this.state = 2274;
                    this.match(PostgreSqlParser.KW_INCLUDE);
                    this.state = 2275;
                    this.indexParams();
                    }
                    break;
                }
                this.state = 2279;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
                case 1:
                    {
                    this.state = 2278;
                    this.withClause();
                    }
                    break;
                }
                this.state = 2282;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2281;
                    this.optConstableSpace();
                    }
                }

                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2284;
                this.match(PostgreSqlParser.KW_PRIMARY);
                this.state = 2285;
                this.match(PostgreSqlParser.KW_KEY);
                this.state = 2287;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 205, this.context) ) {
                case 1:
                    {
                    this.state = 2286;
                    this.optDefinition();
                    }
                    break;
                }
                this.state = 2290;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2289;
                    this.optConstableSpace();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2292;
                this.match(PostgreSqlParser.KW_CHECK);
                this.state = 2293;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2294;
                this.expression();
                this.state = 2295;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2298;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 207, this.context) ) {
                case 1:
                    {
                    this.state = 2296;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 2297;
                    this.match(PostgreSqlParser.KW_INHERIT);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2300;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 2301;
                this.primaryExpression(0);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2302;
                this.match(PostgreSqlParser.KW_GENERATED);
                this.state = 2303;
                this.generatedWhen();
                this.state = 2304;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 2321;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_IDENTITY:
                    {
                    this.state = 2305;
                    this.match(PostgreSqlParser.KW_IDENTITY);
                    this.state = 2314;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 209, this.context) ) {
                    case 1:
                        {
                        this.state = 2306;
                        this.match(PostgreSqlParser.OPEN_PAREN);
                        this.state = 2308;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        do {
                            {
                            {
                            this.state = 2307;
                            this.seqOptElem();
                            }
                            }
                            this.state = 2310;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        } while (_la === 36 || _la === 148 || _la === 225 || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 2097669) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & 67125249) !== 0));
                        this.state = 2312;
                        this.match(PostgreSqlParser.CLOSE_PAREN);
                        }
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 2316;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 2317;
                    this.expression();
                    this.state = 2318;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    this.state = 2319;
                    this.match(PostgreSqlParser.KW_STORED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2323;
                this.match(PostgreSqlParser.KW_REFERENCES);
                this.state = 2324;
                this.qualifiedName();
                this.state = 2326;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 211, this.context) ) {
                case 1:
                    {
                    this.state = 2325;
                    this.optColumnList();
                    }
                    break;
                }
                this.state = 2329;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 212, this.context) ) {
                case 1:
                    {
                    this.state = 2328;
                    this.keyMatch();
                    }
                    break;
                }
                this.state = 2332;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2331;
                    this.keyActions();
                    }
                }

                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2334;
                this.collateClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generatedWhen(): GeneratedWhenContext {
        let localContext = new GeneratedWhenContext(this.context, this.state);
        this.enterRule(localContext, 132, PostgreSqlParser.RULE_generatedWhen);
        try {
            this.state = 2340;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALWAYS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2337;
                this.match(PostgreSqlParser.KW_ALWAYS);
                }
                break;
            case PostgreSqlParser.KW_BY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2338;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 2339;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableLikeOption(): TableLikeOptionContext {
        let localContext = new TableLikeOptionContext(this.context, this.state);
        this.enterRule(localContext, 134, PostgreSqlParser.RULE_tableLikeOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2342;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 524321) !== 0) || _la === 219 || _la === 227 || _la === 342 || _la === 345 || _la === 438)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintElem(): ConstraintElemContext {
        let localContext = new ConstraintElemContext(this.context, this.state);
        this.enterRule(localContext, 136, PostgreSqlParser.RULE_constraintElem);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2440;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CHECK:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2344;
                this.match(PostgreSqlParser.KW_CHECK);
                this.state = 2345;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2346;
                this.expression();
                this.state = 2347;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2351;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 216, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2348;
                        this.constraintAttributeElem();
                        }
                        }
                    }
                    this.state = 2353;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 216, this.context);
                }
                }
                break;
            case PostgreSqlParser.KW_PRIMARY:
            case PostgreSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2357;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_UNIQUE:
                    {
                    this.state = 2354;
                    this.match(PostgreSqlParser.KW_UNIQUE);
                    }
                    break;
                case PostgreSqlParser.KW_PRIMARY:
                    {
                    {
                    this.state = 2355;
                    this.match(PostgreSqlParser.KW_PRIMARY);
                    this.state = 2356;
                    this.match(PostgreSqlParser.KW_KEY);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2382;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 2359;
                    this.optColumnList();
                    this.state = 2361;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 218, this.context) ) {
                    case 1:
                        {
                        this.state = 2360;
                        this.columnListInclude();
                        }
                        break;
                    }
                    this.state = 2364;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
                    case 1:
                        {
                        this.state = 2363;
                        this.optDefinition();
                        }
                        break;
                    }
                    this.state = 2367;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 2366;
                        this.optConstableSpace();
                        }
                    }

                    this.state = 2372;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 221, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 2369;
                            this.constraintAttributeElem();
                            }
                            }
                        }
                        this.state = 2374;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 221, this.context);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_USING:
                    {
                    this.state = 2375;
                    this.existingIndex();
                    this.state = 2379;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 222, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 2376;
                            this.constraintAttributeElem();
                            }
                            }
                        }
                        this.state = 2381;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 222, this.context);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSqlParser.KW_EXCLUDE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2384;
                this.match(PostgreSqlParser.KW_EXCLUDE);
                this.state = 2386;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2385;
                    this.tableAccessMethodClause();
                    }
                }

                this.state = 2388;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2389;
                this.exclusionConstraintElem();
                this.state = 2394;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 2390;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2391;
                    this.exclusionConstraintElem();
                    }
                    }
                    this.state = 2396;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2397;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2399;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 226, this.context) ) {
                case 1:
                    {
                    this.state = 2398;
                    this.columnListInclude();
                    }
                    break;
                }
                this.state = 2402;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 227, this.context) ) {
                case 1:
                    {
                    this.state = 2401;
                    this.optDefinition();
                    }
                    break;
                }
                this.state = 2405;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2404;
                    this.optConstableSpace();
                    }
                }

                this.state = 2412;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 2407;
                    this.match(PostgreSqlParser.KW_WHERE);
                    this.state = 2408;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 2409;
                    this.expression();
                    this.state = 2410;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                }

                this.state = 2417;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 230, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2414;
                        this.constraintAttributeElem();
                        }
                        }
                    }
                    this.state = 2419;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 230, this.context);
                }
                }
                break;
            case PostgreSqlParser.KW_FOREIGN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2420;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 2421;
                this.match(PostgreSqlParser.KW_KEY);
                this.state = 2422;
                this.optColumnList();
                this.state = 2423;
                this.match(PostgreSqlParser.KW_REFERENCES);
                this.state = 2424;
                this.qualifiedName();
                this.state = 2426;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 231, this.context) ) {
                case 1:
                    {
                    this.state = 2425;
                    this.optColumnList();
                    }
                    break;
                }
                this.state = 2429;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 232, this.context) ) {
                case 1:
                    {
                    this.state = 2428;
                    this.keyMatch();
                    }
                    break;
                }
                this.state = 2432;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2431;
                    this.keyActions();
                    }
                }

                this.state = 2437;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 234, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2434;
                        this.constraintAttributeElem();
                        }
                        }
                    }
                    this.state = 2439;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 234, this.context);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optColumnList(): OptColumnListContext {
        let localContext = new OptColumnListContext(this.context, this.state);
        this.enterRule(localContext, 138, PostgreSqlParser.RULE_optColumnList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2442;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2443;
            this.columnList();
            this.state = 2444;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnListCreate(): ColumnListCreateContext {
        let localContext = new ColumnListCreateContext(this.context, this.state);
        this.enterRule(localContext, 140, PostgreSqlParser.RULE_columnListCreate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2446;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2447;
            this.columnNameCreate();
            this.state = 2452;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2448;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2449;
                this.columnNameCreate();
                }
                }
                this.state = 2454;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2455;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnList(): ColumnListContext {
        let localContext = new ColumnListContext(this.context, this.state);
        this.enterRule(localContext, 142, PostgreSqlParser.RULE_columnList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2457;
            this.columnName();
            this.state = 2462;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 237, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2458;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2459;
                    this.columnName();
                    }
                    }
                }
                this.state = 2464;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 237, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnListInclude(): ColumnListIncludeContext {
        let localContext = new ColumnListIncludeContext(this.context, this.state);
        this.enterRule(localContext, 144, PostgreSqlParser.RULE_columnListInclude);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2465;
            this.match(PostgreSqlParser.KW_INCLUDE);
            this.state = 2466;
            this.optColumnList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyMatch(): KeyMatchContext {
        let localContext = new KeyMatchContext(this.context, this.state);
        this.enterRule(localContext, 146, PostgreSqlParser.RULE_keyMatch);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2468;
            this.match(PostgreSqlParser.KW_MATCH);
            this.state = 2469;
            _la = this.tokenStream.LA(1);
            if(!(_la === 113 || _la === 284 || _la === 336)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exclusionConstraintElem(): ExclusionConstraintElemContext {
        let localContext = new ExclusionConstraintElemContext(this.context, this.state);
        this.enterRule(localContext, 148, PostgreSqlParser.RULE_exclusionConstraintElem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2471;
            this.indexElem();
            this.state = 2472;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 2479;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
            case 1:
                {
                this.state = 2473;
                this.anyOperator();
                }
                break;
            case 2:
                {
                this.state = 2474;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 2475;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2476;
                this.anyOperator();
                this.state = 2477;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyActions(): KeyActionsContext {
        let localContext = new KeyActionsContext(this.context, this.state);
        this.enterRule(localContext, 150, PostgreSqlParser.RULE_keyActions);
        let _la: number;
        try {
            this.state = 2489;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2481;
                this.keyUpdate();
                this.state = 2483;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2482;
                    this.keyDelete();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2485;
                this.keyDelete();
                this.state = 2487;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2486;
                    this.keyUpdate();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyUpdate(): KeyUpdateContext {
        let localContext = new KeyUpdateContext(this.context, this.state);
        this.enterRule(localContext, 152, PostgreSqlParser.RULE_keyUpdate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2491;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2492;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 2493;
            this.keyAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyDelete(): KeyDeleteContext {
        let localContext = new KeyDeleteContext(this.context, this.state);
        this.enterRule(localContext, 154, PostgreSqlParser.RULE_keyDelete);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2495;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2496;
            this.match(PostgreSqlParser.KW_DELETE);
            this.state = 2497;
            this.keyAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyAction(): KeyActionContext {
        let localContext = new KeyActionContext(this.context, this.state);
        this.enterRule(localContext, 156, PostgreSqlParser.RULE_keyAction);
        let _la: number;
        try {
            this.state = 2508;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_NO:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2499;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 2500;
                this.match(PostgreSqlParser.KW_ACTION);
                }
                break;
            case PostgreSqlParser.KW_RESTRICT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2501;
                this.match(PostgreSqlParser.KW_RESTRICT);
                }
                break;
            case PostgreSqlParser.KW_CASCADE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2502;
                this.match(PostgreSqlParser.KW_CASCADE);
                }
                break;
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2503;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 2504;
                _la = this.tokenStream.LA(1);
                if(!(_la === 53 || _la === 78)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2506;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 242, this.context) ) {
                case 1:
                    {
                    this.state = 2505;
                    this.columnList();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optInherit(): OptInheritContext {
        let localContext = new OptInheritContext(this.context, this.state);
        this.enterRule(localContext, 158, PostgreSqlParser.RULE_optInherit);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2510;
            this.match(PostgreSqlParser.KW_INHERITS);
            this.state = 2511;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2512;
            this.qualifiedNameList();
            this.state = 2513;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpec(): PartitionSpecContext {
        let localContext = new PartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 160, PostgreSqlParser.RULE_partitionSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2515;
            this.match(PostgreSqlParser.KW_PARTITION);
            this.state = 2516;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 2517;
            this.colId();
            this.state = 2518;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2519;
            this.partElem();
            this.state = 2524;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2520;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2521;
                this.partElem();
                }
                }
                this.state = 2526;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2527;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partElem(): PartElemContext {
        let localContext = new PartElemContext(this.context, this.state);
        this.enterRule(localContext, 162, PostgreSqlParser.RULE_partElem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2535;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
            case 1:
                {
                this.state = 2529;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 2530;
                this.funcExprWindowless();
                }
                break;
            case 3:
                {
                {
                this.state = 2531;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2532;
                this.expression();
                this.state = 2533;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                }
                break;
            }
            this.state = 2538;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43) {
                {
                this.state = 2537;
                this.collateClause();
                }
            }

            this.state = 2541;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                this.state = 2540;
                this.anyName();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext {
        let localContext = new TableAccessMethodClauseContext(this.context, this.state);
        this.enterRule(localContext, 164, PostgreSqlParser.RULE_tableAccessMethodClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2543;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 2544;
            this.colId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optWith(): OptWithContext {
        let localContext = new OptWithContext(this.context, this.state);
        this.enterRule(localContext, 166, PostgreSqlParser.RULE_optWith);
        let _la: number;
        try {
            this.state = 2550;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 248, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2546;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 2547;
                this.relOptions();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2548;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 379)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2549;
                this.match(PostgreSqlParser.KW_OIDS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public onCommitOption(): OnCommitOptionContext {
        let localContext = new OnCommitOptionContext(this.context, this.state);
        this.enterRule(localContext, 168, PostgreSqlParser.RULE_onCommitOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2552;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2553;
            this.match(PostgreSqlParser.KW_COMMIT);
            this.state = 2559;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DROP:
                {
                this.state = 2554;
                this.match(PostgreSqlParser.KW_DROP);
                }
                break;
            case PostgreSqlParser.KW_DELETE:
                {
                this.state = 2555;
                this.match(PostgreSqlParser.KW_DELETE);
                this.state = 2556;
                this.match(PostgreSqlParser.KW_ROWS);
                }
                break;
            case PostgreSqlParser.KW_PRESERVE:
                {
                this.state = 2557;
                this.match(PostgreSqlParser.KW_PRESERVE);
                this.state = 2558;
                this.match(PostgreSqlParser.KW_ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optTableSpace(): OptTableSpaceContext {
        let localContext = new OptTableSpaceContext(this.context, this.state);
        this.enterRule(localContext, 170, PostgreSqlParser.RULE_optTableSpace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2561;
            this.match(PostgreSqlParser.KW_TABLESPACE);
            this.state = 2562;
            this.tableSpaceName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optConstableSpace(): OptConstableSpaceContext {
        let localContext = new OptConstableSpaceContext(this.context, this.state);
        this.enterRule(localContext, 172, PostgreSqlParser.RULE_optConstableSpace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2564;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 2565;
            this.match(PostgreSqlParser.KW_INDEX);
            this.state = 2566;
            this.optTableSpace();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existingIndex(): ExistingIndexContext {
        let localContext = new ExistingIndexContext(this.context, this.state);
        this.enterRule(localContext, 174, PostgreSqlParser.RULE_existingIndex);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2568;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 2569;
            this.match(PostgreSqlParser.KW_INDEX);
            this.state = 2570;
            this.colId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createStatsStmt(): CreateStatsStmtContext {
        let localContext = new CreateStatsStmtContext(this.context, this.state);
        this.enterRule(localContext, 176, PostgreSqlParser.RULE_createStatsStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2572;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2573;
            this.match(PostgreSqlParser.KW_STATISTICS);
            this.state = 2578;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                this.state = 2575;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 250, this.context) ) {
                case 1:
                    {
                    this.state = 2574;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 2577;
                this.anyName();
                }
            }

            this.state = 2581;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 2580;
                this.optColumnList();
                }
            }

            this.state = 2583;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2593;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
            case 1:
                {
                this.state = 2584;
                this.columnExpr();
                this.state = 2589;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 2585;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2586;
                    this.columnExpr();
                    }
                    }
                    this.state = 2591;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                {
                this.state = 2592;
                this.exprList();
                }
                break;
            }
            this.state = 2595;
            this.fromClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatsStmt(): AlterStatsStmtContext {
        let localContext = new AlterStatsStmtContext(this.context, this.state);
        this.enterRule(localContext, 178, PostgreSqlParser.RULE_alterStatsStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2597;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2598;
            this.match(PostgreSqlParser.KW_STATISTICS);
            this.state = 2600;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
            case 1:
                {
                this.state = 2599;
                this.ifExists();
                }
                break;
            }
            this.state = 2602;
            this.anyName();
            this.state = 2603;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 2604;
            this.match(PostgreSqlParser.KW_STATISTICS);
            this.state = 2605;
            this.signedConst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createAsStmt(): CreateAsStmtContext {
        let localContext = new CreateAsStmtContext(this.context, this.state);
        this.enterRule(localContext, 180, PostgreSqlParser.RULE_createAsStmt);
        let _la: number;
        try {
            localContext = new QueryCreateTableContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2607;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2609;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 2608;
                this.optTemp();
                }
            }

            this.state = 2611;
            this.match(PostgreSqlParser.KW_TABLE);
            this.state = 2613;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 257, this.context) ) {
            case 1:
                {
                this.state = 2612;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2615;
            this.createAsTarget();
            this.state = 2616;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 2617;
            this.selectStmt();
            this.state = 2619;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
            case 1:
                {
                this.state = 2618;
                this.optWithData();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createAsTarget(): CreateAsTargetContext {
        let localContext = new CreateAsTargetContext(this.context, this.state);
        this.enterRule(localContext, 182, PostgreSqlParser.RULE_createAsTarget);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2621;
            this.tableNameCreate();
            this.state = 2623;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 2622;
                this.columnListCreate();
                }
            }

            this.state = 2626;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 2625;
                this.tableAccessMethodClause();
                }
            }

            this.state = 2629;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105 || _la === 379) {
                {
                this.state = 2628;
                this.optWith();
                }
            }

            this.state = 2632;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 2631;
                this.onCommitOption();
                }
            }

            this.state = 2635;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 351) {
                {
                this.state = 2634;
                this.optTableSpace();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optWithData(): OptWithDataContext {
        let localContext = new OptWithDataContext(this.context, this.state);
        this.enterRule(localContext, 184, PostgreSqlParser.RULE_optWithData);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2637;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 2641;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DATA:
                {
                this.state = 2638;
                this.match(PostgreSqlParser.KW_DATA);
                }
                break;
            case PostgreSqlParser.KW_NO:
                {
                this.state = 2639;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 2640;
                this.match(PostgreSqlParser.KW_DATA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMaterializedViewStmt(): CreateMaterializedViewStmtContext {
        let localContext = new CreateMaterializedViewStmtContext(this.context, this.state);
        this.enterRule(localContext, 186, PostgreSqlParser.RULE_createMaterializedViewStmt);
        let _la: number;
        try {
            localContext = new CreateMaterializedViewContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2643;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2645;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 367) {
                {
                this.state = 2644;
                this.match(PostgreSqlParser.KW_UNLOGGED);
                }
            }

            this.state = 2647;
            this.match(PostgreSqlParser.KW_MATERIALIZED);
            this.state = 2648;
            this.match(PostgreSqlParser.KW_VIEW);
            this.state = 2650;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
            case 1:
                {
                this.state = 2649;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2652;
            this.viewNameCreate();
            this.state = 2654;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 2653;
                this.columnListCreate();
                }
            }

            this.state = 2657;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 2656;
                this.tableAccessMethodClause();
                }
            }

            this.state = 2660;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 2659;
                this.optRelOptions();
                }
            }

            this.state = 2663;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 351) {
                {
                this.state = 2662;
                this.optTableSpace();
                }
            }

            this.state = 2665;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 2666;
            this.selectStmt();
            this.state = 2668;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
            case 1:
                {
                this.state = 2667;
                this.optWithData();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public refreshMaterializedViewStmt(): RefreshMaterializedViewStmtContext {
        let localContext = new RefreshMaterializedViewStmtContext(this.context, this.state);
        this.enterRule(localContext, 188, PostgreSqlParser.RULE_refreshMaterializedViewStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2670;
            this.match(PostgreSqlParser.KW_REFRESH);
            this.state = 2671;
            this.match(PostgreSqlParser.KW_MATERIALIZED);
            this.state = 2672;
            this.match(PostgreSqlParser.KW_VIEW);
            this.state = 2674;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 2673;
                this.match(PostgreSqlParser.KW_CONCURRENTLY);
                }
            }

            this.state = 2676;
            this.viewName();
            this.state = 2678;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 273, this.context) ) {
            case 1:
                {
                this.state = 2677;
                this.optWithData();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createSeqStmt(): CreateSeqStmtContext {
        let localContext = new CreateSeqStmtContext(this.context, this.state);
        this.enterRule(localContext, 190, PostgreSqlParser.RULE_createSeqStmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2680;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2682;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 2681;
                this.optTemp();
                }
            }

            this.state = 2684;
            this.match(PostgreSqlParser.KW_SEQUENCE);
            this.state = 2686;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 275, this.context) ) {
            case 1:
                {
                this.state = 2685;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2688;
            this.qualifiedName();
            this.state = 2694;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 277, this.context) ) {
            case 1:
                {
                this.state = 2690;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 2689;
                        this.seqOptElem();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2692;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 276, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterSeqStmt(): AlterSeqStmtContext {
        let localContext = new AlterSeqStmtContext(this.context, this.state);
        this.enterRule(localContext, 192, PostgreSqlParser.RULE_alterSeqStmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2696;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2697;
            this.match(PostgreSqlParser.KW_SEQUENCE);
            this.state = 2699;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 278, this.context) ) {
            case 1:
                {
                this.state = 2698;
                this.ifExists();
                }
                break;
            }
            this.state = 2701;
            this.qualifiedName();
            this.state = 2703;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 2702;
                    this.seqOptElem();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2705;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 279, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public seqOptElem(): SeqOptElemContext {
        let localContext = new SeqOptElemContext(this.context, this.state);
        this.enterRule(localContext, 194, PostgreSqlParser.RULE_seqOptElem);
        let _la: number;
        try {
            this.state = 2740;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2707;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 2708;
                this.simpleTypeName();
                }
                break;
            case PostgreSqlParser.KW_CACHE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2709;
                this.match(PostgreSqlParser.KW_CACHE);
                this.state = 2711;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 574 || _la === 576) {
                    {
                    this.state = 2710;
                    this.numericOnly();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_INCREMENT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2713;
                this.match(PostgreSqlParser.KW_INCREMENT);
                this.state = 2715;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 2714;
                    this.match(PostgreSqlParser.KW_BY);
                    }
                }

                this.state = 2717;
                this.numericOnly();
                }
                break;
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINVALUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2718;
                _la = this.tokenStream.LA(1);
                if(!(_la === 260 || _la === 262)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2719;
                this.numericOnly();
                }
                break;
            case PostgreSqlParser.KW_NO:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2720;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 2721;
                _la = this.tokenStream.LA(1);
                if(!(_la === 173 || _la === 260 || _la === 262)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_OWNED:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2722;
                this.match(PostgreSqlParser.KW_OWNED);
                this.state = 2723;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 2724;
                this.columnName();
                }
                break;
            case PostgreSqlParser.KW_SEQUENCE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2725;
                this.match(PostgreSqlParser.KW_SEQUENCE);
                this.state = 2726;
                this.match(PostgreSqlParser.KW_NAME);
                this.state = 2727;
                this.anyName();
                }
                break;
            case PostgreSqlParser.KW_START:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2728;
                this.match(PostgreSqlParser.KW_START);
                this.state = 2730;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 2729;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                }

                this.state = 2732;
                this.numericOnly();
                }
                break;
            case PostgreSqlParser.KW_RESTART:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2733;
                this.match(PostgreSqlParser.KW_RESTART);
                this.state = 2735;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 283, this.context) ) {
                case 1:
                    {
                    this.state = 2734;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                    break;
                }
                this.state = 2738;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 574 || _la === 576) {
                    {
                    this.state = 2737;
                    this.numericOnly();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericOnly(): NumericOnlyContext {
        let localContext = new NumericOnlyContext(this.context, this.state);
        this.enterRule(localContext, 196, PostgreSqlParser.RULE_numericOnly);
        let _la: number;
        try {
            this.state = 2747;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 287, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2743;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13) {
                    {
                    this.state = 2742;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 12 || _la === 13)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2745;
                this.match(PostgreSqlParser.Numeric);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2746;
                this.signedConst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createProceduralLangStmt(): CreateProceduralLangStmtContext {
        let localContext = new CreateProceduralLangStmtContext(this.context, this.state);
        this.enterRule(localContext, 198, PostgreSqlParser.RULE_createProceduralLangStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2749;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2751;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 2750;
                this.orReplaceOpt();
                }
            }

            this.state = 2754;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 359) {
                {
                this.state = 2753;
                this.match(PostgreSqlParser.KW_TRUSTED);
                }
            }

            this.state = 2757;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 295) {
                {
                this.state = 2756;
                this.match(PostgreSqlParser.KW_PROCEDURAL);
                }
            }

            this.state = 2759;
            this.match(PostgreSqlParser.KW_LANGUAGE);
            this.state = 2760;
            this.colId();
            this.state = 2773;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
            case 1:
                {
                this.state = 2761;
                this.match(PostgreSqlParser.KW_HANDLER);
                this.state = 2762;
                this.anyName();
                this.state = 2765;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
                case 1:
                    {
                    this.state = 2763;
                    this.match(PostgreSqlParser.KW_INLINE);
                    this.state = 2764;
                    this.anyName();
                    }
                    break;
                }
                this.state = 2771;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
                case 1:
                    {
                    this.state = 2767;
                    this.match(PostgreSqlParser.KW_VALIDATOR);
                    this.state = 2768;
                    this.anyName();
                    }
                    break;
                case 2:
                    {
                    this.state = 2769;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 2770;
                    this.match(PostgreSqlParser.KW_VALIDATOR);
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableSpaceStmt(): CreateTableSpaceStmtContext {
        let localContext = new CreateTableSpaceStmtContext(this.context, this.state);
        this.enterRule(localContext, 200, PostgreSqlParser.RULE_createTableSpaceStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2775;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2776;
            this.optTableSpace();
            this.state = 2779;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 282) {
                {
                this.state = 2777;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 2778;
                this.roleSpec();
                }
            }

            this.state = 2781;
            this.match(PostgreSqlParser.KW_LOCATION);
            this.state = 2782;
            this.stringConst();
            this.state = 2784;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
            case 1:
                {
                this.state = 2783;
                this.optRelOptions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createExtensionStmt(): CreateExtensionStmtContext {
        let localContext = new CreateExtensionStmtContext(this.context, this.state);
        this.enterRule(localContext, 202, PostgreSqlParser.RULE_createExtensionStmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2786;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2787;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 2789;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 296, this.context) ) {
            case 1:
                {
                this.state = 2788;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2791;
            this.colId();
            this.state = 2793;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 297, this.context) ) {
            case 1:
                {
                this.state = 2792;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 2802;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 299, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 2800;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_SCHEMA:
                        {
                        this.state = 2795;
                        this.match(PostgreSqlParser.KW_SCHEMA);
                        this.state = 2796;
                        this.schemaName();
                        }
                        break;
                    case PostgreSqlParser.KW_FROM:
                    case PostgreSqlParser.KW_VERSION:
                        {
                        this.state = 2797;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 64 || _la === 375)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2798;
                        this.nonReservedWordOrStringConst();
                        }
                        break;
                    case PostgreSqlParser.KW_CASCADE:
                        {
                        this.state = 2799;
                        this.match(PostgreSqlParser.KW_CASCADE);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }
                this.state = 2804;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 299, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterExtensionStmt(): AlterExtensionStmtContext {
        let localContext = new AlterExtensionStmtContext(this.context, this.state);
        this.enterRule(localContext, 204, PostgreSqlParser.RULE_alterExtensionStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2805;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2806;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 2807;
            this.colId();
            this.state = 2808;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 2813;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 94) {
                {
                {
                this.state = 2809;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 2810;
                this.nonReservedWordOrStringConst();
                }
                }
                this.state = 2815;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterExtensionContentsStmt(): AlterExtensionContentsStmtContext {
        let localContext = new AlterExtensionContentsStmtContext(this.context, this.state);
        this.enterRule(localContext, 206, PostgreSqlParser.RULE_alterExtensionContentsStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2816;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2817;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 2818;
            this.colId();
            this.state = 2819;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 191)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2852;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 301, this.context) ) {
            case 1:
                {
                this.state = 2820;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 2821;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 2822;
                this.typename();
                this.state = 2823;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 2824;
                this.colId();
                }
                break;
            case 2:
                {
                this.state = 2826;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 2827;
                this.routineWithArgTypes();
                }
                break;
            case 3:
                {
                this.state = 2828;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 2829;
                this.procedureWithArgTypes();
                }
                break;
            case 4:
                {
                this.state = 2830;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 2831;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2832;
                this.anyName();
                this.state = 2833;
                this.tableAccessMethodClause();
                }
                break;
            case 5:
                {
                this.state = 2835;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 2836;
                this.operatorWithArgTypes();
                }
                break;
            case 6:
                {
                this.state = 2837;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 2838;
                this.functionWithArgTypes();
                }
                break;
            case 7:
                {
                this.state = 2839;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2840;
                this.typename();
                }
                break;
            case 8:
                {
                this.state = 2841;
                this.match(PostgreSqlParser.KW_CAST);
                this.state = 2842;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2843;
                this.typename();
                this.state = 2844;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 2845;
                this.typename();
                this.state = 2846;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 9:
                {
                this.state = 2848;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 2849;
                this.aggregateWithArgTypes();
                }
                break;
            case 10:
                {
                this.state = 2850;
                this.objectTypeName();
                }
                break;
            case 11:
                {
                this.state = 2851;
                this.objectTypeAnyName();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFdwStmt(): CreateFdwStmtContext {
        let localContext = new CreateFdwStmtContext(this.context, this.state);
        this.enterRule(localContext, 208, PostgreSqlParser.RULE_createFdwStmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2854;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2855;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 2856;
            this.match(PostgreSqlParser.KW_DATA);
            this.state = 2857;
            this.match(PostgreSqlParser.KW_WRAPPER);
            this.state = 2858;
            this.colId();
            this.state = 2864;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 303, this.context) ) {
            case 1:
                {
                this.state = 2860;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 2859;
                        this.fdwOption();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2862;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 302, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
            this.state = 2867;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 304, this.context) ) {
            case 1:
                {
                this.state = 2866;
                this.createGenericOptions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fdwOption(): FdwOptionContext {
        let localContext = new FdwOptionContext(this.context, this.state);
        this.enterRule(localContext, 210, PostgreSqlParser.RULE_fdwOption);
        let _la: number;
        try {
            this.state = 2875;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_VALIDATOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2869;
                _la = this.tokenStream.LA(1);
                if(!(_la === 215 || _la === 373)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2871;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 305, this.context) ) {
                case 1:
                    {
                    this.state = 2870;
                    this.anyName();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_NO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2873;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 2874;
                _la = this.tokenStream.LA(1);
                if(!(_la === 215 || _la === 373)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterFdwStmt(): AlterFdwStmtContext {
        let localContext = new AlterFdwStmtContext(this.context, this.state);
        this.enterRule(localContext, 212, PostgreSqlParser.RULE_alterFdwStmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2877;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2878;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 2879;
            this.match(PostgreSqlParser.KW_DATA);
            this.state = 2880;
            this.match(PostgreSqlParser.KW_WRAPPER);
            this.state = 2881;
            this.colId();
            this.state = 2895;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 310, this.context) ) {
            case 1:
                {
                this.state = 2887;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 215 || _la === 269 || _la === 373) {
                    {
                    this.state = 2883;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 2882;
                        this.fdwOption();
                        }
                        }
                        this.state = 2885;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 215 || _la === 269 || _la === 373);
                    }
                }

                this.state = 2889;
                this.alterGenericOptions();
                }
                break;
            case 2:
                {
                this.state = 2891;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 2890;
                        this.fdwOption();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2893;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 309, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createGenericOptions(): CreateGenericOptionsContext {
        let localContext = new CreateGenericOptionsContext(this.context, this.state);
        this.enterRule(localContext, 214, PostgreSqlParser.RULE_createGenericOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2897;
            this.match(PostgreSqlParser.KW_OPTIONS);
            this.state = 2898;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2899;
            this.genericOptionElem();
            this.state = 2904;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2900;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2901;
                this.genericOptionElem();
                }
                }
                this.state = 2906;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2907;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterGenericOptions(): AlterGenericOptionsContext {
        let localContext = new AlterGenericOptionsContext(this.context, this.state);
        this.enterRule(localContext, 216, PostgreSqlParser.RULE_alterGenericOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2909;
            this.match(PostgreSqlParser.KW_OPTIONS);
            this.state = 2910;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2911;
            this.alterGenericOptionElem();
            this.state = 2916;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2912;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2913;
                this.alterGenericOptionElem();
                }
                }
                this.state = 2918;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2919;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterGenericOptionElem(): AlterGenericOptionElemContext {
        let localContext = new AlterGenericOptionElemContext(this.context, this.state);
        this.enterRule(localContext, 218, PostgreSqlParser.RULE_alterGenericOptionElem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2921;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 191 || _la === 333)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2922;
            this.genericOptionElem();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public genericOptionElem(): GenericOptionElemContext {
        let localContext = new GenericOptionElemContext(this.context, this.state);
        this.enterRule(localContext, 220, PostgreSqlParser.RULE_genericOptionElem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2924;
            this.colLabel();
            this.state = 2925;
            this.stringConst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createForeignServerStmt(): CreateForeignServerStmtContext {
        let localContext = new CreateForeignServerStmtContext(this.context, this.state);
        this.enterRule(localContext, 222, PostgreSqlParser.RULE_createForeignServerStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2927;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2928;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 2930;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
            case 1:
                {
                this.state = 2929;
                this.ifNotExists();
                }
                break;
            }
            this.state = 2932;
            this.colId();
            this.state = 2935;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 360) {
                {
                this.state = 2933;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 2934;
                this.stringConst();
                }
            }

            this.state = 2938;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 375) {
                {
                this.state = 2937;
                this.foreignServerVersion();
                }
            }

            this.state = 2940;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 2941;
            this.match(PostgreSqlParser.KW_DATA);
            this.state = 2942;
            this.match(PostgreSqlParser.KW_WRAPPER);
            this.state = 2943;
            this.colId();
            this.state = 2945;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 316, this.context) ) {
            case 1:
                {
                this.state = 2944;
                this.createGenericOptions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public foreignServerVersion(): ForeignServerVersionContext {
        let localContext = new ForeignServerVersionContext(this.context, this.state);
        this.enterRule(localContext, 224, PostgreSqlParser.RULE_foreignServerVersion);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2947;
            this.match(PostgreSqlParser.KW_VERSION);
            this.state = 2950;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 2948;
                this.stringConst();
                }
                break;
            case PostgreSqlParser.KW_NULL:
                {
                this.state = 2949;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterForeignServerStmt(): AlterForeignServerStmtContext {
        let localContext = new AlterForeignServerStmtContext(this.context, this.state);
        this.enterRule(localContext, 226, PostgreSqlParser.RULE_alterForeignServerStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2952;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2953;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 2954;
            this.colId();
            this.state = 2960;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_OPTIONS:
                {
                this.state = 2955;
                this.alterGenericOptions();
                }
                break;
            case PostgreSqlParser.KW_VERSION:
                {
                this.state = 2956;
                this.foreignServerVersion();
                this.state = 2958;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
                case 1:
                    {
                    this.state = 2957;
                    this.alterGenericOptions();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createForeignTableStmt(): CreateForeignTableStmtContext {
        let localContext = new CreateForeignTableStmtContext(this.context, this.state);
        this.enterRule(localContext, 228, PostgreSqlParser.RULE_createForeignTableStmt);
        let _la: number;
        try {
            this.state = 3001;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 327, this.context) ) {
            case 1:
                localContext = new CreateForeignTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2962;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 2963;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 2964;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 2966;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 320, this.context) ) {
                case 1:
                    {
                    this.state = 2965;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 2968;
                this.tableNameCreate();
                this.state = 2969;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2971;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & 2099209) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2147491841) !== 0) || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & 4294966809) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 4294967295) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 4294967295) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290781183) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & 4294967295) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & 4294967295) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 4294967295) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 4294967295) !== 0) || ((((_la - 376)) & ~0x1F) === 0 && ((1 << (_la - 376)) & 4294967295) !== 0) || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & 4294967295) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & 4294950911) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & 3221225471) !== 0) || ((((_la - 506)) & ~0x1F) === 0 && ((1 << (_la - 506)) & 286719) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                    {
                    this.state = 2970;
                    this.tableElementList();
                    }
                }

                this.state = 2973;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2975;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 238) {
                    {
                    this.state = 2974;
                    this.optInherit();
                    }
                }

                this.state = 2977;
                this.match(PostgreSqlParser.KW_SERVER);
                this.state = 2978;
                this.colId();
                this.state = 2980;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 323, this.context) ) {
                case 1:
                    {
                    this.state = 2979;
                    this.createGenericOptions();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new CreatePartitionForeignTableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2982;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 2983;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 2984;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 2986;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 324, this.context) ) {
                case 1:
                    {
                    this.state = 2985;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 2988;
                this.tableNameCreate();
                this.state = 2989;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 2990;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 2991;
                this.tableName();
                this.state = 2993;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2992;
                    this.optTypedTableElEmentList();
                    }
                }

                this.state = 2995;
                this.partitionBoundSpec();
                this.state = 2996;
                this.match(PostgreSqlParser.KW_SERVER);
                this.state = 2997;
                this.colId();
                this.state = 2999;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 326, this.context) ) {
                case 1:
                    {
                    this.state = 2998;
                    this.createGenericOptions();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importForeignSchemaStmt(): ImportForeignSchemaStmtContext {
        let localContext = new ImportForeignSchemaStmtContext(this.context, this.state);
        this.enterRule(localContext, 230, PostgreSqlParser.RULE_importForeignSchemaStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3003;
            this.match(PostgreSqlParser.KW_IMPORT);
            this.state = 3004;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 3005;
            this.match(PostgreSqlParser.KW_SCHEMA);
            this.state = 3006;
            this.schemaName();
            this.state = 3016;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 59 || _la === 74) {
                {
                this.state = 3010;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_LIMIT:
                    {
                    this.state = 3007;
                    this.match(PostgreSqlParser.KW_LIMIT);
                    this.state = 3008;
                    this.match(PostgreSqlParser.KW_TO);
                    }
                    break;
                case PostgreSqlParser.KW_EXCEPT:
                    {
                    this.state = 3009;
                    this.match(PostgreSqlParser.KW_EXCEPT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3012;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3013;
                this.relationExprList();
                this.state = 3014;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
            }

            this.state = 3018;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 3019;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3020;
            this.colId();
            this.state = 3021;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 3022;
            this.colId();
            this.state = 3024;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 330, this.context) ) {
            case 1:
                {
                this.state = 3023;
                this.createGenericOptions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserMappingStmt(): CreateUserMappingStmtContext {
        let localContext = new CreateUserMappingStmtContext(this.context, this.state);
        this.enterRule(localContext, 232, PostgreSqlParser.RULE_createUserMappingStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3026;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3027;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 3028;
            this.match(PostgreSqlParser.KW_MAPPING);
            this.state = 3030;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 220) {
                {
                this.state = 3029;
                this.ifNotExists();
                }
            }

            this.state = 3032;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3035;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3033;
                this.roleSpec();
                }
                break;
            case PostgreSqlParser.KW_USER:
                {
                this.state = 3034;
                this.match(PostgreSqlParser.KW_USER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3037;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3038;
            this.colId();
            this.state = 3040;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 333, this.context) ) {
            case 1:
                {
                this.state = 3039;
                this.createGenericOptions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterUserMappingStmt(): AlterUserMappingStmtContext {
        let localContext = new AlterUserMappingStmtContext(this.context, this.state);
        this.enterRule(localContext, 234, PostgreSqlParser.RULE_alterUserMappingStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3042;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3043;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 3044;
            this.match(PostgreSqlParser.KW_MAPPING);
            this.state = 3045;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3048;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3046;
                this.roleSpec();
                }
                break;
            case PostgreSqlParser.KW_USER:
                {
                this.state = 3047;
                this.match(PostgreSqlParser.KW_USER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3050;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3051;
            this.colId();
            this.state = 3052;
            this.alterGenericOptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createPolicyStmt(): CreatePolicyStmtContext {
        let localContext = new CreatePolicyStmtContext(this.context, this.state);
        this.enterRule(localContext, 236, PostgreSqlParser.RULE_createPolicyStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3054;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3055;
            this.match(PostgreSqlParser.KW_POLICY);
            this.state = 3056;
            this.colId();
            this.state = 3057;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3058;
            this.qualifiedName();
            this.state = 3065;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 336, this.context) ) {
            case 1:
                {
                this.state = 3059;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3063;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_PERMISSIVE:
                    {
                    this.state = 3060;
                    this.match(PostgreSqlParser.KW_PERMISSIVE);
                    }
                    break;
                case PostgreSqlParser.KW_RESTRICTIVE:
                    {
                    this.state = 3061;
                    this.match(PostgreSqlParser.KW_RESTRICTIVE);
                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 3062;
                    this.identifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            this.state = 3069;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 3067;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3068;
                _la = this.tokenStream.LA(1);
                if(!(_la === 30 || _la === 88 || _la === 182 || _la === 241 || _la === 369)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3073;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94) {
                {
                this.state = 3071;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3072;
                this.roleList();
                }
            }

            this.state = 3076;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 3075;
                this.rowSecurityOptionalExpr();
                }
            }

            this.state = 3079;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 340, this.context) ) {
            case 1:
                {
                this.state = 3078;
                this.rowSecurityOptionalWithCheck();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterPolicyStmt(): AlterPolicyStmtContext {
        let localContext = new AlterPolicyStmtContext(this.context, this.state);
        this.enterRule(localContext, 238, PostgreSqlParser.RULE_alterPolicyStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3081;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3082;
            this.match(PostgreSqlParser.KW_POLICY);
            this.state = 3083;
            this.colId();
            this.state = 3084;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3085;
            this.qualifiedName();
            this.state = 3088;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94) {
                {
                this.state = 3086;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3087;
                this.roleList();
                }
            }

            this.state = 3091;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 3090;
                this.rowSecurityOptionalExpr();
                }
            }

            this.state = 3094;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 343, this.context) ) {
            case 1:
                {
                this.state = 3093;
                this.rowSecurityOptionalWithCheck();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterProcedureStmt(): AlterProcedureStmtContext {
        let localContext = new AlterProcedureStmtContext(this.context, this.state);
        this.enterRule(localContext, 240, PostgreSqlParser.RULE_alterProcedureStmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3096;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3097;
            this.match(PostgreSqlParser.KW_PROCEDURE);
            this.state = 3098;
            this.procedureName();
            this.state = 3100;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 3099;
                this.funcArgs();
                }
            }

            this.state = 3128;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 348, this.context) ) {
            case 1:
                {
                this.state = 3102;
                this.procedureAction();
                this.state = 3106;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 345, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3103;
                        this.procedureAction();
                        }
                        }
                    }
                    this.state = 3108;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 345, this.context);
                }
                this.state = 3110;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 346, this.context) ) {
                case 1:
                    {
                    this.state = 3109;
                    this.match(PostgreSqlParser.KW_RESTRICT);
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 3112;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 3113;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3114;
                this.procedureNameCreate();
                }
                break;
            case 3:
                {
                this.state = 3115;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 3116;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3117;
                this.roleSpec();
                }
                break;
            case 4:
                {
                this.state = 3118;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 3119;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 3120;
                this.schemaNameCreate();
                }
                break;
            case 5:
                {
                this.state = 3122;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 3121;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 3124;
                this.match(PostgreSqlParser.KW_DEPENDS);
                this.state = 3125;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3126;
                this.match(PostgreSqlParser.KW_EXTENSION);
                this.state = 3127;
                this.colId();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureAction(): ProcedureActionContext {
        let localContext = new ProcedureActionContext(this.context, this.state);
        this.enterRule(localContext, 242, PostgreSqlParser.RULE_procedureAction);
        let _la: number;
        try {
            this.state = 3159;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3140;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
                case 1:
                    {
                    this.state = 3131;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 3130;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 3133;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 3134;
                    this.match(PostgreSqlParser.KW_INVOKER);
                    }
                    break;
                case 2:
                    {
                    this.state = 3136;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 3135;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 3138;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 3139;
                    this.match(PostgreSqlParser.KW_DEFINER);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3142;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 3143;
                this.colId();
                this.state = 3144;
                _la = this.tokenStream.LA(1);
                if(!(_la === 9 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3147;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 352, this.context) ) {
                case 1:
                    {
                    this.state = 3145;
                    this.colId();
                    }
                    break;
                case 2:
                    {
                    this.state = 3146;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3149;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 3150;
                this.colId();
                this.state = 3151;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 3152;
                this.match(PostgreSqlParser.KW_CURRENT);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3154;
                this.match(PostgreSqlParser.KW_RESET);
                this.state = 3157;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 3155;
                    this.colId();
                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 3156;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowSecurityOptionalExpr(): RowSecurityOptionalExprContext {
        let localContext = new RowSecurityOptionalExprContext(this.context, this.state);
        this.enterRule(localContext, 244, PostgreSqlParser.RULE_rowSecurityOptionalExpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3161;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 3162;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3163;
            this.expression();
            this.state = 3164;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowSecurityOptionalWithCheck(): RowSecurityOptionalWithCheckContext {
        let localContext = new RowSecurityOptionalWithCheckContext(this.context, this.state);
        this.enterRule(localContext, 246, PostgreSqlParser.RULE_rowSecurityOptionalWithCheck);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3166;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 3167;
            this.match(PostgreSqlParser.KW_CHECK);
            this.state = 3168;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3169;
            this.expression();
            this.state = 3170;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createAccessMethodStmt(): CreateAccessMethodStmtContext {
        let localContext = new CreateAccessMethodStmtContext(this.context, this.state);
        this.enterRule(localContext, 248, PostgreSqlParser.RULE_createAccessMethodStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3172;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3173;
            this.match(PostgreSqlParser.KW_ACCESS);
            this.state = 3174;
            this.match(PostgreSqlParser.KW_METHOD);
            this.state = 3175;
            this.colId();
            this.state = 3176;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 3177;
            _la = this.tokenStream.LA(1);
            if(!(_la === 92 || _la === 226)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3178;
            this.match(PostgreSqlParser.KW_HANDLER);
            this.state = 3179;
            this.anyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTrigStmt(): CreateTrigStmtContext {
        let localContext = new CreateTrigStmtContext(this.context, this.state);
        this.enterRule(localContext, 250, PostgreSqlParser.RULE_createTrigStmt);
        let _la: number;
        try {
            this.state = 3259;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 369, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3181;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3183;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 3182;
                    this.orReplaceOpt();
                    }
                }

                this.state = 3185;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 3186;
                this.colId();
                this.state = 3187;
                this.triggerActionTime();
                this.state = 3188;
                this.triggerEvents();
                this.state = 3189;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3190;
                this.tableName();
                this.state = 3202;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 447) {
                    {
                    this.state = 3191;
                    this.match(PostgreSqlParser.KW_REFERENCING);
                    this.state = 3198;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 3192;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 448 || _la === 449)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3193;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 92 || _la === 414)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3195;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 36) {
                            {
                            this.state = 3194;
                            this.match(PostgreSqlParser.KW_AS);
                            }
                        }

                        this.state = 3197;
                        this.colId();
                        }
                        }
                        this.state = 3200;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 448 || _la === 449);
                    }
                }

                this.state = 3209;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 3204;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 3206;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 192) {
                        {
                        this.state = 3205;
                        this.match(PostgreSqlParser.KW_EACH);
                        }
                    }

                    this.state = 3208;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 341 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3212;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102) {
                    {
                    this.state = 3211;
                    this.triggerWhen();
                    }
                }

                this.state = 3214;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 3215;
                this.functionOrProcedure();
                this.state = 3216;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3217;
                this.triggerFuncArgs();
                this.state = 3218;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3220;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3222;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 3221;
                    this.orReplaceOpt();
                    }
                }

                this.state = 3225;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 3224;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    }
                }

                this.state = 3227;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 3228;
                this.colId();
                this.state = 3229;
                this.triggerActionTime();
                this.state = 3230;
                this.triggerEvents();
                this.state = 3231;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3232;
                this.tableName();
                this.state = 3235;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64) {
                    {
                    this.state = 3233;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 3234;
                    this.qualifiedName();
                    }
                }

                this.state = 3240;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (((((_la - 54)) & ~0x1F) === 0 && ((1 << (_la - 54)) & 8421377) !== 0) || _la === 269) {
                    {
                    {
                    this.state = 3237;
                    this.constraintAttributeElem();
                    }
                    }
                    this.state = 3242;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3248;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 3243;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 3245;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 192) {
                        {
                        this.state = 3244;
                        this.match(PostgreSqlParser.KW_EACH);
                        }
                    }

                    this.state = 3247;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 341 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3251;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102) {
                    {
                    this.state = 3250;
                    this.triggerWhen();
                    }
                }

                this.state = 3253;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 3254;
                this.functionOrProcedure();
                this.state = 3255;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3256;
                this.triggerFuncArgs();
                this.state = 3257;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerActionTime(): TriggerActionTimeContext {
        let localContext = new TriggerActionTimeContext(this.context, this.state);
        this.enterRule(localContext, 252, PostgreSqlParser.RULE_triggerActionTime);
        try {
            this.state = 3265;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_BEFORE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3261;
                this.match(PostgreSqlParser.KW_BEFORE);
                }
                break;
            case PostgreSqlParser.KW_AFTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3262;
                this.match(PostgreSqlParser.KW_AFTER);
                }
                break;
            case PostgreSqlParser.KW_INSTEAD:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3263;
                this.match(PostgreSqlParser.KW_INSTEAD);
                this.state = 3264;
                this.match(PostgreSqlParser.KW_OF);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerEvents(): TriggerEventsContext {
        let localContext = new TriggerEventsContext(this.context, this.state);
        this.enterRule(localContext, 254, PostgreSqlParser.RULE_triggerEvents);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3267;
            this.triggerOneEvent();
            this.state = 3272;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 82) {
                {
                {
                this.state = 3268;
                this.match(PostgreSqlParser.KW_OR);
                this.state = 3269;
                this.triggerOneEvent();
                }
                }
                this.state = 3274;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerOneEvent(): TriggerOneEventContext {
        let localContext = new TriggerOneEventContext(this.context, this.state);
        this.enterRule(localContext, 256, PostgreSqlParser.RULE_triggerOneEvent);
        let _la: number;
        try {
            this.state = 3283;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_INSERT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3275;
                this.match(PostgreSqlParser.KW_INSERT);
                }
                break;
            case PostgreSqlParser.KW_DELETE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3276;
                this.match(PostgreSqlParser.KW_DELETE);
                }
                break;
            case PostgreSqlParser.KW_UPDATE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3277;
                this.match(PostgreSqlParser.KW_UPDATE);
                this.state = 3280;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 275) {
                    {
                    this.state = 3278;
                    this.match(PostgreSqlParser.KW_OF);
                    this.state = 3279;
                    this.columnList();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_TRUNCATE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3282;
                this.match(PostgreSqlParser.KW_TRUNCATE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerWhen(): TriggerWhenContext {
        let localContext = new TriggerWhenContext(this.context, this.state);
        this.enterRule(localContext, 258, PostgreSqlParser.RULE_triggerWhen);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3285;
            this.match(PostgreSqlParser.KW_WHEN);
            this.state = 3286;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3287;
            this.expression();
            this.state = 3288;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionOrProcedure(): FunctionOrProcedureContext {
        let localContext = new FunctionOrProcedureContext(this.context, this.state);
        this.enterRule(localContext, 260, PostgreSqlParser.RULE_functionOrProcedure);
        try {
            this.state = 3294;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3290;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 3291;
                this.functionName();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3292;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 3293;
                this.procedureName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerFuncArgs(): TriggerFuncArgsContext {
        let localContext = new TriggerFuncArgsContext(this.context, this.state);
        this.enterRule(localContext, 262, PostgreSqlParser.RULE_triggerFuncArgs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3298;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
            case PostgreSqlParser.KW_ANALYSE:
            case PostgreSqlParser.KW_ANALYZE:
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ANY:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_AS:
            case PostgreSqlParser.KW_ASC:
            case PostgreSqlParser.KW_ASYMMETRIC:
            case PostgreSqlParser.KW_BOTH:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_CHECK:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_COLUMN:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_CREATE:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DEFERRABLE:
            case PostgreSqlParser.KW_DESC:
            case PostgreSqlParser.KW_DISTINCT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_ELSE:
            case PostgreSqlParser.KW_EXCEPT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_FOR:
            case PostgreSqlParser.KW_FOREIGN:
            case PostgreSqlParser.KW_FROM:
            case PostgreSqlParser.KW_GRANT:
            case PostgreSqlParser.KW_GROUP:
            case PostgreSqlParser.KW_HAVING:
            case PostgreSqlParser.KW_IN:
            case PostgreSqlParser.KW_INITIALLY:
            case PostgreSqlParser.KW_INTERSECT:
            case PostgreSqlParser.KW_LATERAL:
            case PostgreSqlParser.KW_LEADING:
            case PostgreSqlParser.KW_LIMIT:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_OFFSET:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_ONLY:
            case PostgreSqlParser.KW_OR:
            case PostgreSqlParser.KW_ORDER:
            case PostgreSqlParser.KW_PLACING:
            case PostgreSqlParser.KW_PRIMARY:
            case PostgreSqlParser.KW_REFERENCES:
            case PostgreSqlParser.KW_RETURNING:
            case PostgreSqlParser.KW_SELECT:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_SOME:
            case PostgreSqlParser.KW_SYMMETRIC:
            case PostgreSqlParser.KW_TABLE:
            case PostgreSqlParser.KW_THEN:
            case PostgreSqlParser.KW_TO:
            case PostgreSqlParser.KW_TRAILING:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNION:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_USING:
            case PostgreSqlParser.KW_VARIADIC:
            case PostgreSqlParser.KW_WHEN:
            case PostgreSqlParser.KW_WHERE:
            case PostgreSqlParser.KW_WINDOW:
            case PostgreSqlParser.KW_WITH:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_END:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3296;
                this.triggerFuncArg();
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.COMMA:
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3304;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3300;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3301;
                this.triggerFuncArg();
                }
                }
                this.state = 3306;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerFuncArg(): TriggerFuncArgContext {
        let localContext = new TriggerFuncArgContext(this.context, this.state);
        this.enterRule(localContext, 264, PostgreSqlParser.RULE_triggerFuncArg);
        try {
            this.state = 3311;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3307;
                this.match(PostgreSqlParser.Integral);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3308;
                this.match(PostgreSqlParser.Numeric);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3309;
                this.stringConst();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3310;
                this.colLabel();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintAttributeElem(): ConstraintAttributeElemContext {
        let localContext = new ConstraintAttributeElemContext(this.context, this.state);
        this.enterRule(localContext, 266, PostgreSqlParser.RULE_constraintAttributeElem);
        let _la: number;
        try {
            this.state = 3323;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3314;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 3313;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 3316;
                this.match(PostgreSqlParser.KW_DEFERRABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3317;
                this.match(PostgreSqlParser.KW_INITIALLY);
                this.state = 3318;
                _la = this.tokenStream.LA(1);
                if(!(_la === 180 || _la === 221)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3319;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 3320;
                this.match(PostgreSqlParser.KW_VALID);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3321;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 3322;
                this.match(PostgreSqlParser.KW_INHERIT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createEventTrigStmt(): CreateEventTrigStmtContext {
        let localContext = new CreateEventTrigStmtContext(this.context, this.state);
        this.enterRule(localContext, 268, PostgreSqlParser.RULE_createEventTrigStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3325;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3326;
            this.match(PostgreSqlParser.KW_EVENT);
            this.state = 3327;
            this.match(PostgreSqlParser.KW_TRIGGER);
            this.state = 3328;
            this.colId();
            this.state = 3329;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3330;
            this.colLabel();
            this.state = 3340;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 102) {
                {
                this.state = 3331;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 3332;
                this.eventTriggerWhenItem();
                this.state = 3337;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 33) {
                    {
                    {
                    this.state = 3333;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 3334;
                    this.eventTriggerWhenItem();
                    }
                    }
                    this.state = 3339;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3342;
            this.match(PostgreSqlParser.KW_EXECUTE);
            this.state = 3343;
            this.functionOrProcedure();
            this.state = 3344;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3345;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public eventTriggerWhenItem(): EventTriggerWhenItemContext {
        let localContext = new EventTriggerWhenItemContext(this.context, this.state);
        this.enterRule(localContext, 270, PostgreSqlParser.RULE_eventTriggerWhenItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3347;
            this.colId();
            this.state = 3348;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 3349;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3350;
            this.stringConst();
            this.state = 3354;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3351;
                this.notifyPayload();
                }
                }
                this.state = 3356;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3357;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterEventTrigStmt(): AlterEventTrigStmtContext {
        let localContext = new AlterEventTrigStmtContext(this.context, this.state);
        this.enterRule(localContext, 272, PostgreSqlParser.RULE_alterEventTrigStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3359;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3360;
            this.match(PostgreSqlParser.KW_EVENT);
            this.state = 3361;
            this.match(PostgreSqlParser.KW_TRIGGER);
            this.state = 3362;
            this.colId();
            this.state = 3368;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ENABLE:
                {
                this.state = 3363;
                this.match(PostgreSqlParser.KW_ENABLE);
                this.state = 3365;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
                case 1:
                    {
                    this.state = 3364;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 139 || _la === 312)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DISABLE:
                {
                this.state = 3367;
                this.match(PostgreSqlParser.KW_DISABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createAssertionStmt(): CreateAssertionStmtContext {
        let localContext = new CreateAssertionStmtContext(this.context, this.state);
        this.enterRule(localContext, 274, PostgreSqlParser.RULE_createAssertionStmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3370;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3371;
            this.match(PostgreSqlParser.KW_ASSERTION);
            this.state = 3372;
            this.anyName();
            this.state = 3373;
            this.match(PostgreSqlParser.KW_CHECK);
            this.state = 3374;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3375;
            this.expression();
            this.state = 3376;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            this.state = 3380;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 385, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3377;
                    this.constraintAttributeElem();
                    }
                    }
                }
                this.state = 3382;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 385, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defineStmt(): DefineStmtContext {
        let localContext = new DefineStmtContext(this.context, this.state);
        this.enterRule(localContext, 276, PostgreSqlParser.RULE_defineStmt);
        let _la: number;
        try {
            this.state = 3461;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 397, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3383;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3385;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 3384;
                    this.orReplaceOpt();
                    }
                }

                this.state = 3387;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 3388;
                this.functionName();
                this.state = 3403;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 388, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 3389;
                    this.aggregateArgs();
                    this.state = 3390;
                    this.definition();
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 3392;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3393;
                    this.oldAggregateElem();
                    this.state = 3398;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 3394;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 3395;
                        this.oldAggregateElem();
                        }
                        }
                        this.state = 3400;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3401;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3405;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3406;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3407;
                this.anyOperator();
                this.state = 3408;
                this.definition();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3410;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3411;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3412;
                this.anyName();
                this.state = 3413;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3431;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 3414;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3416;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                        {
                        this.state = 3415;
                        this.tableFuncElementList();
                        }
                    }

                    this.state = 3418;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                case PostgreSqlParser.KW_ENUM:
                    {
                    this.state = 3419;
                    this.match(PostgreSqlParser.KW_ENUM);
                    this.state = 3420;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3428;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 561)) & ~0x1F) === 0 && ((1 << (_la - 561)) & 67108885) !== 0)) {
                        {
                        this.state = 3421;
                        this.stringConst();
                        this.state = 3425;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 6) {
                            {
                            {
                            this.state = 3422;
                            this.notifyPayload();
                            }
                            }
                            this.state = 3427;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 3430;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3433;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3434;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3435;
                this.anyName();
                this.state = 3441;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 394, this.context) ) {
                case 1:
                    {
                    this.state = 3438;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 36) {
                        {
                        this.state = 3436;
                        this.match(PostgreSqlParser.KW_AS);
                        this.state = 3437;
                        this.match(PostgreSqlParser.KW_RANGE);
                        }
                    }

                    this.state = 3440;
                    this.definition();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3443;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3444;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 3445;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 3446;
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3447;
                this.anyName();
                this.state = 3448;
                this.definition();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3450;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3451;
                this.match(PostgreSqlParser.KW_COLLATION);
                this.state = 3453;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 395, this.context) ) {
                case 1:
                    {
                    this.state = 3452;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 3455;
                this.anyName();
                this.state = 3459;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 3456;
                    this.definition();
                    }
                    break;
                case PostgreSqlParser.KW_FROM:
                    {
                    {
                    this.state = 3457;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 3458;
                    this.anyName();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definition(): DefinitionContext {
        let localContext = new DefinitionContext(this.context, this.state);
        this.enterRule(localContext, 278, PostgreSqlParser.RULE_definition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3463;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3464;
            this.defElem();
            this.state = 3469;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3465;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3466;
                this.defElem();
                }
                }
                this.state = 3471;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3472;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defElem(): DefElemContext {
        let localContext = new DefElemContext(this.context, this.state);
        this.enterRule(localContext, 280, PostgreSqlParser.RULE_defElem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3474;
            this.colLabel();
            this.state = 3477;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 3475;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 3476;
                this.defArg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defArg(): DefArgContext {
        let localContext = new DefArgContext(this.context, this.state);
        this.enterRule(localContext, 282, PostgreSqlParser.RULE_defArg);
        try {
            this.state = 3485;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 400, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3479;
                this.funcType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3480;
                this.reservedKeyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3481;
                this.qualAllOp();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3482;
                this.numericOnly();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3483;
                this.stringConst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3484;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public oldAggregateElem(): OldAggregateElemContext {
        let localContext = new OldAggregateElemContext(this.context, this.state);
        this.enterRule(localContext, 284, PostgreSqlParser.RULE_oldAggregateElem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3487;
            this.identifier();
            this.state = 3488;
            this.match(PostgreSqlParser.EQUAL);
            this.state = 3489;
            this.defArg();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterEnumStmt(): AlterEnumStmtContext {
        let localContext = new AlterEnumStmtContext(this.context, this.state);
        this.enterRule(localContext, 286, PostgreSqlParser.RULE_alterEnumStmt);
        let _la: number;
        try {
            this.state = 3513;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 403, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3491;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 3492;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3493;
                this.anyName();
                this.state = 3494;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 3495;
                this.match(PostgreSqlParser.KW_VALUE);
                this.state = 3497;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 3496;
                    this.ifNotExists();
                    }
                }

                this.state = 3499;
                this.stringConst();
                this.state = 3502;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 402, this.context) ) {
                case 1:
                    {
                    this.state = 3500;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 135 || _la === 145)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3501;
                    this.stringConst();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3504;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 3505;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3506;
                this.anyName();
                this.state = 3507;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 3508;
                this.match(PostgreSqlParser.KW_VALUE);
                this.state = 3509;
                this.stringConst();
                this.state = 3510;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3511;
                this.stringConst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 288, PostgreSqlParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3515;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 3516;
            this.match(PostgreSqlParser.KW_NOT);
            this.state = 3517;
            this.match(PostgreSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOperatorClassStmt(): CreateOperatorClassStmtContext {
        let localContext = new CreateOperatorClassStmtContext(this.context, this.state);
        this.enterRule(localContext, 290, PostgreSqlParser.RULE_createOperatorClassStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3519;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3520;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 3521;
            this.match(PostgreSqlParser.KW_CLASS);
            this.state = 3522;
            this.anyName();
            this.state = 3524;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 3523;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
            }

            this.state = 3526;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3527;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 3528;
            this.typename();
            this.state = 3529;
            this.tableAccessMethodClause();
            this.state = 3532;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 206) {
                {
                this.state = 3530;
                this.match(PostgreSqlParser.KW_FAMILY);
                this.state = 3531;
                this.anyName();
                }
            }

            this.state = 3534;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 3535;
            this.opClassItem();
            this.state = 3540;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3536;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3537;
                this.opClassItem();
                }
                }
                this.state = 3542;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opClassItem(): OpClassItemContext {
        let localContext = new OpClassItemContext(this.context, this.state);
        this.enterRule(localContext, 292, PostgreSqlParser.RULE_opClassItem);
        let _la: number;
        try {
            this.state = 3569;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3543;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3544;
                this.match(PostgreSqlParser.Integral);
                this.state = 3545;
                this.anyOperator();
                this.state = 3547;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 407, this.context) ) {
                case 1:
                    {
                    this.state = 3546;
                    this.operatorArgTypes();
                    }
                    break;
                }
                this.state = 3556;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 3549;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 3554;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_SEARCH:
                        {
                        this.state = 3550;
                        this.match(PostgreSqlParser.KW_SEARCH);
                        }
                        break;
                    case PostgreSqlParser.KW_ORDER:
                        {
                        {
                        this.state = 3551;
                        this.match(PostgreSqlParser.KW_ORDER);
                        this.state = 3552;
                        this.match(PostgreSqlParser.KW_BY);
                        this.state = 3553;
                        this.anyName();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                this.state = 3559;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 410, this.context) ) {
                case 1:
                    {
                    this.state = 3558;
                    this.match(PostgreSqlParser.KW_RECHECK);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_FUNCTION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3561;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 3562;
                this.match(PostgreSqlParser.Integral);
                this.state = 3564;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3563;
                    this.prepTypeClause();
                    }
                }

                this.state = 3566;
                this.functionWithArgTypes();
                }
                break;
            case PostgreSqlParser.KW_STORAGE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3567;
                this.match(PostgreSqlParser.KW_STORAGE);
                this.state = 3568;
                this.typename();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOperatorFamilyStmt(): CreateOperatorFamilyStmtContext {
        let localContext = new CreateOperatorFamilyStmtContext(this.context, this.state);
        this.enterRule(localContext, 294, PostgreSqlParser.RULE_createOperatorFamilyStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3571;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3572;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 3573;
            this.match(PostgreSqlParser.KW_FAMILY);
            this.state = 3574;
            this.anyName();
            this.state = 3575;
            this.tableAccessMethodClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterOperatorFamilyStmt(): AlterOperatorFamilyStmtContext {
        let localContext = new AlterOperatorFamilyStmtContext(this.context, this.state);
        this.enterRule(localContext, 296, PostgreSqlParser.RULE_alterOperatorFamilyStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3577;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3578;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 3579;
            this.match(PostgreSqlParser.KW_FAMILY);
            this.state = 3580;
            this.anyName();
            this.state = 3581;
            this.tableAccessMethodClause();
            this.state = 3600;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ADD:
                {
                this.state = 3582;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 3583;
                this.opClassItem();
                this.state = 3588;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 3584;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 3585;
                    this.opClassItem();
                    }
                    }
                    this.state = 3590;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case PostgreSqlParser.KW_DROP:
                {
                this.state = 3591;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3592;
                this.opClassDrop();
                this.state = 3597;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 3593;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 3594;
                    this.opClassDrop();
                    }
                    }
                    this.state = 3599;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opClassDrop(): OpClassDropContext {
        let localContext = new OpClassDropContext(this.context, this.state);
        this.enterRule(localContext, 298, PostgreSqlParser.RULE_opClassDrop);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3602;
            _la = this.tokenStream.LA(1);
            if(!(_la === 211 || _la === 278)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3603;
            this.match(PostgreSqlParser.Integral);
            this.state = 3604;
            this.prepTypeClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reassignOwnedStmt(): ReassignOwnedStmtContext {
        let localContext = new ReassignOwnedStmtContext(this.context, this.state);
        this.enterRule(localContext, 300, PostgreSqlParser.RULE_reassignOwnedStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3606;
            this.match(PostgreSqlParser.KW_REASSIGN);
            this.state = 3607;
            this.match(PostgreSqlParser.KW_OWNED);
            this.state = 3608;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 3609;
            this.roleList();
            this.state = 3610;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 3611;
            this.roleSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropStmt(): DropStmtContext {
        let localContext = new DropStmtContext(this.context, this.state);
        this.enterRule(localContext, 302, PostgreSqlParser.RULE_dropStmt);
        let _la: number;
        try {
            this.state = 3820;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 453, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3613;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3636;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_SEQUENCE:
                    {
                    this.state = 3614;
                    this.match(PostgreSqlParser.KW_SEQUENCE);
                    }
                    break;
                case PostgreSqlParser.KW_INDEX:
                    {
                    this.state = 3615;
                    this.match(PostgreSqlParser.KW_INDEX);
                    }
                    break;
                case PostgreSqlParser.KW_COLLATION:
                    {
                    this.state = 3616;
                    this.match(PostgreSqlParser.KW_COLLATION);
                    }
                    break;
                case PostgreSqlParser.KW_CONVERSION:
                    {
                    this.state = 3617;
                    this.match(PostgreSqlParser.KW_CONVERSION);
                    }
                    break;
                case PostgreSqlParser.KW_STATISTICS:
                    {
                    this.state = 3618;
                    this.match(PostgreSqlParser.KW_STATISTICS);
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 3619;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 3620;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_ACCESS:
                    {
                    this.state = 3621;
                    this.match(PostgreSqlParser.KW_ACCESS);
                    this.state = 3622;
                    this.match(PostgreSqlParser.KW_METHOD);
                    }
                    break;
                case PostgreSqlParser.KW_EVENT:
                    {
                    this.state = 3623;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 3624;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                case PostgreSqlParser.KW_EXTENSION:
                    {
                    this.state = 3625;
                    this.match(PostgreSqlParser.KW_EXTENSION);
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_PROCEDURAL:
                    {
                    this.state = 3627;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 3626;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 3629;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 3630;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 3631;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 3632;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    break;
                case PostgreSqlParser.KW_TEXT:
                    {
                    this.state = 3633;
                    this.match(PostgreSqlParser.KW_TEXT);
                    this.state = 3634;
                    this.match(PostgreSqlParser.KW_SEARCH);
                    this.state = 3635;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3639;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 418, this.context) ) {
                case 1:
                    {
                    this.state = 3638;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3641;
                this.nameList();
                this.state = 3643;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 419, this.context) ) {
                case 1:
                    {
                    this.state = 3642;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3645;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3647;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 3646;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 3649;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 3651;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 421, this.context) ) {
                case 1:
                    {
                    this.state = 3650;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3653;
                this.viewName();
                this.state = 3658;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 3654;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 3655;
                    this.viewName();
                    }
                    }
                    this.state = 3660;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3662;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 423, this.context) ) {
                case 1:
                    {
                    this.state = 3661;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3664;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3666;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 3665;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    }
                }

                this.state = 3668;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 3670;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 425, this.context) ) {
                case 1:
                    {
                    this.state = 3669;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3672;
                this.tableNameList();
                this.state = 3674;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 426, this.context) ) {
                case 1:
                    {
                    this.state = 3673;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3676;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3677;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 3679;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 427, this.context) ) {
                case 1:
                    {
                    this.state = 3678;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3681;
                this.schemaNameList();
                this.state = 3683;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 428, this.context) ) {
                case 1:
                    {
                    this.state = 3682;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3685;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3686;
                _la = this.tokenStream.LA(1);
                if(!(_la === 321 || _la === 357 || _la === 445)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3688;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 429, this.context) ) {
                case 1:
                    {
                    this.state = 3687;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3690;
                this.colId();
                this.state = 3691;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3692;
                this.anyName();
                this.state = 3694;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 430, this.context) ) {
                case 1:
                    {
                    this.state = 3693;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3696;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3697;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3699;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 431, this.context) ) {
                case 1:
                    {
                    this.state = 3698;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3701;
                this.typename();
                this.state = 3706;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 3702;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 3703;
                    this.typename();
                    }
                    }
                    this.state = 3708;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3710;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 433, this.context) ) {
                case 1:
                    {
                    this.state = 3709;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3712;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3713;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 3714;
                this.match(PostgreSqlParser.KW_CONCURRENTLY);
                this.state = 3716;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 434, this.context) ) {
                case 1:
                    {
                    this.state = 3715;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3718;
                this.anyNameList();
                this.state = 3720;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 435, this.context) ) {
                case 1:
                    {
                    this.state = 3719;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3722;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3723;
                this.match(PostgreSqlParser.KW_CAST);
                this.state = 3725;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 3724;
                    this.ifExists();
                    }
                }

                this.state = 3727;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3728;
                this.typename();
                this.state = 3729;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3730;
                this.typename();
                this.state = 3731;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 3733;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 437, this.context) ) {
                case 1:
                    {
                    this.state = 3732;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3735;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3736;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3737;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3739;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 438, this.context) ) {
                case 1:
                    {
                    this.state = 3738;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3741;
                this.anyName();
                this.state = 3742;
                this.tableAccessMethodClause();
                this.state = 3744;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 439, this.context) ) {
                case 1:
                    {
                    this.state = 3743;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3746;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3747;
                this.match(PostgreSqlParser.KW_OWNED);
                this.state = 3748;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 3749;
                this.roleList();
                this.state = 3751;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 440, this.context) ) {
                case 1:
                    {
                    this.state = 3750;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3753;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3754;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 3756;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
                case 1:
                    {
                    this.state = 3755;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3758;
                this.colId();
                this.state = 3760;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 442, this.context) ) {
                case 1:
                    {
                    this.state = 3759;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3762;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3763;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 3765;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 443, this.context) ) {
                case 1:
                    {
                    this.state = 3764;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3767;
                this.tableSpaceName();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3768;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3769;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 3771;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 3770;
                    this.ifExists();
                    }
                }

                this.state = 3773;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3774;
                this.typename();
                this.state = 3775;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 3776;
                this.colId();
                this.state = 3778;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 445, this.context) ) {
                case 1:
                    {
                    this.state = 3777;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3780;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3781;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 99 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3783;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 446, this.context) ) {
                case 1:
                    {
                    this.state = 3782;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3785;
                this.roleList();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3786;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3787;
                this.match(PostgreSqlParser.KW_USER);
                this.state = 3788;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 3790;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 3789;
                    this.ifExists();
                    }
                }

                this.state = 3792;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3795;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_CURRENT_ROLE:
                case PostgreSqlParser.KW_CURRENT_USER:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_SESSION_USER:
                case PostgreSqlParser.KW_AUTHORIZATION:
                case PostgreSqlParser.KW_BINARY:
                case PostgreSqlParser.KW_COLLATION:
                case PostgreSqlParser.KW_CONCURRENTLY:
                case PostgreSqlParser.KW_CROSS:
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                case PostgreSqlParser.KW_FREEZE:
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_ILIKE:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_ISNULL:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_LIKE:
                case PostgreSqlParser.KW_NATURAL:
                case PostgreSqlParser.KW_NOTNULL:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_OVERLAPS:
                case PostgreSqlParser.KW_RIGHT:
                case PostgreSqlParser.KW_SIMILAR:
                case PostgreSqlParser.KW_VERBOSE:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_TABLESAMPLE:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 3793;
                    this.roleSpec();
                    }
                    break;
                case PostgreSqlParser.KW_USER:
                    {
                    this.state = 3794;
                    this.match(PostgreSqlParser.KW_USER);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3797;
                this.match(PostgreSqlParser.KW_SERVER);
                this.state = 3798;
                this.colId();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3799;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3800;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 3802;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 449, this.context) ) {
                case 1:
                    {
                    this.state = 3801;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 3804;
                this.databaseName();
                this.state = 3818;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 452, this.context) ) {
                case 1:
                    {
                    this.state = 3806;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 105) {
                        {
                        this.state = 3805;
                        this.match(PostgreSqlParser.KW_WITH);
                        }
                    }

                    {
                    this.state = 3808;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3809;
                    this.match(PostgreSqlParser.KW_FORCE);
                    this.state = 3814;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 3810;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 3811;
                        this.match(PostgreSqlParser.KW_FORCE);
                        }
                        }
                        this.state = 3816;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3817;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectTypeAnyName(): ObjectTypeAnyNameContext {
        let localContext = new ObjectTypeAnyNameContext(this.context, this.state);
        this.enterRule(localContext, 304, PostgreSqlParser.RULE_objectTypeAnyName);
        let _la: number;
        try {
            this.state = 3838;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FOREIGN:
            case PostgreSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3823;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 3822;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    }
                }

                this.state = 3825;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 3826;
                this.tableName();
                }
                break;
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_VIEW:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3828;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 3827;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 3830;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 3831;
                this.viewName();
                }
                break;
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_STATISTICS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3832;
                _la = this.tokenStream.LA(1);
                if(!(_la === 108 || _la === 168 || _la === 226 || _la === 328 || _la === 342)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3833;
                this.anyName();
                }
                break;
            case PostgreSqlParser.KW_TEXT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3834;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 3835;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 3836;
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3837;
                this.anyName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectTypeName(): ObjectTypeNameContext {
        let localContext = new ObjectTypeNameContext(this.context, this.state);
        this.enterRule(localContext, 306, PostgreSqlParser.RULE_objectTypeName);
        let _la: number;
        try {
            this.state = 3864;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FOREIGN:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3856;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_EVENT:
                    {
                    this.state = 3840;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 3841;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                case PostgreSqlParser.KW_ACCESS:
                    {
                    this.state = 3842;
                    this.match(PostgreSqlParser.KW_ACCESS);
                    this.state = 3843;
                    this.match(PostgreSqlParser.KW_METHOD);
                    }
                    break;
                case PostgreSqlParser.KW_EXTENSION:
                    {
                    this.state = 3844;
                    this.match(PostgreSqlParser.KW_EXTENSION);
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 3845;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 3846;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_ROLE:
                    {
                    this.state = 3847;
                    this.match(PostgreSqlParser.KW_ROLE);
                    }
                    break;
                case PostgreSqlParser.KW_SUBSCRIPTION:
                    {
                    this.state = 3848;
                    this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                    }
                    break;
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 3849;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 3850;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 3851;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_PROCEDURAL:
                    {
                    this.state = 3853;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 3852;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 3855;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3858;
                this.colId();
                }
                break;
            case PostgreSqlParser.KW_SCHEMA:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3859;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 3860;
                this.schemaName();
                }
                break;
            case PostgreSqlParser.KW_DATABASE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3861;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 3862;
                this.databaseName();
                }
                break;
            case PostgreSqlParser.KW_TABLESPACE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3863;
                this.optTableSpace();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anyNameList(): AnyNameListContext {
        let localContext = new AnyNameListContext(this.context, this.state);
        this.enterRule(localContext, 308, PostgreSqlParser.RULE_anyNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3866;
            this.anyName();
            this.state = 3871;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3867;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3868;
                this.anyName();
                }
                }
                this.state = 3873;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anyName(): AnyNameContext {
        let localContext = new AnyNameContext(this.context, this.state);
        this.enterRule(localContext, 310, PostgreSqlParser.RULE_anyName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3874;
            this.colId();
            this.state = 3876;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 461, this.context) ) {
            case 1:
                {
                this.state = 3875;
                this.attrs();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public attrs(): AttrsContext {
        let localContext = new AttrsContext(this.context, this.state);
        this.enterRule(localContext, 312, PostgreSqlParser.RULE_attrs);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3880;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3878;
                    this.match(PostgreSqlParser.DOT);
                    this.state = 3879;
                    this.colLabel();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3882;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 462, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateStmt(): TruncateStmtContext {
        let localContext = new TruncateStmtContext(this.context, this.state);
        this.enterRule(localContext, 314, PostgreSqlParser.RULE_truncateStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3884;
            this.match(PostgreSqlParser.KW_TRUNCATE);
            this.state = 3886;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92) {
                {
                this.state = 3885;
                this.match(PostgreSqlParser.KW_TABLE);
                }
            }

            this.state = 3888;
            this.truncateTable();
            this.state = 3893;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3889;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3890;
                this.truncateTable();
                }
                }
                this.state = 3895;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3898;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 465, this.context) ) {
            case 1:
                {
                this.state = 3896;
                _la = this.tokenStream.LA(1);
                if(!(_la === 167 || _la === 314)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3897;
                this.match(PostgreSqlParser.KW_IDENTITY);
                }
                break;
            }
            this.state = 3901;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 466, this.context) ) {
            case 1:
                {
                this.state = 3900;
                this.optDropBehavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateTable(): TruncateTableContext {
        let localContext = new TruncateTableContext(this.context, this.state);
        this.enterRule(localContext, 316, PostgreSqlParser.RULE_truncateTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3904;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 3903;
                this.match(PostgreSqlParser.KW_ONLY);
                }
            }

            this.state = 3906;
            this.tableName();
            this.state = 3908;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 9) {
                {
                this.state = 3907;
                this.match(PostgreSqlParser.STAR);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commentStmt(): CommentStmtContext {
        let localContext = new CommentStmtContext(this.context, this.state);
        this.enterRule(localContext, 318, PostgreSqlParser.RULE_commentStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3910;
            this.match(PostgreSqlParser.KW_COMMENT);
            this.state = 3911;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3970;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 472, this.context) ) {
            case 1:
                {
                this.state = 3912;
                this.objectTypeAnyName();
                }
                break;
            case 2:
                {
                this.state = 3913;
                this.objectTypeName();
                }
                break;
            case 3:
                {
                this.state = 3914;
                this.match(PostgreSqlParser.KW_COLUMN);
                {
                this.state = 3915;
                this.colId();
                this.state = 3917;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 469, this.context) ) {
                case 1:
                    {
                    this.state = 3916;
                    this.attrs();
                    }
                    break;
                }
                }
                this.state = 3919;
                this.match(PostgreSqlParser.DOT);
                this.state = 3920;
                this.columnName();
                }
                break;
            case 4:
                {
                this.state = 3922;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3923;
                this.typename();
                }
                break;
            case 5:
                {
                this.state = 3924;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 3925;
                this.aggregateWithArgTypes();
                }
                break;
            case 6:
                {
                this.state = 3926;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 3927;
                this.functionWithArgTypes();
                }
                break;
            case 7:
                {
                this.state = 3928;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3929;
                this.operatorWithArgTypes();
                }
                break;
            case 8:
                {
                this.state = 3930;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 3931;
                this.colId();
                this.state = 3932;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3938;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 471, this.context) ) {
                case 1:
                    {
                    this.state = 3933;
                    this.tableName();
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 3935;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 470, this.context) ) {
                    case 1:
                        {
                        this.state = 3934;
                        this.match(PostgreSqlParser.KW_DOMAIN);
                        }
                        break;
                    }
                    this.state = 3937;
                    this.anyName();
                    }
                    }
                    break;
                }
                }
                break;
            case 9:
                {
                this.state = 3940;
                _la = this.tokenStream.LA(1);
                if(!(_la === 321 || _la === 357 || _la === 445)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3941;
                this.colId();
                this.state = 3942;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3943;
                this.anyName();
                }
                break;
            case 10:
                {
                this.state = 3945;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 3946;
                this.procedureWithArgTypes();
                }
                break;
            case 11:
                {
                this.state = 3947;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 3948;
                this.routineWithArgTypes();
                }
                break;
            case 12:
                {
                this.state = 3949;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 3950;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3951;
                this.typename();
                this.state = 3952;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 3953;
                this.colId();
                }
                break;
            case 13:
                {
                this.state = 3955;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3956;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3957;
                this.anyName();
                this.state = 3958;
                this.tableAccessMethodClause();
                }
                break;
            case 14:
                {
                this.state = 3960;
                this.match(PostgreSqlParser.KW_LARGE);
                this.state = 3961;
                this.match(PostgreSqlParser.KW_OBJECT);
                this.state = 3962;
                this.numericOnly();
                }
                break;
            case 15:
                {
                this.state = 3963;
                this.match(PostgreSqlParser.KW_CAST);
                this.state = 3964;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3965;
                this.typename();
                this.state = 3966;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3967;
                this.typename();
                this.state = 3968;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 3972;
            this.match(PostgreSqlParser.KW_IS);
            this.state = 3975;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3973;
                this.stringConst();
                }
                break;
            case PostgreSqlParser.KW_NULL:
                {
                this.state = 3974;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public secLabelStmt(): SecLabelStmtContext {
        let localContext = new SecLabelStmtContext(this.context, this.state);
        this.enterRule(localContext, 320, PostgreSqlParser.RULE_secLabelStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3977;
            this.match(PostgreSqlParser.KW_SECURITY);
            this.state = 3978;
            this.match(PostgreSqlParser.KW_LABEL);
            this.state = 3981;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 3979;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3980;
                this.nonReservedWordOrStringConst();
                }
            }

            this.state = 3983;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4001;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 475, this.context) ) {
            case 1:
                {
                this.state = 3984;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3985;
                this.typename();
                }
                break;
            case 2:
                {
                this.state = 3986;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 3987;
                this.aggregateWithArgTypes();
                }
                break;
            case 3:
                {
                this.state = 3988;
                this.match(PostgreSqlParser.KW_COLUMN);
                this.state = 3989;
                this.columnName();
                }
                break;
            case 4:
                {
                this.state = 3990;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 3991;
                this.functionWithArgTypes();
                }
                break;
            case 5:
                {
                this.state = 3992;
                this.match(PostgreSqlParser.KW_LARGE);
                this.state = 3993;
                this.match(PostgreSqlParser.KW_OBJECT);
                this.state = 3994;
                this.numericOnly();
                }
                break;
            case 6:
                {
                this.state = 3995;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 3996;
                this.procedureWithArgTypes();
                }
                break;
            case 7:
                {
                this.state = 3997;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 3998;
                this.routineWithArgTypes();
                }
                break;
            case 8:
                {
                this.state = 3999;
                this.objectTypeAnyName();
                }
                break;
            case 9:
                {
                this.state = 4000;
                this.objectTypeName();
                }
                break;
            }
            this.state = 4003;
            this.match(PostgreSqlParser.KW_IS);
            this.state = 4006;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 4004;
                this.stringConst();
                }
                break;
            case PostgreSqlParser.KW_NULL:
                {
                this.state = 4005;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetchStmt(): FetchStmtContext {
        let localContext = new FetchStmtContext(this.context, this.state);
        this.enterRule(localContext, 322, PostgreSqlParser.RULE_fetchStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4008;
            _la = this.tokenStream.LA(1);
            if(!(_la === 61 || _la === 265)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4009;
            this.fetch_args();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetch_args(): Fetch_argsContext {
        let localContext = new Fetch_argsContext(this.context, this.state);
        this.enterRule(localContext, 324, PostgreSqlParser.RULE_fetch_args);
        let _la: number;
        try {
            this.state = 4054;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 488, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4012;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 477, this.context) ) {
                case 1:
                    {
                    this.state = 4011;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 207 || _la === 249 || _la === 268 || _la === 293)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 4015;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4014;
                    this.fromIn();
                    }
                }

                this.state = 4017;
                this.colId();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4019;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 130 || _la === 307) {
                    {
                    this.state = 4018;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 130 || _la === 307)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 4021;
                this.signedConst();
                this.state = 4023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4022;
                    this.fromIn();
                    }
                }

                this.state = 4025;
                this.colId();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4027;
                this.match(PostgreSqlParser.KW_FORWARD);
                this.state = 4029;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 574) {
                    {
                    this.state = 4028;
                    this.signedConst();
                    }
                }

                this.state = 4032;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4031;
                    this.fromIn();
                    }
                }

                this.state = 4034;
                this.colId();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4036;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 210) {
                    {
                    this.state = 4035;
                    this.match(PostgreSqlParser.KW_FORWARD);
                    }
                }

                this.state = 4038;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 4040;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4039;
                    this.fromIn();
                    }
                }

                this.state = 4042;
                this.colId();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4043;
                this.match(PostgreSqlParser.KW_BACKWARD);
                this.state = 4048;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ALL:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_FROM:
                case PostgreSqlParser.KW_IN:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 4045;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 30) {
                        {
                        this.state = 4044;
                        this.match(PostgreSqlParser.KW_ALL);
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.PLUS:
                case PostgreSqlParser.MINUS:
                case PostgreSqlParser.Integral:
                    {
                    this.state = 4047;
                    this.signedConst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4051;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4050;
                    this.fromIn();
                    }
                }

                this.state = 4053;
                this.colId();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromIn(): FromInContext {
        let localContext = new FromInContext(this.context, this.state);
        this.enterRule(localContext, 326, PostgreSqlParser.RULE_fromIn);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4056;
            _la = this.tokenStream.LA(1);
            if(!(_la === 64 || _la === 68)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantStmt(): GrantStmtContext {
        let localContext = new GrantStmtContext(this.context, this.state);
        this.enterRule(localContext, 328, PostgreSqlParser.RULE_grantStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4058;
            this.match(PostgreSqlParser.KW_GRANT);
            this.state = 4059;
            this.privileges();
            this.state = 4060;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4061;
            this.privilegeTarget();
            this.state = 4062;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 4063;
            this.granteeList();
            this.state = 4067;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 489, this.context) ) {
            case 1:
                {
                this.state = 4064;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 4065;
                this.match(PostgreSqlParser.KW_GRANT);
                this.state = 4066;
                this.match(PostgreSqlParser.KW_OPTION);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeStmt(): RevokeStmtContext {
        let localContext = new RevokeStmtContext(this.context, this.state);
        this.enterRule(localContext, 330, PostgreSqlParser.RULE_revokeStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4069;
            this.match(PostgreSqlParser.KW_REVOKE);
            this.state = 4073;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 4070;
                this.match(PostgreSqlParser.KW_GRANT);
                this.state = 4071;
                this.match(PostgreSqlParser.KW_OPTION);
                this.state = 4072;
                this.match(PostgreSqlParser.KW_FOR);
                }
            }

            this.state = 4075;
            this.privileges();
            this.state = 4076;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4077;
            this.privilegeTarget();
            this.state = 4078;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 4079;
            this.granteeList();
            this.state = 4081;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 491, this.context) ) {
            case 1:
                {
                this.state = 4080;
                this.optDropBehavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privileges(): PrivilegesContext {
        let localContext = new PrivilegesContext(this.context, this.state);
        this.enterRule(localContext, 332, PostgreSqlParser.RULE_privileges);
        let _la: number;
        try {
            this.state = 4106;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 496, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4083;
                this.privilege();
                this.state = 4088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4084;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4085;
                    this.privilege();
                    }
                    }
                    this.state = 4090;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4091;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 4093;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 294) {
                    {
                    this.state = 4092;
                    this.match(PostgreSqlParser.KW_PRIVILEGES);
                    }
                }

                this.state = 4096;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 4095;
                    this.optColumnList();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4098;
                this.beforePrivilegeSelect();
                this.state = 4103;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4099;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4100;
                    this.beforePrivilegeSelect();
                    }
                    }
                    this.state = 4105;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public beforePrivilegeSelect(): BeforePrivilegeSelectContext {
        let localContext = new BeforePrivilegeSelectContext(this.context, this.state);
        this.enterRule(localContext, 334, PostgreSqlParser.RULE_beforePrivilegeSelect);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4108;
            _la = this.tokenStream.LA(1);
            if(!(_la === 46 || _la === 88 || _la === 182 || _la === 202 || _la === 241 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 131173) !== 0) || ((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & 7) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 336, PostgreSqlParser.RULE_privilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4114;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SELECT:
                {
                this.state = 4110;
                this.match(PostgreSqlParser.KW_SELECT);
                }
                break;
            case PostgreSqlParser.KW_REFERENCES:
                {
                this.state = 4111;
                this.match(PostgreSqlParser.KW_REFERENCES);
                }
                break;
            case PostgreSqlParser.KW_CREATE:
                {
                this.state = 4112;
                this.match(PostgreSqlParser.KW_CREATE);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 4113;
                this.colId();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4117;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 4116;
                this.optColumnList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeTarget(): PrivilegeTargetContext {
        let localContext = new PrivilegeTargetContext(this.context, this.state);
        this.enterRule(localContext, 338, PostgreSqlParser.RULE_privilegeTarget);
        let _la: number;
        try {
            this.state = 4164;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 503, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4119;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 4120;
                this.tableNameList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4122;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 499, this.context) ) {
                case 1:
                    {
                    this.state = 4121;
                    this.match(PostgreSqlParser.KW_SEQUENCE);
                    }
                    break;
                }
                this.state = 4124;
                this.qualifiedNameList();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4132;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 4125;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 4129;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_DATA:
                        {
                        this.state = 4126;
                        this.match(PostgreSqlParser.KW_DATA);
                        this.state = 4127;
                        this.match(PostgreSqlParser.KW_WRAPPER);
                        }
                        break;
                    case PostgreSqlParser.KW_SERVER:
                        {
                        this.state = 4128;
                        this.match(PostgreSqlParser.KW_SERVER);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                    {
                    this.state = 4131;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4134;
                this.nameList();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4135;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4136;
                this.functionWithArgTypesList();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4137;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4138;
                this.procedureWithArgTypesList();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4139;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4140;
                this.routineWithArgTypesList();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4141;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 4142;
                this.databaseNameList();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4143;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4144;
                this.anyNameList();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4145;
                this.match(PostgreSqlParser.KW_LARGE);
                this.state = 4146;
                this.match(PostgreSqlParser.KW_OBJECT);
                this.state = 4147;
                this.numericOnly();
                this.state = 4152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4148;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4149;
                    this.numericOnly();
                    }
                    }
                    this.state = 4154;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4155;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4156;
                this.schemaNameList();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4157;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 4158;
                this.tableSpaceNameList();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4159;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 4160;
                _la = this.tokenStream.LA(1);
                if(!(_la === 212 || _la === 329 || _la === 350 || _la === 455 || _la === 457)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4161;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 4162;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4163;
                this.schemaNameList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public granteeList(): GranteeListContext {
        let localContext = new GranteeListContext(this.context, this.state);
        this.enterRule(localContext, 340, PostgreSqlParser.RULE_granteeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 4167;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 66) {
                {
                this.state = 4166;
                this.match(PostgreSqlParser.KW_GROUP);
                }
            }

            this.state = 4169;
            this.roleSpec();
            }
            this.state = 4178;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4171;
                this.match(PostgreSqlParser.COMMA);
                {
                this.state = 4173;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 66) {
                    {
                    this.state = 4172;
                    this.match(PostgreSqlParser.KW_GROUP);
                    }
                }

                this.state = 4175;
                this.roleSpec();
                }
                }
                }
                this.state = 4180;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantRoleStmt(): GrantRoleStmtContext {
        let localContext = new GrantRoleStmtContext(this.context, this.state);
        this.enterRule(localContext, 342, PostgreSqlParser.RULE_grantRoleStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4181;
            this.match(PostgreSqlParser.KW_GRANT);
            this.state = 4182;
            this.privilege();
            this.state = 4187;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4183;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4184;
                this.privilege();
                }
                }
                this.state = 4189;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4190;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 4191;
            this.roleList();
            this.state = 4195;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 508, this.context) ) {
            case 1:
                {
                this.state = 4192;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 4193;
                this.match(PostgreSqlParser.KW_ADMIN);
                this.state = 4194;
                this.match(PostgreSqlParser.KW_OPTION);
                }
                break;
            }
            this.state = 4200;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 509, this.context) ) {
            case 1:
                {
                this.state = 4197;
                this.match(PostgreSqlParser.KW_GRANTED);
                this.state = 4198;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 4199;
                this.roleSpec();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeRoleStmt(): RevokeRoleStmtContext {
        let localContext = new RevokeRoleStmtContext(this.context, this.state);
        this.enterRule(localContext, 344, PostgreSqlParser.RULE_revokeRoleStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4202;
            this.match(PostgreSqlParser.KW_REVOKE);
            this.state = 4206;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 510, this.context) ) {
            case 1:
                {
                this.state = 4203;
                this.match(PostgreSqlParser.KW_ADMIN);
                this.state = 4204;
                this.match(PostgreSqlParser.KW_OPTION);
                this.state = 4205;
                this.match(PostgreSqlParser.KW_FOR);
                }
                break;
            }
            this.state = 4208;
            this.privilege();
            this.state = 4213;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4209;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4210;
                this.privilege();
                }
                }
                this.state = 4215;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4216;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 4217;
            this.roleList();
            this.state = 4221;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 512, this.context) ) {
            case 1:
                {
                this.state = 4218;
                this.match(PostgreSqlParser.KW_GRANTED);
                this.state = 4219;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 4220;
                this.roleSpec();
                }
                break;
            }
            this.state = 4224;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 513, this.context) ) {
            case 1:
                {
                this.state = 4223;
                this.optDropBehavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDefaultPrivilegesStmt(): AlterDefaultPrivilegesStmtContext {
        let localContext = new AlterDefaultPrivilegesStmtContext(this.context, this.state);
        this.enterRule(localContext, 346, PostgreSqlParser.RULE_alterDefaultPrivilegesStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4226;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 4227;
            this.match(PostgreSqlParser.KW_DEFAULT);
            this.state = 4228;
            this.match(PostgreSqlParser.KW_PRIVILEGES);
            this.state = 4237;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 62 || _la === 68) {
                {
                this.state = 4235;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_IN:
                    {
                    this.state = 4229;
                    this.match(PostgreSqlParser.KW_IN);
                    this.state = 4230;
                    this.match(PostgreSqlParser.KW_SCHEMA);
                    this.state = 4231;
                    this.schemaNameList();
                    }
                    break;
                case PostgreSqlParser.KW_FOR:
                    {
                    this.state = 4232;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 4233;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 99 || _la === 318)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4234;
                    this.roleList();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 4239;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4240;
            this.defaclaction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaclaction(): DefaclactionContext {
        let localContext = new DefaclactionContext(this.context, this.state);
        this.enterRule(localContext, 348, PostgreSqlParser.RULE_defaclaction);
        let _la: number;
        try {
            this.state = 4267;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_GRANT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4242;
                this.match(PostgreSqlParser.KW_GRANT);
                this.state = 4243;
                this.privileges();
                this.state = 4244;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4245;
                this.defaclPrivilegeTarget();
                this.state = 4246;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4247;
                this.granteeList();
                this.state = 4251;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 516, this.context) ) {
                case 1:
                    {
                    this.state = 4248;
                    this.match(PostgreSqlParser.KW_WITH);
                    this.state = 4249;
                    this.match(PostgreSqlParser.KW_GRANT);
                    this.state = 4250;
                    this.match(PostgreSqlParser.KW_OPTION);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_REVOKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4253;
                this.match(PostgreSqlParser.KW_REVOKE);
                this.state = 4257;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 4254;
                    this.match(PostgreSqlParser.KW_GRANT);
                    this.state = 4255;
                    this.match(PostgreSqlParser.KW_OPTION);
                    this.state = 4256;
                    this.match(PostgreSqlParser.KW_FOR);
                    }
                }

                this.state = 4259;
                this.privileges();
                this.state = 4260;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4261;
                this.defaclPrivilegeTarget();
                this.state = 4262;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 4263;
                this.granteeList();
                this.state = 4265;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 518, this.context) ) {
                case 1:
                    {
                    this.state = 4264;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaclPrivilegeTarget(): DefaclPrivilegeTargetContext {
        let localContext = new DefaclPrivilegeTargetContext(this.context, this.state);
        this.enterRule(localContext, 350, PostgreSqlParser.RULE_defaclPrivilegeTarget);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4269;
            _la = this.tokenStream.LA(1);
            if(!(_la === 212 || _la === 329 || _la === 350 || _la === 361 || _la === 455 || _la === 456)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexStmt(): IndexStmtContext {
        let localContext = new IndexStmtContext(this.context, this.state);
        this.enterRule(localContext, 352, PostgreSqlParser.RULE_indexStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4271;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 4273;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 98) {
                {
                this.state = 4272;
                this.match(PostgreSqlParser.KW_UNIQUE);
                }
            }

            this.state = 4275;
            this.match(PostgreSqlParser.KW_INDEX);
            this.state = 4277;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 4276;
                this.match(PostgreSqlParser.KW_CONCURRENTLY);
                }
            }

            this.state = 4280;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 522, this.context) ) {
            case 1:
                {
                this.state = 4279;
                this.ifNotExists();
                }
                break;
            }
            this.state = 4283;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                this.state = 4282;
                this.colId();
                }
            }

            this.state = 4285;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4286;
            this.relationExpr();
            this.state = 4288;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 4287;
                this.tableAccessMethodClause();
                }
            }

            this.state = 4290;
            this.indexParams();
            this.state = 4293;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 525, this.context) ) {
            case 1:
                {
                this.state = 4291;
                this.match(PostgreSqlParser.KW_INCLUDE);
                this.state = 4292;
                this.indexParams();
                }
                break;
            }
            this.state = 4300;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 527, this.context) ) {
            case 1:
                {
                this.state = 4295;
                this.match(PostgreSqlParser.KW_NULLS);
                this.state = 4297;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 4296;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 4299;
                this.match(PostgreSqlParser.KW_DISTINCT);
                }
                break;
            }
            this.state = 4303;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 528, this.context) ) {
            case 1:
                {
                this.state = 4302;
                this.optRelOptions();
                }
                break;
            }
            this.state = 4306;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 529, this.context) ) {
            case 1:
                {
                this.state = 4305;
                this.optTableSpace();
                }
                break;
            }
            this.state = 4309;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 4308;
                this.whereClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexParams(): IndexParamsContext {
        let localContext = new IndexParamsContext(this.context, this.state);
        this.enterRule(localContext, 354, PostgreSqlParser.RULE_indexParams);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4311;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4312;
            this.indexElem();
            this.state = 4317;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4313;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4314;
                this.indexElem();
                }
                }
                this.state = 4319;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4320;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexElem(): IndexElemContext {
        let localContext = new IndexElemContext(this.context, this.state);
        this.enterRule(localContext, 356, PostgreSqlParser.RULE_indexElem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4328;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 532, this.context) ) {
            case 1:
                {
                this.state = 4322;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 4323;
                this.funcExprWindowless();
                }
                break;
            case 3:
                {
                this.state = 4324;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 4325;
                this.expression();
                this.state = 4326;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 4331;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43) {
                {
                this.state = 4330;
                this.collateClause();
                }
            }

            this.state = 4339;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 535, this.context) ) {
            case 1:
                {
                this.state = 4334;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 534, this.context) ) {
                case 1:
                    {
                    this.state = 4333;
                    this.anyName();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 4336;
                this.anyName();
                this.state = 4337;
                this.relOptions();
                }
                break;
            }
            this.state = 4342;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 37 || _la === 55) {
                {
                this.state = 4341;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 55)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 4346;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 273) {
                {
                this.state = 4344;
                this.match(PostgreSqlParser.KW_NULLS);
                this.state = 4345;
                _la = this.tokenStream.LA(1);
                if(!(_la === 207 || _la === 249)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFunctionStmt(): CreateFunctionStmtContext {
        let localContext = new CreateFunctionStmtContext(this.context, this.state);
        this.enterRule(localContext, 358, PostgreSqlParser.RULE_createFunctionStmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4348;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 4350;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 4349;
                this.orReplaceOpt();
                }
            }

            this.state = 4356;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 4352;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4353;
                this.functionNameCreate();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 4354;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4355;
                this.procedureNameCreate();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            {
            this.state = 4358;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4367;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || _la === 68 || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                this.state = 4359;
                this.funcArgWithDefault();
                this.state = 4364;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4360;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4361;
                    this.funcArgWithDefault();
                    }
                    }
                    this.state = 4366;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 4369;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
            this.state = 4387;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 544, this.context) ) {
            case 1:
                {
                this.state = 4371;
                this.match(PostgreSqlParser.KW_RETURNS);
                this.state = 4385;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_AUTHORIZATION:
                case PostgreSqlParser.KW_BINARY:
                case PostgreSqlParser.KW_COLLATION:
                case PostgreSqlParser.KW_CONCURRENTLY:
                case PostgreSqlParser.KW_CROSS:
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                case PostgreSqlParser.KW_FREEZE:
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_ILIKE:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_ISNULL:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_LIKE:
                case PostgreSqlParser.KW_NATURAL:
                case PostgreSqlParser.KW_NOTNULL:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_OVERLAPS:
                case PostgreSqlParser.KW_RIGHT:
                case PostgreSqlParser.KW_SIMILAR:
                case PostgreSqlParser.KW_VERBOSE:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_TABLESAMPLE:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 4372;
                    this.funcType();
                    }
                    break;
                case PostgreSqlParser.KW_TABLE:
                    {
                    this.state = 4373;
                    this.match(PostgreSqlParser.KW_TABLE);
                    {
                    this.state = 4374;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 4375;
                    this.tableFuncColumn();
                    this.state = 4380;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 4376;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 4377;
                        this.tableFuncColumn();
                        }
                        }
                        this.state = 4382;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 4383;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            this.state = 4390;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4389;
                    this.createFuncOptItem();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4392;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 545, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 4399;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 546, this.context) ) {
            case 1:
                {
                this.state = 4394;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 4395;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 4396;
                this.nameList();
                this.state = 4397;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orReplaceOpt(): OrReplaceOptContext {
        let localContext = new OrReplaceOptContext(this.context, this.state);
        this.enterRule(localContext, 360, PostgreSqlParser.RULE_orReplaceOpt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4401;
            this.match(PostgreSqlParser.KW_OR);
            this.state = 4402;
            this.match(PostgreSqlParser.KW_REPLACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcArgs(): FuncArgsContext {
        let localContext = new FuncArgsContext(this.context, this.state);
        this.enterRule(localContext, 362, PostgreSqlParser.RULE_funcArgs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4404;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4406;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || _la === 68 || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                this.state = 4405;
                this.funcArgsList();
                }
            }

            this.state = 4408;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcArgsList(): FuncArgsListContext {
        let localContext = new FuncArgsListContext(this.context, this.state);
        this.enterRule(localContext, 364, PostgreSqlParser.RULE_funcArgsList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4410;
            this.funcArg();
            this.state = 4415;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4411;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4412;
                this.funcArg();
                }
                }
                this.state = 4417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineWithArgTypesList(): RoutineWithArgTypesListContext {
        let localContext = new RoutineWithArgTypesListContext(this.context, this.state);
        this.enterRule(localContext, 366, PostgreSqlParser.RULE_routineWithArgTypesList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4418;
            this.routineWithArgTypes();
            this.state = 4423;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4419;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4420;
                this.routineWithArgTypes();
                }
                }
                this.state = 4425;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineWithArgTypes(): RoutineWithArgTypesContext {
        let localContext = new RoutineWithArgTypesContext(this.context, this.state);
        this.enterRule(localContext, 368, PostgreSqlParser.RULE_routineWithArgTypes);
        try {
            this.state = 4431;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 550, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4426;
                this.routineName();
                this.state = 4427;
                this.funcArgs();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4429;
                this.typeFuncNameKeyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4430;
                this.qualifiedName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureWithArgTypesList(): ProcedureWithArgTypesListContext {
        let localContext = new ProcedureWithArgTypesListContext(this.context, this.state);
        this.enterRule(localContext, 370, PostgreSqlParser.RULE_procedureWithArgTypesList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4433;
            this.procedureWithArgTypes();
            this.state = 4438;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4434;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4435;
                this.procedureWithArgTypes();
                }
                }
                this.state = 4440;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureWithArgTypes(): ProcedureWithArgTypesContext {
        let localContext = new ProcedureWithArgTypesContext(this.context, this.state);
        this.enterRule(localContext, 372, PostgreSqlParser.RULE_procedureWithArgTypes);
        try {
            this.state = 4446;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 552, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4441;
                this.procedureName();
                this.state = 4442;
                this.funcArgs();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4444;
                this.typeFuncNameKeyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4445;
                this.qualifiedName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionWithArgTypesList(): FunctionWithArgTypesListContext {
        let localContext = new FunctionWithArgTypesListContext(this.context, this.state);
        this.enterRule(localContext, 374, PostgreSqlParser.RULE_functionWithArgTypesList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4448;
            this.functionWithArgTypes();
            this.state = 4453;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4449;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4450;
                this.functionWithArgTypes();
                }
                }
                this.state = 4455;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext {
        let localContext = new FunctionWithArgTypesContext(this.context, this.state);
        this.enterRule(localContext, 376, PostgreSqlParser.RULE_functionWithArgTypes);
        try {
            this.state = 4461;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 554, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4456;
                this.functionName();
                this.state = 4457;
                this.funcArgs();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4459;
                this.typeFuncNameKeyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4460;
                this.qualifiedName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcArg(): FuncArgContext {
        let localContext = new FuncArgContext(this.context, this.state);
        this.enterRule(localContext, 378, PostgreSqlParser.RULE_funcArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4471;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 557, this.context) ) {
            case 1:
                {
                this.state = 4463;
                this.argClass();
                this.state = 4465;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 555, this.context) ) {
                case 1:
                    {
                    this.state = 4464;
                    this.typeFunctionName();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 4467;
                this.typeFunctionName();
                this.state = 4469;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 556, this.context) ) {
                case 1:
                    {
                    this.state = 4468;
                    this.argClass();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 4473;
            this.funcType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public argClass(): ArgClassContext {
        let localContext = new ArgClassContext(this.context, this.state);
        this.enterRule(localContext, 380, PostgreSqlParser.RULE_argClass);
        try {
            this.state = 4482;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4475;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 4477;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 558, this.context) ) {
                case 1:
                    {
                    this.state = 4476;
                    this.match(PostgreSqlParser.KW_OUT);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_OUT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4479;
                this.match(PostgreSqlParser.KW_OUT);
                }
                break;
            case PostgreSqlParser.KW_INOUT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4480;
                this.match(PostgreSqlParser.KW_INOUT);
                }
                break;
            case PostgreSqlParser.KW_VARIADIC:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4481;
                this.match(PostgreSqlParser.KW_VARIADIC);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcType(): FuncTypeContext {
        let localContext = new FuncTypeContext(this.context, this.state);
        this.enterRule(localContext, 382, PostgreSqlParser.RULE_funcType);
        let _la: number;
        try {
            this.state = 4493;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 561, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4484;
                this.typename();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4486;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 415) {
                    {
                    this.state = 4485;
                    this.match(PostgreSqlParser.KW_SETOF);
                    }
                }

                this.state = 4488;
                this.typeFunctionName();
                this.state = 4489;
                this.attrs();
                this.state = 4490;
                this.match(PostgreSqlParser.PERCENT);
                this.state = 4491;
                this.match(PostgreSqlParser.KW_TYPE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcArgWithDefault(): FuncArgWithDefaultContext {
        let localContext = new FuncArgWithDefaultContext(this.context, this.state);
        this.enterRule(localContext, 384, PostgreSqlParser.RULE_funcArgWithDefault);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4495;
            this.funcArg();
            this.state = 4498;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 53) {
                {
                this.state = 4496;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 53)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4497;
                this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateArgs(): AggregateArgsContext {
        let localContext = new AggregateArgsContext(this.context, this.state);
        this.enterRule(localContext, 386, PostgreSqlParser.RULE_aggregateArgs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4500;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4510;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.STAR:
                {
                this.state = 4501;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IN:
            case PostgreSqlParser.KW_ORDER:
            case PostgreSqlParser.KW_VARIADIC:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 4503;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || _la === 68 || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                    {
                    this.state = 4502;
                    this.funcArgsList();
                    }
                }

                this.state = 4508;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 4505;
                    this.match(PostgreSqlParser.KW_ORDER);
                    this.state = 4506;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 4507;
                    this.funcArgsList();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4512;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateWithArgTypes(): AggregateWithArgTypesContext {
        let localContext = new AggregateWithArgTypesContext(this.context, this.state);
        this.enterRule(localContext, 388, PostgreSqlParser.RULE_aggregateWithArgTypes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4514;
            this.functionName();
            this.state = 4515;
            this.aggregateArgs();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonFuncOptItem(): CommonFuncOptItemContext {
        let localContext = new CommonFuncOptItemContext(this.context, this.state);
        this.enterRule(localContext, 390, PostgreSqlParser.RULE_commonFuncOptItem);
        let _la: number;
        try {
            this.state = 4546;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_RETURNS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4520;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_RETURNS:
                    {
                    this.state = 4517;
                    this.match(PostgreSqlParser.KW_RETURNS);
                    this.state = 4518;
                    this.match(PostgreSqlParser.KW_NULL);
                    }
                    break;
                case PostgreSqlParser.KW_CALLED:
                    {
                    this.state = 4519;
                    this.match(PostgreSqlParser.KW_CALLED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4522;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4523;
                this.match(PostgreSqlParser.KW_NULL);
                this.state = 4524;
                this.match(PostgreSqlParser.KW_INPUT);
                }
                break;
            case PostgreSqlParser.KW_STRICT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4525;
                this.match(PostgreSqlParser.KW_STRICT);
                }
                break;
            case PostgreSqlParser.KW_IMMUTABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4526;
                this.match(PostgreSqlParser.KW_IMMUTABLE);
                }
                break;
            case PostgreSqlParser.KW_STABLE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4527;
                this.match(PostgreSqlParser.KW_STABLE);
                }
                break;
            case PostgreSqlParser.KW_VOLATILE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4528;
                this.match(PostgreSqlParser.KW_VOLATILE);
                }
                break;
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_SECURITY:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4530;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205) {
                    {
                    this.state = 4529;
                    this.match(PostgreSqlParser.KW_EXTERNAL);
                    }
                }

                this.state = 4532;
                this.match(PostgreSqlParser.KW_SECURITY);
                this.state = 4533;
                _la = this.tokenStream.LA(1);
                if(!(_la === 181 || _la === 243)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_LEAKPROOF:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4534;
                this.match(PostgreSqlParser.KW_LEAKPROOF);
                }
                break;
            case PostgreSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4535;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 4536;
                this.match(PostgreSqlParser.KW_LEAKPROOF);
                }
                break;
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_ROWS:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4537;
                _la = this.tokenStream.LA(1);
                if(!(_la === 170 || _la === 320)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4538;
                this.numericOnly();
                }
                break;
            case PostgreSqlParser.KW_SUPPORT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4539;
                this.match(PostgreSqlParser.KW_SUPPORT);
                this.state = 4540;
                this.anyName();
                }
                break;
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4541;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 4542;
                this.setRestMore();
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4543;
                this.variableResetStmt();
                }
                break;
            case PostgreSqlParser.KW_PARALLEL:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4544;
                this.match(PostgreSqlParser.KW_PARALLEL);
                this.state = 4545;
                this.colId();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFuncOptItem(): CreateFuncOptItemContext {
        let localContext = new CreateFuncOptItemContext(this.context, this.state);
        this.enterRule(localContext, 392, PostgreSqlParser.RULE_createFuncOptItem);
        let _la: number;
        try {
            this.state = 4583;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 571, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4548;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 4549;
                this.stringConst();
                this.state = 4550;
                this.notifyPayload();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4552;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 4553;
                this.nonReservedWordOrStringConst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4554;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 4555;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 4556;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 4557;
                this.typename();
                this.state = 4564;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4558;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4559;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 4560;
                    this.match(PostgreSqlParser.KW_TYPE);
                    this.state = 4561;
                    this.typename();
                    }
                    }
                    this.state = 4566;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4567;
                this.match(PostgreSqlParser.KW_WINDOW);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4568;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 4569;
                this.colId();
                this.state = 4576;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TO:
                    {
                    this.state = 4570;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 4571;
                    this.colId();
                    }
                    break;
                case PostgreSqlParser.EQUAL:
                    {
                    this.state = 4572;
                    this.match(PostgreSqlParser.EQUAL);
                    this.state = 4573;
                    this.colId();
                    }
                    break;
                case PostgreSqlParser.KW_FROM:
                    {
                    this.state = 4574;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 4575;
                    this.match(PostgreSqlParser.KW_CURRENT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4578;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 4579;
                this.colId();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4580;
                this.stmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4581;
                this.commonFuncOptItem();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4582;
                this.colId();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optDefinition(): OptDefinitionContext {
        let localContext = new OptDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 394, PostgreSqlParser.RULE_optDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4585;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 4586;
            this.definition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFuncColumn(): TableFuncColumnContext {
        let localContext = new TableFuncColumnContext(this.context, this.state);
        this.enterRule(localContext, 396, PostgreSqlParser.RULE_tableFuncColumn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4588;
            this.columnName();
            this.state = 4589;
            this.funcType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterFunctionStmt(): AlterFunctionStmtContext {
        let localContext = new AlterFunctionStmtContext(this.context, this.state);
        this.enterRule(localContext, 398, PostgreSqlParser.RULE_alterFunctionStmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4591;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 4598;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 4592;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4593;
                this.functionWithArgTypes();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 4594;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4595;
                this.procedureWithArgTypes();
                }
                break;
            case PostgreSqlParser.KW_ROUTINE:
                {
                this.state = 4596;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4597;
                this.routineWithArgTypes();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4601;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4600;
                    this.commonFuncOptItem();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4603;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 573, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 4606;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 574, this.context) ) {
            case 1:
                {
                this.state = 4605;
                this.match(PostgreSqlParser.KW_RESTRICT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeFuncStmt(): RemoveFuncStmtContext {
        let localContext = new RemoveFuncStmtContext(this.context, this.state);
        this.enterRule(localContext, 400, PostgreSqlParser.RULE_removeFuncStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4608;
            this.match(PostgreSqlParser.KW_DROP);
            this.state = 4624;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 4609;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4611;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 575, this.context) ) {
                case 1:
                    {
                    this.state = 4610;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 4613;
                this.functionWithArgTypesList();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 4614;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4616;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 576, this.context) ) {
                case 1:
                    {
                    this.state = 4615;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 4618;
                this.procedureWithArgTypesList();
                }
                break;
            case PostgreSqlParser.KW_ROUTINE:
                {
                this.state = 4619;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4621;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 577, this.context) ) {
                case 1:
                    {
                    this.state = 4620;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 4623;
                this.routineWithArgTypesList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4627;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 579, this.context) ) {
            case 1:
                {
                this.state = 4626;
                this.optDropBehavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeAggregateStmt(): RemoveAggregateStmtContext {
        let localContext = new RemoveAggregateStmtContext(this.context, this.state);
        this.enterRule(localContext, 402, PostgreSqlParser.RULE_removeAggregateStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4629;
            this.match(PostgreSqlParser.KW_DROP);
            this.state = 4630;
            this.match(PostgreSqlParser.KW_AGGREGATE);
            this.state = 4632;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 580, this.context) ) {
            case 1:
                {
                this.state = 4631;
                this.ifExists();
                }
                break;
            }
            {
            this.state = 4634;
            this.aggregateWithArgTypes();
            this.state = 4639;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4635;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4636;
                this.aggregateWithArgTypes();
                }
                }
                this.state = 4641;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 4643;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 582, this.context) ) {
            case 1:
                {
                this.state = 4642;
                this.optDropBehavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeOperatorStmt(): RemoveOperatorStmtContext {
        let localContext = new RemoveOperatorStmtContext(this.context, this.state);
        this.enterRule(localContext, 404, PostgreSqlParser.RULE_removeOperatorStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4645;
            this.match(PostgreSqlParser.KW_DROP);
            this.state = 4646;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 4648;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 583, this.context) ) {
            case 1:
                {
                this.state = 4647;
                this.ifExists();
                }
                break;
            }
            {
            this.state = 4650;
            this.operatorWithArgTypes();
            this.state = 4655;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4651;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4652;
                this.operatorWithArgTypes();
                }
                }
                this.state = 4657;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 4659;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 585, this.context) ) {
            case 1:
                {
                this.state = 4658;
                this.optDropBehavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operatorArgTypes(): OperatorArgTypesContext {
        let localContext = new OperatorArgTypesContext(this.context, this.state);
        this.enterRule(localContext, 406, PostgreSqlParser.RULE_operatorArgTypes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4661;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4674;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 587, this.context) ) {
            case 1:
                {
                this.state = 4662;
                this.typename();
                this.state = 4665;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 4663;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4664;
                    this.typename();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 4667;
                this.match(PostgreSqlParser.KW_NONE);
                this.state = 4668;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4669;
                this.typename();
                }
                break;
            case 3:
                {
                this.state = 4670;
                this.typename();
                this.state = 4671;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4672;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            }
            this.state = 4676;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anyOperator(): AnyOperatorContext {
        let localContext = new AnyOperatorContext(this.context, this.state);
        this.enterRule(localContext, 408, PostgreSqlParser.RULE_anyOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4683;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                {
                this.state = 4678;
                this.colId();
                this.state = 4679;
                this.match(PostgreSqlParser.DOT);
                }
                }
                this.state = 4685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4686;
            this.allOp();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operatorWithArgTypes(): OperatorWithArgTypesContext {
        let localContext = new OperatorWithArgTypesContext(this.context, this.state);
        this.enterRule(localContext, 410, PostgreSqlParser.RULE_operatorWithArgTypes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4688;
            this.anyOperator();
            this.state = 4689;
            this.operatorArgTypes();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public doStmt(): DoStmtContext {
        let localContext = new DoStmtContext(this.context, this.state);
        this.enterRule(localContext, 412, PostgreSqlParser.RULE_doStmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4691;
            this.match(PostgreSqlParser.KW_DO);
            this.state = 4695;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    this.state = 4695;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.StringConstant:
                    case PostgreSqlParser.UnicodeEscapeStringConstant:
                    case PostgreSqlParser.BeginDollarStringConstant:
                    case PostgreSqlParser.EscapeStringConstant:
                        {
                        this.state = 4692;
                        this.stringConst();
                        }
                        break;
                    case PostgreSqlParser.KW_LANGUAGE:
                        {
                        this.state = 4693;
                        this.match(PostgreSqlParser.KW_LANGUAGE);
                        this.state = 4694;
                        this.nonReservedWordOrStringConst();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4697;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 590, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createCastStmt(): CreateCastStmtContext {
        let localContext = new CreateCastStmtContext(this.context, this.state);
        this.enterRule(localContext, 414, PostgreSqlParser.RULE_createCastStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4699;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 4700;
            this.match(PostgreSqlParser.KW_CAST);
            this.state = 4701;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4702;
            this.typename();
            this.state = 4703;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 4704;
            this.typename();
            this.state = 4705;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            this.state = 4722;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_WITHOUT:
                {
                {
                this.state = 4706;
                this.match(PostgreSqlParser.KW_WITHOUT);
                this.state = 4707;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4710;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 591, this.context) ) {
                case 1:
                    {
                    this.state = 4708;
                    this.match(PostgreSqlParser.KW_AS);
                    this.state = 4709;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 141 || _la === 223)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                }
                break;
            case PostgreSqlParser.KW_WITH:
                {
                {
                this.state = 4712;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 4716;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FUNCTION:
                    {
                    this.state = 4713;
                    this.match(PostgreSqlParser.KW_FUNCTION);
                    this.state = 4714;
                    this.functionWithArgTypes();
                    }
                    break;
                case PostgreSqlParser.KW_INOUT:
                    {
                    this.state = 4715;
                    this.match(PostgreSqlParser.KW_INOUT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4720;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 593, this.context) ) {
                case 1:
                    {
                    this.state = 4718;
                    this.match(PostgreSqlParser.KW_AS);
                    this.state = 4719;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 141 || _la === 223)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 416, PostgreSqlParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4724;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 4725;
            this.match(PostgreSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTransformStmt(): CreateTransformStmtContext {
        let localContext = new CreateTransformStmtContext(this.context, this.state);
        this.enterRule(localContext, 418, PostgreSqlParser.RULE_createTransformStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4727;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 4729;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 4728;
                this.orReplaceOpt();
                }
            }

            this.state = 4731;
            this.match(PostgreSqlParser.KW_TRANSFORM);
            this.state = 4732;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 4733;
            this.typename();
            this.state = 4734;
            this.match(PostgreSqlParser.KW_LANGUAGE);
            this.state = 4735;
            this.colId();
            this.state = 4736;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4751;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FROM:
                {
                this.state = 4737;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 4738;
                this.sqlWithFunction();
                this.state = 4742;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 4739;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4740;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 4741;
                    this.sqlWithFunction();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_TO:
                {
                this.state = 4744;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4745;
                this.sqlWithFunction();
                this.state = 4749;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 4746;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4747;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 4748;
                    this.sqlWithFunction();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4753;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlWithFunction(): SqlWithFunctionContext {
        let localContext = new SqlWithFunctionContext(this.context, this.state);
        this.enterRule(localContext, 420, PostgreSqlParser.RULE_sqlWithFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4755;
            this.match(PostgreSqlParser.KW_SQL);
            this.state = 4756;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 4757;
            this.match(PostgreSqlParser.KW_FUNCTION);
            this.state = 4758;
            this.functionWithArgTypes();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reindexStmt(): ReindexStmtContext {
        let localContext = new ReindexStmtContext(this.context, this.state);
        this.enterRule(localContext, 422, PostgreSqlParser.RULE_reindexStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4760;
            this.match(PostgreSqlParser.KW_REINDEX);
            this.state = 4771;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 4761;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 4762;
                this.match(PostgreSqlParser.KW_VERBOSE);
                this.state = 4767;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4763;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4764;
                    this.match(PostgreSqlParser.KW_VERBOSE);
                    }
                    }
                    this.state = 4769;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4770;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
            }

            {
            this.state = 4798;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_INDEX:
                {
                this.state = 4773;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 4775;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 4774;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 4777;
                this.qualifiedName();
                }
                break;
            case PostgreSqlParser.KW_TABLE:
                {
                this.state = 4778;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 4780;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 4779;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 4782;
                this.tableName();
                }
                break;
            case PostgreSqlParser.KW_SCHEMA:
                {
                this.state = 4783;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4785;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 4784;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 4787;
                this.schemaName();
                }
                break;
            case PostgreSqlParser.KW_SYSTEM:
                {
                this.state = 4788;
                this.match(PostgreSqlParser.KW_SYSTEM);
                this.state = 4790;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 4789;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 4792;
                this.colId();
                }
                break;
            case PostgreSqlParser.KW_DATABASE:
                {
                this.state = 4793;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 4795;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 4794;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 4797;
                this.databaseName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTblSpcStmt(): AlterTblSpcStmtContext {
        let localContext = new AlterTblSpcStmtContext(this.context, this.state);
        this.enterRule(localContext, 424, PostgreSqlParser.RULE_alterTblSpcStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4800;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 4801;
            this.optTableSpace();
            this.state = 4802;
            _la = this.tokenStream.LA(1);
            if(!(_la === 313 || _la === 333)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4803;
            this.relOptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameStmt(): RenameStmtContext {
        let localContext = new RenameStmtContext(this.context, this.state);
        this.enterRule(localContext, 426, PostgreSqlParser.RULE_renameStmt);
        let _la: number;
        try {
            this.state = 5012;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 627, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4805;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4810;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AGGREGATE:
                    {
                    this.state = 4806;
                    this.match(PostgreSqlParser.KW_AGGREGATE);
                    this.state = 4807;
                    this.aggregateWithArgTypes();
                    }
                    break;
                case PostgreSqlParser.KW_ROUTINE:
                    {
                    this.state = 4808;
                    this.match(PostgreSqlParser.KW_ROUTINE);
                    this.state = 4809;
                    this.routineWithArgTypes();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4812;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4813;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4814;
                this.colId();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4816;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4817;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 4818;
                this.databaseName();
                this.state = 4819;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4820;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4821;
                this.databaseNameCreate();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4823;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4824;
                _la = this.tokenStream.LA(1);
                if(!(_la === 108 || _la === 168 || _la === 189 || _la === 342 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4825;
                this.anyName();
                this.state = 4826;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4827;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4828;
                this.colId();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4830;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4831;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4832;
                this.functionWithArgTypes();
                this.state = 4833;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4834;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4835;
                this.functionNameCreate();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4837;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4838;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 4839;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4840;
                this.anyName();
                this.state = 4841;
                this.tableAccessMethodClause();
                this.state = 4842;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4843;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4844;
                this.colId();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4846;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4847;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4848;
                this.procedureWithArgTypes();
                this.state = 4849;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4850;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4851;
                this.procedureNameCreate();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4853;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4854;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4855;
                this.schemaName();
                this.state = 4856;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4857;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4858;
                this.schemaNameCreate();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4860;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4861;
                _la = this.tokenStream.LA(1);
                if(!(_la === 226 || _la === 328)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4863;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 608, this.context) ) {
                case 1:
                    {
                    this.state = 4862;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 4865;
                this.qualifiedName();
                this.state = 4866;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4867;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4868;
                this.colId();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4870;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4872;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 4871;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 4874;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 4876;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 610, this.context) ) {
                case 1:
                    {
                    this.state = 4875;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 4878;
                this.viewName();
                this.state = 4879;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4880;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4881;
                this.viewNameCreate();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4883;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4885;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 4884;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    }
                }

                this.state = 4887;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 4889;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 612, this.context) ) {
                case 1:
                    {
                    this.state = 4888;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 4891;
                this.relationExpr();
                this.state = 4892;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4893;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4894;
                this.tableNameCreate();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4896;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4921;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOREIGN:
                case PostgreSqlParser.KW_TABLE:
                    {
                    this.state = 4898;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 63) {
                        {
                        this.state = 4897;
                        this.match(PostgreSqlParser.KW_FOREIGN);
                        }
                    }

                    this.state = 4900;
                    this.match(PostgreSqlParser.KW_TABLE);
                    this.state = 4902;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 614, this.context) ) {
                    case 1:
                        {
                        this.state = 4901;
                        this.ifExists();
                        }
                        break;
                    }
                    this.state = 4904;
                    this.relationExpr();
                    this.state = 4905;
                    this.match(PostgreSqlParser.KW_RENAME);
                    this.state = 4907;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 615, this.context) ) {
                    case 1:
                        {
                        this.state = 4906;
                        this.match(PostgreSqlParser.KW_COLUMN);
                        }
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_VIEW:
                    {
                    this.state = 4910;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 259) {
                        {
                        this.state = 4909;
                        this.match(PostgreSqlParser.KW_MATERIALIZED);
                        }
                    }

                    this.state = 4912;
                    this.match(PostgreSqlParser.KW_VIEW);
                    this.state = 4914;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 617, this.context) ) {
                    case 1:
                        {
                        this.state = 4913;
                        this.ifExists();
                        }
                        break;
                    }
                    this.state = 4916;
                    this.viewName();
                    this.state = 4917;
                    this.match(PostgreSqlParser.KW_RENAME);
                    this.state = 4919;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 618, this.context) ) {
                    case 1:
                        {
                        this.state = 4918;
                        this.match(PostgreSqlParser.KW_COLUMN);
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4923;
                this.columnName();
                this.state = 4924;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4925;
                this.columnNameCreate();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4927;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4935;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TABLE:
                    {
                    this.state = 4928;
                    this.match(PostgreSqlParser.KW_TABLE);
                    this.state = 4930;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 620, this.context) ) {
                    case 1:
                        {
                        this.state = 4929;
                        this.ifExists();
                        }
                        break;
                    }
                    this.state = 4932;
                    this.relationExpr();
                    }
                    break;
                case PostgreSqlParser.KW_DOMAIN:
                    {
                    this.state = 4933;
                    this.match(PostgreSqlParser.KW_DOMAIN);
                    this.state = 4934;
                    this.anyName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4937;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4938;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 4939;
                this.colId();
                this.state = 4940;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4941;
                this.colId();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4943;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4950;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_POLICY:
                    {
                    {
                    this.state = 4944;
                    this.match(PostgreSqlParser.KW_POLICY);
                    this.state = 4946;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 622, this.context) ) {
                    case 1:
                        {
                        this.state = 4945;
                        this.ifExists();
                        }
                        break;
                    }
                    }
                    }
                    break;
                case PostgreSqlParser.KW_RULE:
                    {
                    this.state = 4948;
                    this.match(PostgreSqlParser.KW_RULE);
                    }
                    break;
                case PostgreSqlParser.KW_TRIGGER:
                    {
                    this.state = 4949;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4952;
                this.colId();
                this.state = 4953;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4954;
                this.qualifiedName();
                this.state = 4955;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4956;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4957;
                this.colId();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4959;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4972;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 4960;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 4961;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 4962;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_PROCEDURAL:
                    {
                    this.state = 4964;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 4963;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 4966;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 4967;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 4968;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_SUBSCRIPTION:
                    {
                    this.state = 4969;
                    this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                    }
                    break;
                case PostgreSqlParser.KW_EVENT:
                    {
                    this.state = 4970;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 4971;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4974;
                this.colId();
                this.state = 4975;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4976;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4977;
                this.colId();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 4979;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4980;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 99 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4981;
                this.roleSpec();
                this.state = 4982;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4983;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4984;
                this.roleSpec();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 4986;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4987;
                this.optTableSpace();
                this.state = 4988;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4989;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4990;
                this.tableSpaceName();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 4992;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4993;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 4994;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 4995;
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4996;
                this.anyName();
                this.state = 4997;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4998;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4999;
                this.colId();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 5001;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5002;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 5003;
                this.anyName();
                this.state = 5004;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5005;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 5006;
                this.colId();
                this.state = 5007;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5008;
                this.colId();
                this.state = 5010;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 626, this.context) ) {
                case 1:
                    {
                    this.state = 5009;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterObjectDependsStmt(): AlterObjectDependsStmtContext {
        let localContext = new AlterObjectDependsStmtContext(this.context, this.state);
        this.enterRule(localContext, 428, PostgreSqlParser.RULE_alterObjectDependsStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5014;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5031;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 5015;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 5016;
                this.functionWithArgTypes();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 5017;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 5018;
                this.procedureWithArgTypes();
                }
                break;
            case PostgreSqlParser.KW_ROUTINE:
                {
                this.state = 5019;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 5020;
                this.routineWithArgTypes();
                }
                break;
            case PostgreSqlParser.KW_TRIGGER:
                {
                this.state = 5021;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 5022;
                this.colId();
                this.state = 5023;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 5024;
                this.qualifiedName();
                }
                break;
            case PostgreSqlParser.KW_MATERIALIZED:
                {
                this.state = 5026;
                this.match(PostgreSqlParser.KW_MATERIALIZED);
                this.state = 5027;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 5028;
                this.viewName();
                }
                break;
            case PostgreSqlParser.KW_INDEX:
                {
                this.state = 5029;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 5030;
                this.qualifiedName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 5034;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 269) {
                {
                this.state = 5033;
                this.match(PostgreSqlParser.KW_NO);
                }
            }

            this.state = 5036;
            this.match(PostgreSqlParser.KW_DEPENDS);
            this.state = 5037;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 5038;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 5039;
            this.colId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterObjectSchemaStmt(): AlterObjectSchemaStmtContext {
        let localContext = new AlterObjectSchemaStmtContext(this.context, this.state);
        this.enterRule(localContext, 430, PostgreSqlParser.RULE_alterObjectSchemaStmt);
        let _la: number;
        try {
            this.state = 5102;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 637, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5041;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5080;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 635, this.context) ) {
                case 1:
                    {
                    this.state = 5042;
                    this.match(PostgreSqlParser.KW_AGGREGATE);
                    this.state = 5043;
                    this.aggregateWithArgTypes();
                    }
                    break;
                case 2:
                    {
                    this.state = 5044;
                    this.match(PostgreSqlParser.KW_EXTENSION);
                    this.state = 5045;
                    this.colId();
                    }
                    break;
                case 3:
                    {
                    this.state = 5046;
                    this.match(PostgreSqlParser.KW_FUNCTION);
                    this.state = 5047;
                    this.functionWithArgTypes();
                    }
                    break;
                case 4:
                    {
                    this.state = 5048;
                    this.match(PostgreSqlParser.KW_OPERATOR);
                    this.state = 5049;
                    this.operatorWithArgTypes();
                    }
                    break;
                case 5:
                    {
                    this.state = 5050;
                    this.match(PostgreSqlParser.KW_OPERATOR);
                    this.state = 5051;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 206)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5052;
                    this.anyName();
                    this.state = 5053;
                    this.tableAccessMethodClause();
                    }
                    break;
                case 6:
                    {
                    this.state = 5055;
                    this.match(PostgreSqlParser.KW_PROCEDURE);
                    this.state = 5056;
                    this.procedureWithArgTypes();
                    }
                    break;
                case 7:
                    {
                    this.state = 5057;
                    this.match(PostgreSqlParser.KW_ROUTINE);
                    this.state = 5058;
                    this.routineWithArgTypes();
                    }
                    break;
                case 8:
                    {
                    this.state = 5059;
                    this.match(PostgreSqlParser.KW_SEQUENCE);
                    this.state = 5061;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 630, this.context) ) {
                    case 1:
                        {
                        this.state = 5060;
                        this.ifExists();
                        }
                        break;
                    }
                    this.state = 5063;
                    this.qualifiedName();
                    }
                    break;
                case 9:
                    {
                    this.state = 5065;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 259) {
                        {
                        this.state = 5064;
                        this.match(PostgreSqlParser.KW_MATERIALIZED);
                        }
                    }

                    this.state = 5067;
                    this.match(PostgreSqlParser.KW_VIEW);
                    this.state = 5069;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 632, this.context) ) {
                    case 1:
                        {
                        this.state = 5068;
                        this.ifExists();
                        }
                        break;
                    }
                    this.state = 5071;
                    this.viewName();
                    }
                    break;
                case 10:
                    {
                    this.state = 5073;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 63) {
                        {
                        this.state = 5072;
                        this.match(PostgreSqlParser.KW_FOREIGN);
                        }
                    }

                    this.state = 5075;
                    this.match(PostgreSqlParser.KW_TABLE);
                    this.state = 5077;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 634, this.context) ) {
                    case 1:
                        {
                        this.state = 5076;
                        this.ifExists();
                        }
                        break;
                    }
                    this.state = 5079;
                    this.relationExpr();
                    }
                    break;
                }
                this.state = 5082;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5083;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 5084;
                this.schemaName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5086;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5095;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TEXT:
                    {
                    this.state = 5087;
                    this.match(PostgreSqlParser.KW_TEXT);
                    this.state = 5088;
                    this.match(PostgreSqlParser.KW_SEARCH);
                    this.state = 5089;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case PostgreSqlParser.KW_COLLATION:
                    {
                    this.state = 5090;
                    this.match(PostgreSqlParser.KW_COLLATION);
                    }
                    break;
                case PostgreSqlParser.KW_CONVERSION:
                    {
                    this.state = 5091;
                    this.match(PostgreSqlParser.KW_CONVERSION);
                    }
                    break;
                case PostgreSqlParser.KW_DOMAIN:
                    {
                    this.state = 5092;
                    this.match(PostgreSqlParser.KW_DOMAIN);
                    }
                    break;
                case PostgreSqlParser.KW_STATISTICS:
                    {
                    this.state = 5093;
                    this.match(PostgreSqlParser.KW_STATISTICS);
                    }
                    break;
                case PostgreSqlParser.KW_TYPE:
                    {
                    this.state = 5094;
                    this.match(PostgreSqlParser.KW_TYPE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5097;
                this.anyName();
                this.state = 5098;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5099;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 5100;
                this.schemaName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterOperatorStmt(): AlterOperatorStmtContext {
        let localContext = new AlterOperatorStmtContext(this.context, this.state);
        this.enterRule(localContext, 432, PostgreSqlParser.RULE_alterOperatorStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5104;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5105;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 5106;
            this.operatorWithArgTypes();
            this.state = 5107;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 5108;
            this.operatorDefList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operatorDefList(): OperatorDefListContext {
        let localContext = new OperatorDefListContext(this.context, this.state);
        this.enterRule(localContext, 434, PostgreSqlParser.RULE_operatorDefList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5110;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5111;
            this.operatorDefElem();
            this.state = 5116;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5112;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5113;
                this.operatorDefElem();
                }
                }
                this.state = 5118;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5119;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operatorDefElem(): OperatorDefElemContext {
        let localContext = new OperatorDefElemContext(this.context, this.state);
        this.enterRule(localContext, 436, PostgreSqlParser.RULE_operatorDefElem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5121;
            this.colLabel();
            this.state = 5122;
            this.match(PostgreSqlParser.EQUAL);
            this.state = 5129;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 639, this.context) ) {
            case 1:
                {
                this.state = 5123;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            case 2:
                {
                this.state = 5124;
                this.funcType();
                }
                break;
            case 3:
                {
                this.state = 5125;
                this.reservedKeyword();
                }
                break;
            case 4:
                {
                this.state = 5126;
                this.qualAllOp();
                }
                break;
            case 5:
                {
                this.state = 5127;
                this.numericOnly();
                }
                break;
            case 6:
                {
                this.state = 5128;
                this.stringConst();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTypeStmt(): AlterTypeStmtContext {
        let localContext = new AlterTypeStmtContext(this.context, this.state);
        this.enterRule(localContext, 438, PostgreSqlParser.RULE_alterTypeStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5131;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5132;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 5133;
            this.anyName();
            this.state = 5134;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 5135;
            this.operatorDefList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterOwnerStmt(): AlterOwnerStmtContext {
        let localContext = new AlterOwnerStmtContext(this.context, this.state);
        this.enterRule(localContext, 440, PostgreSqlParser.RULE_alterOwnerStmt);
        let _la: number;
        try {
            this.state = 5211;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 644, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5137;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5138;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 5139;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5140;
                this.anyName();
                this.state = 5141;
                this.tableAccessMethodClause();
                this.state = 5142;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5143;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5144;
                this.roleSpec();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5146;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5173;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 641, this.context) ) {
                case 1:
                    {
                    this.state = 5147;
                    this.match(PostgreSqlParser.KW_AGGREGATE);
                    this.state = 5148;
                    this.aggregateWithArgTypes();
                    }
                    break;
                case 2:
                    {
                    this.state = 5149;
                    this.match(PostgreSqlParser.KW_DATABASE);
                    this.state = 5150;
                    this.databaseName();
                    }
                    break;
                case 3:
                    {
                    this.state = 5151;
                    this.match(PostgreSqlParser.KW_FUNCTION);
                    this.state = 5152;
                    this.functionWithArgTypes();
                    }
                    break;
                case 4:
                    {
                    this.state = 5154;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 5153;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 5156;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    this.state = 5157;
                    this.colId();
                    }
                    break;
                case 5:
                    {
                    this.state = 5158;
                    this.match(PostgreSqlParser.KW_LARGE);
                    this.state = 5159;
                    this.match(PostgreSqlParser.KW_OBJECT);
                    this.state = 5160;
                    this.numericOnly();
                    }
                    break;
                case 6:
                    {
                    this.state = 5161;
                    this.match(PostgreSqlParser.KW_LARGE);
                    this.state = 5162;
                    this.match(PostgreSqlParser.KW_OBJECT);
                    this.state = 5163;
                    this.numericOnly();
                    }
                    break;
                case 7:
                    {
                    this.state = 5164;
                    this.match(PostgreSqlParser.KW_OPERATOR);
                    this.state = 5165;
                    this.operatorWithArgTypes();
                    }
                    break;
                case 8:
                    {
                    this.state = 5166;
                    this.match(PostgreSqlParser.KW_PROCEDURE);
                    this.state = 5167;
                    this.procedureWithArgTypes();
                    }
                    break;
                case 9:
                    {
                    this.state = 5168;
                    this.match(PostgreSqlParser.KW_ROUTINE);
                    this.state = 5169;
                    this.routineWithArgTypes();
                    }
                    break;
                case 10:
                    {
                    this.state = 5170;
                    this.match(PostgreSqlParser.KW_SCHEMA);
                    this.state = 5171;
                    this.schemaName();
                    }
                    break;
                case 11:
                    {
                    this.state = 5172;
                    this.optTableSpace();
                    }
                    break;
                }
                this.state = 5175;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5176;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5177;
                this.roleSpec();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5179;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5188;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TEXT:
                    {
                    this.state = 5180;
                    this.match(PostgreSqlParser.KW_TEXT);
                    this.state = 5181;
                    this.match(PostgreSqlParser.KW_SEARCH);
                    this.state = 5182;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 163 || _la === 185)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case PostgreSqlParser.KW_COLLATION:
                    {
                    this.state = 5183;
                    this.match(PostgreSqlParser.KW_COLLATION);
                    }
                    break;
                case PostgreSqlParser.KW_CONVERSION:
                    {
                    this.state = 5184;
                    this.match(PostgreSqlParser.KW_CONVERSION);
                    }
                    break;
                case PostgreSqlParser.KW_DOMAIN:
                    {
                    this.state = 5185;
                    this.match(PostgreSqlParser.KW_DOMAIN);
                    }
                    break;
                case PostgreSqlParser.KW_TYPE:
                    {
                    this.state = 5186;
                    this.match(PostgreSqlParser.KW_TYPE);
                    }
                    break;
                case PostgreSqlParser.KW_STATISTICS:
                    {
                    this.state = 5187;
                    this.match(PostgreSqlParser.KW_STATISTICS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5190;
                this.anyName();
                this.state = 5191;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5192;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5193;
                this.roleSpec();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5195;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5204;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 5196;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    {
                    this.state = 5197;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 5198;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 5199;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_EVENT:
                    {
                    {
                    this.state = 5200;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 5201;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 5202;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SUBSCRIPTION:
                    {
                    this.state = 5203;
                    this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5206;
                this.colId();
                this.state = 5207;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5208;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5209;
                this.roleSpec();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createPublicationStmt(): CreatePublicationStmtContext {
        let localContext = new CreatePublicationStmtContext(this.context, this.state);
        this.enterRule(localContext, 442, PostgreSqlParser.RULE_createPublicationStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5213;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5214;
            this.match(PostgreSqlParser.KW_PUBLICATION);
            this.state = 5215;
            this.colId();
            this.state = 5222;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 645, this.context) ) {
            case 1:
                {
                this.state = 5216;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5217;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 5218;
                this.relationExprList();
                }
                break;
            case 2:
                {
                this.state = 5219;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5220;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 5221;
                this.match(PostgreSqlParser.KW_TABLES);
                }
                break;
            }
            this.state = 5225;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 646, this.context) ) {
            case 1:
                {
                this.state = 5224;
                this.optDefinition();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterPublicationStmt(): AlterPublicationStmtContext {
        let localContext = new AlterPublicationStmtContext(this.context, this.state);
        this.enterRule(localContext, 444, PostgreSqlParser.RULE_alterPublicationStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5227;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5228;
            this.match(PostgreSqlParser.KW_PUBLICATION);
            this.state = 5229;
            this.colId();
            this.state = 5247;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 648, this.context) ) {
            case 1:
                {
                {
                this.state = 5230;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5231;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5232;
                this.roleSpec();
                }
                }
                break;
            case 2:
                {
                {
                this.state = 5233;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5234;
                this.definition();
                }
                }
                break;
            case 3:
                {
                {
                this.state = 5235;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5236;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5237;
                this.colId();
                }
                }
                break;
            case 4:
                {
                this.state = 5238;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5239;
                this.publicationRelationExpr();
                this.state = 5244;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 5240;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5241;
                    this.publicationRelationExpr();
                    }
                    }
                    this.state = 5246;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createSubscriptionStmt(): CreateSubscriptionStmtContext {
        let localContext = new CreateSubscriptionStmtContext(this.context, this.state);
        this.enterRule(localContext, 446, PostgreSqlParser.RULE_createSubscriptionStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5249;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5250;
            this.match(PostgreSqlParser.KW_SUBSCRIPTION);
            this.state = 5251;
            this.colId();
            this.state = 5252;
            this.match(PostgreSqlParser.KW_CONNECTION);
            this.state = 5253;
            this.stringConst();
            this.state = 5254;
            this.match(PostgreSqlParser.KW_PUBLICATION);
            {
            this.state = 5255;
            this.colLabel();
            this.state = 5260;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5256;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5257;
                this.colLabel();
                }
                }
                this.state = 5262;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 5264;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 650, this.context) ) {
            case 1:
                {
                this.state = 5263;
                this.optDefinition();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterSubscriptionStmt(): AlterSubscriptionStmtContext {
        let localContext = new AlterSubscriptionStmtContext(this.context, this.state);
        this.enterRule(localContext, 448, PostgreSqlParser.RULE_alterSubscriptionStmt);
        let _la: number;
        try {
            this.state = 5322;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 654, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5266;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5267;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5268;
                this.colId();
                this.state = 5269;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5270;
                this.definition();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5272;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5273;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5274;
                this.colId();
                this.state = 5275;
                this.match(PostgreSqlParser.KW_CONNECTION);
                this.state = 5276;
                this.stringConst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5278;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5279;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5280;
                this.colId();
                this.state = 5281;
                this.match(PostgreSqlParser.KW_REFRESH);
                this.state = 5282;
                this.match(PostgreSqlParser.KW_PUBLICATION);
                this.state = 5284;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 651, this.context) ) {
                case 1:
                    {
                    this.state = 5283;
                    this.optDefinition();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5286;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5287;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5288;
                this.colId();
                this.state = 5289;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5290;
                this.match(PostgreSqlParser.KW_PUBLICATION);
                {
                this.state = 5291;
                this.colLabel();
                this.state = 5296;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 5292;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5293;
                    this.colLabel();
                    }
                    }
                    this.state = 5298;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                this.state = 5300;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 653, this.context) ) {
                case 1:
                    {
                    this.state = 5299;
                    this.optDefinition();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5302;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5303;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5304;
                this.colId();
                this.state = 5305;
                _la = this.tokenStream.LA(1);
                if(!(_la === 186 || _la === 193)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5307;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5308;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5309;
                this.colId();
                this.state = 5310;
                this.match(PostgreSqlParser.KW_SKIP);
                this.state = 5311;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5312;
                this.oldAggregateElem();
                this.state = 5313;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5315;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5316;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5317;
                this.colId();
                this.state = 5318;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5319;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5320;
                this.roleSpec();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ruleStmt(): RuleStmtContext {
        let localContext = new RuleStmtContext(this.context, this.state);
        this.enterRule(localContext, 450, PostgreSqlParser.RULE_ruleStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5324;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5326;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 5325;
                this.orReplaceOpt();
                }
            }

            this.state = 5328;
            this.match(PostgreSqlParser.KW_RULE);
            this.state = 5329;
            this.colId();
            this.state = 5330;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 5331;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 5332;
            _la = this.tokenStream.LA(1);
            if(!(_la === 88 || _la === 182 || _la === 241 || _la === 369)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5333;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 5334;
            this.qualifiedName();
            this.state = 5336;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 5335;
                this.whereClause();
                }
            }

            this.state = 5338;
            this.match(PostgreSqlParser.KW_DO);
            this.state = 5340;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 137 || _la === 242) {
                {
                this.state = 5339;
                _la = this.tokenStream.LA(1);
                if(!(_la === 137 || _la === 242)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 5358;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 661, this.context) ) {
            case 1:
                {
                this.state = 5342;
                this.match(PostgreSqlParser.KW_NOTHING);
                }
                break;
            case 2:
                {
                this.state = 5343;
                this.ruleActionStmt();
                }
                break;
            case 3:
                {
                this.state = 5344;
                this.match(PostgreSqlParser.OPEN_PAREN);
                {
                this.state = 5346;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2 || ((((_la - 88)) & ~0x1F) === 0 && ((1 << (_la - 88)) & 131089) !== 0) || _la === 182 || _la === 241 || _la === 271 || _la === 369 || _la === 422) {
                    {
                    this.state = 5345;
                    this.ruleActionStmt();
                    }
                }

                this.state = 5354;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 7) {
                    {
                    {
                    this.state = 5348;
                    this.match(PostgreSqlParser.SEMI);
                    this.state = 5350;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 2 || ((((_la - 88)) & ~0x1F) === 0 && ((1 << (_la - 88)) & 131089) !== 0) || _la === 182 || _la === 241 || _la === 271 || _la === 369 || _la === 422) {
                        {
                        this.state = 5349;
                        this.ruleActionStmt();
                        }
                    }

                    }
                    }
                    this.state = 5356;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                this.state = 5357;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ruleActionStmt(): RuleActionStmtContext {
        let localContext = new RuleActionStmtContext(this.context, this.state);
        this.enterRule(localContext, 452, PostgreSqlParser.RULE_ruleActionStmt);
        try {
            this.state = 5365;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 662, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5360;
                this.selectStmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5361;
                this.insertStmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5362;
                this.updateStmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5363;
                this.deleteStmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5364;
                this.notifyStmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notifyStmt(): NotifyStmtContext {
        let localContext = new NotifyStmtContext(this.context, this.state);
        this.enterRule(localContext, 454, PostgreSqlParser.RULE_notifyStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5367;
            this.match(PostgreSqlParser.KW_NOTIFY);
            this.state = 5368;
            this.colId();
            this.state = 5370;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 5369;
                this.notifyPayload();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notifyPayload(): NotifyPayloadContext {
        let localContext = new NotifyPayloadContext(this.context, this.state);
        this.enterRule(localContext, 456, PostgreSqlParser.RULE_notifyPayload);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5372;
            this.match(PostgreSqlParser.COMMA);
            this.state = 5373;
            this.stringConst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listenStmt(): ListenStmtContext {
        let localContext = new ListenStmtContext(this.context, this.state);
        this.enterRule(localContext, 458, PostgreSqlParser.RULE_listenStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5375;
            this.match(PostgreSqlParser.KW_LISTEN);
            this.state = 5376;
            this.colId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unListenStmt(): UnListenStmtContext {
        let localContext = new UnListenStmtContext(this.context, this.state);
        this.enterRule(localContext, 460, PostgreSqlParser.RULE_unListenStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5378;
            this.match(PostgreSqlParser.KW_UNLISTEN);
            this.state = 5381;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 5379;
                this.colId();
                }
                break;
            case PostgreSqlParser.STAR:
                {
                this.state = 5380;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionStmt(): TransactionStmtContext {
        let localContext = new TransactionStmtContext(this.context, this.state);
        this.enterRule(localContext, 462, PostgreSqlParser.RULE_transactionStmt);
        let _la: number;
        try {
            this.state = 5428;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 674, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5383;
                this.match(PostgreSqlParser.KW_BEGIN);
                this.state = 5385;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 665, this.context) ) {
                case 1:
                    {
                    this.state = 5384;
                    this.optTransaction();
                    }
                    break;
                }
                this.state = 5388;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 666, this.context) ) {
                case 1:
                    {
                    this.state = 5387;
                    this.transactionModeList();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5390;
                this.match(PostgreSqlParser.KW_START);
                this.state = 5391;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 5393;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 667, this.context) ) {
                case 1:
                    {
                    this.state = 5392;
                    this.transactionModeList();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5395;
                this.match(PostgreSqlParser.KW_SAVEPOINT);
                this.state = 5396;
                this.colId();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5397;
                this.match(PostgreSqlParser.KW_RELEASE);
                this.state = 5399;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 668, this.context) ) {
                case 1:
                    {
                    this.state = 5398;
                    this.match(PostgreSqlParser.KW_SAVEPOINT);
                    }
                    break;
                }
                this.state = 5401;
                this.colId();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5402;
                this.match(PostgreSqlParser.KW_PREPARE);
                this.state = 5403;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 5404;
                this.stringConst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5405;
                _la = this.tokenStream.LA(1);
                if(!(_la === 161 || _la === 319)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5406;
                this.match(PostgreSqlParser.KW_PREPARED);
                this.state = 5407;
                this.stringConst();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5408;
                _la = this.tokenStream.LA(1);
                if(!(_la === 129 || _la === 161 || _la === 319 || _la === 454)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5410;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 669, this.context) ) {
                case 1:
                    {
                    this.state = 5409;
                    this.optTransaction();
                    }
                    break;
                }
                this.state = 5417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33) {
                    {
                    this.state = 5412;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 5414;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 5413;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 5416;
                    this.match(PostgreSqlParser.KW_CHAIN);
                    }
                }

                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5419;
                this.match(PostgreSqlParser.KW_ROLLBACK);
                this.state = 5421;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 356 || _la === 380) {
                    {
                    this.state = 5420;
                    this.optTransaction();
                    }
                }

                this.state = 5423;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5425;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 673, this.context) ) {
                case 1:
                    {
                    this.state = 5424;
                    this.match(PostgreSqlParser.KW_SAVEPOINT);
                    }
                    break;
                }
                this.state = 5427;
                this.colId();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optTransaction(): OptTransactionContext {
        let localContext = new OptTransactionContext(this.context, this.state);
        this.enterRule(localContext, 464, PostgreSqlParser.RULE_optTransaction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5430;
            _la = this.tokenStream.LA(1);
            if(!(_la === 356 || _la === 380)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionModeItem(): TransactionModeItemContext {
        let localContext = new TransactionModeItemContext(this.context, this.state);
        this.enterRule(localContext, 466, PostgreSqlParser.RULE_transactionModeItem);
        let _la: number;
        try {
            this.state = 5441;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ISOLATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5432;
                this.match(PostgreSqlParser.KW_ISOLATION);
                this.state = 5433;
                this.match(PostgreSqlParser.KW_LEVEL);
                this.state = 5434;
                this.isoLevel();
                }
                break;
            case PostgreSqlParser.KW_READ:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5435;
                this.match(PostgreSqlParser.KW_READ);
                this.state = 5436;
                _la = this.tokenStream.LA(1);
                if(!(_la === 81 || _la === 382)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_DEFERRABLE:
            case PostgreSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5438;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 5437;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 5440;
                this.match(PostgreSqlParser.KW_DEFERRABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionModeList(): TransactionModeListContext {
        let localContext = new TransactionModeListContext(this.context, this.state);
        this.enterRule(localContext, 468, PostgreSqlParser.RULE_transactionModeList);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5443;
            this.transactionModeItem();
            this.state = 5450;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 678, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5445;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 6) {
                        {
                        this.state = 5444;
                        this.match(PostgreSqlParser.COMMA);
                        }
                    }

                    this.state = 5447;
                    this.transactionModeItem();
                    }
                    }
                }
                this.state = 5452;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 678, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewStmt(): ViewStmtContext {
        let localContext = new ViewStmtContext(this.context, this.state);
        this.enterRule(localContext, 470, PostgreSqlParser.RULE_viewStmt);
        let _la: number;
        try {
            localContext = new CreateViewContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5453;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5456;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 5454;
                this.match(PostgreSqlParser.KW_OR);
                this.state = 5455;
                this.match(PostgreSqlParser.KW_REPLACE);
                }
            }

            this.state = 5459;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 5458;
                this.optTemp();
                }
            }

            this.state = 5476;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_VIEW:
                {
                this.state = 5461;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 5462;
                this.viewNameCreate();
                this.state = 5464;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5463;
                    this.columnListCreate();
                    }
                }

                this.state = 5467;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 5466;
                    this.optRelOptions();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_RECURSIVE:
                {
                this.state = 5469;
                this.match(PostgreSqlParser.KW_RECURSIVE);
                this.state = 5470;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 5471;
                this.viewNameCreate();
                this.state = 5472;
                this.optColumnList();
                this.state = 5474;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 5473;
                    this.optRelOptions();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 5478;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 5479;
            this.selectStmt();
            this.state = 5486;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 686, this.context) ) {
            case 1:
                {
                this.state = 5480;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 5482;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151 || _la === 254) {
                    {
                    this.state = 5481;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 151 || _la === 254)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 5484;
                this.match(PostgreSqlParser.KW_CHECK);
                this.state = 5485;
                this.match(PostgreSqlParser.KW_OPTION);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadStmt(): LoadStmtContext {
        let localContext = new LoadStmtContext(this.context, this.state);
        this.enterRule(localContext, 472, PostgreSqlParser.RULE_loadStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5488;
            this.match(PostgreSqlParser.KW_LOAD);
            this.state = 5489;
            this.stringConst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDbStmt(): CreateDbStmtContext {
        let localContext = new CreateDbStmtContext(this.context, this.state);
        this.enterRule(localContext, 474, PostgreSqlParser.RULE_createDbStmt);
        try {
            let alternative: number;
            localContext = new CreateDatabaseContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5491;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5492;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 5493;
            this.databaseNameCreate();
            this.state = 5495;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 687, this.context) ) {
            case 1:
                {
                this.state = 5494;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 5502;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 689, this.context) ) {
            case 1:
                {
                this.state = 5498;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 5497;
                        this.createDbOptItem();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 5500;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 688, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDbOptItem(): CreateDbOptItemContext {
        let localContext = new CreateDbOptItemContext(this.context, this.state);
        this.enterRule(localContext, 476, PostgreSqlParser.RULE_createDbOptItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5512;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 690, this.context) ) {
            case 1:
                {
                this.state = 5504;
                this.match(PostgreSqlParser.KW_CONNECTION);
                this.state = 5505;
                this.match(PostgreSqlParser.KW_LIMIT);
                }
                break;
            case 2:
                {
                this.state = 5506;
                this.match(PostgreSqlParser.KW_ENCODING);
                }
                break;
            case 3:
                {
                this.state = 5507;
                this.match(PostgreSqlParser.KW_LOCATION);
                }
                break;
            case 4:
                {
                this.state = 5508;
                this.match(PostgreSqlParser.KW_OWNER);
                }
                break;
            case 5:
                {
                this.state = 5509;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                }
                break;
            case 6:
                {
                this.state = 5510;
                this.match(PostgreSqlParser.KW_TEMPLATE);
                }
                break;
            case 7:
                {
                this.state = 5511;
                this.identifier();
                }
                break;
            }
            this.state = 5515;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 5514;
                this.match(PostgreSqlParser.EQUAL);
                }
            }

            this.state = 5520;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 692, this.context) ) {
            case 1:
                {
                this.state = 5517;
                this.signedConst();
                }
                break;
            case 2:
                {
                this.state = 5518;
                this.booleanOrString();
                }
                break;
            case 3:
                {
                this.state = 5519;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabaseStmt(): AlterDatabaseStmtContext {
        let localContext = new AlterDatabaseStmtContext(this.context, this.state);
        this.enterRule(localContext, 478, PostgreSqlParser.RULE_alterDatabaseStmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5522;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5523;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 5524;
            this.databaseName();
            this.state = 5540;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 697, this.context) ) {
            case 1:
                {
                this.state = 5528;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 693, this.context) ) {
                case 1:
                    {
                    this.state = 5525;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 5526;
                    this.match(PostgreSqlParser.KW_TABLESPACE);
                    this.state = 5527;
                    this.tableSpaceName();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 5538;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 696, this.context) ) {
                case 1:
                    {
                    this.state = 5531;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 105) {
                        {
                        this.state = 5530;
                        this.match(PostgreSqlParser.KW_WITH);
                        }
                    }

                    this.state = 5534;
                    this.errorHandler.sync(this);
                    alternative = 1;
                    do {
                        switch (alternative) {
                        case 1:
                            {
                            {
                            this.state = 5533;
                            this.createDbOptItem();
                            }
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        this.state = 5536;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 695, this.context);
                    } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabaseSetStmt(): AlterDatabaseSetStmtContext {
        let localContext = new AlterDatabaseSetStmtContext(this.context, this.state);
        this.enterRule(localContext, 480, PostgreSqlParser.RULE_alterDatabaseSetStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5542;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5543;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 5544;
            this.databaseName();
            this.state = 5546;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 698, this.context) ) {
            case 1:
                {
                this.state = 5545;
                this.setOrResetClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterCollationStmt(): AlterCollationStmtContext {
        let localContext = new AlterCollationStmtContext(this.context, this.state);
        this.enterRule(localContext, 482, PostgreSqlParser.RULE_alterCollationStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5548;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5549;
            this.match(PostgreSqlParser.KW_COLLATION);
            this.state = 5550;
            this.anyName();
            this.state = 5551;
            this.match(PostgreSqlParser.KW_REFRESH);
            this.state = 5552;
            this.match(PostgreSqlParser.KW_VERSION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterSystemStmt(): AlterSystemStmtContext {
        let localContext = new AlterSystemStmtContext(this.context, this.state);
        this.enterRule(localContext, 484, PostgreSqlParser.RULE_alterSystemStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5554;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5555;
            this.match(PostgreSqlParser.KW_SYSTEM);
            this.state = 5556;
            _la = this.tokenStream.LA(1);
            if(!(_la === 313 || _la === 333)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5557;
            this.genericSet();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDomainStmt(): CreateDomainStmtContext {
        let localContext = new CreateDomainStmtContext(this.context, this.state);
        this.enterRule(localContext, 486, PostgreSqlParser.RULE_createDomainStmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5559;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5560;
            this.match(PostgreSqlParser.KW_DOMAIN);
            this.state = 5561;
            this.anyName();
            this.state = 5563;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 5562;
                this.match(PostgreSqlParser.KW_AS);
                }
            }

            this.state = 5565;
            this.typename();
            this.state = 5569;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 700, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5566;
                    this.colConstraint();
                    }
                    }
                }
                this.state = 5571;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 700, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDomainStmt(): AlterDomainStmtContext {
        let localContext = new AlterDomainStmtContext(this.context, this.state);
        this.enterRule(localContext, 488, PostgreSqlParser.RULE_alterDomainStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5572;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5573;
            this.match(PostgreSqlParser.KW_DOMAIN);
            this.state = 5574;
            this.anyName();
            this.state = 5597;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 704, this.context) ) {
            case 1:
                {
                this.state = 5575;
                this.alterColumnDefault();
                }
                break;
            case 2:
                {
                this.state = 5576;
                _la = this.tokenStream.LA(1);
                if(!(_la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5577;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 5578;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 3:
                {
                this.state = 5579;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 5582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 5580;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 5581;
                    this.colId();
                    }
                }

                this.state = 5584;
                this.constraintElem();
                }
                break;
            case 4:
                {
                this.state = 5585;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 5586;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 5588;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 702, this.context) ) {
                case 1:
                    {
                    this.state = 5587;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 5590;
                this.colId();
                this.state = 5592;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 703, this.context) ) {
                case 1:
                    {
                    this.state = 5591;
                    this.optDropBehavior();
                    }
                    break;
                }
                }
                break;
            case 5:
                {
                this.state = 5594;
                this.match(PostgreSqlParser.KW_VALIDATE);
                this.state = 5595;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 5596;
                this.colId();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterSearchDictionaryStmt(): AlterSearchDictionaryStmtContext {
        let localContext = new AlterSearchDictionaryStmtContext(this.context, this.state);
        this.enterRule(localContext, 490, PostgreSqlParser.RULE_alterSearchDictionaryStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5599;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5600;
            this.match(PostgreSqlParser.KW_TEXT);
            this.state = 5601;
            this.match(PostgreSqlParser.KW_SEARCH);
            this.state = 5602;
            this.match(PostgreSqlParser.KW_DICTIONARY);
            this.state = 5603;
            this.anyName();
            this.state = 5604;
            this.definition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterSearchConfigurationStmt(): AlterSearchConfigurationStmtContext {
        let localContext = new AlterSearchConfigurationStmtContext(this.context, this.state);
        this.enterRule(localContext, 492, PostgreSqlParser.RULE_alterSearchConfigurationStmt);
        let _la: number;
        try {
            this.state = 5647;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 707, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5606;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5607;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5608;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5609;
                this.match(PostgreSqlParser.KW_CONFIGURATION);
                this.state = 5610;
                this.anyName();
                this.state = 5611;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 138)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5612;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 5613;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5614;
                this.nameList();
                this.state = 5615;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 5616;
                this.anyNameList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5618;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5619;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5620;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5621;
                this.match(PostgreSqlParser.KW_CONFIGURATION);
                this.state = 5622;
                this.anyName();
                this.state = 5623;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5624;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 5627;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 5625;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 5626;
                    this.nameList();
                    }
                }

                this.state = 5629;
                this.match(PostgreSqlParser.KW_REPLACE);
                this.state = 5630;
                this.anyName();
                this.state = 5631;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 5632;
                this.anyName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5634;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5635;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5636;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5637;
                this.match(PostgreSqlParser.KW_CONFIGURATION);
                this.state = 5638;
                this.anyName();
                this.state = 5639;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 5640;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 5642;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 5641;
                    this.ifExists();
                    }
                }

                this.state = 5644;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5645;
                this.nameList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createConversionStmt(): CreateConversionStmtContext {
        let localContext = new CreateConversionStmtContext(this.context, this.state);
        this.enterRule(localContext, 494, PostgreSqlParser.RULE_createConversionStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5649;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5651;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 5650;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
            }

            this.state = 5653;
            this.match(PostgreSqlParser.KW_CONVERSION);
            this.state = 5654;
            this.anyName();
            this.state = 5655;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 5656;
            this.stringConst();
            this.state = 5657;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 5658;
            this.stringConst();
            this.state = 5659;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 5660;
            this.anyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterStmt(): ClusterStmtContext {
        let localContext = new ClusterStmtContext(this.context, this.state);
        this.enterRule(localContext, 496, PostgreSqlParser.RULE_clusterStmt);
        let _la: number;
        try {
            this.state = 5687;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 714, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5662;
                this.match(PostgreSqlParser.KW_CLUSTER);
                this.state = 5664;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 5663;
                    this.optVerbose();
                    }
                }

                this.state = 5670;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 711, this.context) ) {
                case 1:
                    {
                    this.state = 5666;
                    this.tableName();
                    this.state = 5668;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 5667;
                        this.tableAccessMethodClause();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5672;
                this.match(PostgreSqlParser.KW_CLUSTER);
                this.state = 5673;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5674;
                this.optVerbose();
                this.state = 5679;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 5675;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5676;
                    this.optVerbose();
                    }
                    }
                    this.state = 5681;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5682;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 5683;
                this.tableName();
                this.state = 5685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 5684;
                    this.tableAccessMethodClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuumStmt(): VacuumStmtContext {
        let localContext = new VacuumStmtContext(this.context, this.state);
        this.enterRule(localContext, 498, PostgreSqlParser.RULE_vacuumStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5689;
            this.match(PostgreSqlParser.KW_VACUUM);
            this.state = 5705;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 720, this.context) ) {
            case 1:
                {
                {
                this.state = 5691;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 113) {
                    {
                    this.state = 5690;
                    this.match(PostgreSqlParser.KW_FULL);
                    }
                }

                this.state = 5694;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 112) {
                    {
                    this.state = 5693;
                    this.match(PostgreSqlParser.KW_FREEZE);
                    }
                }

                this.state = 5697;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 5696;
                    this.optVerbose();
                    }
                }

                this.state = 5700;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 718, this.context) ) {
                case 1:
                    {
                    this.state = 5699;
                    this.analyzeKeyword();
                    }
                    break;
                }
                }
                }
                break;
            case 2:
                {
                this.state = 5703;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 719, this.context) ) {
                case 1:
                    {
                    this.state = 5702;
                    this.explainOptionList();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 5708;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 721, this.context) ) {
            case 1:
                {
                this.state = 5707;
                this.vacuumRelationList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzeStmt(): AnalyzeStmtContext {
        let localContext = new AnalyzeStmtContext(this.context, this.state);
        this.enterRule(localContext, 500, PostgreSqlParser.RULE_analyzeStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5710;
            this.analyzeKeyword();
            this.state = 5725;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 724, this.context) ) {
            case 1:
                {
                this.state = 5712;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 5711;
                    this.optVerbose();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 5714;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5715;
                this.analyzeOptionElem();
                this.state = 5720;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 5716;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5717;
                    this.analyzeOptionElem();
                    }
                    }
                    this.state = 5722;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5723;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 5728;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 725, this.context) ) {
            case 1:
                {
                this.state = 5727;
                this.vacuumRelationList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzeKeyword(): AnalyzeKeywordContext {
        let localContext = new AnalyzeKeywordContext(this.context, this.state);
        this.enterRule(localContext, 502, PostgreSqlParser.RULE_analyzeKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5730;
            _la = this.tokenStream.LA(1);
            if(!(_la === 31 || _la === 32)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacAnalyzeOptionElem(): VacAnalyzeOptionElemContext {
        let localContext = new VacAnalyzeOptionElemContext(this.context, this.state);
        this.enterRule(localContext, 504, PostgreSqlParser.RULE_vacAnalyzeOptionElem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5734;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 5732;
                this.nonReservedWord();
                }
                break;
            case PostgreSqlParser.KW_ANALYSE:
            case PostgreSqlParser.KW_ANALYZE:
                {
                this.state = 5733;
                this.analyzeKeyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 5738;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 5736;
                this.booleanOrString();
                }
                break;
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
                {
                this.state = 5737;
                this.numericOnly();
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.COMMA:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzeOptionElem(): AnalyzeOptionElemContext {
        let localContext = new AnalyzeOptionElemContext(this.context, this.state);
        this.enterRule(localContext, 506, PostgreSqlParser.RULE_analyzeOptionElem);
        let _la: number;
        try {
            this.state = 5749;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_SKIP_LOCKED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5740;
                _la = this.tokenStream.LA(1);
                if(!(_la === 128 || _la === 547)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5742;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 60 || _la === 96) {
                    {
                    this.state = 5741;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 60 || _la === 96)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5744;
                this.match(PostgreSqlParser.KW_BUFFER_USAGE_LIMIT);
                this.state = 5747;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.PLUS:
                case PostgreSqlParser.MINUS:
                case PostgreSqlParser.Integral:
                case PostgreSqlParser.Numeric:
                    {
                    this.state = 5745;
                    this.numericOnly();
                    }
                    break;
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 5746;
                    this.stringConst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optVerbose(): OptVerboseContext {
        let localContext = new OptVerboseContext(this.context, this.state);
        this.enterRule(localContext, 508, PostgreSqlParser.RULE_optVerbose);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5751;
            this.match(PostgreSqlParser.KW_VERBOSE);
            this.state = 5753;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 60 || _la === 96) {
                {
                this.state = 5752;
                _la = this.tokenStream.LA(1);
                if(!(_la === 60 || _la === 96)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuumRelation(): VacuumRelationContext {
        let localContext = new VacuumRelationContext(this.context, this.state);
        this.enterRule(localContext, 510, PostgreSqlParser.RULE_vacuumRelation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5755;
            this.tableName();
            this.state = 5757;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 732, this.context) ) {
            case 1:
                {
                this.state = 5756;
                this.optColumnList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuumRelationList(): VacuumRelationListContext {
        let localContext = new VacuumRelationListContext(this.context, this.state);
        this.enterRule(localContext, 512, PostgreSqlParser.RULE_vacuumRelationList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5759;
            this.vacuumRelation();
            this.state = 5764;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5760;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5761;
                this.vacuumRelation();
                }
                }
                this.state = 5766;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStmt(): ExplainStmtContext {
        let localContext = new ExplainStmtContext(this.context, this.state);
        this.enterRule(localContext, 514, PostgreSqlParser.RULE_explainStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5767;
            this.match(PostgreSqlParser.KW_EXPLAIN);
            this.state = 5778;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 737, this.context) ) {
            case 1:
                {
                this.state = 5768;
                this.explainOptionList();
                }
                break;
            case 2:
                {
                this.state = 5770;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 5769;
                    this.match(PostgreSqlParser.KW_VERBOSE);
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 5776;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31 || _la === 32) {
                    {
                    this.state = 5772;
                    this.analyzeKeyword();
                    this.state = 5774;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 128) {
                        {
                        this.state = 5773;
                        this.optVerbose();
                        }
                    }

                    }
                }

                }
                break;
            }
            this.state = 5780;
            this.explainableStmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainableStmt(): ExplainableStmtContext {
        let localContext = new ExplainableStmtContext(this.context, this.state);
        this.enterRule(localContext, 516, PostgreSqlParser.RULE_explainableStmt);
        try {
            this.state = 5791;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 738, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5782;
                this.selectStmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5783;
                this.insertStmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5784;
                this.updateStmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5785;
                this.deleteStmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5786;
                this.declareCursorStmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5787;
                this.createAsStmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5788;
                this.createMaterializedViewStmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5789;
                this.refreshMaterializedViewStmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5790;
                this.executeStmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainOptionList(): ExplainOptionListContext {
        let localContext = new ExplainOptionListContext(this.context, this.state);
        this.enterRule(localContext, 518, PostgreSqlParser.RULE_explainOptionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5793;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5794;
            this.vacAnalyzeOptionElem();
            this.state = 5799;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5795;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5796;
                this.vacAnalyzeOptionElem();
                }
                }
                this.state = 5801;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5802;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prepareStmt(): PrepareStmtContext {
        let localContext = new PrepareStmtContext(this.context, this.state);
        this.enterRule(localContext, 520, PostgreSqlParser.RULE_prepareStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5804;
            this.match(PostgreSqlParser.KW_PREPARE);
            this.state = 5805;
            this.colId();
            this.state = 5807;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 5806;
                this.prepTypeClause();
                }
            }

            this.state = 5809;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 5810;
            this.preParableStmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prepTypeClause(): PrepTypeClauseContext {
        let localContext = new PrepTypeClauseContext(this.context, this.state);
        this.enterRule(localContext, 522, PostgreSqlParser.RULE_prepTypeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5812;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5813;
            this.typename();
            this.state = 5818;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5814;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5815;
                this.typename();
                }
                }
                this.state = 5820;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5821;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preParableStmt(): PreParableStmtContext {
        let localContext = new PreParableStmtContext(this.context, this.state);
        this.enterRule(localContext, 524, PostgreSqlParser.RULE_preParableStmt);
        try {
            this.state = 5828;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 742, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5823;
                this.selectStmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5824;
                this.insertStmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5825;
                this.updateStmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5826;
                this.deleteStmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5827;
                this.mergeStmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executeStmt(): ExecuteStmtContext {
        let localContext = new ExecuteStmtContext(this.context, this.state);
        this.enterRule(localContext, 526, PostgreSqlParser.RULE_executeStmt);
        let _la: number;
        try {
            this.state = 5853;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_EXECUTE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5830;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 5831;
                this.colId();
                this.state = 5833;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 743, this.context) ) {
                case 1:
                    {
                    this.state = 5832;
                    this.executeParamClause();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_CREATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5835;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 5837;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                    {
                    this.state = 5836;
                    this.optTemp();
                    }
                }

                this.state = 5839;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 5841;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 745, this.context) ) {
                case 1:
                    {
                    this.state = 5840;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 5843;
                this.createAsTarget();
                this.state = 5844;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 5845;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 5846;
                this.colId();
                this.state = 5848;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 746, this.context) ) {
                case 1:
                    {
                    this.state = 5847;
                    this.executeParamClause();
                    }
                    break;
                }
                this.state = 5851;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 747, this.context) ) {
                case 1:
                    {
                    this.state = 5850;
                    this.optWithData();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executeParamClause(): ExecuteParamClauseContext {
        let localContext = new ExecuteParamClauseContext(this.context, this.state);
        this.enterRule(localContext, 528, PostgreSqlParser.RULE_executeParamClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5855;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5856;
            this.exprList();
            this.state = 5857;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dealLocateStmt(): DealLocateStmtContext {
        let localContext = new DealLocateStmtContext(this.context, this.state);
        this.enterRule(localContext, 530, PostgreSqlParser.RULE_dealLocateStmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5859;
            this.match(PostgreSqlParser.KW_DEALLOCATE);
            this.state = 5861;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 749, this.context) ) {
            case 1:
                {
                this.state = 5860;
                this.match(PostgreSqlParser.KW_PREPARE);
                }
                break;
            }
            this.state = 5865;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 5863;
                this.colId();
                }
                break;
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 5864;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStmt(): InsertStmtContext {
        let localContext = new InsertStmtContext(this.context, this.state);
        this.enterRule(localContext, 532, PostgreSqlParser.RULE_insertStmt);
        let _la: number;
        try {
            localContext = new InsertStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5868;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 5867;
                this.withClause();
                }
            }

            this.state = 5870;
            this.match(PostgreSqlParser.KW_INSERT);
            this.state = 5871;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 5872;
            this.tableName();
            this.state = 5875;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 5873;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 5874;
                this.colId();
                }
            }

            this.state = 5877;
            this.insertRest();
            this.state = 5899;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 5878;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 5879;
                this.match(PostgreSqlParser.KW_CONFLICT);
                this.state = 5887;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 5880;
                    this.indexParams();
                    this.state = 5882;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 103) {
                        {
                        this.state = 5881;
                        this.whereClause();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_ON:
                    {
                    this.state = 5884;
                    this.match(PostgreSqlParser.KW_ON);
                    this.state = 5885;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 5886;
                    this.colId();
                    }
                    break;
                case PostgreSqlParser.KW_DO:
                    break;
                default:
                    break;
                }
                this.state = 5889;
                this.match(PostgreSqlParser.KW_DO);
                this.state = 5897;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_UPDATE:
                    {
                    this.state = 5890;
                    this.match(PostgreSqlParser.KW_UPDATE);
                    this.state = 5891;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 5892;
                    this.setClauseList();
                    this.state = 5894;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 103) {
                        {
                        this.state = 5893;
                        this.whereClause();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_NOTHING:
                    {
                    this.state = 5896;
                    this.match(PostgreSqlParser.KW_NOTHING);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            this.state = 5902;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 5901;
                this.returningClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertRest(): InsertRestContext {
        let localContext = new InsertRestContext(this.context, this.state);
        this.enterRule(localContext, 534, PostgreSqlParser.RULE_insertRest);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5908;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 759, this.context) ) {
            case 1:
                {
                this.state = 5904;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5905;
                this.insertColumnList();
                this.state = 5906;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 5913;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 463) {
                {
                this.state = 5910;
                this.match(PostgreSqlParser.KW_OVERRIDING);
                this.state = 5911;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 349)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5912;
                this.match(PostgreSqlParser.KW_VALUE);
                }
            }

            this.state = 5917;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 761, this.context) ) {
            case 1:
                {
                this.state = 5915;
                this.defaultValuesOrValues();
                }
                break;
            case 2:
                {
                this.state = 5916;
                this.selectStmt();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertColumnList(): InsertColumnListContext {
        let localContext = new InsertColumnListContext(this.context, this.state);
        this.enterRule(localContext, 536, PostgreSqlParser.RULE_insertColumnList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5919;
            this.insertColumnItem();
            this.state = 5924;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5920;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5921;
                this.insertColumnItem();
                }
                }
                this.state = 5926;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertColumnItem(): InsertColumnItemContext {
        let localContext = new InsertColumnItemContext(this.context, this.state);
        this.enterRule(localContext, 538, PostgreSqlParser.RULE_insertColumnItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5927;
            this.columnName();
            this.state = 5928;
            this.optIndirection();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returningClause(): ReturningClauseContext {
        let localContext = new ReturningClauseContext(this.context, this.state);
        this.enterRule(localContext, 540, PostgreSqlParser.RULE_returningClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5930;
            this.match(PostgreSqlParser.KW_RETURNING);
            this.state = 5931;
            this.targetList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteStmt(): DeleteStmtContext {
        let localContext = new DeleteStmtContext(this.context, this.state);
        this.enterRule(localContext, 542, PostgreSqlParser.RULE_deleteStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5934;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 5933;
                this.withClause();
                }
            }

            this.state = 5936;
            this.match(PostgreSqlParser.KW_DELETE);
            this.state = 5937;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 5938;
            this.relationExprOptAlias();
            this.state = 5941;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 5939;
                this.match(PostgreSqlParser.KW_USING);
                this.state = 5940;
                this.fromList();
                }
            }

            this.state = 5944;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 5943;
                this.whereOrCurrentClause();
                }
            }

            this.state = 5947;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 5946;
                this.returningClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockStmt(): LockStmtContext {
        let localContext = new LockStmtContext(this.context, this.state);
        this.enterRule(localContext, 544, PostgreSqlParser.RULE_lockStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5949;
            this.match(PostgreSqlParser.KW_LOCK);
            this.state = 5951;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92) {
                {
                this.state = 5950;
                this.match(PostgreSqlParser.KW_TABLE);
                }
            }

            this.state = 5953;
            this.relationExprList();
            this.state = 5968;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 68) {
                {
                this.state = 5954;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 5965;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ROW:
                    {
                    this.state = 5955;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 131 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5956;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 201 || _la === 334)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case PostgreSqlParser.KW_SHARE:
                    {
                    this.state = 5957;
                    this.match(PostgreSqlParser.KW_SHARE);
                    this.state = 5962;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_UPDATE:
                        {
                        this.state = 5958;
                        this.match(PostgreSqlParser.KW_UPDATE);
                        this.state = 5959;
                        this.match(PostgreSqlParser.KW_EXCLUSIVE);
                        }
                        break;
                    case PostgreSqlParser.KW_ROW:
                        {
                        this.state = 5960;
                        this.match(PostgreSqlParser.KW_ROW);
                        this.state = 5961;
                        this.match(PostgreSqlParser.KW_EXCLUSIVE);
                        }
                        break;
                    case PostgreSqlParser.KW_MODE:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.KW_EXCLUSIVE:
                    {
                    this.state = 5964;
                    this.match(PostgreSqlParser.KW_EXCLUSIVE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5967;
                this.match(PostgreSqlParser.KW_MODE);
                }
            }

            this.state = 5971;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 771, this.context) ) {
            case 1:
                {
                this.state = 5970;
                this.match(PostgreSqlParser.KW_NOWAIT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateStmt(): UpdateStmtContext {
        let localContext = new UpdateStmtContext(this.context, this.state);
        this.enterRule(localContext, 546, PostgreSqlParser.RULE_updateStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5974;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 5973;
                this.withClause();
                }
            }

            this.state = 5976;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 5977;
            this.relationExprOptAlias();
            this.state = 5978;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 5979;
            this.setClauseList();
            this.state = 5981;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64) {
                {
                this.state = 5980;
                this.fromClause();
                }
            }

            this.state = 5984;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 5983;
                this.whereOrCurrentClause();
                }
            }

            this.state = 5987;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 5986;
                this.returningClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setClauseList(): SetClauseListContext {
        let localContext = new SetClauseListContext(this.context, this.state);
        this.enterRule(localContext, 548, PostgreSqlParser.RULE_setClauseList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5989;
            this.setClause();
            this.state = 5994;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5990;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5991;
                this.setClause();
                }
                }
                this.state = 5996;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setClause(): SetClauseContext {
        let localContext = new SetClauseContext(this.context, this.state);
        this.enterRule(localContext, 550, PostgreSqlParser.RULE_setClause);
        try {
            this.state = 6015;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 779, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5997;
                this.insertColumnItem();
                this.state = 5998;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 5999;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6001;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6002;
                this.insertColumnList();
                this.state = 6003;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6004;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 6013;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 778, this.context) ) {
                case 1:
                    {
                    this.state = 6006;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 777, this.context) ) {
                    case 1:
                        {
                        this.state = 6005;
                        this.match(PostgreSqlParser.KW_ROW);
                        }
                        break;
                    }
                    this.state = 6008;
                    this.expression();
                    }
                    break;
                case 2:
                    {
                    this.state = 6009;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6010;
                    this.selectClause();
                    this.state = 6011;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declareCursorStmt(): DeclareCursorStmtContext {
        let localContext = new DeclareCursorStmtContext(this.context, this.state);
        this.enterRule(localContext, 552, PostgreSqlParser.RULE_declareCursorStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6017;
            this.match(PostgreSqlParser.KW_DECLARE);
            this.state = 6018;
            this.colId();
            {
            this.state = 6027;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 107 || _la === 240 || _la === 269 || _la === 324) {
                {
                this.state = 6025;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_SCROLL:
                    {
                    {
                    this.state = 6020;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 6019;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 6022;
                    this.match(PostgreSqlParser.KW_SCROLL);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_BINARY:
                    {
                    this.state = 6023;
                    this.match(PostgreSqlParser.KW_BINARY);
                    }
                    break;
                case PostgreSqlParser.KW_INSENSITIVE:
                    {
                    this.state = 6024;
                    this.match(PostgreSqlParser.KW_INSENSITIVE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 6029;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 6030;
            this.match(PostgreSqlParser.KW_CURSOR);
            this.state = 6033;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105 || _la === 379) {
                {
                this.state = 6031;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 379)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6032;
                this.match(PostgreSqlParser.KW_HOLD);
                }
            }

            this.state = 6035;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 6036;
            this.selectStmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStmt(): SelectStmtContext {
        let localContext = new SelectStmtContext(this.context, this.state);
        this.enterRule(localContext, 554, PostgreSqlParser.RULE_selectStmt);
        try {
            this.state = 6040;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 784, this.context) ) {
            case 1:
                localContext = new SelectStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6038;
                this.selectNoParens();
                }
                break;
            case 2:
                localContext = new SelectStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6039;
                this.selectWithParens();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectWithParens(): SelectWithParensContext {
        let localContext = new SelectWithParensContext(this.context, this.state);
        this.enterRule(localContext, 556, PostgreSqlParser.RULE_selectWithParens);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6042;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6045;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 785, this.context) ) {
            case 1:
                {
                this.state = 6043;
                this.selectNoParens();
                }
                break;
            case 2:
                {
                this.state = 6044;
                this.selectWithParens();
                }
                break;
            }
            this.state = 6047;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectNoParens(): SelectNoParensContext {
        let localContext = new SelectNoParensContext(this.context, this.state);
        this.enterRule(localContext, 558, PostgreSqlParser.RULE_selectNoParens);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6050;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 6049;
                this.withClause();
                }
            }

            this.state = 6052;
            this.selectClause();
            this.state = 6054;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 6053;
                this.sortClause();
                }
            }

            this.state = 6064;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 790, this.context) ) {
            case 1:
                {
                this.state = 6056;
                this.forLockingClause();
                this.state = 6058;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 788, this.context) ) {
                case 1:
                    {
                    this.state = 6057;
                    this.selectLimit();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 6060;
                this.selectLimit();
                this.state = 6062;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 6061;
                    this.forLockingClause();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectClause(): SelectClauseContext {
        let localContext = new SelectClauseContext(this.context, this.state);
        this.enterRule(localContext, 560, PostgreSqlParser.RULE_selectClause);
        try {
            this.state = 6068;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 791, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6066;
                this.simpleSelect();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6067;
                this.selectWithParens();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleSelect(): SimpleSelectContext {
        let localContext = new SimpleSelectContext(this.context, this.state);
        this.enterRule(localContext, 562, PostgreSqlParser.RULE_simpleSelect);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6092;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SELECT:
                {
                this.state = 6070;
                this.match(PostgreSqlParser.KW_SELECT);
                this.state = 6080;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 795, this.context) ) {
                case 1:
                    {
                    this.state = 6072;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 792, this.context) ) {
                    case 1:
                        {
                        this.state = 6071;
                        this.match(PostgreSqlParser.KW_ALL);
                        }
                        break;
                    }
                    this.state = 6075;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 793, this.context) ) {
                    case 1:
                        {
                        this.state = 6074;
                        this.intoClause();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 6078;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 794, this.context) ) {
                    case 1:
                        {
                        this.state = 6077;
                        this.distinctClause();
                        }
                        break;
                    }
                    }
                    break;
                }
                this.state = 6082;
                this.sqlExpression();
                }
                break;
            case PostgreSqlParser.KW_VALUES:
                {
                this.state = 6083;
                this.valuesClause();
                }
                break;
            case PostgreSqlParser.KW_TABLE:
                {
                this.state = 6084;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 6085;
                this.relationExpr();
                }
                break;
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 6086;
                this.selectWithParens();
                this.state = 6087;
                this.setOperatorWithAllOrDistinct();
                this.state = 6090;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 796, this.context) ) {
                case 1:
                    {
                    this.state = 6088;
                    this.simpleSelect();
                    }
                    break;
                case 2:
                    {
                    this.state = 6089;
                    this.selectWithParens();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 6101;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 799, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6094;
                    this.setOperatorWithAllOrDistinct();
                    this.state = 6097;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 798, this.context) ) {
                    case 1:
                        {
                        this.state = 6095;
                        this.simpleSelect();
                        }
                        break;
                    case 2:
                        {
                        this.state = 6096;
                        this.selectWithParens();
                        }
                        break;
                    }
                    }
                    }
                }
                this.state = 6103;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 799, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setOperatorWithAllOrDistinct(): SetOperatorWithAllOrDistinctContext {
        let localContext = new SetOperatorWithAllOrDistinctContext(this.context, this.state);
        this.enterRule(localContext, 564, PostgreSqlParser.RULE_setOperatorWithAllOrDistinct);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6104;
            _la = this.tokenStream.LA(1);
            if(!(_la === 59 || _la === 70 || _la === 97)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6106;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30 || _la === 56) {
                {
                this.state = 6105;
                _la = this.tokenStream.LA(1);
                if(!(_la === 30 || _la === 56)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 566, PostgreSqlParser.RULE_withClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6108;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 6110;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 801, this.context) ) {
            case 1:
                {
                this.state = 6109;
                this.match(PostgreSqlParser.KW_RECURSIVE);
                }
                break;
            }
            {
            this.state = 6112;
            this.commonTableExpr();
            this.state = 6117;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 802, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6113;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6114;
                    this.commonTableExpr();
                    }
                    }
                }
                this.state = 6119;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 802, this.context);
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonTableExpr(): CommonTableExprContext {
        let localContext = new CommonTableExprContext(this.context, this.state);
        this.enterRule(localContext, 568, PostgreSqlParser.RULE_commonTableExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6120;
            this.colId();
            this.state = 6122;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 6121;
                this.optColumnList();
                }
            }

            this.state = 6124;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 6129;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 77 || _la === 259) {
                {
                this.state = 6126;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6125;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6128;
                this.match(PostgreSqlParser.KW_MATERIALIZED);
                }
            }

            this.state = 6131;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6132;
            this.preParableStmt();
            this.state = 6133;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            this.state = 6135;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 806, this.context) ) {
            case 1:
                {
                this.state = 6134;
                this.searchClause();
                }
                break;
            }
            this.state = 6138;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 807, this.context) ) {
            case 1:
                {
                this.state = 6137;
                this.cycleClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchClause(): SearchClauseContext {
        let localContext = new SearchClauseContext(this.context, this.state);
        this.enterRule(localContext, 570, PostgreSqlParser.RULE_searchClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6140;
            this.match(PostgreSqlParser.KW_SEARCH);
            this.state = 6141;
            _la = this.tokenStream.LA(1);
            if(!(_la === 527 || _la === 528)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6142;
            this.match(PostgreSqlParser.KW_FIRST);
            this.state = 6143;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 6144;
            this.columnList();
            this.state = 6145;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 6146;
            this.columnName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cycleClause(): CycleClauseContext {
        let localContext = new CycleClauseContext(this.context, this.state);
        this.enterRule(localContext, 572, PostgreSqlParser.RULE_cycleClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6148;
            this.match(PostgreSqlParser.KW_CYCLE);
            this.state = 6149;
            this.columnList();
            this.state = 6150;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 6151;
            this.columnName();
            this.state = 6157;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94) {
                {
                this.state = 6152;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 6153;
                this.colId();
                this.state = 6154;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 6155;
                this.colId();
                }
            }

            this.state = 6159;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 6160;
            this.columnName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intoClause(): IntoClauseContext {
        let localContext = new IntoClauseContext(this.context, this.state);
        this.enterRule(localContext, 574, PostgreSqlParser.RULE_intoClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6162;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 6168;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 810, this.context) ) {
            case 1:
                {
                this.state = 6164;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 809, this.context) ) {
                case 1:
                    {
                    this.state = 6163;
                    this.match(PostgreSqlParser.KW_STRICT);
                    }
                    break;
                }
                this.state = 6166;
                this.optTempTableName();
                }
                break;
            case 2:
                {
                this.state = 6167;
                this.exprList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optTempTableName(): OptTempTableNameContext {
        let localContext = new OptTempTableNameContext(this.context, this.state);
        this.enterRule(localContext, 576, PostgreSqlParser.RULE_optTempTableName);
        let _la: number;
        try {
            this.state = 6185;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 815, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6171;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 213 || _la === 254) {
                    {
                    this.state = 6170;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 213 || _la === 254)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 6173;
                _la = this.tokenStream.LA(1);
                if(!(_la === 352 || _la === 354)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6175;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92) {
                    {
                    this.state = 6174;
                    this.match(PostgreSqlParser.KW_TABLE);
                    }
                }

                this.state = 6177;
                this.tableNameCreate();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6179;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 813, this.context) ) {
                case 1:
                    {
                    this.state = 6178;
                    this.match(PostgreSqlParser.KW_UNLOGGED);
                    }
                    break;
                }
                this.state = 6182;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92) {
                    {
                    this.state = 6181;
                    this.match(PostgreSqlParser.KW_TABLE);
                    }
                }

                this.state = 6184;
                this.tableNameCreate();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distinctClause(): DistinctClauseContext {
        let localContext = new DistinctClauseContext(this.context, this.state);
        this.enterRule(localContext, 578, PostgreSqlParser.RULE_distinctClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6187;
            this.match(PostgreSqlParser.KW_DISTINCT);
            this.state = 6190;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 816, this.context) ) {
            case 1:
                {
                this.state = 6188;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 6189;
                this.executeParamClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortClause(): SortClauseContext {
        let localContext = new SortClauseContext(this.context, this.state);
        this.enterRule(localContext, 580, PostgreSqlParser.RULE_sortClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6192;
            this.match(PostgreSqlParser.KW_ORDER);
            this.state = 6193;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 6194;
            this.sortBy();
            this.state = 6199;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6195;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6196;
                this.sortBy();
                }
                }
                this.state = 6201;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortBy(): SortByContext {
        let localContext = new SortByContext(this.context, this.state);
        this.enterRule(localContext, 582, PostgreSqlParser.RULE_sortBy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6202;
            this.columnExprNoParen();
            this.state = 6206;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 818, this.context) ) {
            case 1:
                {
                this.state = 6203;
                this.match(PostgreSqlParser.KW_USING);
                this.state = 6204;
                this.qualAllOp();
                }
                break;
            case 2:
                {
                this.state = 6205;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 55)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 6210;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 819, this.context) ) {
            case 1:
                {
                this.state = 6208;
                this.match(PostgreSqlParser.KW_NULLS);
                this.state = 6209;
                _la = this.tokenStream.LA(1);
                if(!(_la === 207 || _la === 249)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectLimit(): SelectLimitContext {
        let localContext = new SelectLimitContext(this.context, this.state);
        this.enterRule(localContext, 584, PostgreSqlParser.RULE_selectLimit);
        let _la: number;
        try {
            this.state = 6223;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_OFFSET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6212;
                this.offsetClause();
                this.state = 6214;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 820, this.context) ) {
                case 1:
                    {
                    this.state = 6213;
                    this.fetchClause();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_LIMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6218;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_LIMIT:
                    {
                    this.state = 6216;
                    this.limitClause();
                    }
                    break;
                case PostgreSqlParser.KW_FETCH:
                    {
                    this.state = 6217;
                    this.fetchClause();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6221;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 79) {
                    {
                    this.state = 6220;
                    this.offsetClause();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 586, PostgreSqlParser.RULE_limitClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6225;
            this.match(PostgreSqlParser.KW_LIMIT);
            this.state = 6228;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.PARAM:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.BinaryStringConstant:
            case PostgreSqlParser.HexadecimalStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 6226;
                this.expression();
                }
                break;
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 6227;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 6232;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 6230;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6231;
                this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetchClause(): FetchClauseContext {
        let localContext = new FetchClauseContext(this.context, this.state);
        this.enterRule(localContext, 588, PostgreSqlParser.RULE_fetchClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6234;
            this.match(PostgreSqlParser.KW_FETCH);
            this.state = 6235;
            _la = this.tokenStream.LA(1);
            if(!(_la === 207 || _la === 268)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            {
            this.state = 6237;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 826, this.context) ) {
            case 1:
                {
                this.state = 6236;
                this.selectFetchFirstValue();
                }
                break;
            }
            this.state = 6239;
            _la = this.tokenStream.LA(1);
            if(!(_la === 320 || _la === 414)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6243;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ONLY:
                {
                this.state = 6240;
                this.match(PostgreSqlParser.KW_ONLY);
                }
                break;
            case PostgreSqlParser.KW_WITH:
                {
                this.state = 6241;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 6242;
                this.match(PostgreSqlParser.KW_TIES);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public offsetClause(): OffsetClauseContext {
        let localContext = new OffsetClauseContext(this.context, this.state);
        this.enterRule(localContext, 590, PostgreSqlParser.RULE_offsetClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6245;
            this.match(PostgreSqlParser.KW_OFFSET);
            this.state = 6250;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 828, this.context) ) {
            case 1:
                {
                this.state = 6246;
                this.selectFetchFirstValue();
                this.state = 6247;
                _la = this.tokenStream.LA(1);
                if(!(_la === 320 || _la === 414)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                {
                this.state = 6249;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectFetchFirstValue(): SelectFetchFirstValueContext {
        let localContext = new SelectFetchFirstValueContext(this.context, this.state);
        this.enterRule(localContext, 592, PostgreSqlParser.RULE_selectFetchFirstValue);
        let _la: number;
        try {
            this.state = 6255;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 829, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6252;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6253;
                _la = this.tokenStream.LA(1);
                if(!(_la === 574 || _la === 576)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6254;
                this.primaryExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupClause(): GroupClauseContext {
        let localContext = new GroupClauseContext(this.context, this.state);
        this.enterRule(localContext, 594, PostgreSqlParser.RULE_groupClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6257;
            this.match(PostgreSqlParser.KW_GROUP);
            this.state = 6258;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 6260;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 830, this.context) ) {
            case 1:
                {
                this.state = 6259;
                _la = this.tokenStream.LA(1);
                if(!(_la === 30 || _la === 56)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 6262;
            this.groupByList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByList(): GroupByListContext {
        let localContext = new GroupByListContext(this.context, this.state);
        this.enterRule(localContext, 596, PostgreSqlParser.RULE_groupByList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6264;
            this.groupByItem();
            this.state = 6269;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 831, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6265;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6266;
                    this.groupByItem();
                    }
                    }
                }
                this.state = 6271;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 831, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByItem(): GroupByItemContext {
        let localContext = new GroupByItemContext(this.context, this.state);
        this.enterRule(localContext, 598, PostgreSqlParser.RULE_groupByItem);
        let _la: number;
        try {
            this.state = 6295;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 834, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6272;
                this.columnExprNoParen();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6273;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6274;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6276;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 468 || _la === 469) {
                    {
                    this.state = 6275;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 468 || _la === 469)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 6278;
                this.match(PostgreSqlParser.OPEN_PAREN);
                {
                this.state = 6279;
                this.columnExprNoParen();
                this.state = 6284;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 6280;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6281;
                    this.columnExprNoParen();
                    }
                    }
                    this.state = 6286;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                this.state = 6287;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6289;
                this.match(PostgreSqlParser.KW_GROUPING);
                this.state = 6290;
                this.match(PostgreSqlParser.KW_SETS);
                this.state = 6291;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6292;
                this.groupByList();
                this.state = 6293;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public forLockingClause(): ForLockingClauseContext {
        let localContext = new ForLockingClauseContext(this.context, this.state);
        this.enterRule(localContext, 600, PostgreSqlParser.RULE_forLockingClause);
        let _la: number;
        try {
            this.state = 6325;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 841, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6318;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 6297;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 6307;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_NO:
                    case PostgreSqlParser.KW_UPDATE:
                        {
                        this.state = 6300;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 269) {
                            {
                            this.state = 6298;
                            this.match(PostgreSqlParser.KW_NO);
                            this.state = 6299;
                            this.match(PostgreSqlParser.KW_KEY);
                            }
                        }

                        this.state = 6302;
                        this.match(PostgreSqlParser.KW_UPDATE);
                        }
                        break;
                    case PostgreSqlParser.KW_KEY:
                    case PostgreSqlParser.KW_SHARE:
                        {
                        this.state = 6304;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 245) {
                            {
                            this.state = 6303;
                            this.match(PostgreSqlParser.KW_KEY);
                            }
                        }

                        this.state = 6306;
                        this.match(PostgreSqlParser.KW_SHARE);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 6311;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 838, this.context) ) {
                    case 1:
                        {
                        this.state = 6309;
                        this.match(PostgreSqlParser.KW_OF);
                        this.state = 6310;
                        this.qualifiedNameList();
                        }
                        break;
                    }
                    this.state = 6316;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 839, this.context) ) {
                    case 1:
                        {
                        this.state = 6313;
                        this.match(PostgreSqlParser.KW_NOWAIT);
                        }
                        break;
                    case 2:
                        {
                        this.state = 6314;
                        this.match(PostgreSqlParser.KW_SKIP);
                        this.state = 6315;
                        this.match(PostgreSqlParser.KW_LOCKED);
                        }
                        break;
                    }
                    }
                    }
                    this.state = 6320;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 62);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6322;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 6323;
                this.match(PostgreSqlParser.KW_READ);
                this.state = 6324;
                this.match(PostgreSqlParser.KW_ONLY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesClause(): ValuesClauseContext {
        let localContext = new ValuesClauseContext(this.context, this.state);
        this.enterRule(localContext, 602, PostgreSqlParser.RULE_valuesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6327;
            this.match(PostgreSqlParser.KW_VALUES);
            this.state = 6328;
            this.executeParamClause();
            this.state = 6333;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6329;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6330;
                this.executeParamClause();
                }
                }
                this.state = 6335;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 604, PostgreSqlParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6336;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 6337;
            this.fromList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromList(): FromListContext {
        let localContext = new FromListContext(this.context, this.state);
        this.enterRule(localContext, 606, PostgreSqlParser.RULE_fromList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6339;
            this.tableRef();
            this.state = 6344;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 843, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6340;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6341;
                    this.tableRef();
                    }
                    }
                }
                this.state = 6346;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 843, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRef(): TableRefContext {
        let localContext = new TableRefContext(this.context, this.state);
        this.enterRule(localContext, 608, PostgreSqlParser.RULE_tableRef);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6410;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 860, this.context) ) {
            case 1:
                {
                this.state = 6361;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 848, this.context) ) {
                case 1:
                    {
                    this.state = 6347;
                    this.relationExpr();
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 6349;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 81) {
                        {
                        this.state = 6348;
                        this.match(PostgreSqlParser.KW_ONLY);
                        }
                    }

                    this.state = 6351;
                    this.viewName();
                    this.state = 6353;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 845, this.context) ) {
                    case 1:
                        {
                        this.state = 6352;
                        this.match(PostgreSqlParser.STAR);
                        }
                        break;
                    }
                    this.state = 6356;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 846, this.context) ) {
                    case 1:
                        {
                        this.state = 6355;
                        this.columnList();
                        }
                        break;
                    }
                    this.state = 6359;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 847, this.context) ) {
                    case 1:
                        {
                        this.state = 6358;
                        this.whereClause();
                        }
                        break;
                    }
                    }
                    }
                    break;
                }
                this.state = 6364;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 849, this.context) ) {
                case 1:
                    {
                    this.state = 6363;
                    this.aliasClause();
                    }
                    break;
                }
                this.state = 6367;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 472) {
                    {
                    this.state = 6366;
                    this.tableSampleClause();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 6370;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 72) {
                    {
                    this.state = 6369;
                    this.match(PostgreSqlParser.KW_LATERAL);
                    }
                }

                this.state = 6384;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 855, this.context) ) {
                case 1:
                    {
                    this.state = 6372;
                    this.xmlTable();
                    this.state = 6374;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 852, this.context) ) {
                    case 1:
                        {
                        this.state = 6373;
                        this.aliasClause();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 6376;
                    this.funcTable();
                    this.state = 6378;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 853, this.context) ) {
                    case 1:
                        {
                        this.state = 6377;
                        this.funcAliasClause();
                        }
                        break;
                    }
                    }
                    break;
                case 3:
                    {
                    this.state = 6380;
                    this.selectWithParens();
                    this.state = 6382;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 854, this.context) ) {
                    case 1:
                        {
                        this.state = 6381;
                        this.aliasClause();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                this.state = 6386;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6387;
                this.tableRef();
                this.state = 6404;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_CROSS:
                    {
                    this.state = 6388;
                    this.match(PostgreSqlParser.KW_CROSS);
                    this.state = 6389;
                    this.match(PostgreSqlParser.KW_JOIN);
                    this.state = 6390;
                    this.tableRef();
                    }
                    break;
                case PostgreSqlParser.KW_NATURAL:
                    {
                    this.state = 6391;
                    this.match(PostgreSqlParser.KW_NATURAL);
                    this.state = 6393;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                        {
                        this.state = 6392;
                        this.joinType();
                        }
                    }

                    this.state = 6395;
                    this.match(PostgreSqlParser.KW_JOIN);
                    this.state = 6396;
                    this.tableRef();
                    }
                    break;
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_RIGHT:
                    {
                    this.state = 6398;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                        {
                        this.state = 6397;
                        this.joinType();
                        }
                    }

                    this.state = 6400;
                    this.match(PostgreSqlParser.KW_JOIN);
                    this.state = 6401;
                    this.tableRef();
                    this.state = 6402;
                    this.joinQual();
                    }
                    break;
                case PostgreSqlParser.CLOSE_PAREN:
                    break;
                default:
                    break;
                }
                this.state = 6406;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6408;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 859, this.context) ) {
                case 1:
                    {
                    this.state = 6407;
                    this.aliasClause();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 6430;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 864, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 6428;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_CROSS:
                        {
                        this.state = 6412;
                        this.match(PostgreSqlParser.KW_CROSS);
                        this.state = 6413;
                        this.match(PostgreSqlParser.KW_JOIN);
                        this.state = 6414;
                        this.tableRef();
                        }
                        break;
                    case PostgreSqlParser.KW_NATURAL:
                        {
                        this.state = 6415;
                        this.match(PostgreSqlParser.KW_NATURAL);
                        this.state = 6417;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                            {
                            this.state = 6416;
                            this.joinType();
                            }
                        }

                        this.state = 6419;
                        this.match(PostgreSqlParser.KW_JOIN);
                        this.state = 6420;
                        this.tableRef();
                        }
                        break;
                    case PostgreSqlParser.KW_FULL:
                    case PostgreSqlParser.KW_INNER:
                    case PostgreSqlParser.KW_JOIN:
                    case PostgreSqlParser.KW_LEFT:
                    case PostgreSqlParser.KW_RIGHT:
                        {
                        this.state = 6422;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                            {
                            this.state = 6421;
                            this.joinType();
                            }
                        }

                        this.state = 6424;
                        this.match(PostgreSqlParser.KW_JOIN);
                        this.state = 6425;
                        this.tableRef();
                        this.state = 6426;
                        this.joinQual();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }
                this.state = 6432;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 864, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasClause(): AliasClauseContext {
        let localContext = new AliasClauseContext(this.context, this.state);
        this.enterRule(localContext, 610, PostgreSqlParser.RULE_aliasClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6434;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 6433;
                this.match(PostgreSqlParser.KW_AS);
                }
            }

            this.state = 6436;
            localContext._alias = this.colId();
            this.state = 6441;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 866, this.context) ) {
            case 1:
                {
                this.state = 6437;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6438;
                this.nameList();
                this.state = 6439;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcAliasClause(): FuncAliasClauseContext {
        let localContext = new FuncAliasClauseContext(this.context, this.state);
        this.enterRule(localContext, 612, PostgreSqlParser.RULE_funcAliasClause);
        let _la: number;
        try {
            this.state = 6455;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 869, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6443;
                this.aliasClause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6449;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AS:
                    {
                    this.state = 6444;
                    this.match(PostgreSqlParser.KW_AS);
                    this.state = 6446;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                        {
                        this.state = 6445;
                        localContext._alias = this.colId();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6448;
                    localContext._alias = this.colId();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6451;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6452;
                this.tableFuncElementList();
                this.state = 6453;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 614, PostgreSqlParser.RULE_joinType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6457;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6459;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 6458;
                this.match(PostgreSqlParser.KW_OUTER);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinQual(): JoinQualContext {
        let localContext = new JoinQualContext(this.context, this.state);
        this.enterRule(localContext, 616, PostgreSqlParser.RULE_joinQual);
        try {
            this.state = 6465;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_USING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6461;
                this.match(PostgreSqlParser.KW_USING);
                this.state = 6462;
                this.optColumnList();
                }
                break;
            case PostgreSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6463;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 6464;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationExpr(): RelationExprContext {
        let localContext = new RelationExprContext(this.context, this.state);
        this.enterRule(localContext, 618, PostgreSqlParser.RULE_relationExpr);
        try {
            this.state = 6482;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 874, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6467;
                this.truncateTable();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6468;
                this.match(PostgreSqlParser.KW_ONLY);
                this.state = 6474;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6469;
                    this.tableName();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6470;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6471;
                    this.tableName();
                    this.state = 6472;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6476;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6477;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 6480;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6478;
                    this.schemaName();
                    }
                    break;
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                    {
                    this.state = 6479;
                    this.match(PostgreSqlParser.KW_CURRENT_SCHEMA);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public publicationRelationExpr(): PublicationRelationExprContext {
        let localContext = new PublicationRelationExprContext(this.context, this.state);
        this.enterRule(localContext, 620, PostgreSqlParser.RULE_publicationRelationExpr);
        let _la: number;
        try {
            this.state = 6508;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 879, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6484;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 6485;
                this.truncateTable();
                this.state = 6487;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 875, this.context) ) {
                case 1:
                    {
                    this.state = 6486;
                    this.optColumnList();
                    }
                    break;
                }
                this.state = 6490;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 6489;
                    this.whereClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6492;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 6493;
                this.match(PostgreSqlParser.KW_ONLY);
                this.state = 6499;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6494;
                    this.tableName();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6495;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6496;
                    this.tableName();
                    this.state = 6497;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6501;
                this.match(PostgreSqlParser.KW_TABLES);
                this.state = 6502;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6503;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 6506;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6504;
                    this.schemaName();
                    }
                    break;
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                    {
                    this.state = 6505;
                    this.match(PostgreSqlParser.KW_CURRENT_SCHEMA);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationExprList(): RelationExprListContext {
        let localContext = new RelationExprListContext(this.context, this.state);
        this.enterRule(localContext, 622, PostgreSqlParser.RULE_relationExprList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6510;
            this.relationExpr();
            this.state = 6515;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6511;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6512;
                this.relationExpr();
                }
                }
                this.state = 6517;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationExprOptAlias(): RelationExprOptAliasContext {
        let localContext = new RelationExprOptAliasContext(this.context, this.state);
        this.enterRule(localContext, 624, PostgreSqlParser.RULE_relationExprOptAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6518;
            this.relationExpr();
            this.state = 6523;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 882, this.context) ) {
            case 1:
                {
                this.state = 6520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 36) {
                    {
                    this.state = 6519;
                    this.match(PostgreSqlParser.KW_AS);
                    }
                }

                this.state = 6522;
                this.colId();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSampleClause(): TableSampleClauseContext {
        let localContext = new TableSampleClauseContext(this.context, this.state);
        this.enterRule(localContext, 626, PostgreSqlParser.RULE_tableSampleClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6525;
            this.match(PostgreSqlParser.KW_TABLESAMPLE);
            this.state = 6526;
            this.functionName();
            this.state = 6527;
            this.executeParamClause();
            this.state = 6533;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 883, this.context) ) {
            case 1:
                {
                this.state = 6528;
                this.match(PostgreSqlParser.KW_REPEATABLE);
                this.state = 6529;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6530;
                this.expression();
                this.state = 6531;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcTable(): FuncTableContext {
        let localContext = new FuncTableContext(this.context, this.state);
        this.enterRule(localContext, 628, PostgreSqlParser.RULE_funcTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6549;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 885, this.context) ) {
            case 1:
                {
                this.state = 6535;
                this.funcExprWindowless();
                }
                break;
            case 2:
                {
                {
                this.state = 6536;
                this.match(PostgreSqlParser.KW_ROWS);
                this.state = 6537;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 6538;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6539;
                this.rowsFromItem();
                this.state = 6544;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 6540;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6541;
                    this.rowsFromItem();
                    }
                    }
                    this.state = 6546;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 6547;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                }
                break;
            }
            this.state = 6553;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 886, this.context) ) {
            case 1:
                {
                this.state = 6551;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 6552;
                this.match(PostgreSqlParser.KW_ORDINALITY);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsFromItem(): RowsFromItemContext {
        let localContext = new RowsFromItemContext(this.context, this.state);
        this.enterRule(localContext, 630, PostgreSqlParser.RULE_rowsFromItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6555;
            this.funcExprWindowless();
            this.state = 6561;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 6556;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 6557;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6558;
                this.tableFuncElementList();
                this.state = 6559;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 632, PostgreSqlParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6563;
            this.match(PostgreSqlParser.KW_WHERE);
            this.state = 6564;
            this.columnExprNoParen();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereOrCurrentClause(): WhereOrCurrentClauseContext {
        let localContext = new WhereOrCurrentClauseContext(this.context, this.state);
        this.enterRule(localContext, 634, PostgreSqlParser.RULE_whereOrCurrentClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6566;
            this.match(PostgreSqlParser.KW_WHERE);
            this.state = 6571;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 888, this.context) ) {
            case 1:
                {
                this.state = 6567;
                this.match(PostgreSqlParser.KW_CURRENT);
                this.state = 6568;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 6569;
                this.colId();
                }
                break;
            case 2:
                {
                this.state = 6570;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFuncElementList(): TableFuncElementListContext {
        let localContext = new TableFuncElementListContext(this.context, this.state);
        this.enterRule(localContext, 636, PostgreSqlParser.RULE_tableFuncElementList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6573;
            this.tableFuncElement();
            this.state = 6578;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6574;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6575;
                this.tableFuncElement();
                }
                }
                this.state = 6580;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFuncElement(): TableFuncElementContext {
        let localContext = new TableFuncElementContext(this.context, this.state);
        this.enterRule(localContext, 638, PostgreSqlParser.RULE_tableFuncElement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6581;
            this.colId();
            this.state = 6582;
            this.typename();
            this.state = 6584;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43) {
                {
                this.state = 6583;
                this.collateClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlTable(): XmlTableContext {
        let localContext = new XmlTableContext(this.context, this.state);
        this.enterRule(localContext, 640, PostgreSqlParser.RULE_xmlTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6586;
            this.match(PostgreSqlParser.KW_XMLTABLE);
            this.state = 6587;
            this.match(PostgreSqlParser.OPEN_PAREN);
            {
            this.state = 6601;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 892, this.context) ) {
            case 1:
                {
                this.state = 6588;
                this.match(PostgreSqlParser.KW_XMLNAMESPACES);
                this.state = 6589;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6590;
                this.xmlNamespaceEle();
                this.state = 6595;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 6591;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6592;
                    this.xmlNamespaceEle();
                    }
                    }
                    this.state = 6597;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 6598;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6599;
                this.match(PostgreSqlParser.COMMA);
                }
                break;
            }
            this.state = 6603;
            this.primaryExpression(0);
            this.state = 6604;
            this.xmlExistsArgument();
            this.state = 6605;
            this.match(PostgreSqlParser.KW_COLUMNS);
            this.state = 6606;
            this.xmlTableColumnEl();
            this.state = 6611;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6607;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6608;
                this.xmlTableColumnEl();
                }
                }
                this.state = 6613;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 6614;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlTableColumnEl(): XmlTableColumnElContext {
        let localContext = new XmlTableColumnElContext(this.context, this.state);
        this.enterRule(localContext, 642, PostgreSqlParser.RULE_xmlTableColumnEl);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6616;
            this.colId();
            this.state = 6635;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 6617;
                this.typename();
                this.state = 6631;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 53)) & ~0x1F) === 0 && ((1 << (_la - 53)) & 50331649) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 32767) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 4291821567) !== 0) || ((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & 4278187359) !== 0) || ((((_la - 497)) & ~0x1F) === 0 && ((1 << (_la - 497)) & 146800319) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                    {
                    this.state = 6627;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        this.state = 6627;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case PostgreSqlParser.KW_DEFAULT:
                        case PostgreSqlParser.KW_IS:
                        case PostgreSqlParser.KW_OUTER:
                        case PostgreSqlParser.KW_OVER:
                        case PostgreSqlParser.KW_ABORT:
                        case PostgreSqlParser.KW_ABSOLUTE:
                        case PostgreSqlParser.KW_ACCESS:
                        case PostgreSqlParser.KW_ACTION:
                        case PostgreSqlParser.KW_ADD:
                        case PostgreSqlParser.KW_ADMIN:
                        case PostgreSqlParser.KW_AFTER:
                        case PostgreSqlParser.KW_AGGREGATE:
                        case PostgreSqlParser.KW_ALSO:
                        case PostgreSqlParser.KW_ALTER:
                        case PostgreSqlParser.KW_ALWAYS:
                        case PostgreSqlParser.KW_ASSERTION:
                        case PostgreSqlParser.KW_ASSIGNMENT:
                        case PostgreSqlParser.KW_AT:
                        case PostgreSqlParser.KW_ATTRIBUTE:
                        case PostgreSqlParser.KW_BACKWARD:
                        case PostgreSqlParser.KW_BEFORE:
                        case PostgreSqlParser.KW_BEGIN:
                        case PostgreSqlParser.KW_BY:
                        case PostgreSqlParser.KW_CACHE:
                        case PostgreSqlParser.KW_CALLED:
                        case PostgreSqlParser.KW_CASCADE:
                        case PostgreSqlParser.KW_CASCADED:
                        case PostgreSqlParser.KW_CATALOG:
                        case PostgreSqlParser.KW_CHAIN:
                        case PostgreSqlParser.KW_CHARACTERISTICS:
                        case PostgreSqlParser.KW_CHECKPOINT:
                        case PostgreSqlParser.KW_CLASS:
                        case PostgreSqlParser.KW_CLOSE:
                        case PostgreSqlParser.KW_CLUSTER:
                        case PostgreSqlParser.KW_COMMENT:
                        case PostgreSqlParser.KW_COMMENTS:
                        case PostgreSqlParser.KW_COMMIT:
                        case PostgreSqlParser.KW_COMMITTED:
                        case PostgreSqlParser.KW_CONFIGURATION:
                        case PostgreSqlParser.KW_CONNECTION:
                        case PostgreSqlParser.KW_CONSTRAINTS:
                        case PostgreSqlParser.KW_CONTENT:
                        case PostgreSqlParser.KW_CONTINUE:
                        case PostgreSqlParser.KW_CONVERSION:
                        case PostgreSqlParser.KW_COPY:
                        case PostgreSqlParser.KW_COST:
                        case PostgreSqlParser.KW_CSV:
                        case PostgreSqlParser.KW_CURSOR:
                        case PostgreSqlParser.KW_CYCLE:
                        case PostgreSqlParser.KW_DATA:
                        case PostgreSqlParser.KW_DATABASE:
                        case PostgreSqlParser.KW_DAY:
                        case PostgreSqlParser.KW_DEALLOCATE:
                        case PostgreSqlParser.KW_DECLARE:
                        case PostgreSqlParser.KW_DEFAULTS:
                        case PostgreSqlParser.KW_DEFERRED:
                        case PostgreSqlParser.KW_DEFINER:
                        case PostgreSqlParser.KW_DELETE:
                        case PostgreSqlParser.KW_DELIMITER:
                        case PostgreSqlParser.KW_DELIMITERS:
                        case PostgreSqlParser.KW_DICTIONARY:
                        case PostgreSqlParser.KW_DISABLE:
                        case PostgreSqlParser.KW_DISCARD:
                        case PostgreSqlParser.KW_DOCUMENT:
                        case PostgreSqlParser.KW_DOMAIN:
                        case PostgreSqlParser.KW_DOUBLE:
                        case PostgreSqlParser.KW_DROP:
                        case PostgreSqlParser.KW_EACH:
                        case PostgreSqlParser.KW_ENABLE:
                        case PostgreSqlParser.KW_ENCODING:
                        case PostgreSqlParser.KW_ENCRYPTED:
                        case PostgreSqlParser.KW_ENUM:
                        case PostgreSqlParser.KW_ESCAPE:
                        case PostgreSqlParser.KW_EVENT:
                        case PostgreSqlParser.KW_EXCLUDE:
                        case PostgreSqlParser.KW_EXCLUDING:
                        case PostgreSqlParser.KW_EXCLUSIVE:
                        case PostgreSqlParser.KW_EXECUTE:
                        case PostgreSqlParser.KW_EXPLAIN:
                        case PostgreSqlParser.KW_EXTENSION:
                        case PostgreSqlParser.KW_EXTERNAL:
                        case PostgreSqlParser.KW_FAMILY:
                        case PostgreSqlParser.KW_FIRST:
                        case PostgreSqlParser.KW_FOLLOWING:
                        case PostgreSqlParser.KW_FORCE:
                        case PostgreSqlParser.KW_FORWARD:
                        case PostgreSqlParser.KW_FUNCTION:
                        case PostgreSqlParser.KW_FUNCTIONS:
                        case PostgreSqlParser.KW_GLOBAL:
                        case PostgreSqlParser.KW_GRANTED:
                        case PostgreSqlParser.KW_HANDLER:
                        case PostgreSqlParser.KW_HEADER:
                        case PostgreSqlParser.KW_HOLD:
                        case PostgreSqlParser.KW_HOUR:
                        case PostgreSqlParser.KW_IDENTITY:
                        case PostgreSqlParser.KW_IF:
                        case PostgreSqlParser.KW_IMMEDIATE:
                        case PostgreSqlParser.KW_IMMUTABLE:
                        case PostgreSqlParser.KW_IMPLICIT:
                        case PostgreSqlParser.KW_INCLUDING:
                        case PostgreSqlParser.KW_INCREMENT:
                        case PostgreSqlParser.KW_INDEX:
                        case PostgreSqlParser.KW_INDEXES:
                        case PostgreSqlParser.KW_INHERIT:
                        case PostgreSqlParser.KW_INHERITS:
                        case PostgreSqlParser.KW_INLINE:
                        case PostgreSqlParser.KW_INSENSITIVE:
                        case PostgreSqlParser.KW_INSERT:
                        case PostgreSqlParser.KW_INSTEAD:
                        case PostgreSqlParser.KW_INVOKER:
                        case PostgreSqlParser.KW_ISOLATION:
                        case PostgreSqlParser.KW_KEY:
                        case PostgreSqlParser.KW_LABEL:
                        case PostgreSqlParser.KW_LANGUAGE:
                        case PostgreSqlParser.KW_LARGE:
                        case PostgreSqlParser.KW_LAST:
                        case PostgreSqlParser.KW_LEAKPROOF:
                        case PostgreSqlParser.KW_LEVEL:
                        case PostgreSqlParser.KW_LISTEN:
                        case PostgreSqlParser.KW_LOAD:
                        case PostgreSqlParser.KW_LOCAL:
                        case PostgreSqlParser.KW_LOCATION:
                        case PostgreSqlParser.KW_LOCK:
                        case PostgreSqlParser.KW_MAPPING:
                        case PostgreSqlParser.KW_MATCH:
                        case PostgreSqlParser.KW_MATERIALIZED:
                        case PostgreSqlParser.KW_MAXVALUE:
                        case PostgreSqlParser.KW_MINUTE:
                        case PostgreSqlParser.KW_MINVALUE:
                        case PostgreSqlParser.KW_MODE:
                        case PostgreSqlParser.KW_MONTH:
                        case PostgreSqlParser.KW_MOVE:
                        case PostgreSqlParser.KW_NAME:
                        case PostgreSqlParser.KW_NAMES:
                        case PostgreSqlParser.KW_NEXT:
                        case PostgreSqlParser.KW_NO:
                        case PostgreSqlParser.KW_NOTHING:
                        case PostgreSqlParser.KW_NOTIFY:
                        case PostgreSqlParser.KW_NOWAIT:
                        case PostgreSqlParser.KW_NULLS:
                        case PostgreSqlParser.KW_OBJECT:
                        case PostgreSqlParser.KW_OF:
                        case PostgreSqlParser.KW_OFF:
                        case PostgreSqlParser.KW_OIDS:
                        case PostgreSqlParser.KW_OPERATOR:
                        case PostgreSqlParser.KW_OPTION:
                        case PostgreSqlParser.KW_OPTIONS:
                        case PostgreSqlParser.KW_OWNED:
                        case PostgreSqlParser.KW_OWNER:
                        case PostgreSqlParser.KW_PARSER:
                        case PostgreSqlParser.KW_PARTIAL:
                        case PostgreSqlParser.KW_PARTITION:
                        case PostgreSqlParser.KW_PASSING:
                        case PostgreSqlParser.KW_PASSWORD:
                        case PostgreSqlParser.KW_PLANS:
                        case PostgreSqlParser.KW_PRECEDING:
                        case PostgreSqlParser.KW_PREPARE:
                        case PostgreSqlParser.KW_PREPARED:
                        case PostgreSqlParser.KW_PRESERVE:
                        case PostgreSqlParser.KW_PRIOR:
                        case PostgreSqlParser.KW_PRIVILEGES:
                        case PostgreSqlParser.KW_PROCEDURAL:
                        case PostgreSqlParser.KW_PROCEDURE:
                        case PostgreSqlParser.KW_PROGRAM:
                        case PostgreSqlParser.KW_QUOTE:
                        case PostgreSqlParser.KW_RANGE:
                        case PostgreSqlParser.KW_READ:
                        case PostgreSqlParser.KW_REASSIGN:
                        case PostgreSqlParser.KW_RECHECK:
                        case PostgreSqlParser.KW_RECURSIVE:
                        case PostgreSqlParser.KW_REF:
                        case PostgreSqlParser.KW_REFRESH:
                        case PostgreSqlParser.KW_REINDEX:
                        case PostgreSqlParser.KW_RELATIVE:
                        case PostgreSqlParser.KW_RELEASE:
                        case PostgreSqlParser.KW_RENAME:
                        case PostgreSqlParser.KW_REPEATABLE:
                        case PostgreSqlParser.KW_REPLACE:
                        case PostgreSqlParser.KW_REPLICA:
                        case PostgreSqlParser.KW_RESET:
                        case PostgreSqlParser.KW_RESTART:
                        case PostgreSqlParser.KW_RESTRICT:
                        case PostgreSqlParser.KW_RETURNS:
                        case PostgreSqlParser.KW_REVOKE:
                        case PostgreSqlParser.KW_ROLE:
                        case PostgreSqlParser.KW_ROLLBACK:
                        case PostgreSqlParser.KW_ROWS:
                        case PostgreSqlParser.KW_RULE:
                        case PostgreSqlParser.KW_SAVEPOINT:
                        case PostgreSqlParser.KW_SCHEMA:
                        case PostgreSqlParser.KW_SCROLL:
                        case PostgreSqlParser.KW_SEARCH:
                        case PostgreSqlParser.KW_SECOND:
                        case PostgreSqlParser.KW_SECURITY:
                        case PostgreSqlParser.KW_SEQUENCE:
                        case PostgreSqlParser.KW_SEQUENCES:
                        case PostgreSqlParser.KW_SERIALIZABLE:
                        case PostgreSqlParser.KW_SERVER:
                        case PostgreSqlParser.KW_SESSION:
                        case PostgreSqlParser.KW_SET:
                        case PostgreSqlParser.KW_SHARE:
                        case PostgreSqlParser.KW_SHOW:
                        case PostgreSqlParser.KW_SIMPLE:
                        case PostgreSqlParser.KW_SNAPSHOT:
                        case PostgreSqlParser.KW_STABLE:
                        case PostgreSqlParser.KW_STANDALONE:
                        case PostgreSqlParser.KW_START:
                        case PostgreSqlParser.KW_STATEMENT:
                        case PostgreSqlParser.KW_STATISTICS:
                        case PostgreSqlParser.KW_STDIN:
                        case PostgreSqlParser.KW_STDOUT:
                        case PostgreSqlParser.KW_STORAGE:
                        case PostgreSqlParser.KW_STRICT:
                        case PostgreSqlParser.KW_STRIP:
                        case PostgreSqlParser.KW_SYSID:
                        case PostgreSqlParser.KW_SYSTEM:
                        case PostgreSqlParser.KW_TABLES:
                        case PostgreSqlParser.KW_TABLESPACE:
                        case PostgreSqlParser.KW_TEMP:
                        case PostgreSqlParser.KW_TEMPLATE:
                        case PostgreSqlParser.KW_TEMPORARY:
                        case PostgreSqlParser.KW_TEXT:
                        case PostgreSqlParser.KW_TRANSACTION:
                        case PostgreSqlParser.KW_TRIGGER:
                        case PostgreSqlParser.KW_TRUNCATE:
                        case PostgreSqlParser.KW_TRUSTED:
                        case PostgreSqlParser.KW_TYPE:
                        case PostgreSqlParser.KW_TYPES:
                        case PostgreSqlParser.KW_UNBOUNDED:
                        case PostgreSqlParser.KW_UNCOMMITTED:
                        case PostgreSqlParser.KW_UNENCRYPTED:
                        case PostgreSqlParser.KW_UNKNOWN:
                        case PostgreSqlParser.KW_UNLISTEN:
                        case PostgreSqlParser.KW_UNLOGGED:
                        case PostgreSqlParser.KW_UNTIL:
                        case PostgreSqlParser.KW_UPDATE:
                        case PostgreSqlParser.KW_VACUUM:
                        case PostgreSqlParser.KW_VALID:
                        case PostgreSqlParser.KW_VALIDATE:
                        case PostgreSqlParser.KW_VALIDATOR:
                        case PostgreSqlParser.KW_VARYING:
                        case PostgreSqlParser.KW_VERSION:
                        case PostgreSqlParser.KW_VIEW:
                        case PostgreSqlParser.KW_VOLATILE:
                        case PostgreSqlParser.KW_WHITESPACE:
                        case PostgreSqlParser.KW_WITHOUT:
                        case PostgreSqlParser.KW_WORK:
                        case PostgreSqlParser.KW_WRAPPER:
                        case PostgreSqlParser.KW_WRITE:
                        case PostgreSqlParser.KW_XML:
                        case PostgreSqlParser.KW_YEAR:
                        case PostgreSqlParser.KW_YES:
                        case PostgreSqlParser.KW_ZONE:
                        case PostgreSqlParser.KW_CALL:
                        case PostgreSqlParser.KW_CURRENT:
                        case PostgreSqlParser.KW_ATTACH:
                        case PostgreSqlParser.KW_DETACH:
                        case PostgreSqlParser.KW_EXPRESSION:
                        case PostgreSqlParser.KW_GENERATED:
                        case PostgreSqlParser.KW_LOGGED:
                        case PostgreSqlParser.KW_STORED:
                        case PostgreSqlParser.KW_INCLUDE:
                        case PostgreSqlParser.KW_ROUTINE:
                        case PostgreSqlParser.KW_TRANSFORM:
                        case PostgreSqlParser.KW_IMPORT:
                        case PostgreSqlParser.KW_POLICY:
                        case PostgreSqlParser.KW_METHOD:
                        case PostgreSqlParser.KW_REFERENCING:
                        case PostgreSqlParser.KW_NEW:
                        case PostgreSqlParser.KW_OLD:
                        case PostgreSqlParser.KW_VALUE:
                        case PostgreSqlParser.KW_SUBSCRIPTION:
                        case PostgreSqlParser.KW_PUBLICATION:
                        case PostgreSqlParser.KW_ROUTINES:
                        case PostgreSqlParser.KW_SCHEMAS:
                        case PostgreSqlParser.KW_PROCEDURES:
                        case PostgreSqlParser.KW_INPUT:
                        case PostgreSqlParser.KW_SUPPORT:
                        case PostgreSqlParser.KW_PARALLEL:
                        case PostgreSqlParser.KW_SQL:
                        case PostgreSqlParser.KW_DEPENDS:
                        case PostgreSqlParser.KW_OVERRIDING:
                        case PostgreSqlParser.KW_CONFLICT:
                        case PostgreSqlParser.KW_SKIP:
                        case PostgreSqlParser.KW_LOCKED:
                        case PostgreSqlParser.KW_TIES:
                        case PostgreSqlParser.KW_ROLLUP:
                        case PostgreSqlParser.KW_CUBE:
                        case PostgreSqlParser.KW_SETS:
                        case PostgreSqlParser.KW_ORDINALITY:
                        case PostgreSqlParser.KW_COLUMNS:
                        case PostgreSqlParser.KW_ROWTYPE:
                        case PostgreSqlParser.KW_NORMALIZED:
                        case PostgreSqlParser.KW_WITHIN:
                        case PostgreSqlParser.KW_FILTER:
                        case PostgreSqlParser.KW_GROUPS:
                        case PostgreSqlParser.KW_OTHERS:
                        case PostgreSqlParser.KW_NFC:
                        case PostgreSqlParser.KW_NFD:
                        case PostgreSqlParser.KW_NFKC:
                        case PostgreSqlParser.KW_NFKD:
                        case PostgreSqlParser.KW_UESCAPE:
                        case PostgreSqlParser.KW_VIEWS:
                        case PostgreSqlParser.KW_DUMP:
                        case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                        case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                        case PostgreSqlParser.KW_ERROR:
                        case PostgreSqlParser.KW_USE_VARIABLE:
                        case PostgreSqlParser.KW_USE_COLUMN:
                        case PostgreSqlParser.KW_ALIAS:
                        case PostgreSqlParser.KW_CONSTANT:
                        case PostgreSqlParser.KW_PERFORM:
                        case PostgreSqlParser.KW_GET:
                        case PostgreSqlParser.KW_DIAGNOSTICS:
                        case PostgreSqlParser.KW_STACKED:
                        case PostgreSqlParser.KW_ELSIF:
                        case PostgreSqlParser.KW_REVERSE:
                        case PostgreSqlParser.KW_SLICE:
                        case PostgreSqlParser.KW_EXIT:
                        case PostgreSqlParser.KW_RETURN:
                        case PostgreSqlParser.KW_QUERY:
                        case PostgreSqlParser.KW_RAISE:
                        case PostgreSqlParser.KW_SQLSTATE:
                        case PostgreSqlParser.KW_DEBUG:
                        case PostgreSqlParser.KW_LOG:
                        case PostgreSqlParser.KW_INFO:
                        case PostgreSqlParser.KW_NOTICE:
                        case PostgreSqlParser.KW_WARNING:
                        case PostgreSqlParser.KW_EXCEPTION:
                        case PostgreSqlParser.KW_ASSERT:
                        case PostgreSqlParser.KW_OPEN:
                        case PostgreSqlParser.KW_PUBLIC:
                        case PostgreSqlParser.KW_SKIP_LOCKED:
                        case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                        case PostgreSqlParser.Identifier:
                        case PostgreSqlParser.QuotedIdentifier:
                        case PostgreSqlParser.UnicodeQuotedIdentifier:
                        case PostgreSqlParser.StringConstant:
                        case PostgreSqlParser.UnicodeEscapeStringConstant:
                        case PostgreSqlParser.BeginDollarStringConstant:
                        case PostgreSqlParser.PLSQLVARIABLENAME:
                        case PostgreSqlParser.PLSQLIDENTIFIER:
                        case PostgreSqlParser.EscapeStringConstant:
                            {
                            this.state = 6620;
                            this.errorHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this.tokenStream, 894, this.context) ) {
                            case 1:
                                {
                                this.state = 6618;
                                this.match(PostgreSqlParser.KW_DEFAULT);
                                }
                                break;
                            case 2:
                                {
                                this.state = 6619;
                                this.identifier();
                                }
                                break;
                            }
                            this.state = 6622;
                            this.expression();
                            }
                            break;
                        case PostgreSqlParser.KW_NOT:
                        case PostgreSqlParser.KW_NULL:
                            {
                            this.state = 6624;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 77) {
                                {
                                this.state = 6623;
                                this.match(PostgreSqlParser.KW_NOT);
                                }
                            }

                            this.state = 6626;
                            this.match(PostgreSqlParser.KW_NULL);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        this.state = 6629;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (((((_la - 53)) & ~0x1F) === 0 && ((1 << (_la - 53)) & 50331649) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 32767) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 4291821567) !== 0) || ((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & 4278187359) !== 0) || ((((_la - 497)) & ~0x1F) === 0 && ((1 << (_la - 497)) & 146800319) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587);
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_FOR:
                {
                this.state = 6633;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 6634;
                this.match(PostgreSqlParser.KW_ORDINALITY);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlNamespaceEle(): XmlNamespaceEleContext {
        let localContext = new XmlNamespaceEleContext(this.context, this.state);
        this.enterRule(localContext, 644, PostgreSqlParser.RULE_xmlNamespaceEle);
        try {
            this.state = 6643;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 900, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6637;
                this.primaryExpression(0);
                this.state = 6638;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 6639;
                this.colLabel();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6641;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 6642;
                this.primaryExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typename(): TypenameContext {
        let localContext = new TypenameContext(this.context, this.state);
        this.enterRule(localContext, 646, PostgreSqlParser.RULE_typename);
        let _la: number;
        try {
            let alternative: number;
            this.state = 6671;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 906, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 415) {
                    {
                    this.state = 6645;
                    this.match(PostgreSqlParser.KW_SETOF);
                    }
                }

                this.state = 6648;
                this.simpleTypeName();
                this.state = 6665;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 905, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 6656;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 903, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 6649;
                            this.match(PostgreSqlParser.OPEN_BRACKET);
                            this.state = 6651;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 574) {
                                {
                                this.state = 6650;
                                this.match(PostgreSqlParser.Integral);
                                }
                            }

                            this.state = 6653;
                            this.match(PostgreSqlParser.CLOSE_BRACKET);
                            }
                            }
                        }
                        this.state = 6658;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 903, this.context);
                    }
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 6659;
                    this.match(PostgreSqlParser.KW_ARRAY);
                    this.state = 6663;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 904, this.context) ) {
                    case 1:
                        {
                        this.state = 6660;
                        this.match(PostgreSqlParser.OPEN_BRACKET);
                        this.state = 6661;
                        this.match(PostgreSqlParser.Integral);
                        this.state = 6662;
                        this.match(PostgreSqlParser.CLOSE_BRACKET);
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6667;
                this.qualifiedName();
                this.state = 6668;
                this.match(PostgreSqlParser.PERCENT);
                this.state = 6669;
                _la = this.tokenStream.LA(1);
                if(!(_la === 360 || _la === 477)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleTypeName(): SimpleTypeNameContext {
        let localContext = new SimpleTypeNameContext(this.context, this.state);
        this.enterRule(localContext, 648, PostgreSqlParser.RULE_simpleTypeName);
        try {
            this.state = 6688;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 911, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6673;
                this.typeFunctionName();
                this.state = 6675;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 907, this.context) ) {
                case 1:
                    {
                    this.state = 6674;
                    this.attrs();
                    }
                    break;
                }
                this.state = 6678;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 908, this.context) ) {
                case 1:
                    {
                    this.state = 6677;
                    this.executeParamClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6680;
                this.constTypeName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6681;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 6686;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 910, this.context) ) {
                case 1:
                    {
                    this.state = 6683;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 909, this.context) ) {
                    case 1:
                        {
                        this.state = 6682;
                        this.optInterval();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 6685;
                    this.optFloat();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constTypeName(): ConstTypeNameContext {
        let localContext = new ConstTypeNameContext(this.context, this.state);
        this.enterRule(localContext, 650, PostgreSqlParser.RULE_constTypeName);
        try {
            this.state = 6694;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_SMALLINT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6690;
                this.numeric();
                }
                break;
            case PostgreSqlParser.KW_BIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6691;
                this.bit();
                }
                break;
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_VARCHAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6692;
                this.character();
                }
                break;
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6693;
                this.constDatetime();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numeric(): NumericContext {
        let localContext = new NumericContext(this.context, this.state);
        this.enterRule(localContext, 652, PostgreSqlParser.RULE_numeric);
        let _la: number;
        try {
            this.state = 6712;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_INT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6696;
                this.match(PostgreSqlParser.KW_INT);
                }
                break;
            case PostgreSqlParser.KW_INTEGER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6697;
                this.match(PostgreSqlParser.KW_INTEGER);
                }
                break;
            case PostgreSqlParser.KW_SMALLINT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6698;
                this.match(PostgreSqlParser.KW_SMALLINT);
                }
                break;
            case PostgreSqlParser.KW_BIGINT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6699;
                this.match(PostgreSqlParser.KW_BIGINT);
                }
                break;
            case PostgreSqlParser.KW_REAL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6700;
                this.match(PostgreSqlParser.KW_REAL);
                }
                break;
            case PostgreSqlParser.KW_FLOAT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6701;
                this.match(PostgreSqlParser.KW_FLOAT);
                this.state = 6703;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 913, this.context) ) {
                case 1:
                    {
                    this.state = 6702;
                    this.optFloat();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DOUBLE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6705;
                this.match(PostgreSqlParser.KW_DOUBLE);
                this.state = 6706;
                this.match(PostgreSqlParser.KW_PRECISION);
                }
                break;
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_NUMERIC:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6707;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 394)) & ~0x1F) === 0 && ((1 << (_la - 394)) & 32771) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6709;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 914, this.context) ) {
                case 1:
                    {
                    this.state = 6708;
                    this.executeParamClause();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_BOOLEAN:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6711;
                this.match(PostgreSqlParser.KW_BOOLEAN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optFloat(): OptFloatContext {
        let localContext = new OptFloatContext(this.context, this.state);
        this.enterRule(localContext, 654, PostgreSqlParser.RULE_optFloat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6714;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6715;
            this.match(PostgreSqlParser.Integral);
            this.state = 6716;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bit(): BitContext {
        let localContext = new BitContext(this.context, this.state);
        this.enterRule(localContext, 656, PostgreSqlParser.RULE_bit);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6718;
            this.match(PostgreSqlParser.KW_BIT);
            this.state = 6720;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 916, this.context) ) {
            case 1:
                {
                this.state = 6719;
                this.match(PostgreSqlParser.KW_VARYING);
                }
                break;
            }
            this.state = 6723;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 917, this.context) ) {
            case 1:
                {
                this.state = 6722;
                this.executeParamClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public character(): CharacterContext {
        let localContext = new CharacterContext(this.context, this.state);
        this.enterRule(localContext, 658, PostgreSqlParser.RULE_character);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6735;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_NCHAR:
                {
                this.state = 6725;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 32771) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6727;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 918, this.context) ) {
                case 1:
                    {
                    this.state = 6726;
                    this.match(PostgreSqlParser.KW_VARYING);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_VARCHAR:
                {
                this.state = 6729;
                this.match(PostgreSqlParser.KW_VARCHAR);
                }
                break;
            case PostgreSqlParser.KW_NATIONAL:
                {
                this.state = 6730;
                this.match(PostgreSqlParser.KW_NATIONAL);
                this.state = 6731;
                _la = this.tokenStream.LA(1);
                if(!(_la === 391 || _la === 392)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6733;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 919, this.context) ) {
                case 1:
                    {
                    this.state = 6732;
                    this.match(PostgreSqlParser.KW_VARYING);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 6738;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 921, this.context) ) {
            case 1:
                {
                this.state = 6737;
                this.optFloat();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constDatetime(): ConstDatetimeContext {
        let localContext = new ConstDatetimeContext(this.context, this.state);
        this.enterRule(localContext, 660, PostgreSqlParser.RULE_constDatetime);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6740;
            _la = this.tokenStream.LA(1);
            if(!(_la === 418 || _la === 419)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6742;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 922, this.context) ) {
            case 1:
                {
                this.state = 6741;
                this.optFloat();
                }
                break;
            }
            this.state = 6747;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 923, this.context) ) {
            case 1:
                {
                this.state = 6744;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 379)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6745;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 6746;
                this.match(PostgreSqlParser.KW_ZONE);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optInterval(): OptIntervalContext {
        let localContext = new OptIntervalContext(this.context, this.state);
        this.enterRule(localContext, 662, PostgreSqlParser.RULE_optInterval);
        try {
            this.state = 6778;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_MONTH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6749;
                this.match(PostgreSqlParser.KW_MONTH);
                }
                break;
            case PostgreSqlParser.KW_SECOND:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6750;
                this.intervalSecond();
                }
                break;
            case PostgreSqlParser.KW_YEAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6751;
                this.match(PostgreSqlParser.KW_YEAR);
                this.state = 6754;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 924, this.context) ) {
                case 1:
                    {
                    this.state = 6752;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 6753;
                    this.match(PostgreSqlParser.KW_MONTH);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DAY:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6756;
                this.match(PostgreSqlParser.KW_DAY);
                this.state = 6763;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 926, this.context) ) {
                case 1:
                    {
                    this.state = 6757;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 6761;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_HOUR:
                        {
                        this.state = 6758;
                        this.match(PostgreSqlParser.KW_HOUR);
                        }
                        break;
                    case PostgreSqlParser.KW_MINUTE:
                        {
                        this.state = 6759;
                        this.match(PostgreSqlParser.KW_MINUTE);
                        }
                        break;
                    case PostgreSqlParser.KW_SECOND:
                        {
                        this.state = 6760;
                        this.intervalSecond();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_HOUR:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6765;
                this.match(PostgreSqlParser.KW_HOUR);
                this.state = 6771;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 928, this.context) ) {
                case 1:
                    {
                    this.state = 6766;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 6769;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_MINUTE:
                        {
                        this.state = 6767;
                        this.match(PostgreSqlParser.KW_MINUTE);
                        }
                        break;
                    case PostgreSqlParser.KW_SECOND:
                        {
                        this.state = 6768;
                        this.intervalSecond();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_MINUTE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6773;
                this.match(PostgreSqlParser.KW_MINUTE);
                this.state = 6776;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 929, this.context) ) {
                case 1:
                    {
                    this.state = 6774;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 6775;
                    this.intervalSecond();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalSecond(): IntervalSecondContext {
        let localContext = new IntervalSecondContext(this.context, this.state);
        this.enterRule(localContext, 664, PostgreSqlParser.RULE_intervalSecond);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6780;
            this.match(PostgreSqlParser.KW_SECOND);
            this.state = 6782;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 931, this.context) ) {
            case 1:
                {
                this.state = 6781;
                this.optFloat();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 666, PostgreSqlParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6784;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 44237824) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 668, PostgreSqlParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6786;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 670;
        this.enterRecursionRule(localContext, 670, PostgreSqlParser.RULE_booleanExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6795;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.PARAM:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.BinaryStringConstant:
            case PostgreSqlParser.HexadecimalStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                localContext = new PredicatedContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 6789;
                (localContext as PredicatedContext)._valueExpression = this.valueExpression(0);
                this.state = 6791;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 932, this.context) ) {
                case 1:
                    {
                    this.state = 6790;
                    this.predicate((localContext as PredicatedContext)._valueExpression);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_NOT:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6793;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 6794;
                this.booleanExpression(3);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 6805;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 935, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 6803;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 934, this.context) ) {
                    case 1:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_booleanExpression);
                        this.state = 6797;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 6798;
                        (localContext as LogicalBinaryContext)._operator = this.match(PostgreSqlParser.KW_AND);
                        this.state = 6799;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_booleanExpression);
                        this.state = 6800;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 6801;
                        (localContext as LogicalBinaryContext)._operator = this.match(PostgreSqlParser.KW_OR);
                        this.state = 6802;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 6807;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 935, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(value: antlr.ParserRuleContext): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state, value);
        this.enterRule(localContext, 672, PostgreSqlParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 6879;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 947, this.context) ) {
            case 1:
                localContext = new ComparisonContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6808;
                this.comparisonOperator();
                this.state = 6809;
                (localContext as ComparisonContext)._right = this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new QuantifiedComparisonContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6811;
                this.comparisonOperator();
                this.state = 6812;
                this.subqueryOperator();
                this.state = 6813;
                this.subType();
                this.state = 6819;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 936, this.context) ) {
                case 1:
                    {
                    this.state = 6814;
                    this.selectWithParens();
                    }
                    break;
                case 2:
                    {
                    this.state = 6815;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6816;
                    this.expression();
                    this.state = 6817;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new BetweenContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6822;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6821;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6824;
                this.match(PostgreSqlParser.KW_BETWEEN);
                this.state = 6825;
                (localContext as BetweenContext)._lower = this.valueExpression(0);
                this.state = 6826;
                this.match(PostgreSqlParser.KW_AND);
                this.state = 6827;
                (localContext as BetweenContext)._upper = this.valueExpression(0);
                }
                break;
            case 4:
                localContext = new InListContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6830;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6829;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6832;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6833;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6834;
                this.expression();
                this.state = 6839;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 6835;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6836;
                    this.expression();
                    }
                    }
                    this.state = 6841;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 6842;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 5:
                localContext = new InSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6845;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6844;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6847;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6848;
                this.selectWithParens();
                }
                break;
            case 6:
                localContext = new LikeContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6850;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6849;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6860;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_LIKE:
                    {
                    this.state = 6852;
                    this.match(PostgreSqlParser.KW_LIKE);
                    }
                    break;
                case PostgreSqlParser.KW_ILIKE:
                    {
                    this.state = 6853;
                    this.match(PostgreSqlParser.KW_ILIKE);
                    }
                    break;
                case PostgreSqlParser.KW_SIMILAR:
                    {
                    this.state = 6854;
                    this.match(PostgreSqlParser.KW_SIMILAR);
                    this.state = 6855;
                    this.match(PostgreSqlParser.KW_TO);
                    }
                    break;
                case PostgreSqlParser.KW_BETWEEN:
                    {
                    this.state = 6856;
                    this.match(PostgreSqlParser.KW_BETWEEN);
                    this.state = 6858;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 91) {
                        {
                        this.state = 6857;
                        this.match(PostgreSqlParser.KW_SYMMETRIC);
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6862;
                (localContext as LikeContext)._pattern = this.valueExpression(0);
                this.state = 6865;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 944, this.context) ) {
                case 1:
                    {
                    this.state = 6863;
                    this.match(PostgreSqlParser.KW_ESCAPE);
                    this.state = 6864;
                    (localContext as LikeContext)._escape = this.valueExpression(0);
                    }
                    break;
                }
                }
                break;
            case 7:
                localContext = new NullPredicateContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6867;
                this.match(PostgreSqlParser.KW_IS);
                this.state = 6869;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6868;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6871;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 8:
                localContext = new DistinctFromContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6872;
                this.match(PostgreSqlParser.KW_IS);
                this.state = 6874;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6873;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6876;
                this.match(PostgreSqlParser.KW_DISTINCT);
                this.state = 6877;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 6878;
                (localContext as DistinctFromContext)._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 674;
        this.enterRecursionRule(localContext, 674, PostgreSqlParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6885;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 948, this.context) ) {
            case 1:
                {
                localContext = new ValueExpressionDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 6882;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                localContext = new ArithmeticUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6883;
                (localContext as ArithmeticUnaryContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                    (localContext as ArithmeticUnaryContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6884;
                this.valueExpression(4);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 6903;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 950, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 6901;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 949, this.context) ) {
                    case 1:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 6887;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 6888;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 134234624) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6889;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 6890;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 6891;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 12 || _la === 13)) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6892;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ConcatenationContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ConcatenationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 6893;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 6894;
                        this.match(PostgreSqlParser.CARET);
                        this.state = 6895;
                        (localContext as ConcatenationContext)._right = this.valueExpression(2);
                        }
                        break;
                    case 4:
                        {
                        localContext = new AtTimeZoneContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 6896;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 6897;
                        this.match(PostgreSqlParser.KW_AT);
                        this.state = 6898;
                        this.match(PostgreSqlParser.KW_TIME);
                        this.state = 6899;
                        this.match(PostgreSqlParser.KW_ZONE);
                        this.state = 6900;
                        this.expression();
                        }
                        break;
                    }
                    }
                }
                this.state = 6905;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 950, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 676;
        this.enterRecursionRule(localContext, 676, PostgreSqlParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6994;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 961, this.context) ) {
            case 1:
                {
                this.state = 6907;
                _la = this.tokenStream.LA(1);
                if(!(_la === 98 || _la === 396)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6908;
                this.selectWithParens();
                }
                break;
            case 2:
                {
                this.state = 6909;
                this.match(PostgreSqlParser.KW_ARRAY);
                this.state = 6912;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6910;
                    this.selectWithParens();
                    }
                    break;
                case PostgreSqlParser.OPEN_BRACKET:
                    {
                    this.state = 6911;
                    this.arrayExpr();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                {
                this.state = 6914;
                this.match(PostgreSqlParser.PARAM);
                this.state = 6915;
                this.optIndirection();
                }
                break;
            case 4:
                {
                this.state = 6916;
                this.match(PostgreSqlParser.KW_GROUPING);
                this.state = 6917;
                this.executeParamClause();
                }
                break;
            case 5:
                {
                this.state = 6918;
                this.match(PostgreSqlParser.Integral);
                }
                break;
            case 6:
                {
                this.state = 6919;
                this.match(PostgreSqlParser.Numeric);
                }
                break;
            case 7:
                {
                this.state = 6920;
                this.match(PostgreSqlParser.BinaryStringConstant);
                }
                break;
            case 8:
                {
                this.state = 6921;
                this.match(PostgreSqlParser.HexadecimalStringConstant);
                }
                break;
            case 9:
                {
                this.state = 6922;
                this.functionName();
                this.state = 6932;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6923;
                    this.stringConst();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6924;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6925;
                    this.funcArgList();
                    this.state = 6927;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 83) {
                        {
                        this.state = 6926;
                        this.sortClause();
                        }
                    }

                    this.state = 6929;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    this.state = 6930;
                    this.stringConst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 10:
                {
                this.state = 6935;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 190 || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 3525731551) !== 0) || _la === 423) {
                    {
                    this.state = 6934;
                    this.constTypeName();
                    }
                }

                this.state = 6937;
                this.stringConst();
                }
                break;
            case 11:
                {
                this.state = 6938;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 6946;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6939;
                    this.stringConst();
                    this.state = 6941;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 955, this.context) ) {
                    case 1:
                        {
                        this.state = 6940;
                        this.optInterval();
                        }
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6943;
                    this.optFloat();
                    this.state = 6944;
                    this.stringConst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 12:
                {
                this.state = 6948;
                this.match(PostgreSqlParser.KW_TRUE);
                }
                break;
            case 13:
                {
                this.state = 6949;
                this.match(PostgreSqlParser.KW_FALSE);
                }
                break;
            case 14:
                {
                this.state = 6950;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 15:
                {
                this.state = 6951;
                this.match(PostgreSqlParser.PLSQLVARIABLENAME);
                }
                break;
            case 16:
                {
                this.state = 6952;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6953;
                localContext._a_expr_in_parens = this.expression();
                this.state = 6954;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6955;
                this.optIndirection();
                }
                break;
            case 17:
                {
                this.state = 6957;
                this.match(PostgreSqlParser.KW_CASE);
                this.state = 6959;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3901572195) !== 0) || _la === 587) {
                    {
                    this.state = 6958;
                    this.expression();
                    }
                }

                this.state = 6962;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 6961;
                    this.when_clause();
                    }
                    }
                    this.state = 6964;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 102);
                this.state = 6968;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 58) {
                    {
                    this.state = 6966;
                    this.match(PostgreSqlParser.KW_ELSE);
                    this.state = 6967;
                    this.expression();
                    }
                }

                this.state = 6970;
                this.match(PostgreSqlParser.KW_END);
                }
                break;
            case 18:
                {
                this.state = 6972;
                this.func_expr();
                }
                break;
            case 19:
                {
                this.state = 6973;
                this.selectWithParens();
                this.state = 6975;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 960, this.context) ) {
                case 1:
                    {
                    this.state = 6974;
                    this.indirection();
                    }
                    break;
                }
                }
                break;
            case 20:
                {
                this.state = 6977;
                this.explicitRow();
                }
                break;
            case 21:
                {
                this.state = 6978;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6979;
                this.expression();
                this.state = 6980;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6981;
                this.exprList();
                this.state = 6982;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 22:
                {
                this.state = 6984;
                this.row();
                this.state = 6985;
                this.match(PostgreSqlParser.KW_OVERLAPS);
                this.state = 6986;
                this.row();
                }
                break;
            case 23:
                {
                this.state = 6988;
                this.qualifiedName();
                }
                break;
            case 24:
                {
                this.state = 6989;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6990;
                this.primaryExpression(5);
                }
                break;
            case 25:
                {
                this.state = 6991;
                this.qualOp();
                this.state = 6992;
                this.primaryExpression(2);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 7023;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 966, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 7021;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 965, this.context) ) {
                    case 1:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 6996;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 6997;
                        this.mathOp();
                        this.state = 6998;
                        this.primaryExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7000;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 7001;
                        this.match(PostgreSqlParser.TYPECAST);
                        this.state = 7002;
                        this.typename();
                        }
                        break;
                    case 3:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7003;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 7004;
                        this.qualOp();
                        this.state = 7006;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 962, this.context) ) {
                        case 1:
                            {
                            this.state = 7005;
                            this.primaryExpression(0);
                            }
                            break;
                        }
                        }
                        break;
                    case 4:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7008;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 7009;
                        this.match(PostgreSqlParser.KW_IS);
                        this.state = 7011;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 77) {
                            {
                            this.state = 7010;
                            this.match(PostgreSqlParser.KW_NOT);
                            }
                        }

                        this.state = 7019;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case PostgreSqlParser.KW_DISTINCT:
                            {
                            this.state = 7013;
                            this.match(PostgreSqlParser.KW_DISTINCT);
                            this.state = 7014;
                            this.match(PostgreSqlParser.KW_FROM);
                            this.state = 7015;
                            this.primaryExpression(0);
                            }
                            break;
                        case PostgreSqlParser.KW_OF:
                            {
                            this.state = 7016;
                            this.match(PostgreSqlParser.KW_OF);
                            this.state = 7017;
                            this.prepTypeClause();
                            }
                            break;
                        case PostgreSqlParser.KW_DOCUMENT:
                            {
                            this.state = 7018;
                            this.match(PostgreSqlParser.KW_DOCUMENT);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 7025;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 966, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public funcApplication(): FuncApplicationContext {
        let localContext = new FuncApplicationContext(this.context, this.state);
        this.enterRule(localContext, 678, PostgreSqlParser.RULE_funcApplication);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7026;
            this.functionName();
            this.state = 7027;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 7048;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 971, this.context) ) {
            case 1:
                {
                this.state = 7028;
                this.funcArgList();
                this.state = 7032;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7029;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7030;
                    this.match(PostgreSqlParser.KW_VARIADIC);
                    this.state = 7031;
                    this.funcArgExpr();
                    }
                }

                this.state = 7035;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 7034;
                    this.sortClause();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 7037;
                this.match(PostgreSqlParser.KW_VARIADIC);
                this.state = 7038;
                this.funcArgExpr();
                this.state = 7040;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 7039;
                    this.sortClause();
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 7042;
                _la = this.tokenStream.LA(1);
                if(!(_la === 30 || _la === 56)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7043;
                this.funcArgList();
                this.state = 7045;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 7044;
                    this.sortClause();
                    }
                }

                }
                break;
            case 4:
                {
                this.state = 7047;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            }
            this.state = 7050;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_expr(): Func_exprContext {
        let localContext = new Func_exprContext(this.context, this.state);
        this.enterRule(localContext, 680, PostgreSqlParser.RULE_func_expr);
        try {
            this.state = 7077;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 976, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7052;
                this.funcApplication();
                this.state = 7059;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 972, this.context) ) {
                case 1:
                    {
                    this.state = 7053;
                    this.match(PostgreSqlParser.KW_WITHIN);
                    this.state = 7054;
                    this.match(PostgreSqlParser.KW_GROUP);
                    this.state = 7055;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7056;
                    this.sortClause();
                    this.state = 7057;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                this.state = 7067;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 973, this.context) ) {
                case 1:
                    {
                    this.state = 7061;
                    this.match(PostgreSqlParser.KW_FILTER);
                    this.state = 7062;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7063;
                    this.match(PostgreSqlParser.KW_WHERE);
                    this.state = 7064;
                    this.expression();
                    this.state = 7065;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                this.state = 7074;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 975, this.context) ) {
                case 1:
                    {
                    this.state = 7069;
                    this.match(PostgreSqlParser.KW_OVER);
                    this.state = 7072;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.OPEN_PAREN:
                        {
                        this.state = 7070;
                        this.windowSpecification();
                        }
                        break;
                    case PostgreSqlParser.KW_DEFAULT:
                    case PostgreSqlParser.KW_IS:
                    case PostgreSqlParser.KW_OUTER:
                    case PostgreSqlParser.KW_OVER:
                    case PostgreSqlParser.KW_ABORT:
                    case PostgreSqlParser.KW_ABSOLUTE:
                    case PostgreSqlParser.KW_ACCESS:
                    case PostgreSqlParser.KW_ACTION:
                    case PostgreSqlParser.KW_ADD:
                    case PostgreSqlParser.KW_ADMIN:
                    case PostgreSqlParser.KW_AFTER:
                    case PostgreSqlParser.KW_AGGREGATE:
                    case PostgreSqlParser.KW_ALSO:
                    case PostgreSqlParser.KW_ALTER:
                    case PostgreSqlParser.KW_ALWAYS:
                    case PostgreSqlParser.KW_ASSERTION:
                    case PostgreSqlParser.KW_ASSIGNMENT:
                    case PostgreSqlParser.KW_AT:
                    case PostgreSqlParser.KW_ATTRIBUTE:
                    case PostgreSqlParser.KW_BACKWARD:
                    case PostgreSqlParser.KW_BEFORE:
                    case PostgreSqlParser.KW_BEGIN:
                    case PostgreSqlParser.KW_BY:
                    case PostgreSqlParser.KW_CACHE:
                    case PostgreSqlParser.KW_CALLED:
                    case PostgreSqlParser.KW_CASCADE:
                    case PostgreSqlParser.KW_CASCADED:
                    case PostgreSqlParser.KW_CATALOG:
                    case PostgreSqlParser.KW_CHAIN:
                    case PostgreSqlParser.KW_CHARACTERISTICS:
                    case PostgreSqlParser.KW_CHECKPOINT:
                    case PostgreSqlParser.KW_CLASS:
                    case PostgreSqlParser.KW_CLOSE:
                    case PostgreSqlParser.KW_CLUSTER:
                    case PostgreSqlParser.KW_COMMENT:
                    case PostgreSqlParser.KW_COMMENTS:
                    case PostgreSqlParser.KW_COMMIT:
                    case PostgreSqlParser.KW_COMMITTED:
                    case PostgreSqlParser.KW_CONFIGURATION:
                    case PostgreSqlParser.KW_CONNECTION:
                    case PostgreSqlParser.KW_CONSTRAINTS:
                    case PostgreSqlParser.KW_CONTENT:
                    case PostgreSqlParser.KW_CONTINUE:
                    case PostgreSqlParser.KW_CONVERSION:
                    case PostgreSqlParser.KW_COPY:
                    case PostgreSqlParser.KW_COST:
                    case PostgreSqlParser.KW_CSV:
                    case PostgreSqlParser.KW_CURSOR:
                    case PostgreSqlParser.KW_CYCLE:
                    case PostgreSqlParser.KW_DATA:
                    case PostgreSqlParser.KW_DATABASE:
                    case PostgreSqlParser.KW_DAY:
                    case PostgreSqlParser.KW_DEALLOCATE:
                    case PostgreSqlParser.KW_DECLARE:
                    case PostgreSqlParser.KW_DEFAULTS:
                    case PostgreSqlParser.KW_DEFERRED:
                    case PostgreSqlParser.KW_DEFINER:
                    case PostgreSqlParser.KW_DELETE:
                    case PostgreSqlParser.KW_DELIMITER:
                    case PostgreSqlParser.KW_DELIMITERS:
                    case PostgreSqlParser.KW_DICTIONARY:
                    case PostgreSqlParser.KW_DISABLE:
                    case PostgreSqlParser.KW_DISCARD:
                    case PostgreSqlParser.KW_DOCUMENT:
                    case PostgreSqlParser.KW_DOMAIN:
                    case PostgreSqlParser.KW_DOUBLE:
                    case PostgreSqlParser.KW_DROP:
                    case PostgreSqlParser.KW_EACH:
                    case PostgreSqlParser.KW_ENABLE:
                    case PostgreSqlParser.KW_ENCODING:
                    case PostgreSqlParser.KW_ENCRYPTED:
                    case PostgreSqlParser.KW_ENUM:
                    case PostgreSqlParser.KW_ESCAPE:
                    case PostgreSqlParser.KW_EVENT:
                    case PostgreSqlParser.KW_EXCLUDE:
                    case PostgreSqlParser.KW_EXCLUDING:
                    case PostgreSqlParser.KW_EXCLUSIVE:
                    case PostgreSqlParser.KW_EXECUTE:
                    case PostgreSqlParser.KW_EXPLAIN:
                    case PostgreSqlParser.KW_EXTENSION:
                    case PostgreSqlParser.KW_EXTERNAL:
                    case PostgreSqlParser.KW_FAMILY:
                    case PostgreSqlParser.KW_FIRST:
                    case PostgreSqlParser.KW_FOLLOWING:
                    case PostgreSqlParser.KW_FORCE:
                    case PostgreSqlParser.KW_FORWARD:
                    case PostgreSqlParser.KW_FUNCTION:
                    case PostgreSqlParser.KW_FUNCTIONS:
                    case PostgreSqlParser.KW_GLOBAL:
                    case PostgreSqlParser.KW_GRANTED:
                    case PostgreSqlParser.KW_HANDLER:
                    case PostgreSqlParser.KW_HEADER:
                    case PostgreSqlParser.KW_HOLD:
                    case PostgreSqlParser.KW_HOUR:
                    case PostgreSqlParser.KW_IDENTITY:
                    case PostgreSqlParser.KW_IF:
                    case PostgreSqlParser.KW_IMMEDIATE:
                    case PostgreSqlParser.KW_IMMUTABLE:
                    case PostgreSqlParser.KW_IMPLICIT:
                    case PostgreSqlParser.KW_INCLUDING:
                    case PostgreSqlParser.KW_INCREMENT:
                    case PostgreSqlParser.KW_INDEX:
                    case PostgreSqlParser.KW_INDEXES:
                    case PostgreSqlParser.KW_INHERIT:
                    case PostgreSqlParser.KW_INHERITS:
                    case PostgreSqlParser.KW_INLINE:
                    case PostgreSqlParser.KW_INSENSITIVE:
                    case PostgreSqlParser.KW_INSERT:
                    case PostgreSqlParser.KW_INSTEAD:
                    case PostgreSqlParser.KW_INVOKER:
                    case PostgreSqlParser.KW_ISOLATION:
                    case PostgreSqlParser.KW_KEY:
                    case PostgreSqlParser.KW_LABEL:
                    case PostgreSqlParser.KW_LANGUAGE:
                    case PostgreSqlParser.KW_LARGE:
                    case PostgreSqlParser.KW_LAST:
                    case PostgreSqlParser.KW_LEAKPROOF:
                    case PostgreSqlParser.KW_LEVEL:
                    case PostgreSqlParser.KW_LISTEN:
                    case PostgreSqlParser.KW_LOAD:
                    case PostgreSqlParser.KW_LOCAL:
                    case PostgreSqlParser.KW_LOCATION:
                    case PostgreSqlParser.KW_LOCK:
                    case PostgreSqlParser.KW_MAPPING:
                    case PostgreSqlParser.KW_MATCH:
                    case PostgreSqlParser.KW_MATERIALIZED:
                    case PostgreSqlParser.KW_MAXVALUE:
                    case PostgreSqlParser.KW_MINUTE:
                    case PostgreSqlParser.KW_MINVALUE:
                    case PostgreSqlParser.KW_MODE:
                    case PostgreSqlParser.KW_MONTH:
                    case PostgreSqlParser.KW_MOVE:
                    case PostgreSqlParser.KW_NAME:
                    case PostgreSqlParser.KW_NAMES:
                    case PostgreSqlParser.KW_NEXT:
                    case PostgreSqlParser.KW_NO:
                    case PostgreSqlParser.KW_NOTHING:
                    case PostgreSqlParser.KW_NOTIFY:
                    case PostgreSqlParser.KW_NOWAIT:
                    case PostgreSqlParser.KW_NULLS:
                    case PostgreSqlParser.KW_OBJECT:
                    case PostgreSqlParser.KW_OF:
                    case PostgreSqlParser.KW_OFF:
                    case PostgreSqlParser.KW_OIDS:
                    case PostgreSqlParser.KW_OPERATOR:
                    case PostgreSqlParser.KW_OPTION:
                    case PostgreSqlParser.KW_OPTIONS:
                    case PostgreSqlParser.KW_OWNED:
                    case PostgreSqlParser.KW_OWNER:
                    case PostgreSqlParser.KW_PARSER:
                    case PostgreSqlParser.KW_PARTIAL:
                    case PostgreSqlParser.KW_PARTITION:
                    case PostgreSqlParser.KW_PASSING:
                    case PostgreSqlParser.KW_PASSWORD:
                    case PostgreSqlParser.KW_PLANS:
                    case PostgreSqlParser.KW_PRECEDING:
                    case PostgreSqlParser.KW_PREPARE:
                    case PostgreSqlParser.KW_PREPARED:
                    case PostgreSqlParser.KW_PRESERVE:
                    case PostgreSqlParser.KW_PRIOR:
                    case PostgreSqlParser.KW_PRIVILEGES:
                    case PostgreSqlParser.KW_PROCEDURAL:
                    case PostgreSqlParser.KW_PROCEDURE:
                    case PostgreSqlParser.KW_PROGRAM:
                    case PostgreSqlParser.KW_QUOTE:
                    case PostgreSqlParser.KW_RANGE:
                    case PostgreSqlParser.KW_READ:
                    case PostgreSqlParser.KW_REASSIGN:
                    case PostgreSqlParser.KW_RECHECK:
                    case PostgreSqlParser.KW_RECURSIVE:
                    case PostgreSqlParser.KW_REF:
                    case PostgreSqlParser.KW_REFRESH:
                    case PostgreSqlParser.KW_REINDEX:
                    case PostgreSqlParser.KW_RELATIVE:
                    case PostgreSqlParser.KW_RELEASE:
                    case PostgreSqlParser.KW_RENAME:
                    case PostgreSqlParser.KW_REPEATABLE:
                    case PostgreSqlParser.KW_REPLACE:
                    case PostgreSqlParser.KW_REPLICA:
                    case PostgreSqlParser.KW_RESET:
                    case PostgreSqlParser.KW_RESTART:
                    case PostgreSqlParser.KW_RESTRICT:
                    case PostgreSqlParser.KW_RETURNS:
                    case PostgreSqlParser.KW_REVOKE:
                    case PostgreSqlParser.KW_ROLE:
                    case PostgreSqlParser.KW_ROLLBACK:
                    case PostgreSqlParser.KW_ROWS:
                    case PostgreSqlParser.KW_RULE:
                    case PostgreSqlParser.KW_SAVEPOINT:
                    case PostgreSqlParser.KW_SCHEMA:
                    case PostgreSqlParser.KW_SCROLL:
                    case PostgreSqlParser.KW_SEARCH:
                    case PostgreSqlParser.KW_SECOND:
                    case PostgreSqlParser.KW_SECURITY:
                    case PostgreSqlParser.KW_SEQUENCE:
                    case PostgreSqlParser.KW_SEQUENCES:
                    case PostgreSqlParser.KW_SERIALIZABLE:
                    case PostgreSqlParser.KW_SERVER:
                    case PostgreSqlParser.KW_SESSION:
                    case PostgreSqlParser.KW_SET:
                    case PostgreSqlParser.KW_SHARE:
                    case PostgreSqlParser.KW_SHOW:
                    case PostgreSqlParser.KW_SIMPLE:
                    case PostgreSqlParser.KW_SNAPSHOT:
                    case PostgreSqlParser.KW_STABLE:
                    case PostgreSqlParser.KW_STANDALONE:
                    case PostgreSqlParser.KW_START:
                    case PostgreSqlParser.KW_STATEMENT:
                    case PostgreSqlParser.KW_STATISTICS:
                    case PostgreSqlParser.KW_STDIN:
                    case PostgreSqlParser.KW_STDOUT:
                    case PostgreSqlParser.KW_STORAGE:
                    case PostgreSqlParser.KW_STRICT:
                    case PostgreSqlParser.KW_STRIP:
                    case PostgreSqlParser.KW_SYSID:
                    case PostgreSqlParser.KW_SYSTEM:
                    case PostgreSqlParser.KW_TABLES:
                    case PostgreSqlParser.KW_TABLESPACE:
                    case PostgreSqlParser.KW_TEMP:
                    case PostgreSqlParser.KW_TEMPLATE:
                    case PostgreSqlParser.KW_TEMPORARY:
                    case PostgreSqlParser.KW_TEXT:
                    case PostgreSqlParser.KW_TRANSACTION:
                    case PostgreSqlParser.KW_TRIGGER:
                    case PostgreSqlParser.KW_TRUNCATE:
                    case PostgreSqlParser.KW_TRUSTED:
                    case PostgreSqlParser.KW_TYPE:
                    case PostgreSqlParser.KW_TYPES:
                    case PostgreSqlParser.KW_UNBOUNDED:
                    case PostgreSqlParser.KW_UNCOMMITTED:
                    case PostgreSqlParser.KW_UNENCRYPTED:
                    case PostgreSqlParser.KW_UNKNOWN:
                    case PostgreSqlParser.KW_UNLISTEN:
                    case PostgreSqlParser.KW_UNLOGGED:
                    case PostgreSqlParser.KW_UNTIL:
                    case PostgreSqlParser.KW_UPDATE:
                    case PostgreSqlParser.KW_VACUUM:
                    case PostgreSqlParser.KW_VALID:
                    case PostgreSqlParser.KW_VALIDATE:
                    case PostgreSqlParser.KW_VALIDATOR:
                    case PostgreSqlParser.KW_VARYING:
                    case PostgreSqlParser.KW_VERSION:
                    case PostgreSqlParser.KW_VIEW:
                    case PostgreSqlParser.KW_VOLATILE:
                    case PostgreSqlParser.KW_WHITESPACE:
                    case PostgreSqlParser.KW_WITHOUT:
                    case PostgreSqlParser.KW_WORK:
                    case PostgreSqlParser.KW_WRAPPER:
                    case PostgreSqlParser.KW_WRITE:
                    case PostgreSqlParser.KW_XML:
                    case PostgreSqlParser.KW_YEAR:
                    case PostgreSqlParser.KW_YES:
                    case PostgreSqlParser.KW_ZONE:
                    case PostgreSqlParser.KW_BETWEEN:
                    case PostgreSqlParser.KW_BIGINT:
                    case PostgreSqlParser.KW_BIT:
                    case PostgreSqlParser.KW_BOOLEAN:
                    case PostgreSqlParser.KW_CHAR:
                    case PostgreSqlParser.KW_CHARACTER:
                    case PostgreSqlParser.KW_COALESCE:
                    case PostgreSqlParser.KW_DEC:
                    case PostgreSqlParser.KW_DECIMAL:
                    case PostgreSqlParser.KW_EXISTS:
                    case PostgreSqlParser.KW_EXTRACT:
                    case PostgreSqlParser.KW_FLOAT:
                    case PostgreSqlParser.KW_GREATEST:
                    case PostgreSqlParser.KW_INOUT:
                    case PostgreSqlParser.KW_INT:
                    case PostgreSqlParser.KW_INTEGER:
                    case PostgreSqlParser.KW_INTERVAL:
                    case PostgreSqlParser.KW_LEAST:
                    case PostgreSqlParser.KW_NATIONAL:
                    case PostgreSqlParser.KW_NCHAR:
                    case PostgreSqlParser.KW_NONE:
                    case PostgreSqlParser.KW_NULLIF:
                    case PostgreSqlParser.KW_NUMERIC:
                    case PostgreSqlParser.KW_OVERLAY:
                    case PostgreSqlParser.KW_POSITION:
                    case PostgreSqlParser.KW_PRECISION:
                    case PostgreSqlParser.KW_REAL:
                    case PostgreSqlParser.KW_ROW:
                    case PostgreSqlParser.KW_SETOF:
                    case PostgreSqlParser.KW_SMALLINT:
                    case PostgreSqlParser.KW_SUBSTRING:
                    case PostgreSqlParser.KW_TIME:
                    case PostgreSqlParser.KW_TIMESTAMP:
                    case PostgreSqlParser.KW_TREAT:
                    case PostgreSqlParser.KW_TRIM:
                    case PostgreSqlParser.KW_VALUES:
                    case PostgreSqlParser.KW_VARCHAR:
                    case PostgreSqlParser.KW_XMLATTRIBUTES:
                    case PostgreSqlParser.KW_XMLCONCAT:
                    case PostgreSqlParser.KW_XMLELEMENT:
                    case PostgreSqlParser.KW_XMLEXISTS:
                    case PostgreSqlParser.KW_XMLFOREST:
                    case PostgreSqlParser.KW_XMLPARSE:
                    case PostgreSqlParser.KW_XMLPI:
                    case PostgreSqlParser.KW_XMLROOT:
                    case PostgreSqlParser.KW_XMLSERIALIZE:
                    case PostgreSqlParser.KW_CALL:
                    case PostgreSqlParser.KW_CURRENT:
                    case PostgreSqlParser.KW_ATTACH:
                    case PostgreSqlParser.KW_DETACH:
                    case PostgreSqlParser.KW_EXPRESSION:
                    case PostgreSqlParser.KW_GENERATED:
                    case PostgreSqlParser.KW_LOGGED:
                    case PostgreSqlParser.KW_STORED:
                    case PostgreSqlParser.KW_INCLUDE:
                    case PostgreSqlParser.KW_ROUTINE:
                    case PostgreSqlParser.KW_TRANSFORM:
                    case PostgreSqlParser.KW_IMPORT:
                    case PostgreSqlParser.KW_POLICY:
                    case PostgreSqlParser.KW_METHOD:
                    case PostgreSqlParser.KW_REFERENCING:
                    case PostgreSqlParser.KW_NEW:
                    case PostgreSqlParser.KW_OLD:
                    case PostgreSqlParser.KW_VALUE:
                    case PostgreSqlParser.KW_SUBSCRIPTION:
                    case PostgreSqlParser.KW_PUBLICATION:
                    case PostgreSqlParser.KW_OUT:
                    case PostgreSqlParser.KW_ROUTINES:
                    case PostgreSqlParser.KW_SCHEMAS:
                    case PostgreSqlParser.KW_PROCEDURES:
                    case PostgreSqlParser.KW_INPUT:
                    case PostgreSqlParser.KW_SUPPORT:
                    case PostgreSqlParser.KW_PARALLEL:
                    case PostgreSqlParser.KW_SQL:
                    case PostgreSqlParser.KW_DEPENDS:
                    case PostgreSqlParser.KW_OVERRIDING:
                    case PostgreSqlParser.KW_CONFLICT:
                    case PostgreSqlParser.KW_SKIP:
                    case PostgreSqlParser.KW_LOCKED:
                    case PostgreSqlParser.KW_TIES:
                    case PostgreSqlParser.KW_ROLLUP:
                    case PostgreSqlParser.KW_CUBE:
                    case PostgreSqlParser.KW_GROUPING:
                    case PostgreSqlParser.KW_SETS:
                    case PostgreSqlParser.KW_ORDINALITY:
                    case PostgreSqlParser.KW_XMLTABLE:
                    case PostgreSqlParser.KW_COLUMNS:
                    case PostgreSqlParser.KW_XMLNAMESPACES:
                    case PostgreSqlParser.KW_ROWTYPE:
                    case PostgreSqlParser.KW_NORMALIZED:
                    case PostgreSqlParser.KW_WITHIN:
                    case PostgreSqlParser.KW_FILTER:
                    case PostgreSqlParser.KW_GROUPS:
                    case PostgreSqlParser.KW_OTHERS:
                    case PostgreSqlParser.KW_NFC:
                    case PostgreSqlParser.KW_NFD:
                    case PostgreSqlParser.KW_NFKC:
                    case PostgreSqlParser.KW_NFKD:
                    case PostgreSqlParser.KW_UESCAPE:
                    case PostgreSqlParser.KW_VIEWS:
                    case PostgreSqlParser.KW_NORMALIZE:
                    case PostgreSqlParser.KW_DUMP:
                    case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                    case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                    case PostgreSqlParser.KW_ERROR:
                    case PostgreSqlParser.KW_USE_VARIABLE:
                    case PostgreSqlParser.KW_USE_COLUMN:
                    case PostgreSqlParser.KW_ALIAS:
                    case PostgreSqlParser.KW_CONSTANT:
                    case PostgreSqlParser.KW_PERFORM:
                    case PostgreSqlParser.KW_GET:
                    case PostgreSqlParser.KW_DIAGNOSTICS:
                    case PostgreSqlParser.KW_STACKED:
                    case PostgreSqlParser.KW_ELSIF:
                    case PostgreSqlParser.KW_REVERSE:
                    case PostgreSqlParser.KW_SLICE:
                    case PostgreSqlParser.KW_EXIT:
                    case PostgreSqlParser.KW_RETURN:
                    case PostgreSqlParser.KW_QUERY:
                    case PostgreSqlParser.KW_RAISE:
                    case PostgreSqlParser.KW_SQLSTATE:
                    case PostgreSqlParser.KW_DEBUG:
                    case PostgreSqlParser.KW_LOG:
                    case PostgreSqlParser.KW_INFO:
                    case PostgreSqlParser.KW_NOTICE:
                    case PostgreSqlParser.KW_WARNING:
                    case PostgreSqlParser.KW_EXCEPTION:
                    case PostgreSqlParser.KW_ASSERT:
                    case PostgreSqlParser.KW_OPEN:
                    case PostgreSqlParser.KW_PUBLIC:
                    case PostgreSqlParser.KW_SKIP_LOCKED:
                    case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                    case PostgreSqlParser.Identifier:
                    case PostgreSqlParser.QuotedIdentifier:
                    case PostgreSqlParser.UnicodeQuotedIdentifier:
                    case PostgreSqlParser.StringConstant:
                    case PostgreSqlParser.UnicodeEscapeStringConstant:
                    case PostgreSqlParser.BeginDollarStringConstant:
                    case PostgreSqlParser.PLSQLVARIABLENAME:
                    case PostgreSqlParser.PLSQLIDENTIFIER:
                    case PostgreSqlParser.EscapeStringConstant:
                        {
                        this.state = 7071;
                        this.colId();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7076;
                this.funcExprCommonSubExpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcExprWindowless(): FuncExprWindowlessContext {
        let localContext = new FuncExprWindowlessContext(this.context, this.state);
        this.enterRule(localContext, 682, PostgreSqlParser.RULE_funcExprWindowless);
        try {
            this.state = 7081;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 977, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7079;
                this.funcApplication();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7080;
                this.funcExprCommonSubExpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcExprCommonSubExpr(): FuncExprCommonSubExprContext {
        let localContext = new FuncExprCommonSubExprContext(this.context, this.state);
        this.enterRule(localContext, 684, PostgreSqlParser.RULE_funcExprCommonSubExpr);
        let _la: number;
        try {
            this.state = 7257;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_COLLATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7083;
                this.match(PostgreSqlParser.KW_COLLATION);
                this.state = 7084;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 7085;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7086;
                this.expression();
                this.state = 7087;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_DATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7089;
                this.match(PostgreSqlParser.KW_CURRENT_DATE);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7090;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & 100663299) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7092;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 978, this.context) ) {
                case 1:
                    {
                    this.state = 7091;
                    this.optFloat();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_CURRENT_ROLE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7094;
                this.match(PostgreSqlParser.KW_CURRENT_ROLE);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_USER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7095;
                this.match(PostgreSqlParser.KW_CURRENT_USER);
                }
                break;
            case PostgreSqlParser.KW_SESSION_USER:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7096;
                this.match(PostgreSqlParser.KW_SESSION_USER);
                }
                break;
            case PostgreSqlParser.KW_USER:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7097;
                this.match(PostgreSqlParser.KW_USER);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_CATALOG:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7098;
                this.match(PostgreSqlParser.KW_CURRENT_CATALOG);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7099;
                this.match(PostgreSqlParser.KW_CURRENT_SCHEMA);
                }
                break;
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_TREAT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7100;
                _la = this.tokenStream.LA(1);
                if(!(_la === 41 || _la === 420)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7101;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7102;
                this.expression();
                this.state = 7103;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 7104;
                this.typename();
                this.state = 7105;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_EXTRACT:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7107;
                this.match(PostgreSqlParser.KW_EXTRACT);
                this.state = 7108;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7113;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 32767) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 4291821567) !== 0) || ((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & 4278187359) !== 0) || ((((_la - 497)) & ~0x1F) === 0 && ((1 << (_la - 497)) & 146800319) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                    {
                    this.state = 7109;
                    this.extractArg();
                    this.state = 7110;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 7111;
                    this.expression();
                    }
                }

                this.state = 7115;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_NORMALIZE:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7116;
                this.match(PostgreSqlParser.KW_NORMALIZE);
                this.state = 7117;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7118;
                this.expression();
                this.state = 7121;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7119;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7120;
                    this.unicodeNormalForm();
                    }
                }

                this.state = 7123;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_OVERLAY:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7125;
                this.match(PostgreSqlParser.KW_OVERLAY);
                this.state = 7126;
                this.match(PostgreSqlParser.OPEN_PAREN);
                {
                this.state = 7127;
                this.expression();
                this.state = 7128;
                this.match(PostgreSqlParser.KW_PLACING);
                this.state = 7129;
                this.expression();
                this.state = 7130;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 7131;
                this.expression();
                this.state = 7134;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 7132;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 7133;
                    this.expression();
                    }
                }

                }
                this.state = 7136;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_POSITION:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7138;
                this.match(PostgreSqlParser.KW_POSITION);
                this.state = 7139;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7144;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763019) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3901572195) !== 0) || _la === 587) {
                    {
                    this.state = 7140;
                    this.primaryExpression(0);
                    this.state = 7141;
                    this.match(PostgreSqlParser.KW_IN);
                    this.state = 7142;
                    this.primaryExpression(0);
                    }
                }

                this.state = 7146;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_SUBSTRING:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 7147;
                this.match(PostgreSqlParser.KW_SUBSTRING);
                this.state = 7148;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7150;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3901572195) !== 0) || _la === 587) {
                    {
                    this.state = 7149;
                    this.substrList();
                    }
                }

                this.state = 7152;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_TRIM:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 7153;
                this.match(PostgreSqlParser.KW_TRIM);
                this.state = 7154;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7156;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 39 || _la === 73 || _la === 95) {
                    {
                    this.state = 7155;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 39 || _la === 73 || _la === 95)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                {
                this.state = 7162;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 986, this.context) ) {
                case 1:
                    {
                    this.state = 7159;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3901572195) !== 0) || _la === 587) {
                        {
                        this.state = 7158;
                        this.expression();
                        }
                    }

                    this.state = 7161;
                    this.match(PostgreSqlParser.KW_FROM);
                    }
                    break;
                }
                this.state = 7164;
                this.exprList();
                }
                this.state = 7166;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_NULLIF:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 7168;
                this.match(PostgreSqlParser.KW_NULLIF);
                this.state = 7169;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7170;
                this.expression();
                this.state = 7171;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7172;
                this.expression();
                this.state = 7173;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_XMLCONCAT:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 7175;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & 2113) !== 0) || _la === 425)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7176;
                this.executeParamClause();
                }
                break;
            case PostgreSqlParser.KW_XMLELEMENT:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 7177;
                this.match(PostgreSqlParser.KW_XMLELEMENT);
                this.state = 7178;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7179;
                this.match(PostgreSqlParser.KW_NAME);
                this.state = 7180;
                this.colLabel();
                this.state = 7190;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7181;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7188;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 987, this.context) ) {
                    case 1:
                        {
                        {
                        this.state = 7182;
                        this.match(PostgreSqlParser.KW_XMLATTRIBUTES);
                        this.state = 7183;
                        this.match(PostgreSqlParser.OPEN_PAREN);
                        this.state = 7184;
                        this.xmlAttributeList();
                        this.state = 7185;
                        this.match(PostgreSqlParser.CLOSE_PAREN);
                        }
                        }
                        break;
                    case 2:
                        {
                        this.state = 7187;
                        this.exprList();
                        }
                        break;
                    }
                    }
                }

                this.state = 7192;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLEXISTS:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 7194;
                this.match(PostgreSqlParser.KW_XMLEXISTS);
                this.state = 7195;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7196;
                this.primaryExpression(0);
                this.state = 7197;
                this.xmlExistsArgument();
                this.state = 7198;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLFOREST:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 7200;
                this.match(PostgreSqlParser.KW_XMLFOREST);
                this.state = 7201;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7202;
                this.xmlAttributeList();
                this.state = 7203;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLPARSE:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 7205;
                this.match(PostgreSqlParser.KW_XMLPARSE);
                this.state = 7206;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7207;
                this.documentOrContent();
                this.state = 7208;
                this.expression();
                this.state = 7211;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 292 || _la === 347) {
                    {
                    this.state = 7209;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 292 || _la === 347)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 7210;
                    this.match(PostgreSqlParser.KW_WHITESPACE);
                    }
                }

                this.state = 7213;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLPI:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 7215;
                this.match(PostgreSqlParser.KW_XMLPI);
                this.state = 7216;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7217;
                this.match(PostgreSqlParser.KW_NAME);
                this.state = 7218;
                this.colLabel();
                this.state = 7221;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7219;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7220;
                    this.expression();
                    }
                }

                this.state = 7223;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLROOT:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 7225;
                this.match(PostgreSqlParser.KW_XMLROOT);
                this.state = 7226;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7227;
                this.match(PostgreSqlParser.KW_XML);
                this.state = 7228;
                this.expression();
                this.state = 7229;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7230;
                this.match(PostgreSqlParser.KW_VERSION);
                this.state = 7234;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 991, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 7231;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 7232;
                    this.match(PostgreSqlParser.KW_VALUE);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 7233;
                    this.expression();
                    }
                    break;
                }
                this.state = 7245;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7236;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7237;
                    this.match(PostgreSqlParser.KW_STANDALONE);
                    this.state = 7243;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_NO:
                    case PostgreSqlParser.KW_VALUE:
                        {
                        {
                        this.state = 7239;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 269) {
                            {
                            this.state = 7238;
                            this.match(PostgreSqlParser.KW_NO);
                            }
                        }

                        this.state = 7241;
                        this.match(PostgreSqlParser.KW_VALUE);
                        }
                        }
                        break;
                    case PostgreSqlParser.KW_YES:
                        {
                        this.state = 7242;
                        this.match(PostgreSqlParser.KW_YES);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                this.state = 7247;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLSERIALIZE:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 7249;
                this.match(PostgreSqlParser.KW_XMLSERIALIZE);
                this.state = 7250;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7251;
                this.documentOrContent();
                this.state = 7252;
                this.expression();
                this.state = 7253;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 7254;
                this.simpleTypeName();
                this.state = 7255;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlAttributeList(): XmlAttributeListContext {
        let localContext = new XmlAttributeListContext(this.context, this.state);
        this.enterRule(localContext, 686, PostgreSqlParser.RULE_xmlAttributeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7259;
            this.xmlAttributeEl();
            this.state = 7264;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7260;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7261;
                this.xmlAttributeEl();
                }
                }
                this.state = 7266;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlAttributeEl(): XmlAttributeElContext {
        let localContext = new XmlAttributeElContext(this.context, this.state);
        this.enterRule(localContext, 688, PostgreSqlParser.RULE_xmlAttributeEl);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7267;
            this.expression();
            this.state = 7270;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 7268;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 7269;
                this.colLabel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public documentOrContent(): DocumentOrContentContext {
        let localContext = new DocumentOrContentContext(this.context, this.state);
        this.enterRule(localContext, 690, PostgreSqlParser.RULE_documentOrContent);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7272;
            _la = this.tokenStream.LA(1);
            if(!(_la === 166 || _la === 188)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlExistsArgument(): XmlExistsArgumentContext {
        let localContext = new XmlExistsArgumentContext(this.context, this.state);
        this.enterRule(localContext, 692, PostgreSqlParser.RULE_xmlExistsArgument);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7274;
            this.match(PostgreSqlParser.KW_PASSING);
            this.state = 7276;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 998, this.context) ) {
            case 1:
                {
                this.state = 7275;
                this.xmlPassingMech();
                }
                break;
            }
            this.state = 7278;
            this.primaryExpression(0);
            this.state = 7280;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 147) {
                {
                this.state = 7279;
                this.xmlPassingMech();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlPassingMech(): XmlPassingMechContext {
        let localContext = new XmlPassingMechContext(this.context, this.state);
        this.enterRule(localContext, 694, PostgreSqlParser.RULE_xmlPassingMech);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7282;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 7283;
            _la = this.tokenStream.LA(1);
            if(!(_la === 304 || _la === 450)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 696, PostgreSqlParser.RULE_windowClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7285;
            this.match(PostgreSqlParser.KW_WINDOW);
            this.state = 7286;
            this.windowDefinition();
            this.state = 7291;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1000, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7287;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7288;
                    this.windowDefinition();
                    }
                    }
                }
                this.state = 7293;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1000, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowDefinition(): WindowDefinitionContext {
        let localContext = new WindowDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 698, PostgreSqlParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7294;
            this.colId();
            this.state = 7295;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 7296;
            this.windowSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public over_clause(): Over_clauseContext {
        let localContext = new Over_clauseContext(this.context, this.state);
        this.enterRule(localContext, 700, PostgreSqlParser.RULE_over_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7298;
            this.match(PostgreSqlParser.KW_OVER);
            this.state = 7301;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 7299;
                this.windowSpecification();
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 7300;
                this.colId();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpecification(): WindowSpecificationContext {
        let localContext = new WindowSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 702, PostgreSqlParser.RULE_windowSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7303;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 7305;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1002, this.context) ) {
            case 1:
                {
                this.state = 7304;
                this.colId();
                }
                break;
            }
            this.state = 7310;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 285) {
                {
                this.state = 7307;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 7308;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 7309;
                this.exprList();
                }
            }

            this.state = 7313;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 7312;
                this.sortClause();
                }
            }

            this.state = 7316;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 299 || _la === 320 || _la === 481) {
                {
                this.state = 7315;
                this.optFrameClause();
                }
            }

            this.state = 7318;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optFrameClause(): OptFrameClauseContext {
        let localContext = new OptFrameClauseContext(this.context, this.state);
        this.enterRule(localContext, 704, PostgreSqlParser.RULE_optFrameClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7320;
            _la = this.tokenStream.LA(1);
            if(!(_la === 299 || _la === 320 || _la === 481)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            {
            this.state = 7325;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1006, this.context) ) {
            case 1:
                {
                this.state = 7321;
                this.match(PostgreSqlParser.KW_BETWEEN);
                this.state = 7322;
                this.frameBound();
                this.state = 7323;
                this.match(PostgreSqlParser.KW_AND);
                }
                break;
            }
            this.state = 7327;
            this.frameBound();
            }
            this.state = 7338;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 199) {
                {
                this.state = 7329;
                this.match(PostgreSqlParser.KW_EXCLUDE);
                this.state = 7336;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_CURRENT:
                    {
                    this.state = 7330;
                    this.match(PostgreSqlParser.KW_CURRENT);
                    this.state = 7331;
                    this.match(PostgreSqlParser.KW_ROW);
                    }
                    break;
                case PostgreSqlParser.KW_GROUP:
                    {
                    this.state = 7332;
                    this.match(PostgreSqlParser.KW_GROUP);
                    }
                    break;
                case PostgreSqlParser.KW_TIES:
                    {
                    this.state = 7333;
                    this.match(PostgreSqlParser.KW_TIES);
                    }
                    break;
                case PostgreSqlParser.KW_NO:
                    {
                    this.state = 7334;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 7335;
                    this.match(PostgreSqlParser.KW_OTHERS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 706, PostgreSqlParser.RULE_frameBound);
        let _la: number;
        try {
            this.state = 7347;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1010, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7342;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1009, this.context) ) {
                case 1:
                    {
                    this.state = 7340;
                    this.match(PostgreSqlParser.KW_UNBOUNDED);
                    }
                    break;
                case 2:
                    {
                    this.state = 7341;
                    this.expression();
                    }
                    break;
                }
                this.state = 7344;
                _la = this.tokenStream.LA(1);
                if(!(_la === 208 || _la === 289)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7345;
                this.match(PostgreSqlParser.KW_CURRENT);
                this.state = 7346;
                this.match(PostgreSqlParser.KW_ROW);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row(): RowContext {
        let localContext = new RowContext(this.context, this.state);
        this.enterRule(localContext, 708, PostgreSqlParser.RULE_row);
        try {
            this.state = 7356;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ROW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7349;
                this.explicitRow();
                }
                break;
            case PostgreSqlParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7350;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7351;
                this.exprList();
                this.state = 7352;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7353;
                this.expression();
                this.state = 7354;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explicitRow(): ExplicitRowContext {
        let localContext = new ExplicitRowContext(this.context, this.state);
        this.enterRule(localContext, 710, PostgreSqlParser.RULE_explicitRow);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7358;
            this.match(PostgreSqlParser.KW_ROW);
            this.state = 7359;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 7361;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3901572195) !== 0) || _la === 587) {
                {
                this.state = 7360;
                this.exprList();
                }
            }

            this.state = 7363;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subType(): SubTypeContext {
        let localContext = new SubTypeContext(this.context, this.state);
        this.enterRule(localContext, 712, PostgreSqlParser.RULE_subType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7365;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || _la === 34 || _la === 90)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public allOp(): AllOpContext {
        let localContext = new AllOpContext(this.context, this.state);
        this.enterRule(localContext, 714, PostgreSqlParser.RULE_allOp);
        try {
            this.state = 7369;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7367;
                this.match(PostgreSqlParser.Operator);
                }
                break;
            case PostgreSqlParser.STAR:
            case PostgreSqlParser.EQUAL:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.SLASH:
            case PostgreSqlParser.CARET:
            case PostgreSqlParser.LT:
            case PostgreSqlParser.GT:
            case PostgreSqlParser.LESS_EQUALS:
            case PostgreSqlParser.GREATER_EQUALS:
            case PostgreSqlParser.NOT_EQUALS:
            case PostgreSqlParser.PERCENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7368;
                this.mathOp();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mathOp(): MathOpContext {
        let localContext = new MathOpContext(this.context, this.state);
        this.enterRule(localContext, 716, PostgreSqlParser.RULE_mathOp);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7371;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 178517504) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualOp(): QualOpContext {
        let localContext = new QualOpContext(this.context, this.state);
        this.enterRule(localContext, 718, PostgreSqlParser.RULE_qualOp);
        try {
            this.state = 7379;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7373;
                this.match(PostgreSqlParser.Operator);
                }
                break;
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7374;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 7375;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7376;
                this.anyOperator();
                this.state = 7377;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualAllOp(): QualAllOpContext {
        let localContext = new QualAllOpContext(this.context, this.state);
        this.enterRule(localContext, 720, PostgreSqlParser.RULE_qualAllOp);
        try {
            this.state = 7387;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.STAR:
            case PostgreSqlParser.EQUAL:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.SLASH:
            case PostgreSqlParser.CARET:
            case PostgreSqlParser.LT:
            case PostgreSqlParser.GT:
            case PostgreSqlParser.LESS_EQUALS:
            case PostgreSqlParser.GREATER_EQUALS:
            case PostgreSqlParser.NOT_EQUALS:
            case PostgreSqlParser.PERCENT:
            case PostgreSqlParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7381;
                this.allOp();
                }
                break;
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7382;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 7383;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7384;
                this.anyOperator();
                this.state = 7385;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subqueryOperator(): SubqueryOperatorContext {
        let localContext = new SubqueryOperatorContext(this.context, this.state);
        this.enterRule(localContext, 722, PostgreSqlParser.RULE_subqueryOperator);
        let _la: number;
        try {
            this.state = 7394;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.STAR:
            case PostgreSqlParser.EQUAL:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.SLASH:
            case PostgreSqlParser.CARET:
            case PostgreSqlParser.LT:
            case PostgreSqlParser.GT:
            case PostgreSqlParser.LESS_EQUALS:
            case PostgreSqlParser.GREATER_EQUALS:
            case PostgreSqlParser.NOT_EQUALS:
            case PostgreSqlParser.PERCENT:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7389;
                this.qualAllOp();
                }
                break;
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_LIKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7391;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7390;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 7393;
                _la = this.tokenStream.LA(1);
                if(!(_la === 114 || _la === 120)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exprList(): ExprListContext {
        let localContext = new ExprListContext(this.context, this.state);
        this.enterRule(localContext, 724, PostgreSqlParser.RULE_exprList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7396;
            this.expression();
            this.state = 7401;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1018, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7397;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7398;
                    this.expression();
                    }
                    }
                }
                this.state = 7403;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1018, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnExpr(): ColumnExprContext {
        let localContext = new ColumnExprContext(this.context, this.state);
        this.enterRule(localContext, 726, PostgreSqlParser.RULE_columnExpr);
        try {
            this.state = 7409;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1019, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 7404;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7405;
                this.expression();
                this.state = 7406;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7408;
                this.columnName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnExprNoParen(): ColumnExprNoParenContext {
        let localContext = new ColumnExprNoParenContext(this.context, this.state);
        this.enterRule(localContext, 728, PostgreSqlParser.RULE_columnExprNoParen);
        try {
            this.state = 7413;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1020, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7411;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7412;
                this.columnName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcArgList(): FuncArgListContext {
        let localContext = new FuncArgListContext(this.context, this.state);
        this.enterRule(localContext, 730, PostgreSqlParser.RULE_funcArgList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7415;
            this.funcArgExpr();
            this.state = 7420;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1021, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7416;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7417;
                    this.funcArgExpr();
                    }
                    }
                }
                this.state = 7422;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1021, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funcArgExpr(): FuncArgExprContext {
        let localContext = new FuncArgExprContext(this.context, this.state);
        this.enterRule(localContext, 732, PostgreSqlParser.RULE_funcArgExpr);
        let _la: number;
        try {
            this.state = 7430;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1023, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7423;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7424;
                this.expression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7425;
                this.typeFunctionName();
                this.state = 7428;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20 || _la === 22) {
                    {
                    this.state = 7426;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 20 || _la === 22)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 7427;
                    this.expression();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arrayExpr(): ArrayExprContext {
        let localContext = new ArrayExprContext(this.context, this.state);
        this.enterRule(localContext, 734, PostgreSqlParser.RULE_arrayExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7432;
            this.match(PostgreSqlParser.OPEN_BRACKET);
            this.state = 7442;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.PARAM:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.BinaryStringConstant:
            case PostgreSqlParser.HexadecimalStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 7433;
                this.exprList();
                }
                break;
            case PostgreSqlParser.OPEN_BRACKET:
                {
                {
                this.state = 7434;
                this.arrayExpr();
                this.state = 7439;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 7435;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7436;
                    this.arrayExpr();
                    }
                    }
                    this.state = 7441;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                }
                break;
            case PostgreSqlParser.CLOSE_BRACKET:
                break;
            default:
                break;
            }
            this.state = 7444;
            this.match(PostgreSqlParser.CLOSE_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extractArg(): ExtractArgContext {
        let localContext = new ExtractArgContext(this.context, this.state);
        this.enterRule(localContext, 736, PostgreSqlParser.RULE_extractArg);
        try {
            this.state = 7454;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1026, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7446;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7447;
                this.match(PostgreSqlParser.KW_YEAR);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7448;
                this.match(PostgreSqlParser.KW_MONTH);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7449;
                this.match(PostgreSqlParser.KW_DAY);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7450;
                this.match(PostgreSqlParser.KW_HOUR);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7451;
                this.match(PostgreSqlParser.KW_MINUTE);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7452;
                this.match(PostgreSqlParser.KW_SECOND);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7453;
                this.stringConst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unicodeNormalForm(): UnicodeNormalFormContext {
        let localContext = new UnicodeNormalFormContext(this.context, this.state);
        this.enterRule(localContext, 738, PostgreSqlParser.RULE_unicodeNormalForm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7456;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public substrList(): SubstrListContext {
        let localContext = new SubstrListContext(this.context, this.state);
        this.enterRule(localContext, 740, PostgreSqlParser.RULE_substrList);
        let _la: number;
        try {
            this.state = 7479;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1029, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7458;
                this.expression();
                this.state = 7459;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 7460;
                this.expression();
                this.state = 7463;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 7461;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 7462;
                    this.expression();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7465;
                this.expression();
                this.state = 7466;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 7467;
                this.expression();
                this.state = 7470;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64) {
                    {
                    this.state = 7468;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 7469;
                    this.expression();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7472;
                this.expression();
                this.state = 7473;
                this.match(PostgreSqlParser.KW_SIMILAR);
                this.state = 7474;
                this.expression();
                this.state = 7475;
                this.match(PostgreSqlParser.KW_ESCAPE);
                this.state = 7476;
                this.expression();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7478;
                this.exprList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public when_clause(): When_clauseContext {
        let localContext = new When_clauseContext(this.context, this.state);
        this.enterRule(localContext, 742, PostgreSqlParser.RULE_when_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7481;
            this.match(PostgreSqlParser.KW_WHEN);
            this.state = 7482;
            this.expression();
            this.state = 7483;
            this.match(PostgreSqlParser.KW_THEN);
            this.state = 7484;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indirectionEl(): IndirectionElContext {
        let localContext = new IndirectionElContext(this.context, this.state);
        this.enterRule(localContext, 744, PostgreSqlParser.RULE_indirectionEl);
        let _la: number;
        try {
            this.state = 7503;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.DOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7486;
                this.match(PostgreSqlParser.DOT);
                this.state = 7489;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ALL:
                case PostgreSqlParser.KW_ANALYSE:
                case PostgreSqlParser.KW_ANALYZE:
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ANY:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_AS:
                case PostgreSqlParser.KW_ASC:
                case PostgreSqlParser.KW_ASYMMETRIC:
                case PostgreSqlParser.KW_BOTH:
                case PostgreSqlParser.KW_CASE:
                case PostgreSqlParser.KW_CAST:
                case PostgreSqlParser.KW_CHECK:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_COLUMN:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_CREATE:
                case PostgreSqlParser.KW_CURRENT_CATALOG:
                case PostgreSqlParser.KW_CURRENT_DATE:
                case PostgreSqlParser.KW_CURRENT_ROLE:
                case PostgreSqlParser.KW_CURRENT_TIME:
                case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
                case PostgreSqlParser.KW_CURRENT_USER:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DEFERRABLE:
                case PostgreSqlParser.KW_DESC:
                case PostgreSqlParser.KW_DISTINCT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_ELSE:
                case PostgreSqlParser.KW_EXCEPT:
                case PostgreSqlParser.KW_FALSE:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_FOR:
                case PostgreSqlParser.KW_FOREIGN:
                case PostgreSqlParser.KW_FROM:
                case PostgreSqlParser.KW_GRANT:
                case PostgreSqlParser.KW_GROUP:
                case PostgreSqlParser.KW_HAVING:
                case PostgreSqlParser.KW_IN:
                case PostgreSqlParser.KW_INITIALLY:
                case PostgreSqlParser.KW_INTERSECT:
                case PostgreSqlParser.KW_LATERAL:
                case PostgreSqlParser.KW_LEADING:
                case PostgreSqlParser.KW_LIMIT:
                case PostgreSqlParser.KW_LOCALTIME:
                case PostgreSqlParser.KW_LOCALTIMESTAMP:
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_NULL:
                case PostgreSqlParser.KW_OFFSET:
                case PostgreSqlParser.KW_ON:
                case PostgreSqlParser.KW_ONLY:
                case PostgreSqlParser.KW_OR:
                case PostgreSqlParser.KW_ORDER:
                case PostgreSqlParser.KW_PLACING:
                case PostgreSqlParser.KW_PRIMARY:
                case PostgreSqlParser.KW_REFERENCES:
                case PostgreSqlParser.KW_RETURNING:
                case PostgreSqlParser.KW_SELECT:
                case PostgreSqlParser.KW_SESSION_USER:
                case PostgreSqlParser.KW_SOME:
                case PostgreSqlParser.KW_SYMMETRIC:
                case PostgreSqlParser.KW_TABLE:
                case PostgreSqlParser.KW_THEN:
                case PostgreSqlParser.KW_TO:
                case PostgreSqlParser.KW_TRAILING:
                case PostgreSqlParser.KW_TRUE:
                case PostgreSqlParser.KW_UNION:
                case PostgreSqlParser.KW_UNIQUE:
                case PostgreSqlParser.KW_USER:
                case PostgreSqlParser.KW_USING:
                case PostgreSqlParser.KW_VARIADIC:
                case PostgreSqlParser.KW_WHEN:
                case PostgreSqlParser.KW_WHERE:
                case PostgreSqlParser.KW_WINDOW:
                case PostgreSqlParser.KW_WITH:
                case PostgreSqlParser.KW_AUTHORIZATION:
                case PostgreSqlParser.KW_BINARY:
                case PostgreSqlParser.KW_COLLATION:
                case PostgreSqlParser.KW_CONCURRENTLY:
                case PostgreSqlParser.KW_CROSS:
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                case PostgreSqlParser.KW_FREEZE:
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_ILIKE:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_ISNULL:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_LIKE:
                case PostgreSqlParser.KW_NATURAL:
                case PostgreSqlParser.KW_NOTNULL:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_OVERLAPS:
                case PostgreSqlParser.KW_RIGHT:
                case PostgreSqlParser.KW_SIMILAR:
                case PostgreSqlParser.KW_VERBOSE:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_END:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_TABLESAMPLE:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 7487;
                    this.colLabel();
                    }
                    break;
                case PostgreSqlParser.STAR:
                    {
                    this.state = 7488;
                    this.match(PostgreSqlParser.STAR);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSqlParser.OPEN_BRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7491;
                this.match(PostgreSqlParser.OPEN_BRACKET);
                this.state = 7500;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1033, this.context) ) {
                case 1:
                    {
                    this.state = 7492;
                    this.expression();
                    }
                    break;
                case 2:
                    {
                    this.state = 7494;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3901572195) !== 0) || _la === 587) {
                        {
                        this.state = 7493;
                        this.expression();
                        }
                    }

                    this.state = 7496;
                    this.match(PostgreSqlParser.COLON);
                    this.state = 7498;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3901572195) !== 0) || _la === 587) {
                        {
                        this.state = 7497;
                        this.expression();
                        }
                    }

                    }
                    break;
                }
                this.state = 7502;
                this.match(PostgreSqlParser.CLOSE_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indirection(): IndirectionContext {
        let localContext = new IndirectionContext(this.context, this.state);
        this.enterRule(localContext, 746, PostgreSqlParser.RULE_indirection);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7506;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 7505;
                    this.indirectionEl();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 7508;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1035, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optIndirection(): OptIndirectionContext {
        let localContext = new OptIndirectionContext(this.context, this.state);
        this.enterRule(localContext, 748, PostgreSqlParser.RULE_optIndirection);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7513;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1036, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7510;
                    this.indirectionEl();
                    }
                    }
                }
                this.state = 7515;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1036, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public targetList(): TargetListContext {
        let localContext = new TargetListContext(this.context, this.state);
        this.enterRule(localContext, 750, PostgreSqlParser.RULE_targetList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7516;
            this.targetEl();
            this.state = 7521;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1037, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7517;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7518;
                    this.targetEl();
                    }
                    }
                }
                this.state = 7523;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1037, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public targetEl(): TargetElContext {
        let localContext = new TargetElContext(this.context, this.state);
        this.enterRule(localContext, 752, PostgreSqlParser.RULE_targetEl);
        try {
            this.state = 7532;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1039, this.context) ) {
            case 1:
                localContext = new Target_labelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7524;
                this.columnExprNoParen();
                this.state = 7529;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1038, this.context) ) {
                case 1:
                    {
                    this.state = 7525;
                    this.match(PostgreSqlParser.KW_AS);
                    this.state = 7526;
                    this.colLabel();
                    }
                    break;
                case 2:
                    {
                    this.state = 7527;
                    this.identifier();
                    }
                    break;
                case 3:
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new Target_starContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7531;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedNameList(): QualifiedNameListContext {
        let localContext = new QualifiedNameListContext(this.context, this.state);
        this.enterRule(localContext, 754, PostgreSqlParser.RULE_qualifiedNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7534;
            this.qualifiedName();
            this.state = 7539;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7535;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7536;
                this.qualifiedName();
                }
                }
                this.state = 7541;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableNameList(): TableNameListContext {
        let localContext = new TableNameListContext(this.context, this.state);
        this.enterRule(localContext, 756, PostgreSqlParser.RULE_tableNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7542;
            this.tableName();
            this.state = 7547;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7543;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7544;
                this.tableName();
                }
                }
                this.state = 7549;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaNameList(): SchemaNameListContext {
        let localContext = new SchemaNameListContext(this.context, this.state);
        this.enterRule(localContext, 758, PostgreSqlParser.RULE_schemaNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7550;
            this.schemaName();
            this.state = 7555;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7551;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7552;
                this.schemaName();
                }
                }
                this.state = 7557;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseNameList(): DatabaseNameListContext {
        let localContext = new DatabaseNameListContext(this.context, this.state);
        this.enterRule(localContext, 760, PostgreSqlParser.RULE_databaseNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7558;
            this.databaseName();
            this.state = 7563;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7559;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7560;
                this.databaseName();
                }
                }
                this.state = 7565;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSpaceNameCreate(): TableSpaceNameCreateContext {
        let localContext = new TableSpaceNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 762, PostgreSqlParser.RULE_tableSpaceNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7566;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSpaceName(): TableSpaceNameContext {
        let localContext = new TableSpaceNameContext(this.context, this.state);
        this.enterRule(localContext, 764, PostgreSqlParser.RULE_tableSpaceName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7568;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableNameCreate(): TableNameCreateContext {
        let localContext = new TableNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 766, PostgreSqlParser.RULE_tableNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7570;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 768, PostgreSqlParser.RULE_tableName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7572;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewNameCreate(): ViewNameCreateContext {
        let localContext = new ViewNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 770, PostgreSqlParser.RULE_viewNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7574;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewName(): ViewNameContext {
        let localContext = new ViewNameContext(this.context, this.state);
        this.enterRule(localContext, 772, PostgreSqlParser.RULE_viewName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7576;
            this.anyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 774, PostgreSqlParser.RULE_qualifiedName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7578;
            this.colId();
            this.state = 7580;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1044, this.context) ) {
            case 1:
                {
                this.state = 7579;
                this.indirection();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSpaceNameList(): TableSpaceNameListContext {
        let localContext = new TableSpaceNameListContext(this.context, this.state);
        this.enterRule(localContext, 776, PostgreSqlParser.RULE_tableSpaceNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7582;
            this.tableSpaceName();
            this.state = 7587;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7583;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7584;
                this.tableSpaceName();
                }
                }
                this.state = 7589;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nameList(): NameListContext {
        let localContext = new NameListContext(this.context, this.state);
        this.enterRule(localContext, 778, PostgreSqlParser.RULE_nameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7590;
            this.colId();
            this.state = 7595;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7591;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7592;
                this.colId();
                }
                }
                this.state = 7597;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseNameCreate(): DatabaseNameCreateContext {
        let localContext = new DatabaseNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 780, PostgreSqlParser.RULE_databaseNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7598;
            this.anyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseName(): DatabaseNameContext {
        let localContext = new DatabaseNameContext(this.context, this.state);
        this.enterRule(localContext, 782, PostgreSqlParser.RULE_databaseName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7600;
            this.anyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaName(): SchemaNameContext {
        let localContext = new SchemaNameContext(this.context, this.state);
        this.enterRule(localContext, 784, PostgreSqlParser.RULE_schemaName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7602;
            this.anyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineNameCreate(): RoutineNameCreateContext {
        let localContext = new RoutineNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 786, PostgreSqlParser.RULE_routineNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7604;
            this.colId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineName(): RoutineNameContext {
        let localContext = new RoutineNameContext(this.context, this.state);
        this.enterRule(localContext, 788, PostgreSqlParser.RULE_routineName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7606;
            this.colId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureName(): ProcedureNameContext {
        let localContext = new ProcedureNameContext(this.context, this.state);
        this.enterRule(localContext, 790, PostgreSqlParser.RULE_procedureName);
        try {
            this.state = 7612;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1047, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7608;
                this.typeFunctionName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7609;
                this.colId();
                this.state = 7610;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedureNameCreate(): ProcedureNameCreateContext {
        let localContext = new ProcedureNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 792, PostgreSqlParser.RULE_procedureNameCreate);
        try {
            this.state = 7618;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1048, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7614;
                this.typeFunctionName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7615;
                this.colId();
                this.state = 7616;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 794, PostgreSqlParser.RULE_columnName);
        try {
            this.state = 7624;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1049, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7620;
                this.colId();
                this.state = 7621;
                this.optIndirection();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7623;
                if (!(this.shouldMatchEmpty())) {
                    throw this.createFailedPredicateException("this.shouldMatchEmpty()");
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        let localContext = new ColumnNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 796, PostgreSqlParser.RULE_columnNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7626;
            this.colId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        let localContext = new FunctionNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 798, PostgreSqlParser.RULE_functionNameCreate);
        try {
            this.state = 7632;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1050, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7628;
                this.typeFunctionName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7629;
                this.colId();
                this.state = 7630;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionName(): FunctionNameContext {
        let localContext = new FunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 800, PostgreSqlParser.RULE_functionName);
        try {
            this.state = 7638;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1051, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7634;
                this.typeFunctionName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7635;
                this.colId();
                this.state = 7636;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringConst(): StringConstContext {
        let localContext = new StringConstContext(this.context, this.state);
        this.enterRule(localContext, 802, PostgreSqlParser.RULE_stringConst);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7640;
            this.anysconst();
            this.state = 7643;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1052, this.context) ) {
            case 1:
                {
                this.state = 7641;
                this.match(PostgreSqlParser.KW_UESCAPE);
                this.state = 7642;
                this.anysconst();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anysconst(): AnysconstContext {
        let localContext = new AnysconstContext(this.context, this.state);
        this.enterRule(localContext, 804, PostgreSqlParser.RULE_anysconst);
        let _la: number;
        try {
            this.state = 7656;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7645;
                this.match(PostgreSqlParser.StringConstant);
                }
                break;
            case PostgreSqlParser.UnicodeEscapeStringConstant:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7646;
                this.match(PostgreSqlParser.UnicodeEscapeStringConstant);
                }
                break;
            case PostgreSqlParser.BeginDollarStringConstant:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7647;
                this.match(PostgreSqlParser.BeginDollarStringConstant);
                this.state = 7651;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 591) {
                    {
                    {
                    this.state = 7648;
                    this.match(PostgreSqlParser.DollarText);
                    }
                    }
                    this.state = 7653;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 7654;
                this.match(PostgreSqlParser.EndDollarStringConstant);
                }
                break;
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7655;
                this.match(PostgreSqlParser.EscapeStringConstant);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signedConst(): SignedConstContext {
        let localContext = new SignedConstContext(this.context, this.state);
        this.enterRule(localContext, 806, PostgreSqlParser.RULE_signedConst);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7659;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 12 || _la === 13) {
                {
                this.state = 7658;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 7661;
            this.match(PostgreSqlParser.Integral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleSpec(): RoleSpecContext {
        let localContext = new RoleSpecContext(this.context, this.state);
        this.enterRule(localContext, 808, PostgreSqlParser.RULE_roleSpec);
        try {
            this.state = 7668;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1056, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7663;
                this.nonReservedWord();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7664;
                this.match(PostgreSqlParser.KW_CURRENT_USER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7665;
                this.match(PostgreSqlParser.KW_CURRENT_ROLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7666;
                this.match(PostgreSqlParser.KW_SESSION_USER);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7667;
                this.match(PostgreSqlParser.KW_PUBLIC);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleList(): RoleListContext {
        let localContext = new RoleListContext(this.context, this.state);
        this.enterRule(localContext, 810, PostgreSqlParser.RULE_roleList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7670;
            this.roleSpec();
            this.state = 7675;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7671;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7672;
                this.roleSpec();
                }
                }
                this.state = 7677;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colId(): ColIdContext {
        let localContext = new ColIdContext(this.context, this.state);
        this.enterRule(localContext, 812, PostgreSqlParser.RULE_colId);
        try {
            this.state = 7680;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1058, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7678;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7679;
                this.colNameKeyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeFunctionName(): TypeFunctionNameContext {
        let localContext = new TypeFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 814, PostgreSqlParser.RULE_typeFunctionName);
        try {
            this.state = 7684;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1059, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7682;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7683;
                this.typeFuncNameKeyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReservedWord(): NonReservedWordContext {
        let localContext = new NonReservedWordContext(this.context, this.state);
        this.enterRule(localContext, 816, PostgreSqlParser.RULE_nonReservedWord);
        try {
            this.state = 7689;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1060, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7686;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7687;
                this.colNameKeyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7688;
                this.typeFuncNameKeyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colLabel(): ColLabelContext {
        let localContext = new ColLabelContext(this.context, this.state);
        this.enterRule(localContext, 818, PostgreSqlParser.RULE_colLabel);
        try {
            this.state = 7695;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1061, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7691;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7692;
                this.colNameKeyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7693;
                this.typeFuncNameKeyword();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7694;
                this.reservedKeyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 820, PostgreSqlParser.RULE_identifier);
        try {
            this.state = 7708;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7697;
                this.match(PostgreSqlParser.Identifier);
                this.state = 7700;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1062, this.context) ) {
                case 1:
                    {
                    this.state = 7698;
                    this.match(PostgreSqlParser.KW_UESCAPE);
                    this.state = 7699;
                    this.anysconst();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7702;
                this.stringConst();
                }
                break;
            case PostgreSqlParser.QuotedIdentifier:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7703;
                this.match(PostgreSqlParser.QuotedIdentifier);
                }
                break;
            case PostgreSqlParser.UnicodeQuotedIdentifier:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7704;
                this.match(PostgreSqlParser.UnicodeQuotedIdentifier);
                }
                break;
            case PostgreSqlParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7705;
                this.match(PostgreSqlParser.PLSQLVARIABLENAME);
                }
                break;
            case PostgreSqlParser.PLSQLIDENTIFIER:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7706;
                this.match(PostgreSqlParser.PLSQLIDENTIFIER);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7707;
                this.unreservedKeyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unreservedKeyword(): UnreservedKeywordContext {
        let localContext = new UnreservedKeywordContext(this.context, this.state);
        this.enterRule(localContext, 822, PostgreSqlParser.RULE_unreservedKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7710;
            _la = this.tokenStream.LA(1);
            if(!(_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 32767) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 4291821567) !== 0) || ((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & 4278187359) !== 0) || ((((_la - 497)) & ~0x1F) === 0 && ((1 << (_la - 497)) & 146800319) !== 0) || _la === 547 || _la === 548)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colNameKeyword(): ColNameKeywordContext {
        let localContext = new ColNameKeywordContext(this.context, this.state);
        this.enterRule(localContext, 824, PostgreSqlParser.RULE_colNameKeyword);
        try {
            this.state = 7763;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1064, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7712;
                this.match(PostgreSqlParser.KW_BETWEEN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7713;
                this.match(PostgreSqlParser.KW_BIGINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7714;
                this.bit();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7715;
                this.match(PostgreSqlParser.KW_BOOLEAN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7716;
                this.match(PostgreSqlParser.KW_CHAR);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7717;
                this.character();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7718;
                this.match(PostgreSqlParser.KW_COALESCE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7719;
                this.match(PostgreSqlParser.KW_DEC);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7720;
                this.match(PostgreSqlParser.KW_DECIMAL);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7721;
                this.match(PostgreSqlParser.KW_EXISTS);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7722;
                this.match(PostgreSqlParser.KW_EXTRACT);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7723;
                this.match(PostgreSqlParser.KW_FLOAT);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7724;
                this.match(PostgreSqlParser.KW_GREATEST);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7725;
                this.match(PostgreSqlParser.KW_GROUPING);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 7726;
                this.match(PostgreSqlParser.KW_INOUT);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 7727;
                this.match(PostgreSqlParser.KW_INT);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 7728;
                this.match(PostgreSqlParser.KW_INTEGER);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 7729;
                this.match(PostgreSqlParser.KW_INTERVAL);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 7730;
                this.match(PostgreSqlParser.KW_LEAST);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 7731;
                this.match(PostgreSqlParser.KW_NATIONAL);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 7732;
                this.match(PostgreSqlParser.KW_NCHAR);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 7733;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 7734;
                this.match(PostgreSqlParser.KW_NORMALIZE);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 7735;
                this.match(PostgreSqlParser.KW_NULLIF);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 7736;
                this.numeric();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 7737;
                this.match(PostgreSqlParser.KW_OUT);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 7738;
                this.match(PostgreSqlParser.KW_OVERLAY);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 7739;
                this.match(PostgreSqlParser.KW_POSITION);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 7740;
                this.match(PostgreSqlParser.KW_PRECISION);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 7741;
                this.match(PostgreSqlParser.KW_REAL);
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 7742;
                this.match(PostgreSqlParser.KW_ROW);
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 7743;
                this.match(PostgreSqlParser.KW_SETOF);
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 7744;
                this.match(PostgreSqlParser.KW_SMALLINT);
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 7745;
                this.match(PostgreSqlParser.KW_SUBSTRING);
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 7746;
                this.match(PostgreSqlParser.KW_TIME);
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 7747;
                this.match(PostgreSqlParser.KW_TIMESTAMP);
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 7748;
                this.match(PostgreSqlParser.KW_TREAT);
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 7749;
                this.match(PostgreSqlParser.KW_TRIM);
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 7750;
                this.match(PostgreSqlParser.KW_VALUES);
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 7751;
                this.match(PostgreSqlParser.KW_VARCHAR);
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 7752;
                this.match(PostgreSqlParser.KW_XMLATTRIBUTES);
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 7753;
                this.match(PostgreSqlParser.KW_XMLCONCAT);
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 7754;
                this.match(PostgreSqlParser.KW_XMLELEMENT);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 7755;
                this.match(PostgreSqlParser.KW_XMLEXISTS);
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 7756;
                this.match(PostgreSqlParser.KW_XMLFOREST);
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 7757;
                this.match(PostgreSqlParser.KW_XMLNAMESPACES);
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 7758;
                this.match(PostgreSqlParser.KW_XMLPARSE);
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 7759;
                this.match(PostgreSqlParser.KW_XMLPI);
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 7760;
                this.match(PostgreSqlParser.KW_XMLROOT);
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 7761;
                this.match(PostgreSqlParser.KW_XMLSERIALIZE);
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 7762;
                this.match(PostgreSqlParser.KW_XMLTABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeFuncNameKeyword(): TypeFuncNameKeywordContext {
        let localContext = new TypeFuncNameKeywordContext(this.context, this.state);
        this.enterRule(localContext, 826, PostgreSqlParser.RULE_typeFuncNameKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7765;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & 8126463) !== 0) || _la === 472)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reservedKeyword(): ReservedKeywordContext {
        let localContext = new ReservedKeywordContext(this.context, this.state);
        this.enterRule(localContext, 828, PostgreSqlParser.RULE_reservedKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7767;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4286578687) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4294966783) !== 0) || ((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 4095) !== 0) || _la === 454)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public plBlock(): PlBlockContext {
        let localContext = new PlBlockContext(this.context, this.state);
        this.enterRule(localContext, 830, PostgreSqlParser.RULE_plBlock);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 7770;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18) {
                {
                this.state = 7769;
                this.labelDecl();
                }
            }

            this.state = 7782;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 178) {
                {
                this.state = 7772;
                this.match(PostgreSqlParser.KW_DECLARE);
                this.state = 7780;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1068, this.context) ) {
                case 1:
                    {
                    this.state = 7776;
                    this.errorHandler.sync(this);
                    alternative = 1;
                    do {
                        switch (alternative) {
                        case 1:
                            {
                            this.state = 7776;
                            this.errorHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this.tokenStream, 1066, this.context) ) {
                            case 1:
                                {
                                this.state = 7773;
                                this.declStatement();
                                }
                                break;
                            case 2:
                                {
                                this.state = 7774;
                                this.match(PostgreSqlParser.KW_DECLARE);
                                }
                                break;
                            case 3:
                                {
                                this.state = 7775;
                                this.labelDecl();
                                }
                                break;
                            }
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        this.state = 7778;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 1067, this.context);
                    } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                    }
                    break;
                }
                }
            }

            }
            this.state = 7784;
            this.match(PostgreSqlParser.KW_BEGIN);
            this.state = 7788;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1070, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7785;
                    this.procStmt();
                    }
                    }
                }
                this.state = 7790;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1070, this.context);
            }
            this.state = 7792;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 517) {
                {
                this.state = 7791;
                this.exceptionSect();
                }
            }

            this.state = 7794;
            this.match(PostgreSqlParser.KW_END);
            this.state = 7796;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                this.state = 7795;
                this.anyIdentifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public labelDecl(): LabelDeclContext {
        let localContext = new LabelDeclContext(this.context, this.state);
        this.enterRule(localContext, 832, PostgreSqlParser.RULE_labelDecl);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7798;
            this.match(PostgreSqlParser.LESS_LESS);
            this.state = 7799;
            this.anyIdentifier();
            this.state = 7800;
            this.match(PostgreSqlParser.GREATER_GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declStatement(): DeclStatementContext {
        let localContext = new DeclStatementContext(this.context, this.state);
        this.enterRule(localContext, 834, PostgreSqlParser.RULE_declStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7802;
            this.anyIdentifier();
            this.state = 7849;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1083, this.context) ) {
            case 1:
                {
                this.state = 7803;
                this.match(PostgreSqlParser.KW_ALIAS);
                this.state = 7804;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 7807;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.PARAM:
                    {
                    this.state = 7805;
                    this.match(PostgreSqlParser.PARAM);
                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 7806;
                    this.colId();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                {
                this.state = 7810;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1074, this.context) ) {
                case 1:
                    {
                    this.state = 7809;
                    this.match(PostgreSqlParser.KW_CONSTANT);
                    }
                    break;
                }
                this.state = 7812;
                this.typename();
                this.state = 7814;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 43) {
                    {
                    this.state = 7813;
                    this.collateClause();
                    }
                }

                this.state = 7818;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7816;
                    this.match(PostgreSqlParser.KW_NOT);
                    this.state = 7817;
                    this.match(PostgreSqlParser.KW_NULL);
                    }
                }

                this.state = 7825;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10 || _la === 20 || _la === 53) {
                    {
                    this.state = 7822;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.EQUAL:
                    case PostgreSqlParser.COLON_EQUALS:
                        {
                        this.state = 7820;
                        this.assignOperator();
                        }
                        break;
                    case PostgreSqlParser.KW_DEFAULT:
                        {
                        this.state = 7821;
                        this.match(PostgreSqlParser.KW_DEFAULT);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 7824;
                    this.sqlExpression();
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 7831;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269 || _la === 324) {
                    {
                    this.state = 7828;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 7827;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 7830;
                    this.match(PostgreSqlParser.KW_SCROLL);
                    }
                }

                this.state = 7833;
                this.match(PostgreSqlParser.KW_CURSOR);
                this.state = 7845;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 7834;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7835;
                    this.declCursorArg();
                    this.state = 7840;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 7836;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 7837;
                        this.declCursorArg();
                        }
                        }
                        this.state = 7842;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 7843;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                }

                this.state = 7847;
                _la = this.tokenStream.LA(1);
                if(!(_la === 62 || _la === 116)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7848;
                this.selectStmt();
                }
                break;
            }
            this.state = 7851;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declCursorArg(): DeclCursorArgContext {
        let localContext = new DeclCursorArgContext(this.context, this.state);
        this.enterRule(localContext, 836, PostgreSqlParser.RULE_declCursorArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7853;
            this.anyIdentifier();
            this.state = 7854;
            this.typename();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignOperator(): AssignOperatorContext {
        let localContext = new AssignOperatorContext(this.context, this.state);
        this.enterRule(localContext, 838, PostgreSqlParser.RULE_assignOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7856;
            _la = this.tokenStream.LA(1);
            if(!(_la === 10 || _la === 20)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procStmt(): ProcStmtContext {
        let localContext = new ProcStmtContext(this.context, this.state);
        this.enterRule(localContext, 840, PostgreSqlParser.RULE_procStmt);
        try {
            this.state = 7882;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1084, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7858;
                this.plBlock();
                this.state = 7859;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7861;
                this.stmtReturn();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7862;
                this.stmtRaise();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7863;
                this.stmtAssign();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7864;
                this.stmtIf();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7865;
                this.stmtCase();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7866;
                this.stmtLoopWhileFor();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7867;
                this.stmtForeach();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7868;
                this.stmtExit();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7869;
                this.stmtAssert();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7870;
                this.stmtExecsql();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7871;
                this.stmtDynexecute();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7872;
                this.stmtPerform();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7873;
                this.stmtCall();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 7874;
                this.stmtGetdiag();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 7875;
                this.stmtOpen();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 7876;
                this.stmtFetch();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 7877;
                this.stmtMove();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 7878;
                this.stmtClose();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 7879;
                this.stmtNull();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 7880;
                this.stmtCommitOrRollback();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 7881;
                this.stmtSet();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtPerform(): StmtPerformContext {
        let localContext = new StmtPerformContext(this.context, this.state);
        this.enterRule(localContext, 842, PostgreSqlParser.RULE_stmtPerform);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7884;
            this.match(PostgreSqlParser.KW_PERFORM);
            this.state = 7885;
            this.sqlExpression();
            this.state = 7886;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtCall(): StmtCallContext {
        let localContext = new StmtCallContext(this.context, this.state);
        this.enterRule(localContext, 844, PostgreSqlParser.RULE_stmtCall);
        let _la: number;
        try {
            this.state = 7907;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7888;
                this.match(PostgreSqlParser.KW_CALL);
                this.state = 7889;
                this.anyIdentifier();
                this.state = 7896;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1086, this.context) ) {
                case 1:
                    {
                    this.state = 7890;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7892;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3901572195) !== 0) || _la === 587) {
                        {
                        this.state = 7891;
                        this.exprList();
                        }
                    }

                    this.state = 7894;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    this.state = 7895;
                    this.match(PostgreSqlParser.SEMI);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7898;
                this.match(PostgreSqlParser.KW_DO);
                this.state = 7899;
                this.anyIdentifier();
                this.state = 7900;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7902;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3901572195) !== 0) || _la === 587) {
                    {
                    this.state = 7901;
                    this.exprList();
                    }
                }

                this.state = 7904;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 7905;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtAssign(): StmtAssignContext {
        let localContext = new StmtAssignContext(this.context, this.state);
        this.enterRule(localContext, 846, PostgreSqlParser.RULE_stmtAssign);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7909;
            this.assignVar();
            this.state = 7910;
            this.assignOperator();
            this.state = 7911;
            this.sqlExpression();
            this.state = 7912;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtGetdiag(): StmtGetdiagContext {
        let localContext = new StmtGetdiagContext(this.context, this.state);
        this.enterRule(localContext, 848, PostgreSqlParser.RULE_stmtGetdiag);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7914;
            this.match(PostgreSqlParser.KW_GET);
            this.state = 7916;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 434 || _la === 501) {
                {
                this.state = 7915;
                _la = this.tokenStream.LA(1);
                if(!(_la === 434 || _la === 501)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 7918;
            this.match(PostgreSqlParser.KW_DIAGNOSTICS);
            {
            this.state = 7919;
            this.getdiagListItem();
            this.state = 7924;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7920;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7921;
                this.getdiagListItem();
                }
                }
                this.state = 7926;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 7927;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getdiagListItem(): GetdiagListItemContext {
        let localContext = new GetdiagListItemContext(this.context, this.state);
        this.enterRule(localContext, 850, PostgreSqlParser.RULE_getdiagListItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7929;
            this.assignVar();
            this.state = 7930;
            this.assignOperator();
            this.state = 7931;
            this.colId();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignVar(): AssignVarContext {
        let localContext = new AssignVarContext(this.context, this.state);
        this.enterRule(localContext, 852, PostgreSqlParser.RULE_assignVar);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7935;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 7933;
                this.anyName();
                }
                break;
            case PostgreSqlParser.PARAM:
                {
                this.state = 7934;
                this.match(PostgreSqlParser.PARAM);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 7943;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 7937;
                this.match(PostgreSqlParser.OPEN_BRACKET);
                this.state = 7938;
                this.expression();
                this.state = 7939;
                this.match(PostgreSqlParser.CLOSE_BRACKET);
                }
                }
                this.state = 7945;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtIf(): StmtIfContext {
        let localContext = new StmtIfContext(this.context, this.state);
        this.enterRule(localContext, 854, PostgreSqlParser.RULE_stmtIf);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7946;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 7947;
            this.sqlExpression();
            this.state = 7948;
            this.match(PostgreSqlParser.KW_THEN);
            this.state = 7952;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1093, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7949;
                    this.procStmt();
                    }
                    }
                }
                this.state = 7954;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1093, this.context);
            }
            {
            this.state = 7966;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 502) {
                {
                {
                this.state = 7955;
                this.match(PostgreSqlParser.KW_ELSIF);
                this.state = 7956;
                this.expression();
                this.state = 7957;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 7961;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1094, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 7958;
                        this.procStmt();
                        }
                        }
                    }
                    this.state = 7963;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 1094, this.context);
                }
                }
                }
                this.state = 7968;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 7970;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 58) {
                {
                this.state = 7969;
                this.stmtElse();
                }
            }

            this.state = 7972;
            this.match(PostgreSqlParser.KW_END);
            this.state = 7973;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 7974;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtElse(): StmtElseContext {
        let localContext = new StmtElseContext(this.context, this.state);
        this.enterRule(localContext, 856, PostgreSqlParser.RULE_stmtElse);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7976;
            this.match(PostgreSqlParser.KW_ELSE);
            this.state = 7980;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1097, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7977;
                    this.procStmt();
                    }
                    }
                }
                this.state = 7982;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1097, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtCase(): StmtCaseContext {
        let localContext = new StmtCaseContext(this.context, this.state);
        this.enterRule(localContext, 858, PostgreSqlParser.RULE_stmtCase);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7983;
            this.match(PostgreSqlParser.KW_CASE);
            this.state = 7985;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1098, this.context) ) {
            case 1:
                {
                this.state = 7984;
                this.sqlExpression();
                }
                break;
            }
            this.state = 7996;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 7987;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 7988;
                this.exprList();
                this.state = 7989;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 7993;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1099, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 7990;
                        this.procStmt();
                        }
                        }
                    }
                    this.state = 7995;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 1099, this.context);
                }
                }
                }
                this.state = 7998;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 102);
            this.state = 8001;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 58) {
                {
                this.state = 8000;
                this.stmtElse();
                }
            }

            this.state = 8003;
            this.match(PostgreSqlParser.KW_END);
            this.state = 8004;
            this.match(PostgreSqlParser.KW_CASE);
            this.state = 8005;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtLoopWhileFor(): StmtLoopWhileForContext {
        let localContext = new StmtLoopWhileForContext(this.context, this.state);
        this.enterRule(localContext, 860, PostgreSqlParser.RULE_stmtLoopWhileFor);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8008;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18) {
                {
                this.state = 8007;
                this.labelDecl();
                }
            }

            this.state = 8014;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_WHILE:
                {
                {
                this.state = 8010;
                this.match(PostgreSqlParser.KW_WHILE);
                this.state = 8011;
                this.expression();
                }
                }
                break;
            case PostgreSqlParser.KW_FOR:
                {
                {
                this.state = 8012;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 8013;
                this.forControl();
                }
                }
                break;
            case PostgreSqlParser.KW_LOOP:
                break;
            default:
                break;
            }
            this.state = 8016;
            this.loopBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public forControl(): ForControlContext {
        let localContext = new ForControlContext(this.context, this.state);
        this.enterRule(localContext, 862, PostgreSqlParser.RULE_forControl);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8018;
            this.anyNameList();
            this.state = 8019;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 8042;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1108, this.context) ) {
            case 1:
                {
                this.state = 8020;
                this.colId();
                this.state = 8022;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 8021;
                    this.executeParamClause();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 8024;
                this.selectStmt();
                }
                break;
            case 3:
                {
                this.state = 8025;
                this.explainStmt();
                }
                break;
            case 4:
                {
                this.state = 8026;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 8027;
                this.expression();
                this.state = 8030;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8028;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 8029;
                    this.exprList();
                    }
                }

                }
                break;
            case 5:
                {
                this.state = 8033;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1106, this.context) ) {
                case 1:
                    {
                    this.state = 8032;
                    this.match(PostgreSqlParser.KW_REVERSE);
                    }
                    break;
                }
                this.state = 8035;
                this.expression();
                this.state = 8036;
                this.match(PostgreSqlParser.DOT_DOT);
                this.state = 8037;
                this.expression();
                this.state = 8040;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 8038;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 8039;
                    this.expression();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtForeach(): StmtForeachContext {
        let localContext = new StmtForeachContext(this.context, this.state);
        this.enterRule(localContext, 864, PostgreSqlParser.RULE_stmtForeach);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8045;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18) {
                {
                this.state = 8044;
                this.labelDecl();
                }
            }

            this.state = 8047;
            this.match(PostgreSqlParser.KW_FOREACH);
            this.state = 8048;
            this.anyNameList();
            this.state = 8051;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 506) {
                {
                this.state = 8049;
                this.match(PostgreSqlParser.KW_SLICE);
                this.state = 8050;
                this.match(PostgreSqlParser.Integral);
                }
            }

            this.state = 8053;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 8054;
            this.match(PostgreSqlParser.KW_ARRAY);
            this.state = 8055;
            this.expression();
            this.state = 8056;
            this.loopBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtExit(): StmtExitContext {
        let localContext = new StmtExitContext(this.context, this.state);
        this.enterRule(localContext, 866, PostgreSqlParser.RULE_stmtExit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8058;
            _la = this.tokenStream.LA(1);
            if(!(_la === 167 || _la === 507)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8060;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                this.state = 8059;
                this.anyIdentifier();
                }
            }

            this.state = 8064;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 102) {
                {
                this.state = 8062;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 8063;
                this.sqlExpression();
                }
            }

            this.state = 8066;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtReturn(): StmtReturnContext {
        let localContext = new StmtReturnContext(this.context, this.state);
        this.enterRule(localContext, 868, PostgreSqlParser.RULE_stmtReturn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8068;
            this.match(PostgreSqlParser.KW_RETURN);
            this.state = 8083;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1115, this.context) ) {
            case 1:
                {
                this.state = 8069;
                this.match(PostgreSqlParser.KW_NEXT);
                this.state = 8070;
                this.sqlExpression();
                }
                break;
            case 2:
                {
                this.state = 8071;
                this.match(PostgreSqlParser.KW_QUERY);
                this.state = 8078;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_EXECUTE:
                    {
                    this.state = 8072;
                    this.match(PostgreSqlParser.KW_EXECUTE);
                    this.state = 8073;
                    this.expression();
                    this.state = 8074;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 8075;
                    this.exprList();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                case PostgreSqlParser.KW_SELECT:
                case PostgreSqlParser.KW_TABLE:
                case PostgreSqlParser.KW_WITH:
                case PostgreSqlParser.KW_VALUES:
                    {
                    this.state = 8077;
                    this.selectStmt();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                {
                this.state = 8081;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1114, this.context) ) {
                case 1:
                    {
                    this.state = 8080;
                    this.sqlExpression();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 8085;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtRaise(): StmtRaiseContext {
        let localContext = new StmtRaiseContext(this.context, this.state);
        this.enterRule(localContext, 870, PostgreSqlParser.RULE_stmtRaise);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8087;
            this.match(PostgreSqlParser.KW_RAISE);
            this.state = 8117;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1122, this.context) ) {
            case 1:
                {
                this.state = 8089;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1116, this.context) ) {
                case 1:
                    {
                    this.state = 8088;
                    _la = this.tokenStream.LA(1);
                    if(!(((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & 63) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 8103;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1119, this.context) ) {
                case 1:
                    {
                    this.state = 8091;
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 8092;
                    this.match(PostgreSqlParser.KW_SQLSTATE);
                    this.state = 8093;
                    this.stringConst();
                    }
                    }
                    break;
                case 3:
                    {
                    {
                    this.state = 8094;
                    this.stringConst();
                    this.state = 8101;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 6) {
                        {
                        this.state = 8097;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        do {
                            {
                            {
                            this.state = 8095;
                            this.match(PostgreSqlParser.COMMA);
                            this.state = 8096;
                            this.expression();
                            }
                            }
                            this.state = 8099;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        } while (_la === 6);
                        }
                    }

                    }
                    }
                    break;
                }
                this.state = 8114;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8105;
                    this.match(PostgreSqlParser.KW_USING);
                    {
                    this.state = 8106;
                    this.optRaiseUsingElem();
                    this.state = 8111;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 8107;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 8108;
                        this.optRaiseUsingElem();
                        }
                        }
                        this.state = 8113;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    }
                }

                this.state = 8116;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optRaiseUsingElem(): OptRaiseUsingElemContext {
        let localContext = new OptRaiseUsingElemContext(this.context, this.state);
        this.enterRule(localContext, 872, PostgreSqlParser.RULE_optRaiseUsingElem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8119;
            this.identifier();
            this.state = 8120;
            this.match(PostgreSqlParser.EQUAL);
            this.state = 8121;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtAssert(): StmtAssertContext {
        let localContext = new StmtAssertContext(this.context, this.state);
        this.enterRule(localContext, 874, PostgreSqlParser.RULE_stmtAssert);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8123;
            this.match(PostgreSqlParser.KW_ASSERT);
            this.state = 8124;
            this.sqlExpression();
            this.state = 8127;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 8125;
                this.match(PostgreSqlParser.COMMA);
                this.state = 8126;
                this.sqlExpression();
                }
            }

            this.state = 8129;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loopBody(): LoopBodyContext {
        let localContext = new LoopBodyContext(this.context, this.state);
        this.enterRule(localContext, 876, PostgreSqlParser.RULE_loopBody);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8131;
            this.match(PostgreSqlParser.KW_LOOP);
            this.state = 8135;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1124, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 8132;
                    this.procStmt();
                    }
                    }
                }
                this.state = 8137;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1124, this.context);
            }
            this.state = 8138;
            this.match(PostgreSqlParser.KW_END);
            this.state = 8139;
            this.match(PostgreSqlParser.KW_LOOP);
            this.state = 8141;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                this.state = 8140;
                this.anyIdentifier();
                }
            }

            this.state = 8143;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtExecsql(): StmtExecsqlContext {
        let localContext = new StmtExecsqlContext(this.context, this.state);
        this.enterRule(localContext, 878, PostgreSqlParser.RULE_stmtExecsql);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8145;
            this.stmt();
            this.state = 8147;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 71) {
                {
                this.state = 8146;
                this.optExecuteInto();
                }
            }

            this.state = 8149;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtDynexecute(): StmtDynexecuteContext {
        let localContext = new StmtDynexecuteContext(this.context, this.state);
        this.enterRule(localContext, 880, PostgreSqlParser.RULE_stmtDynexecute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8151;
            this.match(PostgreSqlParser.KW_EXECUTE);
            this.state = 8152;
            this.expression();
            this.state = 8168;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1131, this.context) ) {
            case 1:
                {
                this.state = 8154;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71) {
                    {
                    this.state = 8153;
                    this.optExecuteInto();
                    }
                }

                this.state = 8158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8156;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 8157;
                    this.exprList();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 8162;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8160;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 8161;
                    this.exprList();
                    }
                }

                this.state = 8165;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71) {
                    {
                    this.state = 8164;
                    this.optExecuteInto();
                    }
                }

                }
                break;
            case 3:
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
            this.state = 8170;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optExecuteInto(): OptExecuteIntoContext {
        let localContext = new OptExecuteIntoContext(this.context, this.state);
        this.enterRule(localContext, 882, PostgreSqlParser.RULE_optExecuteInto);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8172;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 8174;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1132, this.context) ) {
            case 1:
                {
                this.state = 8173;
                this.match(PostgreSqlParser.KW_STRICT);
                }
                break;
            }
            this.state = 8176;
            this.exprList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtOpen(): StmtOpenContext {
        let localContext = new StmtOpenContext(this.context, this.state);
        this.enterRule(localContext, 884, PostgreSqlParser.RULE_stmtOpen);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8178;
            this.match(PostgreSqlParser.KW_OPEN);
            this.state = 8210;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1139, this.context) ) {
            case 1:
                {
                this.state = 8179;
                this.cursorVariable();
                this.state = 8184;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269 || _la === 324) {
                    {
                    this.state = 8181;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 8180;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 8183;
                    this.match(PostgreSqlParser.KW_SCROLL);
                    }
                }

                this.state = 8186;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 8194;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                case PostgreSqlParser.KW_SELECT:
                case PostgreSqlParser.KW_TABLE:
                case PostgreSqlParser.KW_WITH:
                case PostgreSqlParser.KW_VALUES:
                    {
                    this.state = 8187;
                    this.selectStmt();
                    }
                    break;
                case PostgreSqlParser.KW_EXECUTE:
                    {
                    this.state = 8188;
                    this.match(PostgreSqlParser.KW_EXECUTE);
                    this.state = 8189;
                    this.sqlExpression();
                    this.state = 8192;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 8190;
                        this.match(PostgreSqlParser.KW_USING);
                        this.state = 8191;
                        this.exprList();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                {
                this.state = 8196;
                this.colId();
                this.state = 8208;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 8197;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    {
                    this.state = 8198;
                    this.optOpenBoundListItem();
                    this.state = 8203;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 8199;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 8200;
                        this.optOpenBoundListItem();
                        }
                        }
                        this.state = 8205;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    this.state = 8206;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                }

                }
                break;
            }
            this.state = 8212;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optOpenBoundListItem(): OptOpenBoundListItemContext {
        let localContext = new OptOpenBoundListItemContext(this.context, this.state);
        this.enterRule(localContext, 886, PostgreSqlParser.RULE_optOpenBoundListItem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8217;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1140, this.context) ) {
            case 1:
                {
                this.state = 8214;
                this.colId();
                this.state = 8215;
                this.match(PostgreSqlParser.COLON_EQUALS);
                }
                break;
            }
            this.state = 8219;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtFetch(): StmtFetchContext {
        let localContext = new StmtFetchContext(this.context, this.state);
        this.enterRule(localContext, 888, PostgreSqlParser.RULE_stmtFetch);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8221;
            this.match(PostgreSqlParser.KW_FETCH);
            this.state = 8223;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1141, this.context) ) {
            case 1:
                {
                this.state = 8222;
                localContext._direction = this.optFetchFirection();
                }
                break;
            }
            this.state = 8226;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64 || _la === 68) {
                {
                this.state = 8225;
                this.fromIn();
                }
            }

            this.state = 8228;
            this.cursorVariable();
            this.state = 8229;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 8230;
            this.exprList();
            this.state = 8231;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optFetchFirection(): OptFetchFirectionContext {
        let localContext = new OptFetchFirectionContext(this.context, this.state);
        this.enterRule(localContext, 890, PostgreSqlParser.RULE_optFetchFirection);
        let _la: number;
        try {
            this.state = 8247;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1145, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8233;
                this.match(PostgreSqlParser.KW_NEXT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8234;
                this.match(PostgreSqlParser.KW_PRIOR);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8235;
                this.match(PostgreSqlParser.KW_FIRST);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8236;
                this.match(PostgreSqlParser.KW_LAST);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8238;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1143, this.context) ) {
                case 1:
                    {
                    this.state = 8237;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 130 || _la === 307)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 8240;
                this.expression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8241;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8242;
                _la = this.tokenStream.LA(1);
                if(!(_la === 144 || _la === 210)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8245;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1144, this.context) ) {
                case 1:
                    {
                    this.state = 8243;
                    this.expression();
                    }
                    break;
                case 2:
                    {
                    this.state = 8244;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtMove(): StmtMoveContext {
        let localContext = new StmtMoveContext(this.context, this.state);
        this.enterRule(localContext, 892, PostgreSqlParser.RULE_stmtMove);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8249;
            this.match(PostgreSqlParser.KW_MOVE);
            this.state = 8251;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1146, this.context) ) {
            case 1:
                {
                this.state = 8250;
                this.optFetchFirection();
                }
                break;
            }
            this.state = 8253;
            this.cursorVariable();
            this.state = 8254;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeStmt(): MergeStmtContext {
        let localContext = new MergeStmtContext(this.context, this.state);
        this.enterRule(localContext, 894, PostgreSqlParser.RULE_mergeStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8257;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 8256;
                this.withClause();
                }
            }

            this.state = 8259;
            this.match(PostgreSqlParser.KW_MERGE);
            this.state = 8260;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 8262;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 8261;
                this.match(PostgreSqlParser.KW_ONLY);
                }
            }

            this.state = 8264;
            this.tableName();
            this.state = 8266;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 9) {
                {
                this.state = 8265;
                this.match(PostgreSqlParser.STAR);
                }
            }

            this.state = 8272;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36 || _la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                this.state = 8269;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 36) {
                    {
                    this.state = 8268;
                    this.match(PostgreSqlParser.KW_AS);
                    }
                }

                this.state = 8271;
                this.colId();
                }
            }

            this.state = 8274;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 8275;
            this.dataSource();
            this.state = 8276;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 8277;
            this.expression();
            this.state = 8279;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8278;
                this.mergeWhenClause();
                }
                }
                this.state = 8281;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 102);
            this.state = 8284;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 8283;
                this.returningClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataSource(): DataSourceContext {
        let localContext = new DataSourceContext(this.context, this.state);
        this.enterRule(localContext, 896, PostgreSqlParser.RULE_dataSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8297;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1157, this.context) ) {
            case 1:
                {
                this.state = 8287;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 8286;
                    this.match(PostgreSqlParser.KW_ONLY);
                    }
                }

                this.state = 8289;
                this.tableName();
                this.state = 8291;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 9) {
                    {
                    this.state = 8290;
                    this.match(PostgreSqlParser.STAR);
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 8295;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1156, this.context) ) {
                case 1:
                    {
                    this.state = 8293;
                    this.selectNoParens();
                    }
                    break;
                case 2:
                    {
                    this.state = 8294;
                    this.valuesClause();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 8303;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36 || _la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 3221570659) !== 0) || _la === 587) {
                {
                this.state = 8300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 36) {
                    {
                    this.state = 8299;
                    this.match(PostgreSqlParser.KW_AS);
                    }
                }

                this.state = 8302;
                this.colId();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeWhenClause(): MergeWhenClauseContext {
        let localContext = new MergeWhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 898, PostgreSqlParser.RULE_mergeWhenClause);
        let _la: number;
        try {
            this.state = 8331;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1164, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8305;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 8306;
                this.match(PostgreSqlParser.KW_MATCHED);
                this.state = 8309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33) {
                    {
                    this.state = 8307;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 8308;
                    this.expression();
                    }
                }

                this.state = 8311;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 8316;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_UPDATE:
                    {
                    this.state = 8312;
                    this.mergeUpdate();
                    }
                    break;
                case PostgreSqlParser.KW_DELETE:
                    {
                    this.state = 8313;
                    this.match(PostgreSqlParser.KW_DELETE);
                    }
                    break;
                case PostgreSqlParser.KW_DO:
                    {
                    this.state = 8314;
                    this.match(PostgreSqlParser.KW_DO);
                    this.state = 8315;
                    this.match(PostgreSqlParser.KW_NOTHING);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8318;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 8319;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 8320;
                this.match(PostgreSqlParser.KW_MATCHED);
                this.state = 8323;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33) {
                    {
                    this.state = 8321;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 8322;
                    this.expression();
                    }
                }

                this.state = 8325;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 8329;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_INSERT:
                    {
                    this.state = 8326;
                    this.mergeInsert();
                    }
                    break;
                case PostgreSqlParser.KW_DO:
                    {
                    this.state = 8327;
                    this.match(PostgreSqlParser.KW_DO);
                    this.state = 8328;
                    this.match(PostgreSqlParser.KW_NOTHING);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeInsert(): MergeInsertContext {
        let localContext = new MergeInsertContext(this.context, this.state);
        this.enterRule(localContext, 900, PostgreSqlParser.RULE_mergeInsert);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8333;
            this.match(PostgreSqlParser.KW_INSERT);
            this.state = 8335;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 8334;
                this.optColumnList();
                }
            }

            this.state = 8340;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 463) {
                {
                this.state = 8337;
                this.match(PostgreSqlParser.KW_OVERRIDING);
                this.state = 8338;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 349)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8339;
                this.match(PostgreSqlParser.KW_VALUE);
                }
            }

            this.state = 8342;
            this.defaultValuesOrValues();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeUpdate(): MergeUpdateContext {
        let localContext = new MergeUpdateContext(this.context, this.state);
        this.enterRule(localContext, 902, PostgreSqlParser.RULE_mergeUpdate);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8344;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 8345;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 8363;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    this.state = 8363;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1168, this.context) ) {
                    case 1:
                        {
                        this.state = 8346;
                        this.columnName();
                        this.state = 8347;
                        this.match(PostgreSqlParser.EQUAL);
                        this.state = 8348;
                        this.exprofdefault();
                        }
                        break;
                    case 2:
                        {
                        this.state = 8350;
                        this.optColumnList();
                        this.state = 8351;
                        this.match(PostgreSqlParser.EQUAL);
                        this.state = 8352;
                        this.match(PostgreSqlParser.OPEN_PAREN);
                        this.state = 8353;
                        this.exprofdefault();
                        this.state = 8358;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 6) {
                            {
                            {
                            this.state = 8354;
                            this.match(PostgreSqlParser.COMMA);
                            this.state = 8355;
                            this.exprofdefault();
                            }
                            }
                            this.state = 8360;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        this.state = 8361;
                        this.match(PostgreSqlParser.CLOSE_PAREN);
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8365;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1169, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultValuesOrValues(): DefaultValuesOrValuesContext {
        let localContext = new DefaultValuesOrValuesContext(this.context, this.state);
        this.enterRule(localContext, 904, PostgreSqlParser.RULE_defaultValuesOrValues);
        let _la: number;
        try {
            this.state = 8381;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8367;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 8368;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 8369;
                this.exprofdefault();
                this.state = 8374;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 8370;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 8371;
                    this.exprofdefault();
                    }
                    }
                    this.state = 8376;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 8377;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8379;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 8380;
                this.match(PostgreSqlParser.KW_VALUES);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exprofdefault(): ExprofdefaultContext {
        let localContext = new ExprofdefaultContext(this.context, this.state);
        this.enterRule(localContext, 906, PostgreSqlParser.RULE_exprofdefault);
        try {
            this.state = 8385;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1172, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8383;
                this.sortBy();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8384;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtClose(): StmtCloseContext {
        let localContext = new StmtCloseContext(this.context, this.state);
        this.enterRule(localContext, 908, PostgreSqlParser.RULE_stmtClose);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8387;
            this.match(PostgreSqlParser.KW_CLOSE);
            this.state = 8388;
            this.cursorVariable();
            this.state = 8389;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtNull(): StmtNullContext {
        let localContext = new StmtNullContext(this.context, this.state);
        this.enterRule(localContext, 910, PostgreSqlParser.RULE_stmtNull);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8391;
            this.match(PostgreSqlParser.KW_NULL);
            this.state = 8392;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtCommitOrRollback(): StmtCommitOrRollbackContext {
        let localContext = new StmtCommitOrRollbackContext(this.context, this.state);
        this.enterRule(localContext, 912, PostgreSqlParser.RULE_stmtCommitOrRollback);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8394;
            _la = this.tokenStream.LA(1);
            if(!(_la === 161 || _la === 319)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8400;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 33) {
                {
                this.state = 8395;
                this.match(PostgreSqlParser.KW_AND);
                this.state = 8397;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 8396;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 8399;
                this.match(PostgreSqlParser.KW_CHAIN);
                }
            }

            this.state = 8402;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtSet(): StmtSetContext {
        let localContext = new StmtSetContext(this.context, this.state);
        this.enterRule(localContext, 914, PostgreSqlParser.RULE_stmtSet);
        try {
            this.state = 8416;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8404;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 8405;
                this.anyName();
                this.state = 8406;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 8407;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 8408;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8410;
                this.match(PostgreSqlParser.KW_RESET);
                this.state = 8413;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 8411;
                    this.anyName();
                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 8412;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8415;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursorVariable(): CursorVariableContext {
        let localContext = new CursorVariableContext(this.context, this.state);
        this.enterRule(localContext, 916, PostgreSqlParser.RULE_cursorVariable);
        try {
            this.state = 8420;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8418;
                this.colId();
                }
                break;
            case PostgreSqlParser.PARAM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8419;
                this.match(PostgreSqlParser.PARAM);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exceptionSect(): ExceptionSectContext {
        let localContext = new ExceptionSectContext(this.context, this.state);
        this.enterRule(localContext, 918, PostgreSqlParser.RULE_exceptionSect);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8422;
            this.match(PostgreSqlParser.KW_EXCEPTION);
            this.state = 8439;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8423;
                this.match(PostgreSqlParser.KW_WHEN);
                {
                this.state = 8424;
                this.procCondition();
                this.state = 8429;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 82) {
                    {
                    {
                    this.state = 8425;
                    this.match(PostgreSqlParser.KW_OR);
                    this.state = 8426;
                    this.procCondition();
                    }
                    }
                    this.state = 8431;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                this.state = 8432;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 8436;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1179, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 8433;
                        this.procStmt();
                        }
                        }
                    }
                    this.state = 8438;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 1179, this.context);
                }
                }
                }
                this.state = 8441;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 102);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procCondition(): ProcConditionContext {
        let localContext = new ProcConditionContext(this.context, this.state);
        this.enterRule(localContext, 920, PostgreSqlParser.RULE_procCondition);
        try {
            this.state = 8446;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1181, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8443;
                this.anyIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8444;
                this.match(PostgreSqlParser.KW_SQLSTATE);
                this.state = 8445;
                this.stringConst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anyIdentifier(): AnyIdentifierContext {
        let localContext = new AnyIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 922, PostgreSqlParser.RULE_anyIdentifier);
        try {
            this.state = 8450;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1182, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8448;
                this.colId();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8449;
                this.unreservedKeyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlExpression(): SqlExpressionContext {
        let localContext = new SqlExpressionContext(this.context, this.state);
        this.enterRule(localContext, 924, PostgreSqlParser.RULE_sqlExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8453;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1183, this.context) ) {
            case 1:
                {
                this.state = 8452;
                this.targetList();
                }
                break;
            }
            this.state = 8456;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1184, this.context) ) {
            case 1:
                {
                this.state = 8455;
                this.intoClause();
                }
                break;
            }
            this.state = 8459;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64) {
                {
                this.state = 8458;
                this.fromClause();
                }
            }

            this.state = 8462;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 8461;
                this.whereClause();
                }
            }

            this.state = 8465;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 66) {
                {
                this.state = 8464;
                this.groupClause();
                }
            }

            this.state = 8469;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 67) {
                {
                this.state = 8467;
                this.match(PostgreSqlParser.KW_HAVING);
                this.state = 8468;
                this.expression();
                }
            }

            this.state = 8472;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1189, this.context) ) {
            case 1:
                {
                this.state = 8471;
                this.windowClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 335:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 337:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 338:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        case 397:
            return this.columnName_sempred(localContext as ColumnNameContext, predIndex);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        case 1:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.precpred(this.context, 3);
        case 3:
            return this.precpred(this.context, 2);
        case 4:
            return this.precpred(this.context, 1);
        case 5:
            return this.precpred(this.context, 5);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 6:
            return this.precpred(this.context, 3);
        case 7:
            return this.precpred(this.context, 6);
        case 8:
            return this.precpred(this.context, 4);
        case 9:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private columnName_sempred(localContext: ColumnNameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 10:
            return this.shouldMatchEmpty();
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,593,8475,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,1,0,5,0,928,8,0,10,0,12,0,931,9,0,1,0,1,0,1,1,
        1,1,3,1,937,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1057,8,2,3,2,1059,8,
        2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,1068,8,4,1,4,5,4,1071,8,4,10,4,
        12,4,1074,9,4,1,5,1,5,1,5,3,5,1079,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1114,8,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,3,6,1124,8,6,1,7,1,7,1,7,1,7,3,7,1130,8,7,
        1,7,5,7,1133,8,7,10,7,12,7,1136,9,7,1,8,1,8,1,8,1,8,3,8,1142,8,8,
        1,8,5,8,1145,8,8,10,8,12,8,1148,9,8,1,9,1,9,1,9,1,9,3,9,1154,8,9,
        1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,1165,8,10,1,10,1,10,
        1,11,1,11,5,11,1171,8,11,10,11,12,11,1174,9,11,1,11,3,11,1177,8,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1189,8,
        11,1,11,1,11,1,11,1,11,3,11,1195,8,11,1,12,1,12,1,12,1,12,3,12,1201,
        8,12,1,12,1,12,3,12,1205,8,12,1,12,1,12,1,12,3,12,1210,8,12,1,12,
        1,12,3,12,1214,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,3,12,1227,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        3,12,1237,8,12,3,12,1239,8,12,1,13,1,13,1,13,1,13,3,13,1245,8,13,
        1,13,5,13,1248,8,13,10,13,12,13,1251,9,13,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,15,1,15,1,15,3,15,1263,8,15,1,15,3,15,1266,8,15,1,
        15,1,15,1,15,3,15,1271,8,15,1,15,5,15,1274,8,15,10,15,12,15,1277,
        9,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1287,8,17,1,18,
        1,18,3,18,1291,8,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,3,19,1303,8,19,1,20,1,20,3,20,1307,8,20,1,20,3,20,1310,8,20,
        1,20,1,20,3,20,1314,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,3,21,1326,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1344,8,21,1,22,1,22,
        1,22,5,22,1349,8,22,10,22,12,22,1352,9,22,1,23,1,23,1,23,5,23,1357,
        8,23,10,23,12,23,1360,9,23,1,24,1,24,3,24,1364,8,24,1,25,1,25,1,
        25,1,25,1,25,3,25,1371,8,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1379,
        8,26,1,27,1,27,1,27,1,27,3,27,1385,8,27,1,28,1,28,1,28,1,28,1,28,
        1,28,3,28,1393,8,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1401,8,28,
        1,29,1,29,3,29,1405,8,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,3,31,1419,8,31,1,32,1,32,1,32,3,32,1424,8,32,
        1,33,1,33,1,33,3,33,1429,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,3,34,1441,8,34,1,35,1,35,1,35,1,35,3,35,1447,8,35,
        1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,3,38,1459,8,38,
        1,38,1,38,1,38,3,38,1464,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,3,38,1474,8,38,1,38,1,38,1,38,1,38,3,38,1480,8,38,1,38,1,38,
        1,38,3,38,1485,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1494,
        8,38,1,38,1,38,1,38,1,38,1,38,3,38,1501,8,38,1,38,1,38,1,38,3,38,
        1506,8,38,1,38,1,38,1,38,3,38,1511,8,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,3,38,1521,8,38,1,38,1,38,1,38,3,38,1526,8,38,1,38,
        1,38,1,38,3,38,1531,8,38,1,38,1,38,1,38,1,38,1,38,3,38,1538,8,38,
        1,38,1,38,3,38,1542,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,3,38,1556,8,38,1,38,1,38,1,38,1,38,3,38,1562,
        8,38,1,38,1,38,1,38,1,38,3,38,1568,8,38,1,38,1,38,1,38,3,38,1573,
        8,38,1,39,1,39,1,39,5,39,1578,8,39,10,39,12,39,1581,9,39,1,40,1,
        40,1,40,1,40,1,40,1,40,3,40,1589,8,40,1,41,1,41,1,41,1,41,1,42,1,
        42,1,42,3,42,1598,8,42,1,42,1,42,1,42,1,42,1,42,5,42,1605,8,42,10,
        42,12,42,1608,9,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1616,8,42,
        1,42,1,42,3,42,1620,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,3,42,1632,8,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1640,
        8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1650,8,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,3,42,1670,8,42,1,42,1,42,1,42,3,42,1675,8,42,
        1,42,3,42,1678,8,42,1,42,1,42,1,42,1,42,1,42,3,42,1685,8,42,1,42,
        3,42,1688,8,42,1,42,1,42,3,42,1692,8,42,1,42,1,42,3,42,1696,8,42,
        1,42,3,42,1699,8,42,1,42,1,42,1,42,3,42,1704,8,42,1,42,1,42,1,42,
        3,42,1709,8,42,1,42,1,42,3,42,1713,8,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,3,42,1722,8,42,1,42,1,42,1,42,1,42,3,42,1728,8,42,1,42,
        1,42,3,42,1732,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1741,
        8,42,1,42,3,42,1744,8,42,1,42,1,42,1,42,1,42,3,42,1750,8,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,3,42,1759,8,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,4,42,1769,8,42,11,42,12,42,1770,1,42,1,42,3,
        42,1775,8,42,1,42,1,42,3,42,1779,8,42,1,42,1,42,1,42,3,42,1784,8,
        42,1,42,3,42,1787,8,42,1,42,1,42,1,42,1,42,3,42,1793,8,42,4,42,1795,
        8,42,11,42,12,42,1796,1,42,1,42,3,42,1801,8,42,1,42,1,42,1,42,1,
        42,3,42,1807,8,42,1,42,1,42,3,42,1811,8,42,1,42,1,42,1,42,3,42,1816,
        8,42,1,42,1,42,1,42,3,42,1821,8,42,1,42,1,42,3,42,1825,8,42,1,42,
        3,42,1828,8,42,1,43,1,43,1,43,1,43,1,43,3,43,1835,8,43,1,44,1,44,
        1,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,1846,8,46,10,46,12,46,1849,
        9,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,3,48,1861,
        8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1886,
        8,49,1,50,1,50,1,50,1,50,1,50,1,50,5,50,1894,8,50,10,50,12,50,1897,
        9,50,1,51,1,51,1,51,1,51,3,51,1903,8,51,1,51,1,51,1,51,3,51,1908,
        8,51,1,51,1,51,3,51,1912,8,51,1,51,1,51,1,51,1,51,1,51,3,51,1919,
        8,51,1,51,1,51,1,51,3,51,1924,8,51,1,51,3,51,1927,8,51,3,51,1929,
        8,51,1,52,1,52,1,52,3,52,1934,8,52,1,53,1,53,3,53,1938,8,53,1,53,
        1,53,3,53,1942,8,53,1,53,1,53,3,53,1946,8,53,1,53,1,53,1,53,3,53,
        1951,8,53,1,53,3,53,1954,8,53,1,53,1,53,3,53,1958,8,53,1,53,3,53,
        1961,8,53,1,53,1,53,3,53,1965,8,53,1,53,1,53,1,53,1,53,1,53,1,53,
        3,53,1973,8,53,1,53,1,53,1,53,3,53,1978,8,53,1,53,3,53,1981,8,53,
        1,53,1,53,3,53,1985,8,53,1,54,1,54,1,54,1,54,3,54,1991,8,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,3,54,2000,8,54,1,54,1,54,3,54,2004,
        8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,2014,8,54,1,54,
        1,54,1,54,3,54,2019,8,54,5,54,2021,8,54,10,54,12,54,2024,9,54,1,
        54,3,54,2027,8,54,5,54,2029,8,54,10,54,12,54,2032,9,54,1,55,1,55,
        1,55,1,55,3,55,2038,8,55,1,55,1,55,1,55,3,55,2043,8,55,5,55,2045,
        8,55,10,55,12,55,2048,9,55,1,55,1,55,3,55,2052,8,55,1,56,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,5,56,2062,8,56,10,56,12,56,2065,9,56,
        1,56,1,56,3,56,2069,8,56,1,57,1,57,3,57,2073,8,57,1,57,1,57,3,57,
        2077,8,57,1,57,1,57,1,57,3,57,2082,8,57,1,57,1,57,3,57,2086,8,57,
        1,57,3,57,2089,8,57,1,57,3,57,2092,8,57,1,57,3,57,2095,8,57,1,57,
        3,57,2098,8,57,1,57,3,57,2101,8,57,1,57,1,57,1,57,3,57,2106,8,57,
        1,57,3,57,2109,8,57,1,57,3,57,2112,8,57,1,57,3,57,2115,8,57,1,57,
        3,57,2118,8,57,1,57,3,57,2121,8,57,1,57,1,57,1,57,1,57,3,57,2127,
        8,57,1,57,1,57,3,57,2131,8,57,1,57,3,57,2134,8,57,1,57,3,57,2137,
        8,57,1,57,3,57,2140,8,57,1,57,3,57,2143,8,57,3,57,2145,8,57,1,58,
        1,58,1,58,1,58,1,58,3,58,2152,8,58,1,59,1,59,1,59,1,59,5,59,2158,
        8,59,10,59,12,59,2161,9,59,1,59,1,59,1,60,1,60,1,60,5,60,2168,8,
        60,10,60,12,60,2171,9,60,1,61,1,61,3,61,2175,8,61,1,61,1,61,1,61,
        1,61,1,61,1,61,5,61,2183,8,61,10,61,12,61,2186,9,61,3,61,2188,8,
        61,1,62,1,62,1,62,3,62,2193,8,62,1,62,5,62,2196,8,62,10,62,12,62,
        2199,9,62,1,62,1,62,3,62,2203,8,62,1,62,3,62,2206,8,62,1,63,1,63,
        1,63,3,63,2211,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,2220,
        8,63,3,63,2222,8,63,1,63,1,63,3,63,2226,8,63,1,63,3,63,2229,8,63,
        1,63,1,63,3,63,2233,8,63,1,63,5,63,2236,8,63,10,63,12,63,2239,9,
        63,1,64,1,64,3,64,2243,8,64,1,64,1,64,3,64,2247,8,64,1,64,3,64,2250,
        8,64,1,64,1,64,3,64,2254,8,64,1,65,3,65,2257,8,65,1,65,1,65,1,65,
        3,65,2262,8,65,1,65,3,65,2265,8,65,1,65,1,65,1,65,3,65,2270,8,65,
        1,65,3,65,2273,8,65,1,65,1,65,3,65,2277,8,65,1,65,3,65,2280,8,65,
        1,65,3,65,2283,8,65,1,65,1,65,1,65,3,65,2288,8,65,1,65,3,65,2291,
        8,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,2299,8,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,4,65,2309,8,65,11,65,12,65,2310,1,65,1,
        65,3,65,2315,8,65,1,65,1,65,1,65,1,65,1,65,3,65,2322,8,65,1,65,1,
        65,1,65,3,65,2327,8,65,1,65,3,65,2330,8,65,1,65,3,65,2333,8,65,1,
        65,3,65,2336,8,65,1,66,1,66,1,66,3,66,2341,8,66,1,67,1,67,1,68,1,
        68,1,68,1,68,1,68,5,68,2350,8,68,10,68,12,68,2353,9,68,1,68,1,68,
        1,68,3,68,2358,8,68,1,68,1,68,3,68,2362,8,68,1,68,3,68,2365,8,68,
        1,68,3,68,2368,8,68,1,68,5,68,2371,8,68,10,68,12,68,2374,9,68,1,
        68,1,68,5,68,2378,8,68,10,68,12,68,2381,9,68,3,68,2383,8,68,1,68,
        1,68,3,68,2387,8,68,1,68,1,68,1,68,1,68,5,68,2393,8,68,10,68,12,
        68,2396,9,68,1,68,1,68,3,68,2400,8,68,1,68,3,68,2403,8,68,1,68,3,
        68,2406,8,68,1,68,1,68,1,68,1,68,1,68,3,68,2413,8,68,1,68,5,68,2416,
        8,68,10,68,12,68,2419,9,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,2427,
        8,68,1,68,3,68,2430,8,68,1,68,3,68,2433,8,68,1,68,5,68,2436,8,68,
        10,68,12,68,2439,9,68,3,68,2441,8,68,1,69,1,69,1,69,1,69,1,70,1,
        70,1,70,1,70,5,70,2451,8,70,10,70,12,70,2454,9,70,1,70,1,70,1,71,
        1,71,1,71,5,71,2461,8,71,10,71,12,71,2464,9,71,1,72,1,72,1,72,1,
        73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2480,8,
        74,1,75,1,75,3,75,2484,8,75,1,75,1,75,3,75,2488,8,75,3,75,2490,8,
        75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,
        78,1,78,1,78,3,78,2507,8,78,3,78,2509,8,78,1,79,1,79,1,79,1,79,1,
        79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,5,80,2523,8,80,10,80,12,80,
        2526,9,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2536,8,81,
        1,81,3,81,2539,8,81,1,81,3,81,2542,8,81,1,82,1,82,1,82,1,83,1,83,
        1,83,1,83,3,83,2551,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,
        2560,8,84,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,
        1,88,1,88,1,88,3,88,2576,8,88,1,88,3,88,2579,8,88,1,88,3,88,2582,
        8,88,1,88,1,88,1,88,1,88,5,88,2588,8,88,10,88,12,88,2591,9,88,1,
        88,3,88,2594,8,88,1,88,1,88,1,89,1,89,1,89,3,89,2601,8,89,1,89,1,
        89,1,89,1,89,1,89,1,90,1,90,3,90,2610,8,90,1,90,1,90,3,90,2614,8,
        90,1,90,1,90,1,90,1,90,3,90,2620,8,90,1,91,1,91,3,91,2624,8,91,1,
        91,3,91,2627,8,91,1,91,3,91,2630,8,91,1,91,3,91,2633,8,91,1,91,3,
        91,2636,8,91,1,92,1,92,1,92,1,92,3,92,2642,8,92,1,93,1,93,3,93,2646,
        8,93,1,93,1,93,1,93,3,93,2651,8,93,1,93,1,93,3,93,2655,8,93,1,93,
        3,93,2658,8,93,1,93,3,93,2661,8,93,1,93,3,93,2664,8,93,1,93,1,93,
        1,93,3,93,2669,8,93,1,94,1,94,1,94,1,94,3,94,2675,8,94,1,94,1,94,
        3,94,2679,8,94,1,95,1,95,3,95,2683,8,95,1,95,1,95,3,95,2687,8,95,
        1,95,1,95,4,95,2691,8,95,11,95,12,95,2692,3,95,2695,8,95,1,96,1,
        96,1,96,3,96,2700,8,96,1,96,1,96,4,96,2704,8,96,11,96,12,96,2705,
        1,97,1,97,1,97,1,97,3,97,2712,8,97,1,97,1,97,3,97,2716,8,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,
        2731,8,97,1,97,1,97,1,97,3,97,2736,8,97,1,97,3,97,2739,8,97,3,97,
        2741,8,97,1,98,3,98,2744,8,98,1,98,1,98,3,98,2748,8,98,1,99,1,99,
        3,99,2752,8,99,1,99,3,99,2755,8,99,1,99,3,99,2758,8,99,1,99,1,99,
        1,99,1,99,1,99,1,99,3,99,2766,8,99,1,99,1,99,1,99,1,99,3,99,2772,
        8,99,3,99,2774,8,99,1,100,1,100,1,100,1,100,3,100,2780,8,100,1,100,
        1,100,1,100,3,100,2785,8,100,1,101,1,101,1,101,3,101,2790,8,101,
        1,101,1,101,3,101,2794,8,101,1,101,1,101,1,101,1,101,1,101,5,101,
        2801,8,101,10,101,12,101,2804,9,101,1,102,1,102,1,102,1,102,1,102,
        1,102,5,102,2812,8,102,10,102,12,102,2815,9,102,1,103,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        3,103,2853,8,103,1,104,1,104,1,104,1,104,1,104,1,104,4,104,2861,
        8,104,11,104,12,104,2862,3,104,2865,8,104,1,104,3,104,2868,8,104,
        1,105,1,105,3,105,2872,8,105,1,105,1,105,3,105,2876,8,105,1,106,
        1,106,1,106,1,106,1,106,1,106,4,106,2884,8,106,11,106,12,106,2885,
        3,106,2888,8,106,1,106,1,106,4,106,2892,8,106,11,106,12,106,2893,
        3,106,2896,8,106,1,107,1,107,1,107,1,107,1,107,5,107,2903,8,107,
        10,107,12,107,2906,9,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,
        5,108,2915,8,108,10,108,12,108,2918,9,108,1,108,1,108,1,109,1,109,
        1,109,1,110,1,110,1,110,1,111,1,111,1,111,3,111,2931,8,111,1,111,
        1,111,1,111,3,111,2936,8,111,1,111,3,111,2939,8,111,1,111,1,111,
        1,111,1,111,1,111,3,111,2946,8,111,1,112,1,112,1,112,3,112,2951,
        8,112,1,113,1,113,1,113,1,113,1,113,1,113,3,113,2959,8,113,3,113,
        2961,8,113,1,114,1,114,1,114,1,114,3,114,2967,8,114,1,114,1,114,
        1,114,3,114,2972,8,114,1,114,1,114,3,114,2976,8,114,1,114,1,114,
        1,114,3,114,2981,8,114,1,114,1,114,1,114,1,114,3,114,2987,8,114,
        1,114,1,114,1,114,1,114,1,114,3,114,2994,8,114,1,114,1,114,1,114,
        1,114,3,114,3000,8,114,3,114,3002,8,114,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,3,115,3011,8,115,1,115,1,115,1,115,1,115,3,115,
        3017,8,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,3025,8,115,
        1,116,1,116,1,116,1,116,3,116,3031,8,116,1,116,1,116,1,116,3,116,
        3036,8,116,1,116,1,116,1,116,3,116,3041,8,116,1,117,1,117,1,117,
        1,117,1,117,1,117,3,117,3049,8,117,1,117,1,117,1,117,1,117,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,3064,8,118,
        3,118,3066,8,118,1,118,1,118,3,118,3070,8,118,1,118,1,118,3,118,
        3074,8,118,1,118,3,118,3077,8,118,1,118,3,118,3080,8,118,1,119,1,
        119,1,119,1,119,1,119,1,119,1,119,3,119,3089,8,119,1,119,3,119,3092,
        8,119,1,119,3,119,3095,8,119,1,120,1,120,1,120,1,120,3,120,3101,
        8,120,1,120,1,120,5,120,3105,8,120,10,120,12,120,3108,9,120,1,120,
        3,120,3111,8,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
        1,120,1,120,3,120,3123,8,120,1,120,1,120,1,120,1,120,3,120,3129,
        8,120,1,121,3,121,3132,8,121,1,121,1,121,1,121,3,121,3137,8,121,
        1,121,1,121,3,121,3141,8,121,1,121,1,121,1,121,1,121,1,121,3,121,
        3148,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,
        3158,8,121,3,121,3160,8,121,1,122,1,122,1,122,1,122,1,122,1,123,
        1,123,1,123,1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,125,1,125,3,125,3184,8,125,1,125,1,125,1,125,
        1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,3196,8,125,1,125,
        4,125,3199,8,125,11,125,12,125,3200,3,125,3203,8,125,1,125,1,125,
        3,125,3207,8,125,1,125,3,125,3210,8,125,1,125,3,125,3213,8,125,1,
        125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,3223,8,125,1,
        125,3,125,3226,8,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,
        125,3,125,3236,8,125,1,125,5,125,3239,8,125,10,125,12,125,3242,9,
        125,1,125,1,125,3,125,3246,8,125,1,125,3,125,3249,8,125,1,125,3,
        125,3252,8,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,3260,8,
        125,1,126,1,126,1,126,1,126,3,126,3266,8,126,1,127,1,127,1,127,5,
        127,3271,8,127,10,127,12,127,3274,9,127,1,128,1,128,1,128,1,128,
        1,128,3,128,3281,8,128,1,128,3,128,3284,8,128,1,129,1,129,1,129,
        1,129,1,129,1,130,1,130,1,130,1,130,3,130,3295,8,130,1,131,1,131,
        3,131,3299,8,131,1,131,1,131,5,131,3303,8,131,10,131,12,131,3306,
        9,131,1,132,1,132,1,132,1,132,3,132,3312,8,132,1,133,3,133,3315,
        8,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,3,133,3324,8,133,
        1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,5,134,
        3336,8,134,10,134,12,134,3339,9,134,3,134,3341,8,134,1,134,1,134,
        1,134,1,134,1,134,1,135,1,135,1,135,1,135,1,135,5,135,3353,8,135,
        10,135,12,135,3356,9,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,
        1,136,3,136,3366,8,136,1,136,3,136,3369,8,136,1,137,1,137,1,137,
        1,137,1,137,1,137,1,137,1,137,5,137,3379,8,137,10,137,12,137,3382,
        9,137,1,138,1,138,3,138,3386,8,138,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,5,138,3397,8,138,10,138,12,138,3400,9,138,
        1,138,1,138,3,138,3404,8,138,1,138,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,3,138,3417,8,138,1,138,1,138,1,138,
        1,138,1,138,5,138,3424,8,138,10,138,12,138,3427,9,138,3,138,3429,
        8,138,1,138,3,138,3432,8,138,1,138,1,138,1,138,1,138,1,138,3,138,
        3439,8,138,1,138,3,138,3442,8,138,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,3,138,3454,8,138,1,138,1,138,1,138,
        1,138,3,138,3460,8,138,3,138,3462,8,138,1,139,1,139,1,139,1,139,
        5,139,3468,8,139,10,139,12,139,3471,9,139,1,139,1,139,1,140,1,140,
        1,140,3,140,3478,8,140,1,141,1,141,1,141,1,141,1,141,1,141,3,141,
        3486,8,141,1,142,1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,143,
        1,143,3,143,3498,8,143,1,143,1,143,1,143,3,143,3503,8,143,1,143,
        1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,3514,8,143,
        1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,3,145,3525,
        8,145,1,145,1,145,1,145,1,145,1,145,1,145,3,145,3533,8,145,1,145,
        1,145,1,145,1,145,5,145,3539,8,145,10,145,12,145,3542,9,145,1,146,
        1,146,1,146,1,146,3,146,3548,8,146,1,146,1,146,1,146,1,146,1,146,
        3,146,3555,8,146,3,146,3557,8,146,1,146,3,146,3560,8,146,1,146,1,
        146,1,146,3,146,3565,8,146,1,146,1,146,1,146,3,146,3570,8,146,1,
        147,1,147,1,147,1,147,1,147,1,147,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,5,148,3587,8,148,10,148,12,148,3590,9,148,
        1,148,1,148,1,148,1,148,5,148,3596,8,148,10,148,12,148,3599,9,148,
        3,148,3601,8,148,1,149,1,149,1,149,1,149,1,150,1,150,1,150,1,150,
        1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
        1,151,1,151,1,151,1,151,1,151,1,151,3,151,3628,8,151,1,151,1,151,
        1,151,1,151,1,151,1,151,1,151,3,151,3637,8,151,1,151,3,151,3640,
        8,151,1,151,1,151,3,151,3644,8,151,1,151,1,151,3,151,3648,8,151,
        1,151,1,151,3,151,3652,8,151,1,151,1,151,1,151,5,151,3657,8,151,
        10,151,12,151,3660,9,151,1,151,3,151,3663,8,151,1,151,1,151,3,151,
        3667,8,151,1,151,1,151,3,151,3671,8,151,1,151,1,151,3,151,3675,8,
        151,1,151,1,151,1,151,3,151,3680,8,151,1,151,1,151,3,151,3684,8,
        151,1,151,1,151,1,151,3,151,3689,8,151,1,151,1,151,1,151,1,151,3,
        151,3695,8,151,1,151,1,151,1,151,3,151,3700,8,151,1,151,1,151,1,
        151,5,151,3705,8,151,10,151,12,151,3708,9,151,1,151,3,151,3711,8,
        151,1,151,1,151,1,151,1,151,3,151,3717,8,151,1,151,1,151,3,151,3721,
        8,151,1,151,1,151,1,151,3,151,3726,8,151,1,151,1,151,1,151,1,151,
        1,151,1,151,3,151,3734,8,151,1,151,1,151,1,151,1,151,3,151,3740,
        8,151,1,151,1,151,1,151,3,151,3745,8,151,1,151,1,151,1,151,1,151,
        1,151,3,151,3752,8,151,1,151,1,151,1,151,3,151,3757,8,151,1,151,
        1,151,3,151,3761,8,151,1,151,1,151,1,151,3,151,3766,8,151,1,151,
        1,151,1,151,1,151,3,151,3772,8,151,1,151,1,151,1,151,1,151,1,151,
        3,151,3779,8,151,1,151,1,151,1,151,3,151,3784,8,151,1,151,1,151,
        1,151,1,151,1,151,3,151,3791,8,151,1,151,1,151,1,151,3,151,3796,
        8,151,1,151,1,151,1,151,1,151,1,151,3,151,3803,8,151,1,151,1,151,
        3,151,3807,8,151,1,151,1,151,1,151,1,151,5,151,3813,8,151,10,151,
        12,151,3816,9,151,1,151,3,151,3819,8,151,3,151,3821,8,151,1,152,
        3,152,3824,8,152,1,152,1,152,1,152,3,152,3829,8,152,1,152,1,152,
        1,152,1,152,1,152,1,152,1,152,1,152,3,152,3839,8,152,1,153,1,153,
        1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
        3,153,3854,8,153,1,153,3,153,3857,8,153,1,153,1,153,1,153,1,153,
        1,153,1,153,3,153,3865,8,153,1,154,1,154,1,154,5,154,3870,8,154,
        10,154,12,154,3873,9,154,1,155,1,155,3,155,3877,8,155,1,156,1,156,
        4,156,3881,8,156,11,156,12,156,3882,1,157,1,157,3,157,3887,8,157,
        1,157,1,157,1,157,5,157,3892,8,157,10,157,12,157,3895,9,157,1,157,
        1,157,3,157,3899,8,157,1,157,3,157,3902,8,157,1,158,3,158,3905,8,
        158,1,158,1,158,3,158,3909,8,158,1,159,1,159,1,159,1,159,1,159,1,
        159,1,159,3,159,3918,8,159,1,159,1,159,1,159,1,159,1,159,1,159,1,
        159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,
        3936,8,159,1,159,3,159,3939,8,159,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,1,159,3,159,3971,8,159,1,159,1,159,1,159,3,159,3976,
        8,159,1,160,1,160,1,160,1,160,3,160,3982,8,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,3,160,4002,8,160,1,160,1,160,1,160,3,160,
        4007,8,160,1,161,1,161,1,161,1,162,3,162,4013,8,162,1,162,3,162,
        4016,8,162,1,162,1,162,3,162,4020,8,162,1,162,1,162,3,162,4024,8,
        162,1,162,1,162,1,162,1,162,3,162,4030,8,162,1,162,3,162,4033,8,
        162,1,162,1,162,3,162,4037,8,162,1,162,1,162,3,162,4041,8,162,1,
        162,1,162,1,162,3,162,4046,8,162,1,162,3,162,4049,8,162,1,162,3,
        162,4052,8,162,1,162,3,162,4055,8,162,1,163,1,163,1,164,1,164,1,
        164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,4068,8,164,1,165,1,
        165,1,165,1,165,3,165,4074,8,165,1,165,1,165,1,165,1,165,1,165,1,
        165,3,165,4082,8,165,1,166,1,166,1,166,5,166,4087,8,166,10,166,12,
        166,4090,9,166,1,166,1,166,3,166,4094,8,166,1,166,3,166,4097,8,166,
        1,166,1,166,1,166,5,166,4102,8,166,10,166,12,166,4105,9,166,3,166,
        4107,8,166,1,167,1,167,1,168,1,168,1,168,1,168,3,168,4115,8,168,
        1,168,3,168,4118,8,168,1,169,1,169,1,169,3,169,4123,8,169,1,169,
        1,169,1,169,1,169,1,169,3,169,4130,8,169,1,169,3,169,4133,8,169,
        1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,1,169,1,169,1,169,1,169,5,169,4151,8,169,10,169,12,169,4154,
        9,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,
        4165,8,169,1,170,3,170,4168,8,170,1,170,1,170,1,170,1,170,3,170,
        4174,8,170,1,170,5,170,4177,8,170,10,170,12,170,4180,9,170,1,171,
        1,171,1,171,1,171,5,171,4186,8,171,10,171,12,171,4189,9,171,1,171,
        1,171,1,171,1,171,1,171,3,171,4196,8,171,1,171,1,171,1,171,3,171,
        4201,8,171,1,172,1,172,1,172,1,172,3,172,4207,8,172,1,172,1,172,
        1,172,5,172,4212,8,172,10,172,12,172,4215,9,172,1,172,1,172,1,172,
        1,172,1,172,3,172,4222,8,172,1,172,3,172,4225,8,172,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,5,173,4236,8,173,10,173,
        12,173,4239,9,173,1,173,1,173,1,174,1,174,1,174,1,174,1,174,1,174,
        1,174,1,174,1,174,3,174,4252,8,174,1,174,1,174,1,174,1,174,3,174,
        4258,8,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,4266,8,174,
        3,174,4268,8,174,1,175,1,175,1,176,1,176,3,176,4274,8,176,1,176,
        1,176,3,176,4278,8,176,1,176,3,176,4281,8,176,1,176,3,176,4284,8,
        176,1,176,1,176,1,176,3,176,4289,8,176,1,176,1,176,1,176,3,176,4294,
        8,176,1,176,1,176,3,176,4298,8,176,1,176,3,176,4301,8,176,1,176,
        3,176,4304,8,176,1,176,3,176,4307,8,176,1,176,3,176,4310,8,176,1,
        177,1,177,1,177,1,177,5,177,4316,8,177,10,177,12,177,4319,9,177,
        1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,3,178,4329,8,178,
        1,178,3,178,4332,8,178,1,178,3,178,4335,8,178,1,178,1,178,1,178,
        3,178,4340,8,178,1,178,3,178,4343,8,178,1,178,1,178,3,178,4347,8,
        178,1,179,1,179,3,179,4351,8,179,1,179,1,179,1,179,1,179,3,179,4357,
        8,179,1,179,1,179,1,179,1,179,5,179,4363,8,179,10,179,12,179,4366,
        9,179,3,179,4368,8,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
        1,179,1,179,5,179,4379,8,179,10,179,12,179,4382,9,179,1,179,1,179,
        3,179,4386,8,179,3,179,4388,8,179,1,179,4,179,4391,8,179,11,179,
        12,179,4392,1,179,1,179,1,179,1,179,1,179,3,179,4400,8,179,1,180,
        1,180,1,180,1,181,1,181,3,181,4407,8,181,1,181,1,181,1,182,1,182,
        1,182,5,182,4414,8,182,10,182,12,182,4417,9,182,1,183,1,183,1,183,
        5,183,4422,8,183,10,183,12,183,4425,9,183,1,184,1,184,1,184,1,184,
        1,184,3,184,4432,8,184,1,185,1,185,1,185,5,185,4437,8,185,10,185,
        12,185,4440,9,185,1,186,1,186,1,186,1,186,1,186,3,186,4447,8,186,
        1,187,1,187,1,187,5,187,4452,8,187,10,187,12,187,4455,9,187,1,188,
        1,188,1,188,1,188,1,188,3,188,4462,8,188,1,189,1,189,3,189,4466,
        8,189,1,189,1,189,3,189,4470,8,189,3,189,4472,8,189,1,189,1,189,
        1,190,1,190,3,190,4478,8,190,1,190,1,190,1,190,3,190,4483,8,190,
        1,191,1,191,3,191,4487,8,191,1,191,1,191,1,191,1,191,1,191,3,191,
        4494,8,191,1,192,1,192,1,192,3,192,4499,8,192,1,193,1,193,1,193,
        3,193,4504,8,193,1,193,1,193,1,193,3,193,4509,8,193,3,193,4511,8,
        193,1,193,1,193,1,194,1,194,1,194,1,195,1,195,1,195,3,195,4521,8,
        195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,3,195,4531,8,
        195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,3,195,4547,8,195,1,196,1,196,1,196,1,196,
        1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,5,196,
        4563,8,196,10,196,12,196,4566,9,196,1,196,1,196,1,196,1,196,1,196,
        1,196,1,196,1,196,1,196,3,196,4577,8,196,1,196,1,196,1,196,1,196,
        1,196,3,196,4584,8,196,1,197,1,197,1,197,1,198,1,198,1,198,1,199,
        1,199,1,199,1,199,1,199,1,199,1,199,3,199,4599,8,199,1,199,4,199,
        4602,8,199,11,199,12,199,4603,1,199,3,199,4607,8,199,1,200,1,200,
        1,200,3,200,4612,8,200,1,200,1,200,1,200,3,200,4617,8,200,1,200,
        1,200,1,200,3,200,4622,8,200,1,200,3,200,4625,8,200,1,200,3,200,
        4628,8,200,1,201,1,201,1,201,3,201,4633,8,201,1,201,1,201,1,201,
        5,201,4638,8,201,10,201,12,201,4641,9,201,1,201,3,201,4644,8,201,
        1,202,1,202,1,202,3,202,4649,8,202,1,202,1,202,1,202,5,202,4654,
        8,202,10,202,12,202,4657,9,202,1,202,3,202,4660,8,202,1,203,1,203,
        1,203,1,203,3,203,4666,8,203,1,203,1,203,1,203,1,203,1,203,1,203,
        1,203,3,203,4675,8,203,1,203,1,203,1,204,1,204,1,204,5,204,4682,
        8,204,10,204,12,204,4685,9,204,1,204,1,204,1,205,1,205,1,205,1,206,
        1,206,1,206,1,206,4,206,4696,8,206,11,206,12,206,4697,1,207,1,207,
        1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,3,207,4711,
        8,207,1,207,1,207,1,207,1,207,3,207,4717,8,207,1,207,1,207,3,207,
        4721,8,207,3,207,4723,8,207,1,208,1,208,1,208,1,209,1,209,3,209,
        4730,8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,3,209,4743,8,209,1,209,1,209,1,209,1,209,1,209,3,209,
        4750,8,209,3,209,4752,8,209,1,209,1,209,1,210,1,210,1,210,1,210,
        1,210,1,211,1,211,1,211,1,211,1,211,5,211,4766,8,211,10,211,12,211,
        4769,9,211,1,211,3,211,4772,8,211,1,211,1,211,3,211,4776,8,211,1,
        211,1,211,1,211,3,211,4781,8,211,1,211,1,211,1,211,3,211,4786,8,
        211,1,211,1,211,1,211,3,211,4791,8,211,1,211,1,211,1,211,3,211,4796,
        8,211,1,211,3,211,4799,8,211,1,212,1,212,1,212,1,212,1,212,1,213,
        1,213,1,213,1,213,1,213,3,213,4811,8,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,3,213,4864,8,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,3,213,4873,8,213,1,213,1,213,3,213,4877,8,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,3,213,4886,8,213,1,213,1,213,
        3,213,4890,8,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,3,213,
        4899,8,213,1,213,1,213,3,213,4903,8,213,1,213,1,213,1,213,3,213,
        4908,8,213,1,213,3,213,4911,8,213,1,213,1,213,3,213,4915,8,213,1,
        213,1,213,1,213,3,213,4920,8,213,3,213,4922,8,213,1,213,1,213,1,
        213,1,213,1,213,1,213,1,213,3,213,4931,8,213,1,213,1,213,1,213,3,
        213,4936,8,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,
        213,3,213,4947,8,213,1,213,1,213,3,213,4951,8,213,1,213,1,213,1,
        213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,3,213,
        4965,8,213,1,213,1,213,1,213,1,213,1,213,1,213,3,213,4973,8,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,3,213,5011,8,213,3,213,5013,8,213,1,214,1,214,
        1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        1,214,1,214,1,214,1,214,3,214,5032,8,214,1,214,3,214,5035,8,214,
        1,214,1,214,1,214,1,214,1,214,1,215,1,215,1,215,1,215,1,215,1,215,
        1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,
        1,215,1,215,1,215,3,215,5062,8,215,1,215,1,215,3,215,5066,8,215,
        1,215,1,215,3,215,5070,8,215,1,215,1,215,3,215,5074,8,215,1,215,
        1,215,3,215,5078,8,215,1,215,3,215,5081,8,215,1,215,1,215,1,215,
        1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,3,215,
        5096,8,215,1,215,1,215,1,215,1,215,1,215,3,215,5103,8,215,1,216,
        1,216,1,216,1,216,1,216,1,216,1,217,1,217,1,217,1,217,5,217,5115,
        8,217,10,217,12,217,5118,9,217,1,217,1,217,1,218,1,218,1,218,1,218,
        1,218,1,218,1,218,1,218,3,218,5130,8,218,1,219,1,219,1,219,1,219,
        1,219,1,219,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,5155,8,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,3,220,5174,8,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
        3,220,5189,8,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,3,220,5205,8,220,1,220,1,220,
        1,220,1,220,1,220,3,220,5212,8,220,1,221,1,221,1,221,1,221,1,221,
        1,221,1,221,1,221,1,221,3,221,5223,8,221,1,221,3,221,5226,8,221,
        1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
        1,222,1,222,1,222,1,222,5,222,5243,8,222,10,222,12,222,5246,9,222,
        3,222,5248,8,222,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
        1,223,5,223,5259,8,223,10,223,12,223,5262,9,223,1,223,3,223,5265,
        8,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,3,224,5285,8,224,
        1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,5,224,5295,8,224,
        10,224,12,224,5298,9,224,1,224,3,224,5301,8,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,1,224,3,224,5323,8,224,1,225,1,225,
        3,225,5327,8,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
        3,225,5337,8,225,1,225,1,225,3,225,5341,8,225,1,225,1,225,1,225,
        1,225,3,225,5347,8,225,1,225,1,225,3,225,5351,8,225,5,225,5353,8,
        225,10,225,12,225,5356,9,225,1,225,3,225,5359,8,225,1,226,1,226,
        1,226,1,226,1,226,3,226,5366,8,226,1,227,1,227,1,227,3,227,5371,
        8,227,1,228,1,228,1,228,1,229,1,229,1,229,1,230,1,230,1,230,3,230,
        5382,8,230,1,231,1,231,3,231,5386,8,231,1,231,3,231,5389,8,231,1,
        231,1,231,1,231,3,231,5394,8,231,1,231,1,231,1,231,1,231,3,231,5400,
        8,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,1,231,3,231,
        5411,8,231,1,231,1,231,3,231,5415,8,231,1,231,3,231,5418,8,231,1,
        231,1,231,3,231,5422,8,231,1,231,1,231,3,231,5426,8,231,1,231,3,
        231,5429,8,231,1,232,1,232,1,233,1,233,1,233,1,233,1,233,1,233,3,
        233,5439,8,233,1,233,3,233,5442,8,233,1,234,1,234,3,234,5446,8,234,
        1,234,5,234,5449,8,234,10,234,12,234,5452,9,234,1,235,1,235,1,235,
        3,235,5457,8,235,1,235,3,235,5460,8,235,1,235,1,235,1,235,3,235,
        5465,8,235,1,235,3,235,5468,8,235,1,235,1,235,1,235,1,235,1,235,
        3,235,5475,8,235,3,235,5477,8,235,1,235,1,235,1,235,1,235,3,235,
        5483,8,235,1,235,1,235,3,235,5487,8,235,1,236,1,236,1,236,1,237,
        1,237,1,237,1,237,3,237,5496,8,237,1,237,4,237,5499,8,237,11,237,
        12,237,5500,3,237,5503,8,237,1,238,1,238,1,238,1,238,1,238,1,238,
        1,238,1,238,3,238,5513,8,238,1,238,3,238,5516,8,238,1,238,1,238,
        1,238,3,238,5521,8,238,1,239,1,239,1,239,1,239,1,239,1,239,3,239,
        5529,8,239,1,239,3,239,5532,8,239,1,239,4,239,5535,8,239,11,239,
        12,239,5536,3,239,5539,8,239,3,239,5541,8,239,1,240,1,240,1,240,
        1,240,3,240,5547,8,240,1,241,1,241,1,241,1,241,1,241,1,241,1,242,
        1,242,1,242,1,242,1,242,1,243,1,243,1,243,1,243,3,243,5564,8,243,
        1,243,1,243,5,243,5568,8,243,10,243,12,243,5571,9,243,1,244,1,244,
        1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,3,244,5583,8,244,
        1,244,1,244,1,244,1,244,3,244,5589,8,244,1,244,1,244,3,244,5593,
        8,244,1,244,1,244,1,244,3,244,5598,8,244,1,245,1,245,1,245,1,245,
        1,245,1,245,1,245,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,3,246,5628,8,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,3,246,5643,8,246,1,246,
        1,246,1,246,3,246,5648,8,246,1,247,1,247,3,247,5652,8,247,1,247,
        1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,248,1,248,3,248,
        5665,8,248,1,248,1,248,3,248,5669,8,248,3,248,5671,8,248,1,248,1,
        248,1,248,1,248,1,248,5,248,5678,8,248,10,248,12,248,5681,9,248,
        1,248,1,248,1,248,3,248,5686,8,248,3,248,5688,8,248,1,249,1,249,
        3,249,5692,8,249,1,249,3,249,5695,8,249,1,249,3,249,5698,8,249,1,
        249,3,249,5701,8,249,1,249,3,249,5704,8,249,3,249,5706,8,249,1,249,
        3,249,5709,8,249,1,250,1,250,3,250,5713,8,250,1,250,1,250,1,250,
        1,250,5,250,5719,8,250,10,250,12,250,5722,9,250,1,250,1,250,3,250,
        5726,8,250,1,250,3,250,5729,8,250,1,251,1,251,1,252,1,252,3,252,
        5735,8,252,1,252,1,252,3,252,5739,8,252,1,253,1,253,3,253,5743,8,
        253,1,253,1,253,1,253,3,253,5748,8,253,3,253,5750,8,253,1,254,1,
        254,3,254,5754,8,254,1,255,1,255,3,255,5758,8,255,1,256,1,256,1,
        256,5,256,5763,8,256,10,256,12,256,5766,9,256,1,257,1,257,1,257,
        3,257,5771,8,257,1,257,1,257,3,257,5775,8,257,3,257,5777,8,257,3,
        257,5779,8,257,1,257,1,257,1,258,1,258,1,258,1,258,1,258,1,258,1,
        258,1,258,1,258,3,258,5792,8,258,1,259,1,259,1,259,1,259,5,259,5798,
        8,259,10,259,12,259,5801,9,259,1,259,1,259,1,260,1,260,1,260,3,260,
        5808,8,260,1,260,1,260,1,260,1,261,1,261,1,261,1,261,5,261,5817,
        8,261,10,261,12,261,5820,9,261,1,261,1,261,1,262,1,262,1,262,1,262,
        1,262,3,262,5829,8,262,1,263,1,263,1,263,3,263,5834,8,263,1,263,
        1,263,3,263,5838,8,263,1,263,1,263,3,263,5842,8,263,1,263,1,263,
        1,263,1,263,1,263,3,263,5849,8,263,1,263,3,263,5852,8,263,3,263,
        5854,8,263,1,264,1,264,1,264,1,264,1,265,1,265,3,265,5862,8,265,
        1,265,1,265,3,265,5866,8,265,1,266,3,266,5869,8,266,1,266,1,266,
        1,266,1,266,1,266,3,266,5876,8,266,1,266,1,266,1,266,1,266,1,266,
        3,266,5883,8,266,1,266,1,266,1,266,3,266,5888,8,266,1,266,1,266,
        1,266,1,266,1,266,3,266,5895,8,266,1,266,3,266,5898,8,266,3,266,
        5900,8,266,1,266,3,266,5903,8,266,1,267,1,267,1,267,1,267,3,267,
        5909,8,267,1,267,1,267,1,267,3,267,5914,8,267,1,267,1,267,3,267,
        5918,8,267,1,268,1,268,1,268,5,268,5923,8,268,10,268,12,268,5926,
        9,268,1,269,1,269,1,269,1,270,1,270,1,270,1,271,3,271,5935,8,271,
        1,271,1,271,1,271,1,271,1,271,3,271,5942,8,271,1,271,3,271,5945,
        8,271,1,271,3,271,5948,8,271,1,272,1,272,3,272,5952,8,272,1,272,
        1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,3,272,5963,8,272,
        1,272,3,272,5966,8,272,1,272,3,272,5969,8,272,1,272,3,272,5972,8,
        272,1,273,3,273,5975,8,273,1,273,1,273,1,273,1,273,1,273,3,273,5982,
        8,273,1,273,3,273,5985,8,273,1,273,3,273,5988,8,273,1,274,1,274,
        1,274,5,274,5993,8,274,10,274,12,274,5996,9,274,1,275,1,275,1,275,
        1,275,1,275,1,275,1,275,1,275,1,275,3,275,6007,8,275,1,275,1,275,
        1,275,1,275,1,275,3,275,6014,8,275,3,275,6016,8,275,1,276,1,276,
        1,276,3,276,6021,8,276,1,276,1,276,1,276,5,276,6026,8,276,10,276,
        12,276,6029,9,276,1,276,1,276,1,276,3,276,6034,8,276,1,276,1,276,
        1,276,1,277,1,277,3,277,6041,8,277,1,278,1,278,1,278,3,278,6046,
        8,278,1,278,1,278,1,279,3,279,6051,8,279,1,279,1,279,3,279,6055,
        8,279,1,279,1,279,3,279,6059,8,279,1,279,1,279,3,279,6063,8,279,
        3,279,6065,8,279,1,280,1,280,3,280,6069,8,280,1,281,1,281,3,281,
        6073,8,281,1,281,3,281,6076,8,281,1,281,3,281,6079,8,281,3,281,6081,
        8,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,3,281,6091,
        8,281,3,281,6093,8,281,1,281,1,281,1,281,3,281,6098,8,281,5,281,
        6100,8,281,10,281,12,281,6103,9,281,1,282,1,282,3,282,6107,8,282,
        1,283,1,283,3,283,6111,8,283,1,283,1,283,1,283,5,283,6116,8,283,
        10,283,12,283,6119,9,283,1,284,1,284,3,284,6123,8,284,1,284,1,284,
        3,284,6127,8,284,1,284,3,284,6130,8,284,1,284,1,284,1,284,1,284,
        3,284,6136,8,284,1,284,3,284,6139,8,284,1,285,1,285,1,285,1,285,
        1,285,1,285,1,285,1,285,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
        1,286,1,286,3,286,6158,8,286,1,286,1,286,1,286,1,287,1,287,3,287,
        6165,8,287,1,287,1,287,3,287,6169,8,287,1,288,3,288,6172,8,288,1,
        288,1,288,3,288,6176,8,288,1,288,1,288,3,288,6180,8,288,1,288,3,
        288,6183,8,288,1,288,3,288,6186,8,288,1,289,1,289,1,289,3,289,6191,
        8,289,1,290,1,290,1,290,1,290,1,290,5,290,6198,8,290,10,290,12,290,
        6201,9,290,1,291,1,291,1,291,1,291,3,291,6207,8,291,1,291,1,291,
        3,291,6211,8,291,1,292,1,292,3,292,6215,8,292,1,292,1,292,3,292,
        6219,8,292,1,292,3,292,6222,8,292,3,292,6224,8,292,1,293,1,293,1,
        293,3,293,6229,8,293,1,293,1,293,3,293,6233,8,293,1,294,1,294,1,
        294,3,294,6238,8,294,1,294,1,294,1,294,1,294,3,294,6244,8,294,1,
        295,1,295,1,295,1,295,1,295,3,295,6251,8,295,1,296,1,296,1,296,3,
        296,6256,8,296,1,297,1,297,1,297,3,297,6261,8,297,1,297,1,297,1,
        298,1,298,1,298,5,298,6268,8,298,10,298,12,298,6271,9,298,1,299,
        1,299,1,299,1,299,3,299,6277,8,299,1,299,1,299,1,299,1,299,5,299,
        6283,8,299,10,299,12,299,6286,9,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,3,299,6296,8,299,1,300,1,300,1,300,3,300,6301,
        8,300,1,300,1,300,3,300,6305,8,300,1,300,3,300,6308,8,300,1,300,
        1,300,3,300,6312,8,300,1,300,1,300,1,300,3,300,6317,8,300,4,300,
        6319,8,300,11,300,12,300,6320,1,300,1,300,1,300,3,300,6326,8,300,
        1,301,1,301,1,301,1,301,5,301,6332,8,301,10,301,12,301,6335,9,301,
        1,302,1,302,1,302,1,303,1,303,1,303,5,303,6343,8,303,10,303,12,303,
        6346,9,303,1,304,1,304,3,304,6350,8,304,1,304,1,304,3,304,6354,8,
        304,1,304,3,304,6357,8,304,1,304,3,304,6360,8,304,3,304,6362,8,304,
        1,304,3,304,6365,8,304,1,304,3,304,6368,8,304,1,304,3,304,6371,8,
        304,1,304,1,304,3,304,6375,8,304,1,304,1,304,3,304,6379,8,304,1,
        304,1,304,3,304,6383,8,304,3,304,6385,8,304,1,304,1,304,1,304,1,
        304,1,304,1,304,1,304,3,304,6394,8,304,1,304,1,304,1,304,3,304,6399,
        8,304,1,304,1,304,1,304,1,304,3,304,6405,8,304,1,304,1,304,3,304,
        6409,8,304,3,304,6411,8,304,1,304,1,304,1,304,1,304,1,304,3,304,
        6418,8,304,1,304,1,304,1,304,3,304,6423,8,304,1,304,1,304,1,304,
        1,304,5,304,6429,8,304,10,304,12,304,6432,9,304,1,305,3,305,6435,
        8,305,1,305,1,305,1,305,1,305,1,305,3,305,6442,8,305,1,306,1,306,
        1,306,3,306,6447,8,306,1,306,3,306,6450,8,306,1,306,1,306,1,306,
        1,306,3,306,6456,8,306,1,307,1,307,3,307,6460,8,307,1,308,1,308,
        1,308,1,308,3,308,6466,8,308,1,309,1,309,1,309,1,309,1,309,1,309,
        1,309,3,309,6475,8,309,1,309,1,309,1,309,1,309,3,309,6481,8,309,
        3,309,6483,8,309,1,310,1,310,1,310,3,310,6488,8,310,1,310,3,310,
        6491,8,310,1,310,1,310,1,310,1,310,1,310,1,310,1,310,3,310,6500,
        8,310,1,310,1,310,1,310,1,310,1,310,3,310,6507,8,310,3,310,6509,
        8,310,1,311,1,311,1,311,5,311,6514,8,311,10,311,12,311,6517,9,311,
        1,312,1,312,3,312,6521,8,312,1,312,3,312,6524,8,312,1,313,1,313,
        1,313,1,313,1,313,1,313,1,313,1,313,3,313,6534,8,313,1,314,1,314,
        1,314,1,314,1,314,1,314,1,314,5,314,6543,8,314,10,314,12,314,6546,
        9,314,1,314,1,314,3,314,6550,8,314,1,314,1,314,3,314,6554,8,314,
        1,315,1,315,1,315,1,315,1,315,1,315,3,315,6562,8,315,1,316,1,316,
        1,316,1,317,1,317,1,317,1,317,1,317,3,317,6572,8,317,1,318,1,318,
        1,318,5,318,6577,8,318,10,318,12,318,6580,9,318,1,319,1,319,1,319,
        3,319,6585,8,319,1,320,1,320,1,320,1,320,1,320,1,320,1,320,5,320,
        6594,8,320,10,320,12,320,6597,9,320,1,320,1,320,1,320,3,320,6602,
        8,320,1,320,1,320,1,320,1,320,1,320,1,320,5,320,6610,8,320,10,320,
        12,320,6613,9,320,1,320,1,320,1,321,1,321,1,321,1,321,3,321,6621,
        8,321,1,321,1,321,3,321,6625,8,321,1,321,4,321,6628,8,321,11,321,
        12,321,6629,3,321,6632,8,321,1,321,1,321,3,321,6636,8,321,1,322,
        1,322,1,322,1,322,1,322,1,322,3,322,6644,8,322,1,323,3,323,6647,
        8,323,1,323,1,323,1,323,3,323,6652,8,323,1,323,5,323,6655,8,323,
        10,323,12,323,6658,9,323,1,323,1,323,1,323,1,323,3,323,6664,8,323,
        3,323,6666,8,323,1,323,1,323,1,323,1,323,3,323,6672,8,323,1,324,
        1,324,3,324,6676,8,324,1,324,3,324,6679,8,324,1,324,1,324,1,324,
        3,324,6684,8,324,1,324,3,324,6687,8,324,3,324,6689,8,324,1,325,1,
        325,1,325,1,325,3,325,6695,8,325,1,326,1,326,1,326,1,326,1,326,1,
        326,1,326,3,326,6704,8,326,1,326,1,326,1,326,1,326,3,326,6710,8,
        326,1,326,3,326,6713,8,326,1,327,1,327,1,327,1,327,1,328,1,328,3,
        328,6721,8,328,1,328,3,328,6724,8,328,1,329,1,329,3,329,6728,8,329,
        1,329,1,329,1,329,1,329,3,329,6734,8,329,3,329,6736,8,329,1,329,
        3,329,6739,8,329,1,330,1,330,3,330,6743,8,330,1,330,1,330,1,330,
        3,330,6748,8,330,1,331,1,331,1,331,1,331,1,331,3,331,6755,8,331,
        1,331,1,331,1,331,1,331,1,331,3,331,6762,8,331,3,331,6764,8,331,
        1,331,1,331,1,331,1,331,3,331,6770,8,331,3,331,6772,8,331,1,331,
        1,331,1,331,3,331,6777,8,331,3,331,6779,8,331,1,332,1,332,3,332,
        6783,8,332,1,333,1,333,1,334,1,334,1,335,1,335,1,335,3,335,6792,
        8,335,1,335,1,335,3,335,6796,8,335,1,335,1,335,1,335,1,335,1,335,
        1,335,5,335,6804,8,335,10,335,12,335,6807,9,335,1,336,1,336,1,336,
        1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,6820,8,336,
        1,336,3,336,6823,8,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,
        6831,8,336,1,336,1,336,1,336,1,336,1,336,5,336,6838,8,336,10,336,
        12,336,6841,9,336,1,336,1,336,1,336,3,336,6846,8,336,1,336,1,336,
        1,336,3,336,6851,8,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,
        6859,8,336,3,336,6861,8,336,1,336,1,336,1,336,3,336,6866,8,336,1,
        336,1,336,3,336,6870,8,336,1,336,1,336,1,336,3,336,6875,8,336,1,
        336,1,336,1,336,3,336,6880,8,336,1,337,1,337,1,337,1,337,3,337,6886,
        8,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,
        1,337,1,337,1,337,1,337,5,337,6902,8,337,10,337,12,337,6905,9,337,
        1,338,1,338,1,338,1,338,1,338,1,338,3,338,6913,8,338,1,338,1,338,
        1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
        3,338,6928,8,338,1,338,1,338,1,338,3,338,6933,8,338,1,338,3,338,
        6936,8,338,1,338,1,338,1,338,1,338,3,338,6942,8,338,1,338,1,338,
        1,338,3,338,6947,8,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
        1,338,1,338,1,338,1,338,3,338,6960,8,338,1,338,4,338,6963,8,338,
        11,338,12,338,6964,1,338,1,338,3,338,6969,8,338,1,338,1,338,1,338,
        1,338,1,338,3,338,6976,8,338,1,338,1,338,1,338,1,338,1,338,1,338,
        1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
        3,338,6995,8,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
        1,338,1,338,3,338,7007,8,338,1,338,1,338,1,338,3,338,7012,8,338,
        1,338,1,338,1,338,1,338,1,338,1,338,3,338,7020,8,338,5,338,7022,
        8,338,10,338,12,338,7025,9,338,1,339,1,339,1,339,1,339,1,339,1,339,
        3,339,7033,8,339,1,339,3,339,7036,8,339,1,339,1,339,1,339,3,339,
        7041,8,339,1,339,1,339,1,339,3,339,7046,8,339,1,339,3,339,7049,8,
        339,1,339,1,339,1,340,1,340,1,340,1,340,1,340,1,340,1,340,3,340,
        7060,8,340,1,340,1,340,1,340,1,340,1,340,1,340,3,340,7068,8,340,
        1,340,1,340,1,340,3,340,7073,8,340,3,340,7075,8,340,1,340,3,340,
        7078,8,340,1,341,1,341,3,341,7082,8,341,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,3,342,7093,8,342,1,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,3,342,7114,8,342,1,342,1,342,1,342,
        1,342,1,342,1,342,3,342,7122,8,342,1,342,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,1,342,3,342,7135,8,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,1,342,3,342,7145,8,342,1,342,1,342,
        1,342,1,342,3,342,7151,8,342,1,342,1,342,1,342,1,342,3,342,7157,
        8,342,1,342,3,342,7160,8,342,1,342,3,342,7163,8,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,
        3,342,7189,8,342,3,342,7191,8,342,1,342,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,3,342,7212,8,342,1,342,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,3,342,7222,8,342,1,342,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,1,342,3,342,7235,8,342,1,342,1,342,
        1,342,3,342,7240,8,342,1,342,1,342,3,342,7244,8,342,3,342,7246,8,
        342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,
        3,342,7258,8,342,1,343,1,343,1,343,5,343,7263,8,343,10,343,12,343,
        7266,9,343,1,344,1,344,1,344,3,344,7271,8,344,1,345,1,345,1,346,
        1,346,3,346,7277,8,346,1,346,1,346,3,346,7281,8,346,1,347,1,347,
        1,347,1,348,1,348,1,348,1,348,5,348,7290,8,348,10,348,12,348,7293,
        9,348,1,349,1,349,1,349,1,349,1,350,1,350,1,350,3,350,7302,8,350,
        1,351,1,351,3,351,7306,8,351,1,351,1,351,1,351,3,351,7311,8,351,
        1,351,3,351,7314,8,351,1,351,3,351,7317,8,351,1,351,1,351,1,352,
        1,352,1,352,1,352,1,352,3,352,7326,8,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,1,352,3,352,7337,8,352,3,352,7339,8,352,
        1,353,1,353,3,353,7343,8,353,1,353,1,353,1,353,3,353,7348,8,353,
        1,354,1,354,1,354,1,354,1,354,1,354,1,354,3,354,7357,8,354,1,355,
        1,355,1,355,3,355,7362,8,355,1,355,1,355,1,356,1,356,1,357,1,357,
        3,357,7370,8,357,1,358,1,358,1,359,1,359,1,359,1,359,1,359,1,359,
        3,359,7380,8,359,1,360,1,360,1,360,1,360,1,360,1,360,3,360,7388,
        8,360,1,361,1,361,3,361,7392,8,361,1,361,3,361,7395,8,361,1,362,
        1,362,1,362,5,362,7400,8,362,10,362,12,362,7403,9,362,1,363,1,363,
        1,363,1,363,1,363,3,363,7410,8,363,1,364,1,364,3,364,7414,8,364,
        1,365,1,365,1,365,5,365,7419,8,365,10,365,12,365,7422,9,365,1,366,
        1,366,1,366,1,366,1,366,3,366,7429,8,366,3,366,7431,8,366,1,367,
        1,367,1,367,1,367,1,367,5,367,7438,8,367,10,367,12,367,7441,9,367,
        3,367,7443,8,367,1,367,1,367,1,368,1,368,1,368,1,368,1,368,1,368,
        1,368,1,368,3,368,7455,8,368,1,369,1,369,1,370,1,370,1,370,1,370,
        1,370,3,370,7464,8,370,1,370,1,370,1,370,1,370,1,370,3,370,7471,
        8,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,3,370,7480,8,370,
        1,371,1,371,1,371,1,371,1,371,1,372,1,372,1,372,3,372,7490,8,372,
        1,372,1,372,1,372,3,372,7495,8,372,1,372,1,372,3,372,7499,8,372,
        3,372,7501,8,372,1,372,3,372,7504,8,372,1,373,4,373,7507,8,373,11,
        373,12,373,7508,1,374,5,374,7512,8,374,10,374,12,374,7515,9,374,
        1,375,1,375,1,375,5,375,7520,8,375,10,375,12,375,7523,9,375,1,376,
        1,376,1,376,1,376,1,376,3,376,7530,8,376,1,376,3,376,7533,8,376,
        1,377,1,377,1,377,5,377,7538,8,377,10,377,12,377,7541,9,377,1,378,
        1,378,1,378,5,378,7546,8,378,10,378,12,378,7549,9,378,1,379,1,379,
        1,379,5,379,7554,8,379,10,379,12,379,7557,9,379,1,380,1,380,1,380,
        5,380,7562,8,380,10,380,12,380,7565,9,380,1,381,1,381,1,382,1,382,
        1,383,1,383,1,384,1,384,1,385,1,385,1,386,1,386,1,387,1,387,3,387,
        7581,8,387,1,388,1,388,1,388,5,388,7586,8,388,10,388,12,388,7589,
        9,388,1,389,1,389,1,389,5,389,7594,8,389,10,389,12,389,7597,9,389,
        1,390,1,390,1,391,1,391,1,392,1,392,1,393,1,393,1,394,1,394,1,395,
        1,395,1,395,1,395,3,395,7613,8,395,1,396,1,396,1,396,1,396,3,396,
        7619,8,396,1,397,1,397,1,397,1,397,3,397,7625,8,397,1,398,1,398,
        1,399,1,399,1,399,1,399,3,399,7633,8,399,1,400,1,400,1,400,1,400,
        3,400,7639,8,400,1,401,1,401,1,401,3,401,7644,8,401,1,402,1,402,
        1,402,1,402,5,402,7650,8,402,10,402,12,402,7653,9,402,1,402,1,402,
        3,402,7657,8,402,1,403,3,403,7660,8,403,1,403,1,403,1,404,1,404,
        1,404,1,404,1,404,3,404,7669,8,404,1,405,1,405,1,405,5,405,7674,
        8,405,10,405,12,405,7677,9,405,1,406,1,406,3,406,7681,8,406,1,407,
        1,407,3,407,7685,8,407,1,408,1,408,1,408,3,408,7690,8,408,1,409,
        1,409,1,409,1,409,3,409,7696,8,409,1,410,1,410,1,410,3,410,7701,
        8,410,1,410,1,410,1,410,1,410,1,410,1,410,3,410,7709,8,410,1,411,
        1,411,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,
        1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,
        1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,
        1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,
        1,412,1,412,1,412,1,412,1,412,1,412,1,412,1,412,3,412,7764,8,412,
        1,413,1,413,1,414,1,414,1,415,3,415,7771,8,415,1,415,1,415,1,415,
        1,415,4,415,7777,8,415,11,415,12,415,7778,3,415,7781,8,415,3,415,
        7783,8,415,1,415,1,415,5,415,7787,8,415,10,415,12,415,7790,9,415,
        1,415,3,415,7793,8,415,1,415,1,415,3,415,7797,8,415,1,416,1,416,
        1,416,1,416,1,417,1,417,1,417,1,417,1,417,3,417,7808,8,417,1,417,
        3,417,7811,8,417,1,417,1,417,3,417,7815,8,417,1,417,1,417,3,417,
        7819,8,417,1,417,1,417,3,417,7823,8,417,1,417,3,417,7826,8,417,1,
        417,3,417,7829,8,417,1,417,3,417,7832,8,417,1,417,1,417,1,417,1,
        417,1,417,5,417,7839,8,417,10,417,12,417,7842,9,417,1,417,1,417,
        3,417,7846,8,417,1,417,1,417,3,417,7850,8,417,1,417,1,417,1,418,
        1,418,1,418,1,419,1,419,1,420,1,420,1,420,1,420,1,420,1,420,1,420,
        1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,1,420,
        1,420,1,420,1,420,1,420,1,420,1,420,3,420,7883,8,420,1,421,1,421,
        1,421,1,421,1,422,1,422,1,422,1,422,3,422,7893,8,422,1,422,1,422,
        3,422,7897,8,422,1,422,1,422,1,422,1,422,3,422,7903,8,422,1,422,
        1,422,1,422,3,422,7908,8,422,1,423,1,423,1,423,1,423,1,423,1,424,
        1,424,3,424,7917,8,424,1,424,1,424,1,424,1,424,5,424,7923,8,424,
        10,424,12,424,7926,9,424,1,424,1,424,1,425,1,425,1,425,1,425,1,426,
        1,426,3,426,7936,8,426,1,426,1,426,1,426,1,426,5,426,7942,8,426,
        10,426,12,426,7945,9,426,1,427,1,427,1,427,1,427,5,427,7951,8,427,
        10,427,12,427,7954,9,427,1,427,1,427,1,427,1,427,5,427,7960,8,427,
        10,427,12,427,7963,9,427,5,427,7965,8,427,10,427,12,427,7968,9,427,
        1,427,3,427,7971,8,427,1,427,1,427,1,427,1,427,1,428,1,428,5,428,
        7979,8,428,10,428,12,428,7982,9,428,1,429,1,429,3,429,7986,8,429,
        1,429,1,429,1,429,1,429,5,429,7992,8,429,10,429,12,429,7995,9,429,
        4,429,7997,8,429,11,429,12,429,7998,1,429,3,429,8002,8,429,1,429,
        1,429,1,429,1,429,1,430,3,430,8009,8,430,1,430,1,430,1,430,1,430,
        3,430,8015,8,430,1,430,1,430,1,431,1,431,1,431,1,431,3,431,8023,
        8,431,1,431,1,431,1,431,1,431,1,431,1,431,3,431,8031,8,431,1,431,
        3,431,8034,8,431,1,431,1,431,1,431,1,431,1,431,3,431,8041,8,431,
        3,431,8043,8,431,1,432,3,432,8046,8,432,1,432,1,432,1,432,1,432,
        3,432,8052,8,432,1,432,1,432,1,432,1,432,1,432,1,433,1,433,3,433,
        8061,8,433,1,433,1,433,3,433,8065,8,433,1,433,1,433,1,434,1,434,
        1,434,1,434,1,434,1,434,1,434,1,434,1,434,1,434,3,434,8079,8,434,
        1,434,3,434,8082,8,434,3,434,8084,8,434,1,434,1,434,1,435,1,435,
        3,435,8090,8,435,1,435,1,435,1,435,1,435,1,435,1,435,4,435,8098,
        8,435,11,435,12,435,8099,3,435,8102,8,435,3,435,8104,8,435,1,435,
        1,435,1,435,1,435,5,435,8110,8,435,10,435,12,435,8113,9,435,3,435,
        8115,8,435,1,435,3,435,8118,8,435,1,436,1,436,1,436,1,436,1,437,
        1,437,1,437,1,437,3,437,8128,8,437,1,437,1,437,1,438,1,438,5,438,
        8134,8,438,10,438,12,438,8137,9,438,1,438,1,438,1,438,3,438,8142,
        8,438,1,438,1,438,1,439,1,439,3,439,8148,8,439,1,439,1,439,1,440,
        1,440,1,440,3,440,8155,8,440,1,440,1,440,3,440,8159,8,440,1,440,
        1,440,3,440,8163,8,440,1,440,3,440,8166,8,440,1,440,3,440,8169,8,
        440,1,440,1,440,1,441,1,441,3,441,8175,8,441,1,441,1,441,1,442,1,
        442,1,442,3,442,8182,8,442,1,442,3,442,8185,8,442,1,442,1,442,1,
        442,1,442,1,442,1,442,3,442,8193,8,442,3,442,8195,8,442,1,442,1,
        442,1,442,1,442,1,442,5,442,8202,8,442,10,442,12,442,8205,9,442,
        1,442,1,442,3,442,8209,8,442,3,442,8211,8,442,1,442,1,442,1,443,
        1,443,1,443,3,443,8218,8,443,1,443,1,443,1,444,1,444,3,444,8224,
        8,444,1,444,3,444,8227,8,444,1,444,1,444,1,444,1,444,1,444,1,445,
        1,445,1,445,1,445,1,445,3,445,8239,8,445,1,445,1,445,1,445,1,445,
        1,445,3,445,8246,8,445,3,445,8248,8,445,1,446,1,446,3,446,8252,8,
        446,1,446,1,446,1,446,1,447,3,447,8258,8,447,1,447,1,447,1,447,3,
        447,8263,8,447,1,447,1,447,3,447,8267,8,447,1,447,3,447,8270,8,447,
        1,447,3,447,8273,8,447,1,447,1,447,1,447,1,447,1,447,4,447,8280,
        8,447,11,447,12,447,8281,1,447,3,447,8285,8,447,1,448,3,448,8288,
        8,448,1,448,1,448,3,448,8292,8,448,1,448,1,448,3,448,8296,8,448,
        3,448,8298,8,448,1,448,3,448,8301,8,448,1,448,3,448,8304,8,448,1,
        449,1,449,1,449,1,449,3,449,8310,8,449,1,449,1,449,1,449,1,449,1,
        449,3,449,8317,8,449,1,449,1,449,1,449,1,449,1,449,3,449,8324,8,
        449,1,449,1,449,1,449,1,449,3,449,8330,8,449,3,449,8332,8,449,1,
        450,1,450,3,450,8336,8,450,1,450,1,450,1,450,3,450,8341,8,450,1,
        450,1,450,1,451,1,451,1,451,1,451,1,451,1,451,1,451,1,451,1,451,
        1,451,1,451,1,451,5,451,8357,8,451,10,451,12,451,8360,9,451,1,451,
        1,451,4,451,8364,8,451,11,451,12,451,8365,1,452,1,452,1,452,1,452,
        1,452,5,452,8373,8,452,10,452,12,452,8376,9,452,1,452,1,452,1,452,
        1,452,3,452,8382,8,452,1,453,1,453,3,453,8386,8,453,1,454,1,454,
        1,454,1,454,1,455,1,455,1,455,1,456,1,456,1,456,3,456,8398,8,456,
        1,456,3,456,8401,8,456,1,456,1,456,1,457,1,457,1,457,1,457,1,457,
        1,457,1,457,1,457,1,457,3,457,8414,8,457,1,457,3,457,8417,8,457,
        1,458,1,458,3,458,8421,8,458,1,459,1,459,1,459,1,459,1,459,5,459,
        8428,8,459,10,459,12,459,8431,9,459,1,459,1,459,5,459,8435,8,459,
        10,459,12,459,8438,9,459,4,459,8440,8,459,11,459,12,459,8441,1,460,
        1,460,1,460,3,460,8447,8,460,1,461,1,461,3,461,8451,8,461,1,462,
        3,462,8454,8,462,1,462,3,462,8457,8,462,1,462,3,462,8460,8,462,1,
        462,3,462,8463,8,462,1,462,3,462,8466,8,462,1,462,1,462,3,462,8470,
        8,462,1,462,3,462,8473,8,462,1,462,0,3,670,674,676,463,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,
        420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
        452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
        484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,
        516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,
        548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,
        580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,
        612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,
        644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,
        676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,
        708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,
        740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,
        772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,
        804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,
        836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,
        868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,
        900,902,904,906,908,910,912,914,916,918,920,922,924,0,119,2,0,195,
        195,364,364,2,0,66,66,318,318,2,0,99,99,318,318,2,0,134,134,318,
        318,1,0,529,531,2,0,10,10,94,94,2,0,133,133,191,191,2,0,254,254,
        332,332,2,0,162,162,363,363,2,0,180,180,221,221,5,0,30,30,288,288,
        329,329,352,352,354,354,2,0,109,109,532,532,2,0,158,158,277,277,
        2,0,367,367,439,439,2,0,139,139,312,312,2,0,191,191,333,333,2,0,
        313,313,333,333,2,0,150,150,315,315,2,0,64,64,94,94,4,0,78,78,183,
        183,197,197,298,298,1,0,549,551,2,0,213,213,254,254,2,0,352,352,
        354,354,2,0,200,200,224,224,9,0,30,30,160,160,165,165,179,179,219,
        219,227,227,342,342,345,345,438,438,3,0,113,113,284,284,336,336,
        2,0,53,53,78,78,2,0,105,105,379,379,2,0,260,260,262,262,3,0,173,
        173,260,260,262,262,1,0,12,13,2,0,64,64,375,375,2,0,156,156,206,
        206,2,0,189,189,360,360,2,0,215,215,373,373,3,0,133,133,191,191,
        333,333,5,0,30,30,88,88,182,182,241,241,369,369,2,0,9,9,94,94,2,
        0,92,92,226,226,1,0,448,449,2,0,92,92,414,414,2,0,341,341,414,414,
        4,0,163,163,185,185,283,283,353,353,2,0,135,135,145,145,2,0,211,
        211,278,278,3,0,321,321,357,357,445,445,3,0,66,66,99,99,318,318,
        5,0,108,108,168,168,226,226,328,328,342,342,2,0,167,167,314,314,
        2,0,61,61,265,265,4,0,207,207,249,249,268,268,293,293,2,0,130,130,
        307,307,2,0,64,64,68,68,10,0,46,46,88,88,182,182,202,202,241,241,
        352,352,354,354,357,358,369,369,521,523,5,0,212,212,329,329,350,
        350,455,455,457,457,5,0,212,212,329,329,350,350,361,361,455,456,
        2,0,37,37,55,55,2,0,207,207,249,249,2,0,10,10,53,53,2,0,181,181,
        243,243,2,0,170,170,320,320,2,0,141,141,223,223,5,0,108,108,168,
        168,189,189,342,342,360,360,2,0,226,226,328,328,2,0,163,163,185,
        185,2,0,186,186,193,193,4,0,88,88,182,182,241,241,369,369,2,0,137,
        137,242,242,2,0,161,161,319,319,4,0,129,129,161,161,319,319,454,
        454,2,0,356,356,380,380,2,0,81,81,382,382,2,0,151,151,254,254,2,
        0,133,133,138,138,1,0,31,32,2,0,128,128,547,547,2,0,60,60,96,96,
        2,0,99,99,349,349,2,0,131,131,414,414,2,0,201,201,334,334,3,0,59,
        59,70,70,97,97,2,0,30,30,56,56,1,0,527,528,2,0,207,207,268,268,2,
        0,320,320,414,414,2,0,574,574,576,576,1,0,468,469,4,0,113,113,115,
        115,119,119,126,126,2,0,360,360,477,477,2,0,394,395,409,409,2,0,
        391,392,406,406,1,0,391,392,1,0,418,419,5,0,10,10,16,17,21,21,23,
        23,25,25,3,0,9,9,14,14,27,27,2,0,98,98,396,396,2,0,50,51,75,76,2,
        0,41,41,420,420,3,0,39,39,73,73,95,95,4,0,393,393,399,399,404,404,
        425,425,2,0,292,292,347,347,2,0,166,166,188,188,2,0,304,304,450,
        450,3,0,299,299,320,320,481,481,2,0,208,208,289,289,3,0,30,30,34,
        34,90,90,6,0,9,10,12,17,21,21,23,23,25,25,27,27,2,0,114,114,120,
        120,2,0,20,20,22,22,1,0,483,486,17,0,53,53,116,116,123,124,129,228,
        238,386,433,452,455,469,471,471,473,473,475,475,477,488,490,502,
        504,504,506,518,520,520,524,524,547,548,3,0,106,123,125,128,472,
        472,4,0,30,52,54,70,72,105,454,454,2,0,62,62,116,116,2,0,10,10,20,
        20,2,0,434,434,501,501,2,0,167,167,507,507,1,0,512,517,2,0,144,144,
        210,210,9915,0,929,1,0,0,0,2,934,1,0,0,0,4,1058,1,0,0,0,6,1060,1,
        0,0,0,8,1063,1,0,0,0,10,1113,1,0,0,0,12,1123,1,0,0,0,14,1125,1,0,
        0,0,16,1137,1,0,0,0,18,1149,1,0,0,0,20,1160,1,0,0,0,22,1194,1,0,
        0,0,24,1238,1,0,0,0,26,1240,1,0,0,0,28,1252,1,0,0,0,30,1259,1,0,
        0,0,32,1278,1,0,0,0,34,1286,1,0,0,0,36,1288,1,0,0,0,38,1302,1,0,
        0,0,40,1306,1,0,0,0,42,1343,1,0,0,0,44,1345,1,0,0,0,46,1353,1,0,
        0,0,48,1363,1,0,0,0,50,1370,1,0,0,0,52,1378,1,0,0,0,54,1384,1,0,
        0,0,56,1400,1,0,0,0,58,1404,1,0,0,0,60,1406,1,0,0,0,62,1418,1,0,
        0,0,64,1423,1,0,0,0,66,1428,1,0,0,0,68,1430,1,0,0,0,70,1442,1,0,
        0,0,72,1450,1,0,0,0,74,1452,1,0,0,0,76,1572,1,0,0,0,78,1574,1,0,
        0,0,80,1588,1,0,0,0,82,1590,1,0,0,0,84,1827,1,0,0,0,86,1834,1,0,
        0,0,88,1836,1,0,0,0,90,1838,1,0,0,0,92,1841,1,0,0,0,94,1852,1,0,
        0,0,96,1855,1,0,0,0,98,1885,1,0,0,0,100,1887,1,0,0,0,102,1928,1,
        0,0,0,104,1930,1,0,0,0,106,1984,1,0,0,0,108,2030,1,0,0,0,110,2051,
        1,0,0,0,112,2053,1,0,0,0,114,2070,1,0,0,0,116,2151,1,0,0,0,118,2153,
        1,0,0,0,120,2164,1,0,0,0,122,2187,1,0,0,0,124,2205,1,0,0,0,126,2207,
        1,0,0,0,128,2242,1,0,0,0,130,2335,1,0,0,0,132,2340,1,0,0,0,134,2342,
        1,0,0,0,136,2440,1,0,0,0,138,2442,1,0,0,0,140,2446,1,0,0,0,142,2457,
        1,0,0,0,144,2465,1,0,0,0,146,2468,1,0,0,0,148,2471,1,0,0,0,150,2489,
        1,0,0,0,152,2491,1,0,0,0,154,2495,1,0,0,0,156,2508,1,0,0,0,158,2510,
        1,0,0,0,160,2515,1,0,0,0,162,2535,1,0,0,0,164,2543,1,0,0,0,166,2550,
        1,0,0,0,168,2552,1,0,0,0,170,2561,1,0,0,0,172,2564,1,0,0,0,174,2568,
        1,0,0,0,176,2572,1,0,0,0,178,2597,1,0,0,0,180,2607,1,0,0,0,182,2621,
        1,0,0,0,184,2637,1,0,0,0,186,2643,1,0,0,0,188,2670,1,0,0,0,190,2680,
        1,0,0,0,192,2696,1,0,0,0,194,2740,1,0,0,0,196,2747,1,0,0,0,198,2749,
        1,0,0,0,200,2775,1,0,0,0,202,2786,1,0,0,0,204,2805,1,0,0,0,206,2816,
        1,0,0,0,208,2854,1,0,0,0,210,2875,1,0,0,0,212,2877,1,0,0,0,214,2897,
        1,0,0,0,216,2909,1,0,0,0,218,2921,1,0,0,0,220,2924,1,0,0,0,222,2927,
        1,0,0,0,224,2947,1,0,0,0,226,2952,1,0,0,0,228,3001,1,0,0,0,230,3003,
        1,0,0,0,232,3026,1,0,0,0,234,3042,1,0,0,0,236,3054,1,0,0,0,238,3081,
        1,0,0,0,240,3096,1,0,0,0,242,3159,1,0,0,0,244,3161,1,0,0,0,246,3166,
        1,0,0,0,248,3172,1,0,0,0,250,3259,1,0,0,0,252,3265,1,0,0,0,254,3267,
        1,0,0,0,256,3283,1,0,0,0,258,3285,1,0,0,0,260,3294,1,0,0,0,262,3298,
        1,0,0,0,264,3311,1,0,0,0,266,3323,1,0,0,0,268,3325,1,0,0,0,270,3347,
        1,0,0,0,272,3359,1,0,0,0,274,3370,1,0,0,0,276,3461,1,0,0,0,278,3463,
        1,0,0,0,280,3474,1,0,0,0,282,3485,1,0,0,0,284,3487,1,0,0,0,286,3513,
        1,0,0,0,288,3515,1,0,0,0,290,3519,1,0,0,0,292,3569,1,0,0,0,294,3571,
        1,0,0,0,296,3577,1,0,0,0,298,3602,1,0,0,0,300,3606,1,0,0,0,302,3820,
        1,0,0,0,304,3838,1,0,0,0,306,3864,1,0,0,0,308,3866,1,0,0,0,310,3874,
        1,0,0,0,312,3880,1,0,0,0,314,3884,1,0,0,0,316,3904,1,0,0,0,318,3910,
        1,0,0,0,320,3977,1,0,0,0,322,4008,1,0,0,0,324,4054,1,0,0,0,326,4056,
        1,0,0,0,328,4058,1,0,0,0,330,4069,1,0,0,0,332,4106,1,0,0,0,334,4108,
        1,0,0,0,336,4114,1,0,0,0,338,4164,1,0,0,0,340,4167,1,0,0,0,342,4181,
        1,0,0,0,344,4202,1,0,0,0,346,4226,1,0,0,0,348,4267,1,0,0,0,350,4269,
        1,0,0,0,352,4271,1,0,0,0,354,4311,1,0,0,0,356,4328,1,0,0,0,358,4348,
        1,0,0,0,360,4401,1,0,0,0,362,4404,1,0,0,0,364,4410,1,0,0,0,366,4418,
        1,0,0,0,368,4431,1,0,0,0,370,4433,1,0,0,0,372,4446,1,0,0,0,374,4448,
        1,0,0,0,376,4461,1,0,0,0,378,4471,1,0,0,0,380,4482,1,0,0,0,382,4493,
        1,0,0,0,384,4495,1,0,0,0,386,4500,1,0,0,0,388,4514,1,0,0,0,390,4546,
        1,0,0,0,392,4583,1,0,0,0,394,4585,1,0,0,0,396,4588,1,0,0,0,398,4591,
        1,0,0,0,400,4608,1,0,0,0,402,4629,1,0,0,0,404,4645,1,0,0,0,406,4661,
        1,0,0,0,408,4683,1,0,0,0,410,4688,1,0,0,0,412,4691,1,0,0,0,414,4699,
        1,0,0,0,416,4724,1,0,0,0,418,4727,1,0,0,0,420,4755,1,0,0,0,422,4760,
        1,0,0,0,424,4800,1,0,0,0,426,5012,1,0,0,0,428,5014,1,0,0,0,430,5102,
        1,0,0,0,432,5104,1,0,0,0,434,5110,1,0,0,0,436,5121,1,0,0,0,438,5131,
        1,0,0,0,440,5211,1,0,0,0,442,5213,1,0,0,0,444,5227,1,0,0,0,446,5249,
        1,0,0,0,448,5322,1,0,0,0,450,5324,1,0,0,0,452,5365,1,0,0,0,454,5367,
        1,0,0,0,456,5372,1,0,0,0,458,5375,1,0,0,0,460,5378,1,0,0,0,462,5428,
        1,0,0,0,464,5430,1,0,0,0,466,5441,1,0,0,0,468,5443,1,0,0,0,470,5453,
        1,0,0,0,472,5488,1,0,0,0,474,5491,1,0,0,0,476,5512,1,0,0,0,478,5522,
        1,0,0,0,480,5542,1,0,0,0,482,5548,1,0,0,0,484,5554,1,0,0,0,486,5559,
        1,0,0,0,488,5572,1,0,0,0,490,5599,1,0,0,0,492,5647,1,0,0,0,494,5649,
        1,0,0,0,496,5687,1,0,0,0,498,5689,1,0,0,0,500,5710,1,0,0,0,502,5730,
        1,0,0,0,504,5734,1,0,0,0,506,5749,1,0,0,0,508,5751,1,0,0,0,510,5755,
        1,0,0,0,512,5759,1,0,0,0,514,5767,1,0,0,0,516,5791,1,0,0,0,518,5793,
        1,0,0,0,520,5804,1,0,0,0,522,5812,1,0,0,0,524,5828,1,0,0,0,526,5853,
        1,0,0,0,528,5855,1,0,0,0,530,5859,1,0,0,0,532,5868,1,0,0,0,534,5908,
        1,0,0,0,536,5919,1,0,0,0,538,5927,1,0,0,0,540,5930,1,0,0,0,542,5934,
        1,0,0,0,544,5949,1,0,0,0,546,5974,1,0,0,0,548,5989,1,0,0,0,550,6015,
        1,0,0,0,552,6017,1,0,0,0,554,6040,1,0,0,0,556,6042,1,0,0,0,558,6050,
        1,0,0,0,560,6068,1,0,0,0,562,6092,1,0,0,0,564,6104,1,0,0,0,566,6108,
        1,0,0,0,568,6120,1,0,0,0,570,6140,1,0,0,0,572,6148,1,0,0,0,574,6162,
        1,0,0,0,576,6185,1,0,0,0,578,6187,1,0,0,0,580,6192,1,0,0,0,582,6202,
        1,0,0,0,584,6223,1,0,0,0,586,6225,1,0,0,0,588,6234,1,0,0,0,590,6245,
        1,0,0,0,592,6255,1,0,0,0,594,6257,1,0,0,0,596,6264,1,0,0,0,598,6295,
        1,0,0,0,600,6325,1,0,0,0,602,6327,1,0,0,0,604,6336,1,0,0,0,606,6339,
        1,0,0,0,608,6410,1,0,0,0,610,6434,1,0,0,0,612,6455,1,0,0,0,614,6457,
        1,0,0,0,616,6465,1,0,0,0,618,6482,1,0,0,0,620,6508,1,0,0,0,622,6510,
        1,0,0,0,624,6518,1,0,0,0,626,6525,1,0,0,0,628,6549,1,0,0,0,630,6555,
        1,0,0,0,632,6563,1,0,0,0,634,6566,1,0,0,0,636,6573,1,0,0,0,638,6581,
        1,0,0,0,640,6586,1,0,0,0,642,6616,1,0,0,0,644,6643,1,0,0,0,646,6671,
        1,0,0,0,648,6688,1,0,0,0,650,6694,1,0,0,0,652,6712,1,0,0,0,654,6714,
        1,0,0,0,656,6718,1,0,0,0,658,6735,1,0,0,0,660,6740,1,0,0,0,662,6778,
        1,0,0,0,664,6780,1,0,0,0,666,6784,1,0,0,0,668,6786,1,0,0,0,670,6795,
        1,0,0,0,672,6879,1,0,0,0,674,6885,1,0,0,0,676,6994,1,0,0,0,678,7026,
        1,0,0,0,680,7077,1,0,0,0,682,7081,1,0,0,0,684,7257,1,0,0,0,686,7259,
        1,0,0,0,688,7267,1,0,0,0,690,7272,1,0,0,0,692,7274,1,0,0,0,694,7282,
        1,0,0,0,696,7285,1,0,0,0,698,7294,1,0,0,0,700,7298,1,0,0,0,702,7303,
        1,0,0,0,704,7320,1,0,0,0,706,7347,1,0,0,0,708,7356,1,0,0,0,710,7358,
        1,0,0,0,712,7365,1,0,0,0,714,7369,1,0,0,0,716,7371,1,0,0,0,718,7379,
        1,0,0,0,720,7387,1,0,0,0,722,7394,1,0,0,0,724,7396,1,0,0,0,726,7409,
        1,0,0,0,728,7413,1,0,0,0,730,7415,1,0,0,0,732,7430,1,0,0,0,734,7432,
        1,0,0,0,736,7454,1,0,0,0,738,7456,1,0,0,0,740,7479,1,0,0,0,742,7481,
        1,0,0,0,744,7503,1,0,0,0,746,7506,1,0,0,0,748,7513,1,0,0,0,750,7516,
        1,0,0,0,752,7532,1,0,0,0,754,7534,1,0,0,0,756,7542,1,0,0,0,758,7550,
        1,0,0,0,760,7558,1,0,0,0,762,7566,1,0,0,0,764,7568,1,0,0,0,766,7570,
        1,0,0,0,768,7572,1,0,0,0,770,7574,1,0,0,0,772,7576,1,0,0,0,774,7578,
        1,0,0,0,776,7582,1,0,0,0,778,7590,1,0,0,0,780,7598,1,0,0,0,782,7600,
        1,0,0,0,784,7602,1,0,0,0,786,7604,1,0,0,0,788,7606,1,0,0,0,790,7612,
        1,0,0,0,792,7618,1,0,0,0,794,7624,1,0,0,0,796,7626,1,0,0,0,798,7632,
        1,0,0,0,800,7638,1,0,0,0,802,7640,1,0,0,0,804,7656,1,0,0,0,806,7659,
        1,0,0,0,808,7668,1,0,0,0,810,7670,1,0,0,0,812,7680,1,0,0,0,814,7684,
        1,0,0,0,816,7689,1,0,0,0,818,7695,1,0,0,0,820,7708,1,0,0,0,822,7710,
        1,0,0,0,824,7763,1,0,0,0,826,7765,1,0,0,0,828,7767,1,0,0,0,830,7770,
        1,0,0,0,832,7798,1,0,0,0,834,7802,1,0,0,0,836,7853,1,0,0,0,838,7856,
        1,0,0,0,840,7882,1,0,0,0,842,7884,1,0,0,0,844,7907,1,0,0,0,846,7909,
        1,0,0,0,848,7914,1,0,0,0,850,7929,1,0,0,0,852,7935,1,0,0,0,854,7946,
        1,0,0,0,856,7976,1,0,0,0,858,7983,1,0,0,0,860,8008,1,0,0,0,862,8018,
        1,0,0,0,864,8045,1,0,0,0,866,8058,1,0,0,0,868,8068,1,0,0,0,870,8087,
        1,0,0,0,872,8119,1,0,0,0,874,8123,1,0,0,0,876,8131,1,0,0,0,878,8145,
        1,0,0,0,880,8151,1,0,0,0,882,8172,1,0,0,0,884,8178,1,0,0,0,886,8217,
        1,0,0,0,888,8221,1,0,0,0,890,8247,1,0,0,0,892,8249,1,0,0,0,894,8257,
        1,0,0,0,896,8297,1,0,0,0,898,8331,1,0,0,0,900,8333,1,0,0,0,902,8344,
        1,0,0,0,904,8381,1,0,0,0,906,8385,1,0,0,0,908,8387,1,0,0,0,910,8391,
        1,0,0,0,912,8394,1,0,0,0,914,8416,1,0,0,0,916,8420,1,0,0,0,918,8422,
        1,0,0,0,920,8446,1,0,0,0,922,8450,1,0,0,0,924,8453,1,0,0,0,926,928,
        3,2,1,0,927,926,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,
        1,0,0,0,930,932,1,0,0,0,931,929,1,0,0,0,932,933,5,0,0,1,933,1,1,
        0,0,0,934,936,3,4,2,0,935,937,5,7,0,0,936,935,1,0,0,0,936,937,1,
        0,0,0,937,3,1,0,0,0,938,1059,3,272,136,0,939,1059,3,482,241,0,940,
        1059,3,478,239,0,941,1059,3,480,240,0,942,1059,3,346,173,0,943,1059,
        3,488,244,0,944,1059,3,286,143,0,945,1059,3,204,102,0,946,1059,3,
        206,103,0,947,1059,3,212,106,0,948,1059,3,226,113,0,949,1059,3,398,
        199,0,950,1059,3,28,14,0,951,1059,3,428,214,0,952,1059,3,430,215,
        0,953,1059,3,440,220,0,954,1059,3,432,216,0,955,1059,3,438,219,0,
        956,1059,3,238,119,0,957,1059,3,240,120,0,958,1059,3,192,96,0,959,
        1059,3,484,242,0,960,1059,3,76,38,0,961,1059,3,424,212,0,962,1059,
        3,100,50,0,963,1059,3,444,222,0,964,1059,3,18,9,0,965,1059,3,20,
        10,0,966,1059,3,16,8,0,967,1059,3,448,224,0,968,1059,3,178,89,0,
        969,1059,3,492,246,0,970,1059,3,490,245,0,971,1059,3,234,117,0,972,
        1059,3,500,250,0,973,1059,3,6,3,0,974,1059,3,72,36,0,975,1059,3,
        104,52,0,976,1059,3,496,248,0,977,1059,3,318,159,0,978,1059,3,70,
        35,0,979,1059,3,106,53,0,980,1059,3,248,124,0,981,1059,3,180,90,
        0,982,1059,3,274,137,0,983,1059,3,414,207,0,984,1059,3,494,247,0,
        985,1059,3,486,243,0,986,1059,3,202,101,0,987,1059,3,208,104,0,988,
        1059,3,222,111,0,989,1059,3,228,114,0,990,1059,3,358,179,0,991,1059,
        3,26,13,0,992,1059,3,186,93,0,993,1059,3,290,145,0,994,1059,3,294,
        147,0,995,1059,3,442,221,0,996,1059,3,296,148,0,997,1059,3,236,118,
        0,998,1059,3,198,99,0,999,1059,3,30,15,0,1000,1059,3,190,95,0,1001,
        1059,3,114,57,0,1002,1059,3,446,223,0,1003,1059,3,176,88,0,1004,
        1059,3,200,100,0,1005,1059,3,418,209,0,1006,1059,3,250,125,0,1007,
        1059,3,268,134,0,1008,1059,3,8,4,0,1009,1059,3,14,7,0,1010,1059,
        3,232,116,0,1011,1059,3,474,237,0,1012,1059,3,530,265,0,1013,1059,
        3,552,276,0,1014,1059,3,276,138,0,1015,1059,3,542,271,0,1016,1059,
        3,74,37,0,1017,1059,3,412,206,0,1018,1059,3,302,151,0,1019,1059,
        3,526,263,0,1020,1059,3,514,257,0,1021,1059,3,322,161,0,1022,1059,
        3,328,164,0,1023,1059,3,342,171,0,1024,1059,3,894,447,0,1025,1059,
        3,230,115,0,1026,1059,3,352,176,0,1027,1059,3,532,266,0,1028,1059,
        3,458,229,0,1029,1059,3,188,94,0,1030,1059,3,472,236,0,1031,1059,
        3,544,272,0,1032,1059,3,454,227,0,1033,1059,3,520,260,0,1034,1059,
        3,300,150,0,1035,1059,3,422,211,0,1036,1059,3,402,201,0,1037,1059,
        3,400,200,0,1038,1059,3,404,202,0,1039,1059,3,426,213,0,1040,1059,
        3,330,165,0,1041,1059,3,344,172,0,1042,1059,3,450,225,0,1043,1059,
        3,320,160,0,1044,1059,3,554,277,0,1045,1059,3,462,231,0,1046,1059,
        3,314,157,0,1047,1059,3,460,230,0,1048,1059,3,546,273,0,1049,1059,
        3,498,249,0,1050,1059,3,60,30,0,1051,1059,3,36,18,0,1052,1059,3,
        68,34,0,1053,1059,3,470,235,0,1054,1056,5,584,0,0,1055,1057,5,585,
        0,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,1057,1059,1,0,0,0,1058,938,
        1,0,0,0,1058,939,1,0,0,0,1058,940,1,0,0,0,1058,941,1,0,0,0,1058,
        942,1,0,0,0,1058,943,1,0,0,0,1058,944,1,0,0,0,1058,945,1,0,0,0,1058,
        946,1,0,0,0,1058,947,1,0,0,0,1058,948,1,0,0,0,1058,949,1,0,0,0,1058,
        950,1,0,0,0,1058,951,1,0,0,0,1058,952,1,0,0,0,1058,953,1,0,0,0,1058,
        954,1,0,0,0,1058,955,1,0,0,0,1058,956,1,0,0,0,1058,957,1,0,0,0,1058,
        958,1,0,0,0,1058,959,1,0,0,0,1058,960,1,0,0,0,1058,961,1,0,0,0,1058,
        962,1,0,0,0,1058,963,1,0,0,0,1058,964,1,0,0,0,1058,965,1,0,0,0,1058,
        966,1,0,0,0,1058,967,1,0,0,0,1058,968,1,0,0,0,1058,969,1,0,0,0,1058,
        970,1,0,0,0,1058,971,1,0,0,0,1058,972,1,0,0,0,1058,973,1,0,0,0,1058,
        974,1,0,0,0,1058,975,1,0,0,0,1058,976,1,0,0,0,1058,977,1,0,0,0,1058,
        978,1,0,0,0,1058,979,1,0,0,0,1058,980,1,0,0,0,1058,981,1,0,0,0,1058,
        982,1,0,0,0,1058,983,1,0,0,0,1058,984,1,0,0,0,1058,985,1,0,0,0,1058,
        986,1,0,0,0,1058,987,1,0,0,0,1058,988,1,0,0,0,1058,989,1,0,0,0,1058,
        990,1,0,0,0,1058,991,1,0,0,0,1058,992,1,0,0,0,1058,993,1,0,0,0,1058,
        994,1,0,0,0,1058,995,1,0,0,0,1058,996,1,0,0,0,1058,997,1,0,0,0,1058,
        998,1,0,0,0,1058,999,1,0,0,0,1058,1000,1,0,0,0,1058,1001,1,0,0,0,
        1058,1002,1,0,0,0,1058,1003,1,0,0,0,1058,1004,1,0,0,0,1058,1005,
        1,0,0,0,1058,1006,1,0,0,0,1058,1007,1,0,0,0,1058,1008,1,0,0,0,1058,
        1009,1,0,0,0,1058,1010,1,0,0,0,1058,1011,1,0,0,0,1058,1012,1,0,0,
        0,1058,1013,1,0,0,0,1058,1014,1,0,0,0,1058,1015,1,0,0,0,1058,1016,
        1,0,0,0,1058,1017,1,0,0,0,1058,1018,1,0,0,0,1058,1019,1,0,0,0,1058,
        1020,1,0,0,0,1058,1021,1,0,0,0,1058,1022,1,0,0,0,1058,1023,1,0,0,
        0,1058,1024,1,0,0,0,1058,1025,1,0,0,0,1058,1026,1,0,0,0,1058,1027,
        1,0,0,0,1058,1028,1,0,0,0,1058,1029,1,0,0,0,1058,1030,1,0,0,0,1058,
        1031,1,0,0,0,1058,1032,1,0,0,0,1058,1033,1,0,0,0,1058,1034,1,0,0,
        0,1058,1035,1,0,0,0,1058,1036,1,0,0,0,1058,1037,1,0,0,0,1058,1038,
        1,0,0,0,1058,1039,1,0,0,0,1058,1040,1,0,0,0,1058,1041,1,0,0,0,1058,
        1042,1,0,0,0,1058,1043,1,0,0,0,1058,1044,1,0,0,0,1058,1045,1,0,0,
        0,1058,1046,1,0,0,0,1058,1047,1,0,0,0,1058,1048,1,0,0,0,1058,1049,
        1,0,0,0,1058,1050,1,0,0,0,1058,1051,1,0,0,0,1058,1052,1,0,0,0,1058,
        1053,1,0,0,0,1058,1054,1,0,0,0,1059,5,1,0,0,0,1060,1061,5,433,0,
        0,1061,1062,3,678,339,0,1062,7,1,0,0,0,1063,1064,5,46,0,0,1064,1065,
        5,318,0,0,1065,1067,3,808,404,0,1066,1068,5,105,0,0,1067,1066,1,
        0,0,0,1067,1068,1,0,0,0,1068,1072,1,0,0,0,1069,1071,3,12,6,0,1070,
        1069,1,0,0,0,1071,1074,1,0,0,0,1072,1070,1,0,0,0,1072,1073,1,0,0,
        0,1073,9,1,0,0,0,1074,1072,1,0,0,0,1075,1078,5,287,0,0,1076,1079,
        3,802,401,0,1077,1079,5,78,0,0,1078,1076,1,0,0,0,1078,1077,1,0,0,
        0,1079,1114,1,0,0,0,1080,1081,7,0,0,0,1081,1082,5,287,0,0,1082,1114,
        3,802,401,0,1083,1114,5,228,0,0,1084,1114,5,229,0,0,1085,1114,5,
        236,0,0,1086,1114,5,237,0,0,1087,1114,5,234,0,0,1088,1114,5,235,
        0,0,1089,1114,5,232,0,0,1090,1114,5,233,0,0,1091,1114,5,230,0,0,
        1092,1114,5,231,0,0,1093,1114,5,535,0,0,1094,1114,5,536,0,0,1095,
        1114,5,537,0,0,1096,1114,5,538,0,0,1097,1114,5,539,0,0,1098,1114,
        5,540,0,0,1099,1100,5,164,0,0,1100,1101,5,74,0,0,1101,1114,3,806,
        403,0,1102,1103,5,371,0,0,1103,1104,5,368,0,0,1104,1114,3,802,401,
        0,1105,1106,5,68,0,0,1106,1107,7,1,0,0,1107,1114,3,778,389,0,1108,
        1109,7,2,0,0,1109,1114,3,810,405,0,1110,1111,5,134,0,0,1111,1114,
        3,778,389,0,1112,1114,3,820,410,0,1113,1075,1,0,0,0,1113,1080,1,
        0,0,0,1113,1083,1,0,0,0,1113,1084,1,0,0,0,1113,1085,1,0,0,0,1113,
        1086,1,0,0,0,1113,1087,1,0,0,0,1113,1088,1,0,0,0,1113,1089,1,0,0,
        0,1113,1090,1,0,0,0,1113,1091,1,0,0,0,1113,1092,1,0,0,0,1113,1093,
        1,0,0,0,1113,1094,1,0,0,0,1113,1095,1,0,0,0,1113,1096,1,0,0,0,1113,
        1097,1,0,0,0,1113,1098,1,0,0,0,1113,1099,1,0,0,0,1113,1102,1,0,0,
        0,1113,1105,1,0,0,0,1113,1108,1,0,0,0,1113,1110,1,0,0,0,1113,1112,
        1,0,0,0,1114,11,1,0,0,0,1115,1124,3,10,5,0,1116,1117,5,348,0,0,1117,
        1124,5,574,0,0,1118,1119,7,3,0,0,1119,1124,3,810,405,0,1120,1121,
        5,68,0,0,1121,1122,7,1,0,0,1122,1124,3,810,405,0,1123,1115,1,0,0,
        0,1123,1116,1,0,0,0,1123,1118,1,0,0,0,1123,1120,1,0,0,0,1124,13,
        1,0,0,0,1125,1126,5,46,0,0,1126,1127,5,99,0,0,1127,1129,3,808,404,
        0,1128,1130,5,105,0,0,1129,1128,1,0,0,0,1129,1130,1,0,0,0,1130,1134,
        1,0,0,0,1131,1133,3,12,6,0,1132,1131,1,0,0,0,1133,1136,1,0,0,0,1134,
        1132,1,0,0,0,1134,1135,1,0,0,0,1135,15,1,0,0,0,1136,1134,1,0,0,0,
        1137,1138,5,138,0,0,1138,1139,7,2,0,0,1139,1141,3,808,404,0,1140,
        1142,5,105,0,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1146,1,0,
        0,0,1143,1145,3,10,5,0,1144,1143,1,0,0,0,1145,1148,1,0,0,0,1146,
        1144,1,0,0,0,1146,1147,1,0,0,0,1147,17,1,0,0,0,1148,1146,1,0,0,0,
        1149,1150,5,138,0,0,1150,1153,7,2,0,0,1151,1154,5,30,0,0,1152,1154,
        3,808,404,0,1153,1151,1,0,0,0,1153,1152,1,0,0,0,1154,1155,1,0,0,
        0,1155,1156,5,68,0,0,1156,1157,5,175,0,0,1157,1158,3,782,391,0,1158,
        1159,3,64,32,0,1159,19,1,0,0,0,1160,1161,5,138,0,0,1161,1162,5,442,
        0,0,1162,1164,3,788,394,0,1163,1165,3,362,181,0,1164,1163,1,0,0,
        0,1164,1165,1,0,0,0,1165,1166,1,0,0,0,1166,1167,3,22,11,0,1167,21,
        1,0,0,0,1168,1172,3,24,12,0,1169,1171,3,24,12,0,1170,1169,1,0,0,
        0,1171,1174,1,0,0,0,1172,1170,1,0,0,0,1172,1173,1,0,0,0,1173,1176,
        1,0,0,0,1174,1172,1,0,0,0,1175,1177,5,315,0,0,1176,1175,1,0,0,0,
        1176,1177,1,0,0,0,1177,1195,1,0,0,0,1178,1179,5,309,0,0,1179,1180,
        5,94,0,0,1180,1195,3,786,393,0,1181,1182,5,282,0,0,1182,1183,5,94,
        0,0,1183,1195,3,808,404,0,1184,1185,5,333,0,0,1185,1186,5,323,0,
        0,1186,1195,3,32,16,0,1187,1189,5,269,0,0,1188,1187,1,0,0,0,1188,
        1189,1,0,0,0,1189,1190,1,0,0,0,1190,1191,5,462,0,0,1191,1192,5,80,
        0,0,1192,1193,5,204,0,0,1193,1195,3,812,406,0,1194,1168,1,0,0,0,
        1194,1178,1,0,0,0,1194,1181,1,0,0,0,1194,1184,1,0,0,0,1194,1188,
        1,0,0,0,1195,23,1,0,0,0,1196,1239,5,222,0,0,1197,1239,5,338,0,0,
        1198,1239,5,377,0,0,1199,1201,5,77,0,0,1200,1199,1,0,0,0,1200,1201,
        1,0,0,0,1201,1202,1,0,0,0,1202,1239,5,250,0,0,1203,1205,5,205,0,
        0,1204,1203,1,0,0,0,1204,1205,1,0,0,0,1205,1206,1,0,0,0,1206,1207,
        5,327,0,0,1207,1214,5,243,0,0,1208,1210,5,205,0,0,1209,1208,1,0,
        0,0,1209,1210,1,0,0,0,1210,1211,1,0,0,0,1211,1212,5,327,0,0,1212,
        1214,5,181,0,0,1213,1204,1,0,0,0,1213,1209,1,0,0,0,1214,1239,1,0,
        0,0,1215,1216,5,460,0,0,1216,1239,7,4,0,0,1217,1218,5,170,0,0,1218,
        1239,3,818,409,0,1219,1220,5,320,0,0,1220,1239,3,812,406,0,1221,
        1222,5,333,0,0,1222,1223,3,812,406,0,1223,1226,7,5,0,0,1224,1227,
        3,812,406,0,1225,1227,5,53,0,0,1226,1224,1,0,0,0,1226,1225,1,0,0,
        0,1227,1239,1,0,0,0,1228,1229,5,333,0,0,1229,1230,3,812,406,0,1230,
        1231,5,64,0,0,1231,1232,5,434,0,0,1232,1239,1,0,0,0,1233,1236,5,
        313,0,0,1234,1237,3,812,406,0,1235,1237,5,30,0,0,1236,1234,1,0,0,
        0,1236,1235,1,0,0,0,1237,1239,1,0,0,0,1238,1196,1,0,0,0,1238,1197,
        1,0,0,0,1238,1198,1,0,0,0,1238,1200,1,0,0,0,1238,1213,1,0,0,0,1238,
        1215,1,0,0,0,1238,1217,1,0,0,0,1238,1219,1,0,0,0,1238,1221,1,0,0,
        0,1238,1228,1,0,0,0,1238,1233,1,0,0,0,1239,25,1,0,0,0,1240,1241,
        5,46,0,0,1241,1242,5,66,0,0,1242,1244,3,808,404,0,1243,1245,5,105,
        0,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,1245,1249,1,0,0,0,1246,1248,
        3,12,6,0,1247,1246,1,0,0,0,1248,1251,1,0,0,0,1249,1247,1,0,0,0,1249,
        1250,1,0,0,0,1250,27,1,0,0,0,1251,1249,1,0,0,0,1252,1253,5,138,0,
        0,1253,1254,5,66,0,0,1254,1255,3,808,404,0,1255,1256,7,6,0,0,1256,
        1257,5,99,0,0,1257,1258,3,810,405,0,1258,29,1,0,0,0,1259,1260,5,
        46,0,0,1260,1262,5,323,0,0,1261,1263,3,288,144,0,1262,1261,1,0,0,
        0,1262,1263,1,0,0,0,1263,1270,1,0,0,0,1264,1266,3,32,16,0,1265,1264,
        1,0,0,0,1265,1266,1,0,0,0,1266,1267,1,0,0,0,1267,1268,5,106,0,0,
        1268,1271,3,808,404,0,1269,1271,3,32,16,0,1270,1265,1,0,0,0,1270,
        1269,1,0,0,0,1271,1275,1,0,0,0,1272,1274,3,34,17,0,1273,1272,1,0,
        0,0,1274,1277,1,0,0,0,1275,1273,1,0,0,0,1275,1276,1,0,0,0,1276,31,
        1,0,0,0,1277,1275,1,0,0,0,1278,1279,3,310,155,0,1279,33,1,0,0,0,
        1280,1287,3,114,57,0,1281,1287,3,352,176,0,1282,1287,3,190,95,0,
        1283,1287,3,250,125,0,1284,1287,3,328,164,0,1285,1287,3,470,235,
        0,1286,1280,1,0,0,0,1286,1281,1,0,0,0,1286,1282,1,0,0,0,1286,1283,
        1,0,0,0,1286,1284,1,0,0,0,1286,1285,1,0,0,0,1287,35,1,0,0,0,1288,
        1290,5,333,0,0,1289,1291,7,7,0,0,1290,1289,1,0,0,0,1290,1291,1,0,
        0,0,1291,1292,1,0,0,0,1292,1293,3,38,19,0,1293,37,1,0,0,0,1294,1295,
        5,356,0,0,1295,1303,3,468,234,0,1296,1297,5,332,0,0,1297,1298,5,
        154,0,0,1298,1299,5,36,0,0,1299,1300,5,356,0,0,1300,1303,3,468,234,
        0,1301,1303,3,42,21,0,1302,1294,1,0,0,0,1302,1296,1,0,0,0,1302,1301,
        1,0,0,0,1303,39,1,0,0,0,1304,1307,5,30,0,0,1305,1307,3,44,22,0,1306,
        1304,1,0,0,0,1306,1305,1,0,0,0,1307,1309,1,0,0,0,1308,1310,7,5,0,
        0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1313,1,0,0,0,1311,1314,
        5,53,0,0,1312,1314,3,46,23,0,1313,1311,1,0,0,0,1313,1312,1,0,0,0,
        1313,1314,1,0,0,0,1314,41,1,0,0,0,1315,1316,5,418,0,0,1316,1317,
        5,386,0,0,1317,1344,3,56,28,0,1318,1319,5,152,0,0,1319,1344,3,802,
        401,0,1320,1321,5,323,0,0,1321,1344,3,784,392,0,1322,1325,5,267,
        0,0,1323,1326,3,802,401,0,1324,1326,5,53,0,0,1325,1323,1,0,0,0,1325,
        1324,1,0,0,0,1325,1326,1,0,0,0,1326,1344,1,0,0,0,1327,1328,5,318,
        0,0,1328,1344,3,58,29,0,1329,1330,5,332,0,0,1330,1331,5,106,0,0,
        1331,1344,3,58,29,0,1332,1333,5,383,0,0,1333,1334,5,279,0,0,1334,
        1344,3,690,345,0,1335,1336,5,356,0,0,1336,1337,5,337,0,0,1337,1344,
        3,802,401,0,1338,1339,3,44,22,0,1339,1340,5,64,0,0,1340,1341,5,434,
        0,0,1341,1344,1,0,0,0,1342,1344,3,40,20,0,1343,1315,1,0,0,0,1343,
        1318,1,0,0,0,1343,1320,1,0,0,0,1343,1322,1,0,0,0,1343,1327,1,0,0,
        0,1343,1329,1,0,0,0,1343,1332,1,0,0,0,1343,1335,1,0,0,0,1343,1338,
        1,0,0,0,1343,1342,1,0,0,0,1344,43,1,0,0,0,1345,1350,3,812,406,0,
        1346,1347,5,11,0,0,1347,1349,3,812,406,0,1348,1346,1,0,0,0,1349,
        1352,1,0,0,0,1350,1348,1,0,0,0,1350,1351,1,0,0,0,1351,45,1,0,0,0,
        1352,1350,1,0,0,0,1353,1358,3,48,24,0,1354,1355,5,6,0,0,1355,1357,
        3,48,24,0,1356,1354,1,0,0,0,1357,1360,1,0,0,0,1358,1356,1,0,0,0,
        1358,1359,1,0,0,0,1359,47,1,0,0,0,1360,1358,1,0,0,0,1361,1364,3,
        54,27,0,1362,1364,3,196,98,0,1363,1361,1,0,0,0,1363,1362,1,0,0,0,
        1364,49,1,0,0,0,1365,1366,5,300,0,0,1366,1371,7,8,0,0,1367,1368,
        5,310,0,0,1368,1371,5,300,0,0,1369,1371,5,330,0,0,1370,1365,1,0,
        0,0,1370,1367,1,0,0,0,1370,1369,1,0,0,0,1371,51,1,0,0,0,1372,1379,
        5,96,0,0,1373,1379,5,60,0,0,1374,1379,5,80,0,0,1375,1379,3,794,397,
        0,1376,1379,3,826,413,0,1377,1379,3,802,401,0,1378,1372,1,0,0,0,
        1378,1373,1,0,0,0,1378,1374,1,0,0,0,1378,1375,1,0,0,0,1378,1376,
        1,0,0,0,1378,1377,1,0,0,0,1379,53,1,0,0,0,1380,1385,5,96,0,0,1381,
        1385,5,60,0,0,1382,1385,5,80,0,0,1383,1385,3,58,29,0,1384,1380,1,
        0,0,0,1384,1381,1,0,0,0,1384,1382,1,0,0,0,1384,1383,1,0,0,0,1385,
        55,1,0,0,0,1386,1401,3,802,401,0,1387,1401,5,53,0,0,1388,1401,3,
        820,410,0,1389,1390,5,403,0,0,1390,1392,3,802,401,0,1391,1393,3,
        662,331,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,1401,1,0,0,0,
        1394,1395,5,403,0,0,1395,1396,3,654,327,0,1396,1397,3,802,401,0,
        1397,1401,1,0,0,0,1398,1401,3,196,98,0,1399,1401,5,254,0,0,1400,
        1386,1,0,0,0,1400,1387,1,0,0,0,1400,1388,1,0,0,0,1400,1389,1,0,0,
        0,1400,1394,1,0,0,0,1400,1398,1,0,0,0,1400,1399,1,0,0,0,1401,57,
        1,0,0,0,1402,1405,3,816,408,0,1403,1405,3,802,401,0,1404,1402,1,
        0,0,0,1404,1403,1,0,0,0,1405,59,1,0,0,0,1406,1407,5,313,0,0,1407,
        1408,3,62,31,0,1408,61,1,0,0,0,1409,1410,5,418,0,0,1410,1419,5,386,
        0,0,1411,1412,5,356,0,0,1412,1413,5,244,0,0,1413,1419,5,251,0,0,
        1414,1415,5,332,0,0,1415,1419,5,106,0,0,1416,1419,5,30,0,0,1417,
        1419,3,44,22,0,1418,1409,1,0,0,0,1418,1411,1,0,0,0,1418,1414,1,0,
        0,0,1418,1416,1,0,0,0,1418,1417,1,0,0,0,1419,63,1,0,0,0,1420,1421,
        5,333,0,0,1421,1424,3,38,19,0,1422,1424,3,60,30,0,1423,1420,1,0,
        0,0,1423,1422,1,0,0,0,1424,65,1,0,0,0,1425,1426,5,333,0,0,1426,1429,
        3,42,21,0,1427,1429,3,60,30,0,1428,1425,1,0,0,0,1428,1427,1,0,0,
        0,1429,67,1,0,0,0,1430,1440,5,335,0,0,1431,1441,3,44,22,0,1432,1433,
        5,418,0,0,1433,1441,5,386,0,0,1434,1435,5,356,0,0,1435,1436,5,244,
        0,0,1436,1441,5,251,0,0,1437,1438,5,332,0,0,1438,1441,5,106,0,0,
        1439,1441,5,30,0,0,1440,1431,1,0,0,0,1440,1432,1,0,0,0,1440,1434,
        1,0,0,0,1440,1437,1,0,0,0,1440,1439,1,0,0,0,1441,69,1,0,0,0,1442,
        1443,5,333,0,0,1443,1446,5,165,0,0,1444,1447,5,30,0,0,1445,1447,
        3,754,377,0,1446,1444,1,0,0,0,1446,1445,1,0,0,0,1447,1448,1,0,0,
        0,1448,1449,7,9,0,0,1449,71,1,0,0,0,1450,1451,5,155,0,0,1451,73,
        1,0,0,0,1452,1453,5,187,0,0,1453,1454,7,10,0,0,1454,75,1,0,0,0,1455,
        1456,5,138,0,0,1456,1458,5,92,0,0,1457,1459,3,416,208,0,1458,1457,
        1,0,0,0,1458,1459,1,0,0,0,1459,1460,1,0,0,0,1460,1463,3,618,309,
        0,1461,1464,3,78,39,0,1462,1464,3,80,40,0,1463,1461,1,0,0,0,1463,
        1462,1,0,0,0,1464,1573,1,0,0,0,1465,1466,5,138,0,0,1466,1467,5,92,
        0,0,1467,1468,5,30,0,0,1468,1469,5,68,0,0,1469,1473,3,170,85,0,1470,
        1471,5,281,0,0,1471,1472,5,147,0,0,1472,1474,3,810,405,0,1473,1470,
        1,0,0,0,1473,1474,1,0,0,0,1474,1475,1,0,0,0,1475,1476,5,333,0,0,
        1476,1477,5,351,0,0,1477,1479,3,764,382,0,1478,1480,5,272,0,0,1479,
        1478,1,0,0,0,1479,1480,1,0,0,0,1480,1573,1,0,0,0,1481,1482,5,138,
        0,0,1482,1484,5,92,0,0,1483,1485,3,416,208,0,1484,1483,1,0,0,0,1484,
        1485,1,0,0,0,1485,1486,1,0,0,0,1486,1487,3,768,384,0,1487,1488,3,
        82,41,0,1488,1489,3,98,49,0,1489,1573,1,0,0,0,1490,1491,5,138,0,
        0,1491,1493,5,92,0,0,1492,1494,3,416,208,0,1493,1492,1,0,0,0,1493,
        1494,1,0,0,0,1494,1495,1,0,0,0,1495,1496,3,768,384,0,1496,1497,5,
        436,0,0,1497,1498,5,285,0,0,1498,1500,3,774,387,0,1499,1501,7,11,
        0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1573,1,0,0,0,1502,1503,
        5,138,0,0,1503,1505,5,226,0,0,1504,1506,3,416,208,0,1505,1504,1,
        0,0,0,1505,1506,1,0,0,0,1506,1507,1,0,0,0,1507,1510,3,774,387,0,
        1508,1511,3,78,39,0,1509,1511,3,82,41,0,1510,1508,1,0,0,0,1510,1509,
        1,0,0,0,1511,1573,1,0,0,0,1512,1513,5,138,0,0,1513,1514,5,226,0,
        0,1514,1515,5,30,0,0,1515,1516,5,68,0,0,1516,1520,3,170,85,0,1517,
        1518,5,281,0,0,1518,1519,5,147,0,0,1519,1521,3,810,405,0,1520,1517,
        1,0,0,0,1520,1521,1,0,0,0,1521,1522,1,0,0,0,1522,1523,5,333,0,0,
        1523,1525,3,170,85,0,1524,1526,5,272,0,0,1525,1524,1,0,0,0,1525,
        1526,1,0,0,0,1526,1573,1,0,0,0,1527,1528,5,138,0,0,1528,1530,5,328,
        0,0,1529,1531,3,416,208,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,1531,
        1532,1,0,0,0,1532,1533,3,774,387,0,1533,1534,3,78,39,0,1534,1573,
        1,0,0,0,1535,1537,5,138,0,0,1536,1538,5,259,0,0,1537,1536,1,0,0,
        0,1537,1538,1,0,0,0,1538,1539,1,0,0,0,1539,1541,5,376,0,0,1540,1542,
        3,416,208,0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,1542,1543,1,0,0,
        0,1543,1544,3,772,386,0,1544,1545,3,78,39,0,1545,1573,1,0,0,0,1546,
        1547,5,138,0,0,1547,1548,5,259,0,0,1548,1549,5,376,0,0,1549,1550,
        5,30,0,0,1550,1551,5,68,0,0,1551,1555,3,170,85,0,1552,1553,5,281,
        0,0,1553,1554,5,147,0,0,1554,1556,3,810,405,0,1555,1552,1,0,0,0,
        1555,1556,1,0,0,0,1556,1557,1,0,0,0,1557,1558,5,333,0,0,1558,1559,
        5,351,0,0,1559,1561,3,764,382,0,1560,1562,5,272,0,0,1561,1560,1,
        0,0,0,1561,1562,1,0,0,0,1562,1573,1,0,0,0,1563,1564,5,138,0,0,1564,
        1565,5,63,0,0,1565,1567,5,92,0,0,1566,1568,3,416,208,0,1567,1566,
        1,0,0,0,1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1570,3,618,309,
        0,1570,1571,3,78,39,0,1571,1573,1,0,0,0,1572,1455,1,0,0,0,1572,1465,
        1,0,0,0,1572,1481,1,0,0,0,1572,1490,1,0,0,0,1572,1502,1,0,0,0,1572,
        1512,1,0,0,0,1572,1527,1,0,0,0,1572,1535,1,0,0,0,1572,1546,1,0,0,
        0,1572,1563,1,0,0,0,1573,77,1,0,0,0,1574,1579,3,84,42,0,1575,1576,
        5,6,0,0,1576,1578,3,84,42,0,1577,1575,1,0,0,0,1578,1581,1,0,0,0,
        1579,1577,1,0,0,0,1579,1580,1,0,0,0,1580,79,1,0,0,0,1581,1579,1,
        0,0,0,1582,1583,3,82,41,0,1583,1584,3,98,49,0,1584,1589,1,0,0,0,
        1585,1586,5,436,0,0,1586,1587,5,285,0,0,1587,1589,3,774,387,0,1588,
        1582,1,0,0,0,1588,1585,1,0,0,0,1589,81,1,0,0,0,1590,1591,5,435,0,
        0,1591,1592,5,285,0,0,1592,1593,3,774,387,0,1593,83,1,0,0,0,1594,
        1597,5,133,0,0,1595,1596,5,45,0,0,1596,1598,3,812,406,0,1597,1595,
        1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,0,0,0,1599,1828,3,136,68,0,
        1600,1601,5,138,0,0,1601,1602,5,45,0,0,1602,1606,3,812,406,0,1603,
        1605,3,266,133,0,1604,1603,1,0,0,0,1605,1608,1,0,0,0,1606,1604,1,
        0,0,0,1606,1607,1,0,0,0,1607,1828,1,0,0,0,1608,1606,1,0,0,0,1609,
        1610,5,372,0,0,1610,1611,5,45,0,0,1611,1828,3,812,406,0,1612,1613,
        5,191,0,0,1613,1615,5,45,0,0,1614,1616,3,416,208,0,1615,1614,1,0,
        0,0,1615,1616,1,0,0,0,1616,1617,1,0,0,0,1617,1619,3,812,406,0,1618,
        1620,3,88,44,0,1619,1618,1,0,0,0,1619,1620,1,0,0,0,1620,1828,1,0,
        0,0,1621,1622,5,333,0,0,1622,1623,5,379,0,0,1623,1828,7,12,0,0,1624,
        1625,5,158,0,0,1625,1626,5,80,0,0,1626,1828,3,812,406,0,1627,1628,
        5,333,0,0,1628,1828,7,13,0,0,1629,1631,5,193,0,0,1630,1632,7,14,
        0,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,1828,
        5,357,0,0,1634,1635,5,186,0,0,1635,1639,5,357,0,0,1636,1640,5,30,
        0,0,1637,1640,5,99,0,0,1638,1640,3,812,406,0,1639,1636,1,0,0,0,1639,
        1637,1,0,0,0,1639,1638,1,0,0,0,1640,1828,1,0,0,0,1641,1642,5,193,
        0,0,1642,1643,7,14,0,0,1643,1644,5,321,0,0,1644,1828,3,812,406,0,
        1645,1646,5,186,0,0,1646,1647,5,321,0,0,1647,1828,3,812,406,0,1648,
        1650,5,269,0,0,1649,1648,1,0,0,0,1649,1650,1,0,0,0,1650,1651,1,0,
        0,0,1651,1652,5,228,0,0,1652,1828,3,774,387,0,1653,1654,5,275,0,
        0,1654,1828,3,310,155,0,1655,1656,5,77,0,0,1656,1828,5,275,0,0,1657,
        1658,5,282,0,0,1658,1659,5,94,0,0,1659,1828,3,808,404,0,1660,1661,
        5,333,0,0,1661,1662,5,351,0,0,1662,1828,3,764,382,0,1663,1664,5,
        312,0,0,1664,1669,5,219,0,0,1665,1670,5,270,0,0,1666,1670,5,113,
        0,0,1667,1670,5,53,0,0,1668,1670,3,174,87,0,1669,1665,1,0,0,0,1669,
        1666,1,0,0,0,1669,1667,1,0,0,0,1669,1668,1,0,0,0,1670,1828,1,0,0,
        0,1671,1678,5,193,0,0,1672,1678,5,186,0,0,1673,1675,5,269,0,0,1674,
        1673,1,0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1678,5,209,
        0,0,1677,1671,1,0,0,0,1677,1672,1,0,0,0,1677,1674,1,0,0,0,1678,1679,
        1,0,0,0,1679,1680,5,414,0,0,1680,1681,5,251,0,0,1681,1828,5,327,
        0,0,1682,1684,5,191,0,0,1683,1685,5,44,0,0,1684,1683,1,0,0,0,1684,
        1685,1,0,0,0,1685,1687,1,0,0,0,1686,1688,3,416,208,0,1687,1686,1,
        0,0,0,1687,1688,1,0,0,0,1688,1689,1,0,0,0,1689,1691,3,794,397,0,
        1690,1692,3,88,44,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1828,
        1,0,0,0,1693,1695,5,133,0,0,1694,1696,5,44,0,0,1695,1694,1,0,0,0,
        1695,1696,1,0,0,0,1696,1698,1,0,0,0,1697,1699,3,288,144,0,1698,1697,
        1,0,0,0,1698,1699,1,0,0,0,1699,1700,1,0,0,0,1700,1828,3,126,63,0,
        1701,1703,5,138,0,0,1702,1704,5,44,0,0,1703,1702,1,0,0,0,1703,1704,
        1,0,0,0,1704,1705,1,0,0,0,1705,1708,3,794,397,0,1706,1709,3,86,43,
        0,1707,1709,3,216,108,0,1708,1706,1,0,0,0,1708,1707,1,0,0,0,1709,
        1828,1,0,0,0,1710,1712,5,138,0,0,1711,1713,5,44,0,0,1712,1711,1,
        0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,0,0,1714,1715,3,794,397,0,
        1715,1716,7,15,0,0,1716,1717,5,77,0,0,1717,1718,5,78,0,0,1718,1828,
        1,0,0,0,1719,1721,5,138,0,0,1720,1722,5,44,0,0,1721,1720,1,0,0,0,
        1721,1722,1,0,0,0,1722,1723,1,0,0,0,1723,1724,3,794,397,0,1724,1725,
        5,191,0,0,1725,1727,5,437,0,0,1726,1728,3,416,208,0,1727,1726,1,
        0,0,0,1727,1728,1,0,0,0,1728,1828,1,0,0,0,1729,1731,5,138,0,0,1730,
        1732,5,44,0,0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,1733,1,0,
        0,0,1733,1734,3,794,397,0,1734,1735,5,333,0,0,1735,1736,5,342,0,
        0,1736,1737,3,806,403,0,1737,1828,1,0,0,0,1738,1740,5,138,0,0,1739,
        1741,5,44,0,0,1740,1739,1,0,0,0,1740,1741,1,0,0,0,1741,1742,1,0,
        0,0,1742,1744,3,794,397,0,1743,1738,1,0,0,0,1743,1744,1,0,0,0,1744,
        1745,1,0,0,0,1745,1746,7,16,0,0,1746,1828,3,92,46,0,1747,1749,5,
        138,0,0,1748,1750,5,44,0,0,1749,1748,1,0,0,0,1749,1750,1,0,0,0,1750,
        1751,1,0,0,0,1751,1752,3,794,397,0,1752,1753,5,333,0,0,1753,1754,
        5,345,0,0,1754,1755,3,812,406,0,1755,1828,1,0,0,0,1756,1758,5,138,
        0,0,1757,1759,5,44,0,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,
        1760,1,0,0,0,1760,1761,3,794,397,0,1761,1762,5,133,0,0,1762,1763,
        5,438,0,0,1763,1764,3,132,66,0,1764,1765,5,36,0,0,1765,1774,5,219,
        0,0,1766,1768,5,2,0,0,1767,1769,3,194,97,0,1768,1767,1,0,0,0,1769,
        1770,1,0,0,0,1770,1768,1,0,0,0,1770,1771,1,0,0,0,1771,1772,1,0,0,
        0,1772,1773,5,3,0,0,1773,1775,1,0,0,0,1774,1766,1,0,0,0,1774,1775,
        1,0,0,0,1775,1828,1,0,0,0,1776,1778,5,138,0,0,1777,1779,5,44,0,0,
        1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,1780,1,0,0,0,1780,1794,
        3,794,397,0,1781,1786,5,314,0,0,1782,1784,5,105,0,0,1783,1782,1,
        0,0,0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1787,3,196,98,0,1786,
        1783,1,0,0,0,1786,1787,1,0,0,0,1787,1795,1,0,0,0,1788,1792,5,333,
        0,0,1789,1793,3,194,97,0,1790,1791,5,438,0,0,1791,1793,3,132,66,
        0,1792,1789,1,0,0,0,1792,1790,1,0,0,0,1793,1795,1,0,0,0,1794,1781,
        1,0,0,0,1794,1788,1,0,0,0,1795,1796,1,0,0,0,1796,1794,1,0,0,0,1796,
        1797,1,0,0,0,1797,1828,1,0,0,0,1798,1800,5,138,0,0,1799,1801,5,44,
        0,0,1800,1799,1,0,0,0,1800,1801,1,0,0,0,1801,1802,1,0,0,0,1802,1803,
        3,794,397,0,1803,1804,5,191,0,0,1804,1806,5,219,0,0,1805,1807,3,
        416,208,0,1806,1805,1,0,0,0,1806,1807,1,0,0,0,1807,1828,1,0,0,0,
        1808,1810,5,138,0,0,1809,1811,5,44,0,0,1810,1809,1,0,0,0,1810,1811,
        1,0,0,0,1811,1812,1,0,0,0,1812,1815,3,794,397,0,1813,1814,5,333,
        0,0,1814,1816,5,174,0,0,1815,1813,1,0,0,0,1815,1816,1,0,0,0,1816,
        1817,1,0,0,0,1817,1818,5,360,0,0,1818,1820,3,646,323,0,1819,1821,
        3,90,45,0,1820,1819,1,0,0,0,1820,1821,1,0,0,0,1821,1824,1,0,0,0,
        1822,1823,5,100,0,0,1823,1825,3,668,334,0,1824,1822,1,0,0,0,1824,
        1825,1,0,0,0,1825,1828,1,0,0,0,1826,1828,3,216,108,0,1827,1594,1,
        0,0,0,1827,1600,1,0,0,0,1827,1609,1,0,0,0,1827,1612,1,0,0,0,1827,
        1621,1,0,0,0,1827,1624,1,0,0,0,1827,1627,1,0,0,0,1827,1629,1,0,0,
        0,1827,1634,1,0,0,0,1827,1641,1,0,0,0,1827,1645,1,0,0,0,1827,1649,
        1,0,0,0,1827,1653,1,0,0,0,1827,1655,1,0,0,0,1827,1657,1,0,0,0,1827,
        1660,1,0,0,0,1827,1663,1,0,0,0,1827,1677,1,0,0,0,1827,1682,1,0,0,
        0,1827,1693,1,0,0,0,1827,1701,1,0,0,0,1827,1710,1,0,0,0,1827,1719,
        1,0,0,0,1827,1729,1,0,0,0,1827,1743,1,0,0,0,1827,1747,1,0,0,0,1827,
        1756,1,0,0,0,1827,1776,1,0,0,0,1827,1798,1,0,0,0,1827,1808,1,0,0,
        0,1827,1826,1,0,0,0,1828,85,1,0,0,0,1829,1830,5,333,0,0,1830,1831,
        5,53,0,0,1831,1835,3,668,334,0,1832,1833,5,191,0,0,1833,1835,5,53,
        0,0,1834,1829,1,0,0,0,1834,1832,1,0,0,0,1835,87,1,0,0,0,1836,1837,
        7,17,0,0,1837,89,1,0,0,0,1838,1839,5,43,0,0,1839,1840,3,310,155,
        0,1840,91,1,0,0,0,1841,1842,5,2,0,0,1842,1847,3,96,48,0,1843,1844,
        5,6,0,0,1844,1846,3,96,48,0,1845,1843,1,0,0,0,1846,1849,1,0,0,0,
        1847,1845,1,0,0,0,1847,1848,1,0,0,0,1848,1850,1,0,0,0,1849,1847,
        1,0,0,0,1850,1851,5,3,0,0,1851,93,1,0,0,0,1852,1853,5,105,0,0,1853,
        1854,3,92,46,0,1854,95,1,0,0,0,1855,1860,3,818,409,0,1856,1857,5,
        10,0,0,1857,1861,3,282,141,0,1858,1859,5,11,0,0,1859,1861,3,280,
        140,0,1860,1856,1,0,0,0,1860,1858,1,0,0,0,1860,1861,1,0,0,0,1861,
        97,1,0,0,0,1862,1863,5,62,0,0,1863,1864,5,422,0,0,1864,1865,5,105,
        0,0,1865,1866,5,2,0,0,1866,1867,5,533,0,0,1867,1868,3,196,98,0,1868,
        1869,5,6,0,0,1869,1870,5,534,0,0,1870,1871,3,196,98,0,1871,1872,
        5,3,0,0,1872,1886,1,0,0,0,1873,1874,5,62,0,0,1874,1875,5,422,0,0,
        1875,1876,5,68,0,0,1876,1886,3,528,264,0,1877,1878,5,62,0,0,1878,
        1879,5,422,0,0,1879,1880,5,64,0,0,1880,1881,3,528,264,0,1881,1882,
        5,94,0,0,1882,1883,3,528,264,0,1883,1886,1,0,0,0,1884,1886,5,53,
        0,0,1885,1862,1,0,0,0,1885,1873,1,0,0,0,1885,1877,1,0,0,0,1885,1884,
        1,0,0,0,1886,99,1,0,0,0,1887,1888,5,138,0,0,1888,1889,5,360,0,0,
        1889,1890,3,310,155,0,1890,1895,3,102,51,0,1891,1892,5,6,0,0,1892,
        1894,3,102,51,0,1893,1891,1,0,0,0,1894,1897,1,0,0,0,1895,1893,1,
        0,0,0,1895,1896,1,0,0,0,1896,101,1,0,0,0,1897,1895,1,0,0,0,1898,
        1899,5,133,0,0,1899,1900,5,143,0,0,1900,1902,3,638,319,0,1901,1903,
        3,88,44,0,1902,1901,1,0,0,0,1902,1903,1,0,0,0,1903,1929,1,0,0,0,
        1904,1905,5,191,0,0,1905,1907,5,143,0,0,1906,1908,3,416,208,0,1907,
        1906,1,0,0,0,1907,1908,1,0,0,0,1908,1909,1,0,0,0,1909,1911,3,812,
        406,0,1910,1912,3,88,44,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,
        1929,1,0,0,0,1913,1914,5,138,0,0,1914,1915,5,143,0,0,1915,1918,3,
        812,406,0,1916,1917,5,333,0,0,1917,1919,5,174,0,0,1918,1916,1,0,
        0,0,1918,1919,1,0,0,0,1919,1920,1,0,0,0,1920,1921,5,360,0,0,1921,
        1923,3,646,323,0,1922,1924,3,90,45,0,1923,1922,1,0,0,0,1923,1924,
        1,0,0,0,1924,1926,1,0,0,0,1925,1927,3,88,44,0,1926,1925,1,0,0,0,
        1926,1927,1,0,0,0,1927,1929,1,0,0,0,1928,1898,1,0,0,0,1928,1904,
        1,0,0,0,1928,1913,1,0,0,0,1929,103,1,0,0,0,1930,1933,5,157,0,0,1931,
        1934,3,812,406,0,1932,1934,5,30,0,0,1933,1931,1,0,0,0,1933,1932,
        1,0,0,0,1934,105,1,0,0,0,1935,1937,5,169,0,0,1936,1938,5,107,0,0,
        1937,1936,1,0,0,0,1937,1938,1,0,0,0,1938,1939,1,0,0,0,1939,1941,
        3,768,384,0,1940,1942,3,138,69,0,1941,1940,1,0,0,0,1941,1942,1,0,
        0,0,1942,1943,1,0,0,0,1943,1945,7,18,0,0,1944,1946,5,297,0,0,1945,
        1944,1,0,0,0,1945,1946,1,0,0,0,1946,1950,1,0,0,0,1947,1951,3,802,
        401,0,1948,1951,5,343,0,0,1949,1951,5,344,0,0,1950,1947,1,0,0,0,
        1950,1948,1,0,0,0,1950,1949,1,0,0,0,1951,1957,1,0,0,0,1952,1954,
        5,100,0,0,1953,1952,1,0,0,0,1953,1954,1,0,0,0,1954,1955,1,0,0,0,
        1955,1956,5,184,0,0,1956,1958,3,802,401,0,1957,1953,1,0,0,0,1957,
        1958,1,0,0,0,1958,1960,1,0,0,0,1959,1961,5,105,0,0,1960,1959,1,0,
        0,0,1960,1961,1,0,0,0,1961,1962,1,0,0,0,1962,1964,3,110,55,0,1963,
        1965,3,632,316,0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,1985,1,
        0,0,0,1966,1967,5,169,0,0,1967,1968,5,2,0,0,1968,1969,3,524,262,
        0,1969,1970,5,3,0,0,1970,1972,5,94,0,0,1971,1973,5,297,0,0,1972,
        1971,1,0,0,0,1972,1973,1,0,0,0,1973,1977,1,0,0,0,1974,1978,3,802,
        401,0,1975,1978,5,343,0,0,1976,1978,5,344,0,0,1977,1974,1,0,0,0,
        1977,1975,1,0,0,0,1977,1976,1,0,0,0,1978,1980,1,0,0,0,1979,1981,
        5,105,0,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,
        1982,1983,3,110,55,0,1983,1985,1,0,0,0,1984,1935,1,0,0,0,1984,1966,
        1,0,0,0,1985,107,1,0,0,0,1986,2029,5,107,0,0,1987,2029,5,112,0,0,
        1988,1990,7,19,0,0,1989,1991,5,36,0,0,1990,1989,1,0,0,0,1990,1991,
        1,0,0,0,1991,1992,1,0,0,0,1992,2029,3,802,401,0,1993,2029,5,171,
        0,0,1994,2029,5,216,0,0,1995,1996,5,209,0,0,1996,1999,5,298,0,0,
        1997,2000,3,142,71,0,1998,2000,5,9,0,0,1999,1997,1,0,0,0,1999,1998,
        1,0,0,0,2000,2029,1,0,0,0,2001,2003,5,209,0,0,2002,2004,5,77,0,0,
        2003,2002,1,0,0,0,2003,2004,1,0,0,0,2004,2005,1,0,0,0,2005,2006,
        5,78,0,0,2006,2029,3,142,71,0,2007,2008,5,194,0,0,2008,2029,3,802,
        401,0,2009,2026,7,20,0,0,2010,2013,5,2,0,0,2011,2014,3,142,71,0,
        2012,2014,5,9,0,0,2013,2011,1,0,0,0,2013,2012,1,0,0,0,2014,2022,
        1,0,0,0,2015,2018,5,6,0,0,2016,2019,3,142,71,0,2017,2019,5,9,0,0,
        2018,2016,1,0,0,0,2018,2017,1,0,0,0,2019,2021,1,0,0,0,2020,2015,
        1,0,0,0,2021,2024,1,0,0,0,2022,2020,1,0,0,0,2022,2023,1,0,0,0,2023,
        2025,1,0,0,0,2024,2022,1,0,0,0,2025,2027,5,3,0,0,2026,2010,1,0,0,
        0,2026,2027,1,0,0,0,2027,2029,1,0,0,0,2028,1986,1,0,0,0,2028,1987,
        1,0,0,0,2028,1988,1,0,0,0,2028,1993,1,0,0,0,2028,1994,1,0,0,0,2028,
        1995,1,0,0,0,2028,2001,1,0,0,0,2028,2007,1,0,0,0,2028,2009,1,0,0,
        0,2029,2032,1,0,0,0,2030,2028,1,0,0,0,2030,2031,1,0,0,0,2031,109,
        1,0,0,0,2032,2030,1,0,0,0,2033,2052,3,108,54,0,2034,2037,5,2,0,0,
        2035,2038,3,108,54,0,2036,2038,3,112,56,0,2037,2035,1,0,0,0,2037,
        2036,1,0,0,0,2038,2046,1,0,0,0,2039,2042,5,6,0,0,2040,2043,3,108,
        54,0,2041,2043,3,112,56,0,2042,2040,1,0,0,0,2042,2041,1,0,0,0,2043,
        2045,1,0,0,0,2044,2039,1,0,0,0,2045,2048,1,0,0,0,2046,2044,1,0,0,
        0,2046,2047,1,0,0,0,2047,2049,1,0,0,0,2048,2046,1,0,0,0,2049,2050,
        5,3,0,0,2050,2052,1,0,0,0,2051,2033,1,0,0,0,2051,2034,1,0,0,0,2052,
        111,1,0,0,0,2053,2068,3,818,409,0,2054,2069,3,54,27,0,2055,2069,
        3,196,98,0,2056,2069,5,9,0,0,2057,2058,5,2,0,0,2058,2063,3,52,26,
        0,2059,2060,5,6,0,0,2060,2062,3,52,26,0,2061,2059,1,0,0,0,2062,2065,
        1,0,0,0,2063,2061,1,0,0,0,2063,2064,1,0,0,0,2064,2066,1,0,0,0,2065,
        2063,1,0,0,0,2066,2067,5,3,0,0,2067,2069,1,0,0,0,2068,2054,1,0,0,
        0,2068,2055,1,0,0,0,2068,2056,1,0,0,0,2068,2057,1,0,0,0,2068,2069,
        1,0,0,0,2069,113,1,0,0,0,2070,2072,5,46,0,0,2071,2073,3,116,58,0,
        2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2074,1,0,0,0,2074,2076,
        5,92,0,0,2075,2077,3,288,144,0,2076,2075,1,0,0,0,2076,2077,1,0,0,
        0,2077,2078,1,0,0,0,2078,2144,3,766,383,0,2079,2081,5,2,0,0,2080,
        2082,3,120,60,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2083,1,
        0,0,0,2083,2085,5,3,0,0,2084,2086,3,158,79,0,2085,2084,1,0,0,0,2085,
        2086,1,0,0,0,2086,2088,1,0,0,0,2087,2089,3,160,80,0,2088,2087,1,
        0,0,0,2088,2089,1,0,0,0,2089,2091,1,0,0,0,2090,2092,3,164,82,0,2091,
        2090,1,0,0,0,2091,2092,1,0,0,0,2092,2094,1,0,0,0,2093,2095,3,166,
        83,0,2094,2093,1,0,0,0,2094,2095,1,0,0,0,2095,2097,1,0,0,0,2096,
        2098,3,168,84,0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,2100,1,
        0,0,0,2099,2101,3,170,85,0,2100,2099,1,0,0,0,2100,2101,1,0,0,0,2101,
        2145,1,0,0,0,2102,2103,5,275,0,0,2103,2105,3,310,155,0,2104,2106,
        3,118,59,0,2105,2104,1,0,0,0,2105,2106,1,0,0,0,2106,2108,1,0,0,0,
        2107,2109,3,160,80,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,2109,2111,
        1,0,0,0,2110,2112,3,164,82,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,
        2112,2114,1,0,0,0,2113,2115,3,166,83,0,2114,2113,1,0,0,0,2114,2115,
        1,0,0,0,2115,2117,1,0,0,0,2116,2118,3,168,84,0,2117,2116,1,0,0,0,
        2117,2118,1,0,0,0,2118,2120,1,0,0,0,2119,2121,3,170,85,0,2120,2119,
        1,0,0,0,2120,2121,1,0,0,0,2121,2145,1,0,0,0,2122,2123,5,285,0,0,
        2123,2124,5,275,0,0,2124,2126,3,774,387,0,2125,2127,3,118,59,0,2126,
        2125,1,0,0,0,2126,2127,1,0,0,0,2127,2128,1,0,0,0,2128,2130,3,98,
        49,0,2129,2131,3,160,80,0,2130,2129,1,0,0,0,2130,2131,1,0,0,0,2131,
        2133,1,0,0,0,2132,2134,3,164,82,0,2133,2132,1,0,0,0,2133,2134,1,
        0,0,0,2134,2136,1,0,0,0,2135,2137,3,166,83,0,2136,2135,1,0,0,0,2136,
        2137,1,0,0,0,2137,2139,1,0,0,0,2138,2140,3,168,84,0,2139,2138,1,
        0,0,0,2139,2140,1,0,0,0,2140,2142,1,0,0,0,2141,2143,3,170,85,0,2142,
        2141,1,0,0,0,2142,2143,1,0,0,0,2143,2145,1,0,0,0,2144,2079,1,0,0,
        0,2144,2102,1,0,0,0,2144,2122,1,0,0,0,2145,115,1,0,0,0,2146,2152,
        5,354,0,0,2147,2152,5,352,0,0,2148,2149,7,21,0,0,2149,2152,7,22,
        0,0,2150,2152,5,367,0,0,2151,2146,1,0,0,0,2151,2147,1,0,0,0,2151,
        2148,1,0,0,0,2151,2150,1,0,0,0,2152,117,1,0,0,0,2153,2154,5,2,0,
        0,2154,2159,3,124,62,0,2155,2156,5,6,0,0,2156,2158,3,124,62,0,2157,
        2155,1,0,0,0,2158,2161,1,0,0,0,2159,2157,1,0,0,0,2159,2160,1,0,0,
        0,2160,2162,1,0,0,0,2161,2159,1,0,0,0,2162,2163,5,3,0,0,2163,119,
        1,0,0,0,2164,2169,3,122,61,0,2165,2166,5,6,0,0,2166,2168,3,122,61,
        0,2167,2165,1,0,0,0,2168,2171,1,0,0,0,2169,2167,1,0,0,0,2169,2170,
        1,0,0,0,2170,121,1,0,0,0,2171,2169,1,0,0,0,2172,2173,5,45,0,0,2173,
        2175,3,812,406,0,2174,2172,1,0,0,0,2174,2175,1,0,0,0,2175,2176,1,
        0,0,0,2176,2188,3,136,68,0,2177,2188,3,126,63,0,2178,2179,5,120,
        0,0,2179,2184,3,774,387,0,2180,2181,7,23,0,0,2181,2183,3,134,67,
        0,2182,2180,1,0,0,0,2183,2186,1,0,0,0,2184,2182,1,0,0,0,2184,2185,
        1,0,0,0,2185,2188,1,0,0,0,2186,2184,1,0,0,0,2187,2174,1,0,0,0,2187,
        2177,1,0,0,0,2187,2178,1,0,0,0,2188,123,1,0,0,0,2189,2192,3,796,
        398,0,2190,2191,5,105,0,0,2191,2193,5,280,0,0,2192,2190,1,0,0,0,
        2192,2193,1,0,0,0,2193,2197,1,0,0,0,2194,2196,3,128,64,0,2195,2194,
        1,0,0,0,2196,2199,1,0,0,0,2197,2195,1,0,0,0,2197,2198,1,0,0,0,2198,
        2206,1,0,0,0,2199,2197,1,0,0,0,2200,2201,5,45,0,0,2201,2203,3,812,
        406,0,2202,2200,1,0,0,0,2202,2203,1,0,0,0,2203,2204,1,0,0,0,2204,
        2206,3,136,68,0,2205,2189,1,0,0,0,2205,2202,1,0,0,0,2206,125,1,0,
        0,0,2207,2208,3,796,398,0,2208,2210,3,646,323,0,2209,2211,3,214,
        107,0,2210,2209,1,0,0,0,2210,2211,1,0,0,0,2211,2221,1,0,0,0,2212,
        2219,5,345,0,0,2213,2220,5,544,0,0,2214,2220,5,205,0,0,2215,2220,
        5,545,0,0,2216,2220,5,546,0,0,2217,2220,5,53,0,0,2218,2220,3,812,
        406,0,2219,2213,1,0,0,0,2219,2214,1,0,0,0,2219,2215,1,0,0,0,2219,
        2216,1,0,0,0,2219,2217,1,0,0,0,2219,2218,1,0,0,0,2220,2222,1,0,0,
        0,2221,2212,1,0,0,0,2221,2222,1,0,0,0,2222,2225,1,0,0,0,2223,2224,
        5,543,0,0,2224,2226,3,812,406,0,2225,2223,1,0,0,0,2225,2226,1,0,
        0,0,2226,2228,1,0,0,0,2227,2229,3,90,45,0,2228,2227,1,0,0,0,2228,
        2229,1,0,0,0,2229,2232,1,0,0,0,2230,2231,5,105,0,0,2231,2233,5,280,
        0,0,2232,2230,1,0,0,0,2232,2233,1,0,0,0,2233,2237,1,0,0,0,2234,2236,
        3,128,64,0,2235,2234,1,0,0,0,2236,2239,1,0,0,0,2237,2235,1,0,0,0,
        2237,2238,1,0,0,0,2238,127,1,0,0,0,2239,2237,1,0,0,0,2240,2241,5,
        45,0,0,2241,2243,3,812,406,0,2242,2240,1,0,0,0,2242,2243,1,0,0,0,
        2243,2244,1,0,0,0,2244,2249,3,130,65,0,2245,2247,5,77,0,0,2246,2245,
        1,0,0,0,2246,2247,1,0,0,0,2247,2248,1,0,0,0,2248,2250,5,54,0,0,2249,
        2246,1,0,0,0,2249,2250,1,0,0,0,2250,2253,1,0,0,0,2251,2252,5,69,
        0,0,2252,2254,7,9,0,0,2253,2251,1,0,0,0,2253,2254,1,0,0,0,2254,129,
        1,0,0,0,2255,2257,5,77,0,0,2256,2255,1,0,0,0,2256,2257,1,0,0,0,2257,
        2258,1,0,0,0,2258,2336,5,78,0,0,2259,2261,5,98,0,0,2260,2262,3,394,
        197,0,2261,2260,1,0,0,0,2261,2262,1,0,0,0,2262,2264,1,0,0,0,2263,
        2265,3,172,86,0,2264,2263,1,0,0,0,2264,2265,1,0,0,0,2265,2336,1,
        0,0,0,2266,2272,5,98,0,0,2267,2269,5,273,0,0,2268,2270,5,77,0,0,
        2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,2271,1,0,0,0,2271,2273,
        5,56,0,0,2272,2267,1,0,0,0,2272,2273,1,0,0,0,2273,2276,1,0,0,0,2274,
        2275,5,441,0,0,2275,2277,3,354,177,0,2276,2274,1,0,0,0,2276,2277,
        1,0,0,0,2277,2279,1,0,0,0,2278,2280,3,566,283,0,2279,2278,1,0,0,
        0,2279,2280,1,0,0,0,2280,2282,1,0,0,0,2281,2283,3,172,86,0,2282,
        2281,1,0,0,0,2282,2283,1,0,0,0,2283,2336,1,0,0,0,2284,2285,5,85,
        0,0,2285,2287,5,245,0,0,2286,2288,3,394,197,0,2287,2286,1,0,0,0,
        2287,2288,1,0,0,0,2288,2290,1,0,0,0,2289,2291,3,172,86,0,2290,2289,
        1,0,0,0,2290,2291,1,0,0,0,2291,2336,1,0,0,0,2292,2293,5,42,0,0,2293,
        2294,5,2,0,0,2294,2295,3,668,334,0,2295,2298,5,3,0,0,2296,2297,5,
        269,0,0,2297,2299,5,228,0,0,2298,2296,1,0,0,0,2298,2299,1,0,0,0,
        2299,2336,1,0,0,0,2300,2301,5,53,0,0,2301,2336,3,676,338,0,2302,
        2303,5,438,0,0,2303,2304,3,132,66,0,2304,2321,5,36,0,0,2305,2314,
        5,219,0,0,2306,2308,5,2,0,0,2307,2309,3,194,97,0,2308,2307,1,0,0,
        0,2309,2310,1,0,0,0,2310,2308,1,0,0,0,2310,2311,1,0,0,0,2311,2312,
        1,0,0,0,2312,2313,5,3,0,0,2313,2315,1,0,0,0,2314,2306,1,0,0,0,2314,
        2315,1,0,0,0,2315,2322,1,0,0,0,2316,2317,5,2,0,0,2317,2318,3,668,
        334,0,2318,2319,5,3,0,0,2319,2320,5,440,0,0,2320,2322,1,0,0,0,2321,
        2305,1,0,0,0,2321,2316,1,0,0,0,2322,2336,1,0,0,0,2323,2324,5,86,
        0,0,2324,2326,3,774,387,0,2325,2327,3,138,69,0,2326,2325,1,0,0,0,
        2326,2327,1,0,0,0,2327,2329,1,0,0,0,2328,2330,3,146,73,0,2329,2328,
        1,0,0,0,2329,2330,1,0,0,0,2330,2332,1,0,0,0,2331,2333,3,150,75,0,
        2332,2331,1,0,0,0,2332,2333,1,0,0,0,2333,2336,1,0,0,0,2334,2336,
        3,90,45,0,2335,2256,1,0,0,0,2335,2259,1,0,0,0,2335,2266,1,0,0,0,
        2335,2284,1,0,0,0,2335,2292,1,0,0,0,2335,2300,1,0,0,0,2335,2302,
        1,0,0,0,2335,2323,1,0,0,0,2335,2334,1,0,0,0,2336,131,1,0,0,0,2337,
        2341,5,139,0,0,2338,2339,5,147,0,0,2339,2341,5,53,0,0,2340,2337,
        1,0,0,0,2340,2338,1,0,0,0,2341,133,1,0,0,0,2342,2343,7,24,0,0,2343,
        135,1,0,0,0,2344,2345,5,42,0,0,2345,2346,5,2,0,0,2346,2347,3,668,
        334,0,2347,2351,5,3,0,0,2348,2350,3,266,133,0,2349,2348,1,0,0,0,
        2350,2353,1,0,0,0,2351,2349,1,0,0,0,2351,2352,1,0,0,0,2352,2441,
        1,0,0,0,2353,2351,1,0,0,0,2354,2358,5,98,0,0,2355,2356,5,85,0,0,
        2356,2358,5,245,0,0,2357,2354,1,0,0,0,2357,2355,1,0,0,0,2358,2382,
        1,0,0,0,2359,2361,3,138,69,0,2360,2362,3,144,72,0,2361,2360,1,0,
        0,0,2361,2362,1,0,0,0,2362,2364,1,0,0,0,2363,2365,3,394,197,0,2364,
        2363,1,0,0,0,2364,2365,1,0,0,0,2365,2367,1,0,0,0,2366,2368,3,172,
        86,0,2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2372,1,0,0,0,2369,
        2371,3,266,133,0,2370,2369,1,0,0,0,2371,2374,1,0,0,0,2372,2370,1,
        0,0,0,2372,2373,1,0,0,0,2373,2383,1,0,0,0,2374,2372,1,0,0,0,2375,
        2379,3,174,87,0,2376,2378,3,266,133,0,2377,2376,1,0,0,0,2378,2381,
        1,0,0,0,2379,2377,1,0,0,0,2379,2380,1,0,0,0,2380,2383,1,0,0,0,2381,
        2379,1,0,0,0,2382,2359,1,0,0,0,2382,2375,1,0,0,0,2383,2441,1,0,0,
        0,2384,2386,5,199,0,0,2385,2387,3,164,82,0,2386,2385,1,0,0,0,2386,
        2387,1,0,0,0,2387,2388,1,0,0,0,2388,2389,5,2,0,0,2389,2394,3,148,
        74,0,2390,2391,5,6,0,0,2391,2393,3,148,74,0,2392,2390,1,0,0,0,2393,
        2396,1,0,0,0,2394,2392,1,0,0,0,2394,2395,1,0,0,0,2395,2397,1,0,0,
        0,2396,2394,1,0,0,0,2397,2399,5,3,0,0,2398,2400,3,144,72,0,2399,
        2398,1,0,0,0,2399,2400,1,0,0,0,2400,2402,1,0,0,0,2401,2403,3,394,
        197,0,2402,2401,1,0,0,0,2402,2403,1,0,0,0,2403,2405,1,0,0,0,2404,
        2406,3,172,86,0,2405,2404,1,0,0,0,2405,2406,1,0,0,0,2406,2412,1,
        0,0,0,2407,2408,5,103,0,0,2408,2409,5,2,0,0,2409,2410,3,668,334,
        0,2410,2411,5,3,0,0,2411,2413,1,0,0,0,2412,2407,1,0,0,0,2412,2413,
        1,0,0,0,2413,2417,1,0,0,0,2414,2416,3,266,133,0,2415,2414,1,0,0,
        0,2416,2419,1,0,0,0,2417,2415,1,0,0,0,2417,2418,1,0,0,0,2418,2441,
        1,0,0,0,2419,2417,1,0,0,0,2420,2421,5,63,0,0,2421,2422,5,245,0,0,
        2422,2423,3,138,69,0,2423,2424,5,86,0,0,2424,2426,3,774,387,0,2425,
        2427,3,138,69,0,2426,2425,1,0,0,0,2426,2427,1,0,0,0,2427,2429,1,
        0,0,0,2428,2430,3,146,73,0,2429,2428,1,0,0,0,2429,2430,1,0,0,0,2430,
        2432,1,0,0,0,2431,2433,3,150,75,0,2432,2431,1,0,0,0,2432,2433,1,
        0,0,0,2433,2437,1,0,0,0,2434,2436,3,266,133,0,2435,2434,1,0,0,0,
        2436,2439,1,0,0,0,2437,2435,1,0,0,0,2437,2438,1,0,0,0,2438,2441,
        1,0,0,0,2439,2437,1,0,0,0,2440,2344,1,0,0,0,2440,2357,1,0,0,0,2440,
        2384,1,0,0,0,2440,2420,1,0,0,0,2441,137,1,0,0,0,2442,2443,5,2,0,
        0,2443,2444,3,142,71,0,2444,2445,5,3,0,0,2445,139,1,0,0,0,2446,2447,
        5,2,0,0,2447,2452,3,796,398,0,2448,2449,5,6,0,0,2449,2451,3,796,
        398,0,2450,2448,1,0,0,0,2451,2454,1,0,0,0,2452,2450,1,0,0,0,2452,
        2453,1,0,0,0,2453,2455,1,0,0,0,2454,2452,1,0,0,0,2455,2456,5,3,0,
        0,2456,141,1,0,0,0,2457,2462,3,794,397,0,2458,2459,5,6,0,0,2459,
        2461,3,794,397,0,2460,2458,1,0,0,0,2461,2464,1,0,0,0,2462,2460,1,
        0,0,0,2462,2463,1,0,0,0,2463,143,1,0,0,0,2464,2462,1,0,0,0,2465,
        2466,5,441,0,0,2466,2467,3,138,69,0,2467,145,1,0,0,0,2468,2469,5,
        258,0,0,2469,2470,7,25,0,0,2470,147,1,0,0,0,2471,2472,3,356,178,
        0,2472,2479,5,105,0,0,2473,2480,3,408,204,0,2474,2475,5,278,0,0,
        2475,2476,5,2,0,0,2476,2477,3,408,204,0,2477,2478,5,3,0,0,2478,2480,
        1,0,0,0,2479,2473,1,0,0,0,2479,2474,1,0,0,0,2480,149,1,0,0,0,2481,
        2483,3,152,76,0,2482,2484,3,154,77,0,2483,2482,1,0,0,0,2483,2484,
        1,0,0,0,2484,2490,1,0,0,0,2485,2487,3,154,77,0,2486,2488,3,152,76,
        0,2487,2486,1,0,0,0,2487,2488,1,0,0,0,2488,2490,1,0,0,0,2489,2481,
        1,0,0,0,2489,2485,1,0,0,0,2490,151,1,0,0,0,2491,2492,5,80,0,0,2492,
        2493,5,369,0,0,2493,2494,3,156,78,0,2494,153,1,0,0,0,2495,2496,5,
        80,0,0,2496,2497,5,182,0,0,2497,2498,3,156,78,0,2498,155,1,0,0,0,
        2499,2500,5,269,0,0,2500,2509,5,132,0,0,2501,2509,5,315,0,0,2502,
        2509,5,150,0,0,2503,2504,5,333,0,0,2504,2506,7,26,0,0,2505,2507,
        3,142,71,0,2506,2505,1,0,0,0,2506,2507,1,0,0,0,2507,2509,1,0,0,0,
        2508,2499,1,0,0,0,2508,2501,1,0,0,0,2508,2502,1,0,0,0,2508,2503,
        1,0,0,0,2509,157,1,0,0,0,2510,2511,5,238,0,0,2511,2512,5,2,0,0,2512,
        2513,3,754,377,0,2513,2514,5,3,0,0,2514,159,1,0,0,0,2515,2516,5,
        285,0,0,2516,2517,5,147,0,0,2517,2518,3,812,406,0,2518,2519,5,2,
        0,0,2519,2524,3,162,81,0,2520,2521,5,6,0,0,2521,2523,3,162,81,0,
        2522,2520,1,0,0,0,2523,2526,1,0,0,0,2524,2522,1,0,0,0,2524,2525,
        1,0,0,0,2525,2527,1,0,0,0,2526,2524,1,0,0,0,2527,2528,5,3,0,0,2528,
        161,1,0,0,0,2529,2536,3,794,397,0,2530,2536,3,682,341,0,2531,2532,
        5,2,0,0,2532,2533,3,668,334,0,2533,2534,5,3,0,0,2534,2536,1,0,0,
        0,2535,2529,1,0,0,0,2535,2530,1,0,0,0,2535,2531,1,0,0,0,2536,2538,
        1,0,0,0,2537,2539,3,90,45,0,2538,2537,1,0,0,0,2538,2539,1,0,0,0,
        2539,2541,1,0,0,0,2540,2542,3,310,155,0,2541,2540,1,0,0,0,2541,2542,
        1,0,0,0,2542,163,1,0,0,0,2543,2544,5,100,0,0,2544,2545,3,812,406,
        0,2545,165,1,0,0,0,2546,2547,5,105,0,0,2547,2551,3,92,46,0,2548,
        2549,7,27,0,0,2549,2551,5,277,0,0,2550,2546,1,0,0,0,2550,2548,1,
        0,0,0,2551,167,1,0,0,0,2552,2553,5,80,0,0,2553,2559,5,161,0,0,2554,
        2560,5,191,0,0,2555,2556,5,182,0,0,2556,2560,5,320,0,0,2557,2558,
        5,292,0,0,2558,2560,5,320,0,0,2559,2554,1,0,0,0,2559,2555,1,0,0,
        0,2559,2557,1,0,0,0,2560,169,1,0,0,0,2561,2562,5,351,0,0,2562,2563,
        3,764,382,0,2563,171,1,0,0,0,2564,2565,5,100,0,0,2565,2566,5,226,
        0,0,2566,2567,3,170,85,0,2567,173,1,0,0,0,2568,2569,5,100,0,0,2569,
        2570,5,226,0,0,2570,2571,3,812,406,0,2571,175,1,0,0,0,2572,2573,
        5,46,0,0,2573,2578,5,342,0,0,2574,2576,3,288,144,0,2575,2574,1,0,
        0,0,2575,2576,1,0,0,0,2576,2577,1,0,0,0,2577,2579,3,310,155,0,2578,
        2575,1,0,0,0,2578,2579,1,0,0,0,2579,2581,1,0,0,0,2580,2582,3,138,
        69,0,2581,2580,1,0,0,0,2581,2582,1,0,0,0,2582,2583,1,0,0,0,2583,
        2593,5,80,0,0,2584,2589,3,726,363,0,2585,2586,5,6,0,0,2586,2588,
        3,726,363,0,2587,2585,1,0,0,0,2588,2591,1,0,0,0,2589,2587,1,0,0,
        0,2589,2590,1,0,0,0,2590,2594,1,0,0,0,2591,2589,1,0,0,0,2592,2594,
        3,724,362,0,2593,2584,1,0,0,0,2593,2592,1,0,0,0,2594,2595,1,0,0,
        0,2595,2596,3,604,302,0,2596,177,1,0,0,0,2597,2598,5,138,0,0,2598,
        2600,5,342,0,0,2599,2601,3,416,208,0,2600,2599,1,0,0,0,2600,2601,
        1,0,0,0,2601,2602,1,0,0,0,2602,2603,3,310,155,0,2603,2604,5,333,
        0,0,2604,2605,5,342,0,0,2605,2606,3,806,403,0,2606,179,1,0,0,0,2607,
        2609,5,46,0,0,2608,2610,3,116,58,0,2609,2608,1,0,0,0,2609,2610,1,
        0,0,0,2610,2611,1,0,0,0,2611,2613,5,92,0,0,2612,2614,3,288,144,0,
        2613,2612,1,0,0,0,2613,2614,1,0,0,0,2614,2615,1,0,0,0,2615,2616,
        3,182,91,0,2616,2617,5,36,0,0,2617,2619,3,554,277,0,2618,2620,3,
        184,92,0,2619,2618,1,0,0,0,2619,2620,1,0,0,0,2620,181,1,0,0,0,2621,
        2623,3,766,383,0,2622,2624,3,140,70,0,2623,2622,1,0,0,0,2623,2624,
        1,0,0,0,2624,2626,1,0,0,0,2625,2627,3,164,82,0,2626,2625,1,0,0,0,
        2626,2627,1,0,0,0,2627,2629,1,0,0,0,2628,2630,3,166,83,0,2629,2628,
        1,0,0,0,2629,2630,1,0,0,0,2630,2632,1,0,0,0,2631,2633,3,168,84,0,
        2632,2631,1,0,0,0,2632,2633,1,0,0,0,2633,2635,1,0,0,0,2634,2636,
        3,170,85,0,2635,2634,1,0,0,0,2635,2636,1,0,0,0,2636,183,1,0,0,0,
        2637,2641,5,105,0,0,2638,2642,5,174,0,0,2639,2640,5,269,0,0,2640,
        2642,5,174,0,0,2641,2638,1,0,0,0,2641,2639,1,0,0,0,2642,185,1,0,
        0,0,2643,2645,5,46,0,0,2644,2646,5,367,0,0,2645,2644,1,0,0,0,2645,
        2646,1,0,0,0,2646,2647,1,0,0,0,2647,2648,5,259,0,0,2648,2650,5,376,
        0,0,2649,2651,3,288,144,0,2650,2649,1,0,0,0,2650,2651,1,0,0,0,2651,
        2652,1,0,0,0,2652,2654,3,770,385,0,2653,2655,3,140,70,0,2654,2653,
        1,0,0,0,2654,2655,1,0,0,0,2655,2657,1,0,0,0,2656,2658,3,164,82,0,
        2657,2656,1,0,0,0,2657,2658,1,0,0,0,2658,2660,1,0,0,0,2659,2661,
        3,94,47,0,2660,2659,1,0,0,0,2660,2661,1,0,0,0,2661,2663,1,0,0,0,
        2662,2664,3,170,85,0,2663,2662,1,0,0,0,2663,2664,1,0,0,0,2664,2665,
        1,0,0,0,2665,2666,5,36,0,0,2666,2668,3,554,277,0,2667,2669,3,184,
        92,0,2668,2667,1,0,0,0,2668,2669,1,0,0,0,2669,187,1,0,0,0,2670,2671,
        5,305,0,0,2671,2672,5,259,0,0,2672,2674,5,376,0,0,2673,2675,5,109,
        0,0,2674,2673,1,0,0,0,2674,2675,1,0,0,0,2675,2676,1,0,0,0,2676,2678,
        3,772,386,0,2677,2679,3,184,92,0,2678,2677,1,0,0,0,2678,2679,1,0,
        0,0,2679,189,1,0,0,0,2680,2682,5,46,0,0,2681,2683,3,116,58,0,2682,
        2681,1,0,0,0,2682,2683,1,0,0,0,2683,2684,1,0,0,0,2684,2686,5,328,
        0,0,2685,2687,3,288,144,0,2686,2685,1,0,0,0,2686,2687,1,0,0,0,2687,
        2688,1,0,0,0,2688,2694,3,774,387,0,2689,2691,3,194,97,0,2690,2689,
        1,0,0,0,2691,2692,1,0,0,0,2692,2690,1,0,0,0,2692,2693,1,0,0,0,2693,
        2695,1,0,0,0,2694,2690,1,0,0,0,2694,2695,1,0,0,0,2695,191,1,0,0,
        0,2696,2697,5,138,0,0,2697,2699,5,328,0,0,2698,2700,3,416,208,0,
        2699,2698,1,0,0,0,2699,2700,1,0,0,0,2700,2701,1,0,0,0,2701,2703,
        3,774,387,0,2702,2704,3,194,97,0,2703,2702,1,0,0,0,2704,2705,1,0,
        0,0,2705,2703,1,0,0,0,2705,2706,1,0,0,0,2706,193,1,0,0,0,2707,2708,
        5,36,0,0,2708,2741,3,648,324,0,2709,2711,5,148,0,0,2710,2712,3,196,
        98,0,2711,2710,1,0,0,0,2711,2712,1,0,0,0,2712,2741,1,0,0,0,2713,
        2715,5,225,0,0,2714,2716,5,147,0,0,2715,2714,1,0,0,0,2715,2716,1,
        0,0,0,2716,2717,1,0,0,0,2717,2741,3,196,98,0,2718,2719,7,28,0,0,
        2719,2741,3,196,98,0,2720,2721,5,269,0,0,2721,2741,7,29,0,0,2722,
        2723,5,281,0,0,2723,2724,5,147,0,0,2724,2741,3,794,397,0,2725,2726,
        5,328,0,0,2726,2727,5,266,0,0,2727,2741,3,310,155,0,2728,2730,5,
        340,0,0,2729,2731,5,105,0,0,2730,2729,1,0,0,0,2730,2731,1,0,0,0,
        2731,2732,1,0,0,0,2732,2741,3,196,98,0,2733,2735,5,314,0,0,2734,
        2736,5,105,0,0,2735,2734,1,0,0,0,2735,2736,1,0,0,0,2736,2738,1,0,
        0,0,2737,2739,3,196,98,0,2738,2737,1,0,0,0,2738,2739,1,0,0,0,2739,
        2741,1,0,0,0,2740,2707,1,0,0,0,2740,2709,1,0,0,0,2740,2713,1,0,0,
        0,2740,2718,1,0,0,0,2740,2720,1,0,0,0,2740,2722,1,0,0,0,2740,2725,
        1,0,0,0,2740,2728,1,0,0,0,2740,2733,1,0,0,0,2741,195,1,0,0,0,2742,
        2744,7,30,0,0,2743,2742,1,0,0,0,2743,2744,1,0,0,0,2744,2745,1,0,
        0,0,2745,2748,5,576,0,0,2746,2748,3,806,403,0,2747,2743,1,0,0,0,
        2747,2746,1,0,0,0,2748,197,1,0,0,0,2749,2751,5,46,0,0,2750,2752,
        3,360,180,0,2751,2750,1,0,0,0,2751,2752,1,0,0,0,2752,2754,1,0,0,
        0,2753,2755,5,359,0,0,2754,2753,1,0,0,0,2754,2755,1,0,0,0,2755,2757,
        1,0,0,0,2756,2758,5,295,0,0,2757,2756,1,0,0,0,2757,2758,1,0,0,0,
        2758,2759,1,0,0,0,2759,2760,5,247,0,0,2760,2773,3,812,406,0,2761,
        2762,5,215,0,0,2762,2765,3,310,155,0,2763,2764,5,239,0,0,2764,2766,
        3,310,155,0,2765,2763,1,0,0,0,2765,2766,1,0,0,0,2766,2771,1,0,0,
        0,2767,2768,5,373,0,0,2768,2772,3,310,155,0,2769,2770,5,269,0,0,
        2770,2772,5,373,0,0,2771,2767,1,0,0,0,2771,2769,1,0,0,0,2771,2772,
        1,0,0,0,2772,2774,1,0,0,0,2773,2761,1,0,0,0,2773,2774,1,0,0,0,2774,
        199,1,0,0,0,2775,2776,5,46,0,0,2776,2779,3,170,85,0,2777,2778,5,
        282,0,0,2778,2780,3,808,404,0,2779,2777,1,0,0,0,2779,2780,1,0,0,
        0,2780,2781,1,0,0,0,2781,2782,5,255,0,0,2782,2784,3,802,401,0,2783,
        2785,3,94,47,0,2784,2783,1,0,0,0,2784,2785,1,0,0,0,2785,201,1,0,
        0,0,2786,2787,5,46,0,0,2787,2789,5,204,0,0,2788,2790,3,288,144,0,
        2789,2788,1,0,0,0,2789,2790,1,0,0,0,2790,2791,1,0,0,0,2791,2793,
        3,812,406,0,2792,2794,5,105,0,0,2793,2792,1,0,0,0,2793,2794,1,0,
        0,0,2794,2802,1,0,0,0,2795,2796,5,323,0,0,2796,2801,3,784,392,0,
        2797,2798,7,31,0,0,2798,2801,3,58,29,0,2799,2801,5,150,0,0,2800,
        2795,1,0,0,0,2800,2797,1,0,0,0,2800,2799,1,0,0,0,2801,2804,1,0,0,
        0,2802,2800,1,0,0,0,2802,2803,1,0,0,0,2803,203,1,0,0,0,2804,2802,
        1,0,0,0,2805,2806,5,138,0,0,2806,2807,5,204,0,0,2807,2808,3,812,
        406,0,2808,2813,5,369,0,0,2809,2810,5,94,0,0,2810,2812,3,58,29,0,
        2811,2809,1,0,0,0,2812,2815,1,0,0,0,2813,2811,1,0,0,0,2813,2814,
        1,0,0,0,2814,205,1,0,0,0,2815,2813,1,0,0,0,2816,2817,5,138,0,0,2817,
        2818,5,204,0,0,2818,2819,3,812,406,0,2819,2852,7,6,0,0,2820,2821,
        5,443,0,0,2821,2822,5,62,0,0,2822,2823,3,646,323,0,2823,2824,5,247,
        0,0,2824,2825,3,812,406,0,2825,2853,1,0,0,0,2826,2827,5,442,0,0,
        2827,2853,3,368,184,0,2828,2829,5,296,0,0,2829,2853,3,372,186,0,
        2830,2831,5,278,0,0,2831,2832,7,32,0,0,2832,2833,3,310,155,0,2833,
        2834,3,164,82,0,2834,2853,1,0,0,0,2835,2836,5,278,0,0,2836,2853,
        3,410,205,0,2837,2838,5,211,0,0,2838,2853,3,376,188,0,2839,2840,
        7,33,0,0,2840,2853,3,646,323,0,2841,2842,5,41,0,0,2842,2843,5,2,
        0,0,2843,2844,3,646,323,0,2844,2845,5,36,0,0,2845,2846,3,646,323,
        0,2846,2847,5,3,0,0,2847,2853,1,0,0,0,2848,2849,5,136,0,0,2849,2853,
        3,388,194,0,2850,2853,3,306,153,0,2851,2853,3,304,152,0,2852,2820,
        1,0,0,0,2852,2826,1,0,0,0,2852,2828,1,0,0,0,2852,2830,1,0,0,0,2852,
        2835,1,0,0,0,2852,2837,1,0,0,0,2852,2839,1,0,0,0,2852,2841,1,0,0,
        0,2852,2848,1,0,0,0,2852,2850,1,0,0,0,2852,2851,1,0,0,0,2853,207,
        1,0,0,0,2854,2855,5,46,0,0,2855,2856,5,63,0,0,2856,2857,5,174,0,
        0,2857,2858,5,381,0,0,2858,2864,3,812,406,0,2859,2861,3,210,105,
        0,2860,2859,1,0,0,0,2861,2862,1,0,0,0,2862,2860,1,0,0,0,2862,2863,
        1,0,0,0,2863,2865,1,0,0,0,2864,2860,1,0,0,0,2864,2865,1,0,0,0,2865,
        2867,1,0,0,0,2866,2868,3,214,107,0,2867,2866,1,0,0,0,2867,2868,1,
        0,0,0,2868,209,1,0,0,0,2869,2871,7,34,0,0,2870,2872,3,310,155,0,
        2871,2870,1,0,0,0,2871,2872,1,0,0,0,2872,2876,1,0,0,0,2873,2874,
        5,269,0,0,2874,2876,7,34,0,0,2875,2869,1,0,0,0,2875,2873,1,0,0,0,
        2876,211,1,0,0,0,2877,2878,5,138,0,0,2878,2879,5,63,0,0,2879,2880,
        5,174,0,0,2880,2881,5,381,0,0,2881,2895,3,812,406,0,2882,2884,3,
        210,105,0,2883,2882,1,0,0,0,2884,2885,1,0,0,0,2885,2883,1,0,0,0,
        2885,2886,1,0,0,0,2886,2888,1,0,0,0,2887,2883,1,0,0,0,2887,2888,
        1,0,0,0,2888,2889,1,0,0,0,2889,2896,3,216,108,0,2890,2892,3,210,
        105,0,2891,2890,1,0,0,0,2892,2893,1,0,0,0,2893,2891,1,0,0,0,2893,
        2894,1,0,0,0,2894,2896,1,0,0,0,2895,2887,1,0,0,0,2895,2891,1,0,0,
        0,2896,213,1,0,0,0,2897,2898,5,280,0,0,2898,2899,5,2,0,0,2899,2904,
        3,220,110,0,2900,2901,5,6,0,0,2901,2903,3,220,110,0,2902,2900,1,
        0,0,0,2903,2906,1,0,0,0,2904,2902,1,0,0,0,2904,2905,1,0,0,0,2905,
        2907,1,0,0,0,2906,2904,1,0,0,0,2907,2908,5,3,0,0,2908,215,1,0,0,
        0,2909,2910,5,280,0,0,2910,2911,5,2,0,0,2911,2916,3,218,109,0,2912,
        2913,5,6,0,0,2913,2915,3,218,109,0,2914,2912,1,0,0,0,2915,2918,1,
        0,0,0,2916,2914,1,0,0,0,2916,2917,1,0,0,0,2917,2919,1,0,0,0,2918,
        2916,1,0,0,0,2919,2920,5,3,0,0,2920,217,1,0,0,0,2921,2922,7,35,0,
        0,2922,2923,3,220,110,0,2923,219,1,0,0,0,2924,2925,3,818,409,0,2925,
        2926,3,802,401,0,2926,221,1,0,0,0,2927,2928,5,46,0,0,2928,2930,5,
        331,0,0,2929,2931,3,288,144,0,2930,2929,1,0,0,0,2930,2931,1,0,0,
        0,2931,2932,1,0,0,0,2932,2935,3,812,406,0,2933,2934,5,360,0,0,2934,
        2936,3,802,401,0,2935,2933,1,0,0,0,2935,2936,1,0,0,0,2936,2938,1,
        0,0,0,2937,2939,3,224,112,0,2938,2937,1,0,0,0,2938,2939,1,0,0,0,
        2939,2940,1,0,0,0,2940,2941,5,63,0,0,2941,2942,5,174,0,0,2942,2943,
        5,381,0,0,2943,2945,3,812,406,0,2944,2946,3,214,107,0,2945,2944,
        1,0,0,0,2945,2946,1,0,0,0,2946,223,1,0,0,0,2947,2950,5,375,0,0,2948,
        2951,3,802,401,0,2949,2951,5,78,0,0,2950,2948,1,0,0,0,2950,2949,
        1,0,0,0,2951,225,1,0,0,0,2952,2953,5,138,0,0,2953,2954,5,331,0,0,
        2954,2960,3,812,406,0,2955,2961,3,216,108,0,2956,2958,3,224,112,
        0,2957,2959,3,216,108,0,2958,2957,1,0,0,0,2958,2959,1,0,0,0,2959,
        2961,1,0,0,0,2960,2955,1,0,0,0,2960,2956,1,0,0,0,2961,227,1,0,0,
        0,2962,2963,5,46,0,0,2963,2964,5,63,0,0,2964,2966,5,92,0,0,2965,
        2967,3,288,144,0,2966,2965,1,0,0,0,2966,2967,1,0,0,0,2967,2968,1,
        0,0,0,2968,2969,3,766,383,0,2969,2971,5,2,0,0,2970,2972,3,120,60,
        0,2971,2970,1,0,0,0,2971,2972,1,0,0,0,2972,2973,1,0,0,0,2973,2975,
        5,3,0,0,2974,2976,3,158,79,0,2975,2974,1,0,0,0,2975,2976,1,0,0,0,
        2976,2977,1,0,0,0,2977,2978,5,331,0,0,2978,2980,3,812,406,0,2979,
        2981,3,214,107,0,2980,2979,1,0,0,0,2980,2981,1,0,0,0,2981,3002,1,
        0,0,0,2982,2983,5,46,0,0,2983,2984,5,63,0,0,2984,2986,5,92,0,0,2985,
        2987,3,288,144,0,2986,2985,1,0,0,0,2986,2987,1,0,0,0,2987,2988,1,
        0,0,0,2988,2989,3,766,383,0,2989,2990,5,285,0,0,2990,2991,5,275,
        0,0,2991,2993,3,768,384,0,2992,2994,3,118,59,0,2993,2992,1,0,0,0,
        2993,2994,1,0,0,0,2994,2995,1,0,0,0,2995,2996,3,98,49,0,2996,2997,
        5,331,0,0,2997,2999,3,812,406,0,2998,3000,3,214,107,0,2999,2998,
        1,0,0,0,2999,3000,1,0,0,0,3000,3002,1,0,0,0,3001,2962,1,0,0,0,3001,
        2982,1,0,0,0,3002,229,1,0,0,0,3003,3004,5,444,0,0,3004,3005,5,63,
        0,0,3005,3006,5,323,0,0,3006,3016,3,784,392,0,3007,3008,5,74,0,0,
        3008,3011,5,94,0,0,3009,3011,5,59,0,0,3010,3007,1,0,0,0,3010,3009,
        1,0,0,0,3011,3012,1,0,0,0,3012,3013,5,2,0,0,3013,3014,3,622,311,
        0,3014,3015,5,3,0,0,3015,3017,1,0,0,0,3016,3010,1,0,0,0,3016,3017,
        1,0,0,0,3017,3018,1,0,0,0,3018,3019,5,64,0,0,3019,3020,5,331,0,0,
        3020,3021,3,812,406,0,3021,3022,5,71,0,0,3022,3024,3,812,406,0,3023,
        3025,3,214,107,0,3024,3023,1,0,0,0,3024,3025,1,0,0,0,3025,231,1,
        0,0,0,3026,3027,5,46,0,0,3027,3028,5,99,0,0,3028,3030,5,257,0,0,
        3029,3031,3,288,144,0,3030,3029,1,0,0,0,3030,3031,1,0,0,0,3031,3032,
        1,0,0,0,3032,3035,5,62,0,0,3033,3036,3,808,404,0,3034,3036,5,99,
        0,0,3035,3033,1,0,0,0,3035,3034,1,0,0,0,3036,3037,1,0,0,0,3037,3038,
        5,331,0,0,3038,3040,3,812,406,0,3039,3041,3,214,107,0,3040,3039,
        1,0,0,0,3040,3041,1,0,0,0,3041,233,1,0,0,0,3042,3043,5,138,0,0,3043,
        3044,5,99,0,0,3044,3045,5,257,0,0,3045,3048,5,62,0,0,3046,3049,3,
        808,404,0,3047,3049,5,99,0,0,3048,3046,1,0,0,0,3048,3047,1,0,0,0,
        3049,3050,1,0,0,0,3050,3051,5,331,0,0,3051,3052,3,812,406,0,3052,
        3053,3,216,108,0,3053,235,1,0,0,0,3054,3055,5,46,0,0,3055,3056,5,
        445,0,0,3056,3057,3,812,406,0,3057,3058,5,80,0,0,3058,3065,3,774,
        387,0,3059,3063,5,36,0,0,3060,3064,5,541,0,0,3061,3064,5,542,0,0,
        3062,3064,3,820,410,0,3063,3060,1,0,0,0,3063,3061,1,0,0,0,3063,3062,
        1,0,0,0,3064,3066,1,0,0,0,3065,3059,1,0,0,0,3065,3066,1,0,0,0,3066,
        3069,1,0,0,0,3067,3068,5,62,0,0,3068,3070,7,36,0,0,3069,3067,1,0,
        0,0,3069,3070,1,0,0,0,3070,3073,1,0,0,0,3071,3072,5,94,0,0,3072,
        3074,3,810,405,0,3073,3071,1,0,0,0,3073,3074,1,0,0,0,3074,3076,1,
        0,0,0,3075,3077,3,244,122,0,3076,3075,1,0,0,0,3076,3077,1,0,0,0,
        3077,3079,1,0,0,0,3078,3080,3,246,123,0,3079,3078,1,0,0,0,3079,3080,
        1,0,0,0,3080,237,1,0,0,0,3081,3082,5,138,0,0,3082,3083,5,445,0,0,
        3083,3084,3,812,406,0,3084,3085,5,80,0,0,3085,3088,3,774,387,0,3086,
        3087,5,94,0,0,3087,3089,3,810,405,0,3088,3086,1,0,0,0,3088,3089,
        1,0,0,0,3089,3091,1,0,0,0,3090,3092,3,244,122,0,3091,3090,1,0,0,
        0,3091,3092,1,0,0,0,3092,3094,1,0,0,0,3093,3095,3,246,123,0,3094,
        3093,1,0,0,0,3094,3095,1,0,0,0,3095,239,1,0,0,0,3096,3097,5,138,
        0,0,3097,3098,5,296,0,0,3098,3100,3,790,395,0,3099,3101,3,362,181,
        0,3100,3099,1,0,0,0,3100,3101,1,0,0,0,3101,3128,1,0,0,0,3102,3106,
        3,242,121,0,3103,3105,3,242,121,0,3104,3103,1,0,0,0,3105,3108,1,
        0,0,0,3106,3104,1,0,0,0,3106,3107,1,0,0,0,3107,3110,1,0,0,0,3108,
        3106,1,0,0,0,3109,3111,5,315,0,0,3110,3109,1,0,0,0,3110,3111,1,0,
        0,0,3111,3129,1,0,0,0,3112,3113,5,309,0,0,3113,3114,5,94,0,0,3114,
        3129,3,792,396,0,3115,3116,5,282,0,0,3116,3117,5,94,0,0,3117,3129,
        3,808,404,0,3118,3119,5,333,0,0,3119,3120,5,323,0,0,3120,3129,3,
        32,16,0,3121,3123,5,269,0,0,3122,3121,1,0,0,0,3122,3123,1,0,0,0,
        3123,3124,1,0,0,0,3124,3125,5,462,0,0,3125,3126,5,80,0,0,3126,3127,
        5,204,0,0,3127,3129,3,812,406,0,3128,3102,1,0,0,0,3128,3112,1,0,
        0,0,3128,3115,1,0,0,0,3128,3118,1,0,0,0,3128,3122,1,0,0,0,3129,241,
        1,0,0,0,3130,3132,5,205,0,0,3131,3130,1,0,0,0,3131,3132,1,0,0,0,
        3132,3133,1,0,0,0,3133,3134,5,327,0,0,3134,3141,5,243,0,0,3135,3137,
        5,205,0,0,3136,3135,1,0,0,0,3136,3137,1,0,0,0,3137,3138,1,0,0,0,
        3138,3139,5,327,0,0,3139,3141,5,181,0,0,3140,3131,1,0,0,0,3140,3136,
        1,0,0,0,3141,3160,1,0,0,0,3142,3143,5,333,0,0,3143,3144,3,812,406,
        0,3144,3147,7,37,0,0,3145,3148,3,812,406,0,3146,3148,5,53,0,0,3147,
        3145,1,0,0,0,3147,3146,1,0,0,0,3148,3160,1,0,0,0,3149,3150,5,333,
        0,0,3150,3151,3,812,406,0,3151,3152,5,64,0,0,3152,3153,5,434,0,0,
        3153,3160,1,0,0,0,3154,3157,5,313,0,0,3155,3158,3,812,406,0,3156,
        3158,5,30,0,0,3157,3155,1,0,0,0,3157,3156,1,0,0,0,3158,3160,1,0,
        0,0,3159,3140,1,0,0,0,3159,3142,1,0,0,0,3159,3149,1,0,0,0,3159,3154,
        1,0,0,0,3160,243,1,0,0,0,3161,3162,5,100,0,0,3162,3163,5,2,0,0,3163,
        3164,3,668,334,0,3164,3165,5,3,0,0,3165,245,1,0,0,0,3166,3167,5,
        105,0,0,3167,3168,5,42,0,0,3168,3169,5,2,0,0,3169,3170,3,668,334,
        0,3170,3171,5,3,0,0,3171,247,1,0,0,0,3172,3173,5,46,0,0,3173,3174,
        5,131,0,0,3174,3175,5,446,0,0,3175,3176,3,812,406,0,3176,3177,5,
        360,0,0,3177,3178,7,38,0,0,3178,3179,5,215,0,0,3179,3180,3,310,155,
        0,3180,249,1,0,0,0,3181,3183,5,46,0,0,3182,3184,3,360,180,0,3183,
        3182,1,0,0,0,3183,3184,1,0,0,0,3184,3185,1,0,0,0,3185,3186,5,357,
        0,0,3186,3187,3,812,406,0,3187,3188,3,252,126,0,3188,3189,3,254,
        127,0,3189,3190,5,80,0,0,3190,3202,3,768,384,0,3191,3198,5,447,0,
        0,3192,3193,7,39,0,0,3193,3195,7,40,0,0,3194,3196,5,36,0,0,3195,
        3194,1,0,0,0,3195,3196,1,0,0,0,3196,3197,1,0,0,0,3197,3199,3,812,
        406,0,3198,3192,1,0,0,0,3199,3200,1,0,0,0,3200,3198,1,0,0,0,3200,
        3201,1,0,0,0,3201,3203,1,0,0,0,3202,3191,1,0,0,0,3202,3203,1,0,0,
        0,3203,3209,1,0,0,0,3204,3206,5,62,0,0,3205,3207,5,192,0,0,3206,
        3205,1,0,0,0,3206,3207,1,0,0,0,3207,3208,1,0,0,0,3208,3210,7,41,
        0,0,3209,3204,1,0,0,0,3209,3210,1,0,0,0,3210,3212,1,0,0,0,3211,3213,
        3,258,129,0,3212,3211,1,0,0,0,3212,3213,1,0,0,0,3213,3214,1,0,0,
        0,3214,3215,5,202,0,0,3215,3216,3,260,130,0,3216,3217,5,2,0,0,3217,
        3218,3,262,131,0,3218,3219,5,3,0,0,3219,3260,1,0,0,0,3220,3222,5,
        46,0,0,3221,3223,3,360,180,0,3222,3221,1,0,0,0,3222,3223,1,0,0,0,
        3223,3225,1,0,0,0,3224,3226,5,45,0,0,3225,3224,1,0,0,0,3225,3226,
        1,0,0,0,3226,3227,1,0,0,0,3227,3228,5,357,0,0,3228,3229,3,812,406,
        0,3229,3230,3,252,126,0,3230,3231,3,254,127,0,3231,3232,5,80,0,0,
        3232,3235,3,768,384,0,3233,3234,5,64,0,0,3234,3236,3,774,387,0,3235,
        3233,1,0,0,0,3235,3236,1,0,0,0,3236,3240,1,0,0,0,3237,3239,3,266,
        133,0,3238,3237,1,0,0,0,3239,3242,1,0,0,0,3240,3238,1,0,0,0,3240,
        3241,1,0,0,0,3241,3248,1,0,0,0,3242,3240,1,0,0,0,3243,3245,5,62,
        0,0,3244,3246,5,192,0,0,3245,3244,1,0,0,0,3245,3246,1,0,0,0,3246,
        3247,1,0,0,0,3247,3249,7,41,0,0,3248,3243,1,0,0,0,3248,3249,1,0,
        0,0,3249,3251,1,0,0,0,3250,3252,3,258,129,0,3251,3250,1,0,0,0,3251,
        3252,1,0,0,0,3252,3253,1,0,0,0,3253,3254,5,202,0,0,3254,3255,3,260,
        130,0,3255,3256,5,2,0,0,3256,3257,3,262,131,0,3257,3258,5,3,0,0,
        3258,3260,1,0,0,0,3259,3181,1,0,0,0,3259,3220,1,0,0,0,3260,251,1,
        0,0,0,3261,3266,5,145,0,0,3262,3266,5,135,0,0,3263,3264,5,242,0,
        0,3264,3266,5,275,0,0,3265,3261,1,0,0,0,3265,3262,1,0,0,0,3265,3263,
        1,0,0,0,3266,253,1,0,0,0,3267,3272,3,256,128,0,3268,3269,5,82,0,
        0,3269,3271,3,256,128,0,3270,3268,1,0,0,0,3271,3274,1,0,0,0,3272,
        3270,1,0,0,0,3272,3273,1,0,0,0,3273,255,1,0,0,0,3274,3272,1,0,0,
        0,3275,3284,5,241,0,0,3276,3284,5,182,0,0,3277,3280,5,369,0,0,3278,
        3279,5,275,0,0,3279,3281,3,142,71,0,3280,3278,1,0,0,0,3280,3281,
        1,0,0,0,3281,3284,1,0,0,0,3282,3284,5,358,0,0,3283,3275,1,0,0,0,
        3283,3276,1,0,0,0,3283,3277,1,0,0,0,3283,3282,1,0,0,0,3284,257,1,
        0,0,0,3285,3286,5,102,0,0,3286,3287,5,2,0,0,3287,3288,3,668,334,
        0,3288,3289,5,3,0,0,3289,259,1,0,0,0,3290,3291,5,211,0,0,3291,3295,
        3,800,400,0,3292,3293,5,296,0,0,3293,3295,3,790,395,0,3294,3290,
        1,0,0,0,3294,3292,1,0,0,0,3295,261,1,0,0,0,3296,3299,3,264,132,0,
        3297,3299,1,0,0,0,3298,3296,1,0,0,0,3298,3297,1,0,0,0,3299,3304,
        1,0,0,0,3300,3301,5,6,0,0,3301,3303,3,264,132,0,3302,3300,1,0,0,
        0,3303,3306,1,0,0,0,3304,3302,1,0,0,0,3304,3305,1,0,0,0,3305,263,
        1,0,0,0,3306,3304,1,0,0,0,3307,3312,5,574,0,0,3308,3312,5,576,0,
        0,3309,3312,3,802,401,0,3310,3312,3,818,409,0,3311,3307,1,0,0,0,
        3311,3308,1,0,0,0,3311,3309,1,0,0,0,3311,3310,1,0,0,0,3312,265,1,
        0,0,0,3313,3315,5,77,0,0,3314,3313,1,0,0,0,3314,3315,1,0,0,0,3315,
        3316,1,0,0,0,3316,3324,5,54,0,0,3317,3318,5,69,0,0,3318,3324,7,9,
        0,0,3319,3320,5,77,0,0,3320,3324,5,371,0,0,3321,3322,5,269,0,0,3322,
        3324,5,228,0,0,3323,3314,1,0,0,0,3323,3317,1,0,0,0,3323,3319,1,0,
        0,0,3323,3321,1,0,0,0,3324,267,1,0,0,0,3325,3326,5,46,0,0,3326,3327,
        5,198,0,0,3327,3328,5,357,0,0,3328,3329,3,812,406,0,3329,3330,5,
        80,0,0,3330,3340,3,818,409,0,3331,3332,5,102,0,0,3332,3337,3,270,
        135,0,3333,3334,5,33,0,0,3334,3336,3,270,135,0,3335,3333,1,0,0,0,
        3336,3339,1,0,0,0,3337,3335,1,0,0,0,3337,3338,1,0,0,0,3338,3341,
        1,0,0,0,3339,3337,1,0,0,0,3340,3331,1,0,0,0,3340,3341,1,0,0,0,3341,
        3342,1,0,0,0,3342,3343,5,202,0,0,3343,3344,3,260,130,0,3344,3345,
        5,2,0,0,3345,3346,5,3,0,0,3346,269,1,0,0,0,3347,3348,3,812,406,0,
        3348,3349,5,68,0,0,3349,3350,5,2,0,0,3350,3354,3,802,401,0,3351,
        3353,3,456,228,0,3352,3351,1,0,0,0,3353,3356,1,0,0,0,3354,3352,1,
        0,0,0,3354,3355,1,0,0,0,3355,3357,1,0,0,0,3356,3354,1,0,0,0,3357,
        3358,5,3,0,0,3358,271,1,0,0,0,3359,3360,5,138,0,0,3360,3361,5,198,
        0,0,3361,3362,5,357,0,0,3362,3368,3,812,406,0,3363,3365,5,193,0,
        0,3364,3366,7,14,0,0,3365,3364,1,0,0,0,3365,3366,1,0,0,0,3366,3369,
        1,0,0,0,3367,3369,5,186,0,0,3368,3363,1,0,0,0,3368,3367,1,0,0,0,
        3369,273,1,0,0,0,3370,3371,5,46,0,0,3371,3372,5,140,0,0,3372,3373,
        3,310,155,0,3373,3374,5,42,0,0,3374,3375,5,2,0,0,3375,3376,3,668,
        334,0,3376,3380,5,3,0,0,3377,3379,3,266,133,0,3378,3377,1,0,0,0,
        3379,3382,1,0,0,0,3380,3378,1,0,0,0,3380,3381,1,0,0,0,3381,275,1,
        0,0,0,3382,3380,1,0,0,0,3383,3385,5,46,0,0,3384,3386,3,360,180,0,
        3385,3384,1,0,0,0,3385,3386,1,0,0,0,3386,3387,1,0,0,0,3387,3388,
        5,136,0,0,3388,3403,3,800,400,0,3389,3390,3,386,193,0,3390,3391,
        3,278,139,0,3391,3404,1,0,0,0,3392,3393,5,2,0,0,3393,3398,3,284,
        142,0,3394,3395,5,6,0,0,3395,3397,3,284,142,0,3396,3394,1,0,0,0,
        3397,3400,1,0,0,0,3398,3396,1,0,0,0,3398,3399,1,0,0,0,3399,3401,
        1,0,0,0,3400,3398,1,0,0,0,3401,3402,5,3,0,0,3402,3404,1,0,0,0,3403,
        3389,1,0,0,0,3403,3392,1,0,0,0,3404,3462,1,0,0,0,3405,3406,5,46,
        0,0,3406,3407,5,278,0,0,3407,3408,3,408,204,0,3408,3409,3,278,139,
        0,3409,3462,1,0,0,0,3410,3411,5,46,0,0,3411,3412,5,360,0,0,3412,
        3413,3,310,155,0,3413,3431,5,36,0,0,3414,3416,5,2,0,0,3415,3417,
        3,636,318,0,3416,3415,1,0,0,0,3416,3417,1,0,0,0,3417,3418,1,0,0,
        0,3418,3432,5,3,0,0,3419,3420,5,196,0,0,3420,3428,5,2,0,0,3421,3425,
        3,802,401,0,3422,3424,3,456,228,0,3423,3422,1,0,0,0,3424,3427,1,
        0,0,0,3425,3423,1,0,0,0,3425,3426,1,0,0,0,3426,3429,1,0,0,0,3427,
        3425,1,0,0,0,3428,3421,1,0,0,0,3428,3429,1,0,0,0,3429,3430,1,0,0,
        0,3430,3432,5,3,0,0,3431,3414,1,0,0,0,3431,3419,1,0,0,0,3432,3462,
        1,0,0,0,3433,3434,5,46,0,0,3434,3435,5,360,0,0,3435,3441,3,310,155,
        0,3436,3437,5,36,0,0,3437,3439,5,299,0,0,3438,3436,1,0,0,0,3438,
        3439,1,0,0,0,3439,3440,1,0,0,0,3440,3442,3,278,139,0,3441,3438,1,
        0,0,0,3441,3442,1,0,0,0,3442,3462,1,0,0,0,3443,3444,5,46,0,0,3444,
        3445,5,355,0,0,3445,3446,5,325,0,0,3446,3447,7,42,0,0,3447,3448,
        3,310,155,0,3448,3449,3,278,139,0,3449,3462,1,0,0,0,3450,3451,5,
        46,0,0,3451,3453,5,108,0,0,3452,3454,3,288,144,0,3453,3452,1,0,0,
        0,3453,3454,1,0,0,0,3454,3455,1,0,0,0,3455,3459,3,310,155,0,3456,
        3460,3,278,139,0,3457,3458,5,64,0,0,3458,3460,3,310,155,0,3459,3456,
        1,0,0,0,3459,3457,1,0,0,0,3460,3462,1,0,0,0,3461,3383,1,0,0,0,3461,
        3405,1,0,0,0,3461,3410,1,0,0,0,3461,3433,1,0,0,0,3461,3443,1,0,0,
        0,3461,3450,1,0,0,0,3462,277,1,0,0,0,3463,3464,5,2,0,0,3464,3469,
        3,280,140,0,3465,3466,5,6,0,0,3466,3468,3,280,140,0,3467,3465,1,
        0,0,0,3468,3471,1,0,0,0,3469,3467,1,0,0,0,3469,3470,1,0,0,0,3470,
        3472,1,0,0,0,3471,3469,1,0,0,0,3472,3473,5,3,0,0,3473,279,1,0,0,
        0,3474,3477,3,818,409,0,3475,3476,5,10,0,0,3476,3478,3,282,141,0,
        3477,3475,1,0,0,0,3477,3478,1,0,0,0,3478,281,1,0,0,0,3479,3486,3,
        382,191,0,3480,3486,3,828,414,0,3481,3486,3,720,360,0,3482,3486,
        3,196,98,0,3483,3486,3,802,401,0,3484,3486,5,407,0,0,3485,3479,1,
        0,0,0,3485,3480,1,0,0,0,3485,3481,1,0,0,0,3485,3482,1,0,0,0,3485,
        3483,1,0,0,0,3485,3484,1,0,0,0,3486,283,1,0,0,0,3487,3488,3,820,
        410,0,3488,3489,5,10,0,0,3489,3490,3,282,141,0,3490,285,1,0,0,0,
        3491,3492,5,138,0,0,3492,3493,5,360,0,0,3493,3494,3,310,155,0,3494,
        3495,5,133,0,0,3495,3497,5,450,0,0,3496,3498,3,288,144,0,3497,3496,
        1,0,0,0,3497,3498,1,0,0,0,3498,3499,1,0,0,0,3499,3502,3,802,401,
        0,3500,3501,7,43,0,0,3501,3503,3,802,401,0,3502,3500,1,0,0,0,3502,
        3503,1,0,0,0,3503,3514,1,0,0,0,3504,3505,5,138,0,0,3505,3506,5,360,
        0,0,3506,3507,3,310,155,0,3507,3508,5,309,0,0,3508,3509,5,450,0,
        0,3509,3510,3,802,401,0,3510,3511,5,94,0,0,3511,3512,3,802,401,0,
        3512,3514,1,0,0,0,3513,3491,1,0,0,0,3513,3504,1,0,0,0,3514,287,1,
        0,0,0,3515,3516,5,220,0,0,3516,3517,5,77,0,0,3517,3518,5,396,0,0,
        3518,289,1,0,0,0,3519,3520,5,46,0,0,3520,3521,5,278,0,0,3521,3522,
        5,156,0,0,3522,3524,3,310,155,0,3523,3525,5,53,0,0,3524,3523,1,0,
        0,0,3524,3525,1,0,0,0,3525,3526,1,0,0,0,3526,3527,5,62,0,0,3527,
        3528,5,360,0,0,3528,3529,3,646,323,0,3529,3532,3,164,82,0,3530,3531,
        5,206,0,0,3531,3533,3,310,155,0,3532,3530,1,0,0,0,3532,3533,1,0,
        0,0,3533,3534,1,0,0,0,3534,3535,5,36,0,0,3535,3540,3,292,146,0,3536,
        3537,5,6,0,0,3537,3539,3,292,146,0,3538,3536,1,0,0,0,3539,3542,1,
        0,0,0,3540,3538,1,0,0,0,3540,3541,1,0,0,0,3541,291,1,0,0,0,3542,
        3540,1,0,0,0,3543,3544,5,278,0,0,3544,3545,5,574,0,0,3545,3547,3,
        408,204,0,3546,3548,3,406,203,0,3547,3546,1,0,0,0,3547,3548,1,0,
        0,0,3548,3556,1,0,0,0,3549,3554,5,62,0,0,3550,3555,5,325,0,0,3551,
        3552,5,83,0,0,3552,3553,5,147,0,0,3553,3555,3,310,155,0,3554,3550,
        1,0,0,0,3554,3551,1,0,0,0,3555,3557,1,0,0,0,3556,3549,1,0,0,0,3556,
        3557,1,0,0,0,3557,3559,1,0,0,0,3558,3560,5,302,0,0,3559,3558,1,0,
        0,0,3559,3560,1,0,0,0,3560,3570,1,0,0,0,3561,3562,5,211,0,0,3562,
        3564,5,574,0,0,3563,3565,3,522,261,0,3564,3563,1,0,0,0,3564,3565,
        1,0,0,0,3565,3566,1,0,0,0,3566,3570,3,376,188,0,3567,3568,5,345,
        0,0,3568,3570,3,646,323,0,3569,3543,1,0,0,0,3569,3561,1,0,0,0,3569,
        3567,1,0,0,0,3570,293,1,0,0,0,3571,3572,5,46,0,0,3572,3573,5,278,
        0,0,3573,3574,5,206,0,0,3574,3575,3,310,155,0,3575,3576,3,164,82,
        0,3576,295,1,0,0,0,3577,3578,5,138,0,0,3578,3579,5,278,0,0,3579,
        3580,5,206,0,0,3580,3581,3,310,155,0,3581,3600,3,164,82,0,3582,3583,
        5,133,0,0,3583,3588,3,292,146,0,3584,3585,5,6,0,0,3585,3587,3,292,
        146,0,3586,3584,1,0,0,0,3587,3590,1,0,0,0,3588,3586,1,0,0,0,3588,
        3589,1,0,0,0,3589,3601,1,0,0,0,3590,3588,1,0,0,0,3591,3592,5,191,
        0,0,3592,3597,3,298,149,0,3593,3594,5,6,0,0,3594,3596,3,298,149,
        0,3595,3593,1,0,0,0,3596,3599,1,0,0,0,3597,3595,1,0,0,0,3597,3598,
        1,0,0,0,3598,3601,1,0,0,0,3599,3597,1,0,0,0,3600,3582,1,0,0,0,3600,
        3591,1,0,0,0,3601,297,1,0,0,0,3602,3603,7,44,0,0,3603,3604,5,574,
        0,0,3604,3605,3,522,261,0,3605,299,1,0,0,0,3606,3607,5,301,0,0,3607,
        3608,5,281,0,0,3608,3609,5,147,0,0,3609,3610,3,810,405,0,3610,3611,
        5,94,0,0,3611,3612,3,808,404,0,3612,301,1,0,0,0,3613,3636,5,191,
        0,0,3614,3637,5,328,0,0,3615,3637,5,226,0,0,3616,3637,5,108,0,0,
        3617,3637,5,168,0,0,3618,3637,5,342,0,0,3619,3637,5,452,0,0,3620,
        3637,5,331,0,0,3621,3622,5,131,0,0,3622,3637,5,446,0,0,3623,3624,
        5,198,0,0,3624,3637,5,357,0,0,3625,3637,5,204,0,0,3626,3628,5,295,
        0,0,3627,3626,1,0,0,0,3627,3628,1,0,0,0,3628,3629,1,0,0,0,3629,3637,
        5,247,0,0,3630,3631,5,63,0,0,3631,3632,5,174,0,0,3632,3637,5,381,
        0,0,3633,3634,5,355,0,0,3634,3635,5,325,0,0,3635,3637,7,42,0,0,3636,
        3614,1,0,0,0,3636,3615,1,0,0,0,3636,3616,1,0,0,0,3636,3617,1,0,0,
        0,3636,3618,1,0,0,0,3636,3619,1,0,0,0,3636,3620,1,0,0,0,3636,3621,
        1,0,0,0,3636,3623,1,0,0,0,3636,3625,1,0,0,0,3636,3627,1,0,0,0,3636,
        3630,1,0,0,0,3636,3633,1,0,0,0,3637,3639,1,0,0,0,3638,3640,3,416,
        208,0,3639,3638,1,0,0,0,3639,3640,1,0,0,0,3640,3641,1,0,0,0,3641,
        3643,3,778,389,0,3642,3644,3,88,44,0,3643,3642,1,0,0,0,3643,3644,
        1,0,0,0,3644,3821,1,0,0,0,3645,3647,5,191,0,0,3646,3648,5,259,0,
        0,3647,3646,1,0,0,0,3647,3648,1,0,0,0,3648,3649,1,0,0,0,3649,3651,
        5,376,0,0,3650,3652,3,416,208,0,3651,3650,1,0,0,0,3651,3652,1,0,
        0,0,3652,3653,1,0,0,0,3653,3658,3,772,386,0,3654,3655,5,6,0,0,3655,
        3657,3,772,386,0,3656,3654,1,0,0,0,3657,3660,1,0,0,0,3658,3656,1,
        0,0,0,3658,3659,1,0,0,0,3659,3662,1,0,0,0,3660,3658,1,0,0,0,3661,
        3663,3,88,44,0,3662,3661,1,0,0,0,3662,3663,1,0,0,0,3663,3821,1,0,
        0,0,3664,3666,5,191,0,0,3665,3667,5,63,0,0,3666,3665,1,0,0,0,3666,
        3667,1,0,0,0,3667,3668,1,0,0,0,3668,3670,5,92,0,0,3669,3671,3,416,
        208,0,3670,3669,1,0,0,0,3670,3671,1,0,0,0,3671,3672,1,0,0,0,3672,
        3674,3,756,378,0,3673,3675,3,88,44,0,3674,3673,1,0,0,0,3674,3675,
        1,0,0,0,3675,3821,1,0,0,0,3676,3677,5,191,0,0,3677,3679,5,323,0,
        0,3678,3680,3,416,208,0,3679,3678,1,0,0,0,3679,3680,1,0,0,0,3680,
        3681,1,0,0,0,3681,3683,3,758,379,0,3682,3684,3,88,44,0,3683,3682,
        1,0,0,0,3683,3684,1,0,0,0,3684,3821,1,0,0,0,3685,3686,5,191,0,0,
        3686,3688,7,45,0,0,3687,3689,3,416,208,0,3688,3687,1,0,0,0,3688,
        3689,1,0,0,0,3689,3690,1,0,0,0,3690,3691,3,812,406,0,3691,3692,5,
        80,0,0,3692,3694,3,310,155,0,3693,3695,3,88,44,0,3694,3693,1,0,0,
        0,3694,3695,1,0,0,0,3695,3821,1,0,0,0,3696,3697,5,191,0,0,3697,3699,
        7,33,0,0,3698,3700,3,416,208,0,3699,3698,1,0,0,0,3699,3700,1,0,0,
        0,3700,3701,1,0,0,0,3701,3706,3,646,323,0,3702,3703,5,6,0,0,3703,
        3705,3,646,323,0,3704,3702,1,0,0,0,3705,3708,1,0,0,0,3706,3704,1,
        0,0,0,3706,3707,1,0,0,0,3707,3710,1,0,0,0,3708,3706,1,0,0,0,3709,
        3711,3,88,44,0,3710,3709,1,0,0,0,3710,3711,1,0,0,0,3711,3821,1,0,
        0,0,3712,3713,5,191,0,0,3713,3714,5,226,0,0,3714,3716,5,109,0,0,
        3715,3717,3,416,208,0,3716,3715,1,0,0,0,3716,3717,1,0,0,0,3717,3718,
        1,0,0,0,3718,3720,3,308,154,0,3719,3721,3,88,44,0,3720,3719,1,0,
        0,0,3720,3721,1,0,0,0,3721,3821,1,0,0,0,3722,3723,5,191,0,0,3723,
        3725,5,41,0,0,3724,3726,3,416,208,0,3725,3724,1,0,0,0,3725,3726,
        1,0,0,0,3726,3727,1,0,0,0,3727,3728,5,2,0,0,3728,3729,3,646,323,
        0,3729,3730,5,36,0,0,3730,3731,3,646,323,0,3731,3733,5,3,0,0,3732,
        3734,3,88,44,0,3733,3732,1,0,0,0,3733,3734,1,0,0,0,3734,3821,1,0,
        0,0,3735,3736,5,191,0,0,3736,3737,5,278,0,0,3737,3739,7,32,0,0,3738,
        3740,3,416,208,0,3739,3738,1,0,0,0,3739,3740,1,0,0,0,3740,3741,1,
        0,0,0,3741,3742,3,310,155,0,3742,3744,3,164,82,0,3743,3745,3,88,
        44,0,3744,3743,1,0,0,0,3744,3745,1,0,0,0,3745,3821,1,0,0,0,3746,
        3747,5,191,0,0,3747,3748,5,281,0,0,3748,3749,5,147,0,0,3749,3751,
        3,810,405,0,3750,3752,3,88,44,0,3751,3750,1,0,0,0,3751,3752,1,0,
        0,0,3752,3821,1,0,0,0,3753,3754,5,191,0,0,3754,3756,5,451,0,0,3755,
        3757,3,416,208,0,3756,3755,1,0,0,0,3756,3757,1,0,0,0,3757,3758,1,
        0,0,0,3758,3760,3,812,406,0,3759,3761,3,88,44,0,3760,3759,1,0,0,
        0,3760,3761,1,0,0,0,3761,3821,1,0,0,0,3762,3763,5,191,0,0,3763,3765,
        5,351,0,0,3764,3766,3,416,208,0,3765,3764,1,0,0,0,3765,3766,1,0,
        0,0,3766,3767,1,0,0,0,3767,3821,3,764,382,0,3768,3769,5,191,0,0,
        3769,3771,5,443,0,0,3770,3772,3,416,208,0,3771,3770,1,0,0,0,3771,
        3772,1,0,0,0,3772,3773,1,0,0,0,3773,3774,5,62,0,0,3774,3775,3,646,
        323,0,3775,3776,5,247,0,0,3776,3778,3,812,406,0,3777,3779,3,88,44,
        0,3778,3777,1,0,0,0,3778,3779,1,0,0,0,3779,3821,1,0,0,0,3780,3781,
        5,191,0,0,3781,3783,7,46,0,0,3782,3784,3,416,208,0,3783,3782,1,0,
        0,0,3783,3784,1,0,0,0,3784,3785,1,0,0,0,3785,3821,3,810,405,0,3786,
        3787,5,191,0,0,3787,3788,5,99,0,0,3788,3790,5,257,0,0,3789,3791,
        3,416,208,0,3790,3789,1,0,0,0,3790,3791,1,0,0,0,3791,3792,1,0,0,
        0,3792,3795,5,62,0,0,3793,3796,3,808,404,0,3794,3796,5,99,0,0,3795,
        3793,1,0,0,0,3795,3794,1,0,0,0,3796,3797,1,0,0,0,3797,3798,5,331,
        0,0,3798,3821,3,812,406,0,3799,3800,5,191,0,0,3800,3802,5,175,0,
        0,3801,3803,3,416,208,0,3802,3801,1,0,0,0,3802,3803,1,0,0,0,3803,
        3804,1,0,0,0,3804,3818,3,782,391,0,3805,3807,5,105,0,0,3806,3805,
        1,0,0,0,3806,3807,1,0,0,0,3807,3808,1,0,0,0,3808,3809,5,2,0,0,3809,
        3814,5,209,0,0,3810,3811,5,6,0,0,3811,3813,5,209,0,0,3812,3810,1,
        0,0,0,3813,3816,1,0,0,0,3814,3812,1,0,0,0,3814,3815,1,0,0,0,3815,
        3817,1,0,0,0,3816,3814,1,0,0,0,3817,3819,5,3,0,0,3818,3806,1,0,0,
        0,3818,3819,1,0,0,0,3819,3821,1,0,0,0,3820,3613,1,0,0,0,3820,3645,
        1,0,0,0,3820,3664,1,0,0,0,3820,3676,1,0,0,0,3820,3685,1,0,0,0,3820,
        3696,1,0,0,0,3820,3712,1,0,0,0,3820,3722,1,0,0,0,3820,3735,1,0,0,
        0,3820,3746,1,0,0,0,3820,3753,1,0,0,0,3820,3762,1,0,0,0,3820,3768,
        1,0,0,0,3820,3780,1,0,0,0,3820,3786,1,0,0,0,3820,3799,1,0,0,0,3821,
        303,1,0,0,0,3822,3824,5,63,0,0,3823,3822,1,0,0,0,3823,3824,1,0,0,
        0,3824,3825,1,0,0,0,3825,3826,5,92,0,0,3826,3839,3,768,384,0,3827,
        3829,5,259,0,0,3828,3827,1,0,0,0,3828,3829,1,0,0,0,3829,3830,1,0,
        0,0,3830,3831,5,376,0,0,3831,3839,3,772,386,0,3832,3833,7,47,0,0,
        3833,3839,3,310,155,0,3834,3835,5,355,0,0,3835,3836,5,325,0,0,3836,
        3837,7,42,0,0,3837,3839,3,310,155,0,3838,3823,1,0,0,0,3838,3828,
        1,0,0,0,3838,3832,1,0,0,0,3838,3834,1,0,0,0,3839,305,1,0,0,0,3840,
        3841,5,198,0,0,3841,3857,5,357,0,0,3842,3843,5,131,0,0,3843,3857,
        5,446,0,0,3844,3857,5,204,0,0,3845,3857,5,452,0,0,3846,3857,5,331,
        0,0,3847,3857,5,318,0,0,3848,3857,5,451,0,0,3849,3850,5,63,0,0,3850,
        3851,5,174,0,0,3851,3857,5,381,0,0,3852,3854,5,295,0,0,3853,3852,
        1,0,0,0,3853,3854,1,0,0,0,3854,3855,1,0,0,0,3855,3857,5,247,0,0,
        3856,3840,1,0,0,0,3856,3842,1,0,0,0,3856,3844,1,0,0,0,3856,3845,
        1,0,0,0,3856,3846,1,0,0,0,3856,3847,1,0,0,0,3856,3848,1,0,0,0,3856,
        3849,1,0,0,0,3856,3853,1,0,0,0,3857,3858,1,0,0,0,3858,3865,3,812,
        406,0,3859,3860,5,323,0,0,3860,3865,3,784,392,0,3861,3862,5,175,
        0,0,3862,3865,3,782,391,0,3863,3865,3,170,85,0,3864,3856,1,0,0,0,
        3864,3859,1,0,0,0,3864,3861,1,0,0,0,3864,3863,1,0,0,0,3865,307,1,
        0,0,0,3866,3871,3,310,155,0,3867,3868,5,6,0,0,3868,3870,3,310,155,
        0,3869,3867,1,0,0,0,3870,3873,1,0,0,0,3871,3869,1,0,0,0,3871,3872,
        1,0,0,0,3872,309,1,0,0,0,3873,3871,1,0,0,0,3874,3876,3,812,406,0,
        3875,3877,3,312,156,0,3876,3875,1,0,0,0,3876,3877,1,0,0,0,3877,311,
        1,0,0,0,3878,3879,5,11,0,0,3879,3881,3,818,409,0,3880,3878,1,0,0,
        0,3881,3882,1,0,0,0,3882,3880,1,0,0,0,3882,3883,1,0,0,0,3883,313,
        1,0,0,0,3884,3886,5,358,0,0,3885,3887,5,92,0,0,3886,3885,1,0,0,0,
        3886,3887,1,0,0,0,3887,3888,1,0,0,0,3888,3893,3,316,158,0,3889,3890,
        5,6,0,0,3890,3892,3,316,158,0,3891,3889,1,0,0,0,3892,3895,1,0,0,
        0,3893,3891,1,0,0,0,3893,3894,1,0,0,0,3894,3898,1,0,0,0,3895,3893,
        1,0,0,0,3896,3897,7,48,0,0,3897,3899,5,219,0,0,3898,3896,1,0,0,0,
        3898,3899,1,0,0,0,3899,3901,1,0,0,0,3900,3902,3,88,44,0,3901,3900,
        1,0,0,0,3901,3902,1,0,0,0,3902,315,1,0,0,0,3903,3905,5,81,0,0,3904,
        3903,1,0,0,0,3904,3905,1,0,0,0,3905,3906,1,0,0,0,3906,3908,3,768,
        384,0,3907,3909,5,9,0,0,3908,3907,1,0,0,0,3908,3909,1,0,0,0,3909,
        317,1,0,0,0,3910,3911,5,159,0,0,3911,3970,5,80,0,0,3912,3971,3,304,
        152,0,3913,3971,3,306,153,0,3914,3915,5,44,0,0,3915,3917,3,812,406,
        0,3916,3918,3,312,156,0,3917,3916,1,0,0,0,3917,3918,1,0,0,0,3918,
        3919,1,0,0,0,3919,3920,5,11,0,0,3920,3921,3,794,397,0,3921,3971,
        1,0,0,0,3922,3923,7,33,0,0,3923,3971,3,646,323,0,3924,3925,5,136,
        0,0,3925,3971,3,388,194,0,3926,3927,5,211,0,0,3927,3971,3,376,188,
        0,3928,3929,5,278,0,0,3929,3971,3,410,205,0,3930,3931,5,45,0,0,3931,
        3932,3,812,406,0,3932,3938,5,80,0,0,3933,3939,3,768,384,0,3934,3936,
        5,189,0,0,3935,3934,1,0,0,0,3935,3936,1,0,0,0,3936,3937,1,0,0,0,
        3937,3939,3,310,155,0,3938,3933,1,0,0,0,3938,3935,1,0,0,0,3939,3971,
        1,0,0,0,3940,3941,7,45,0,0,3941,3942,3,812,406,0,3942,3943,5,80,
        0,0,3943,3944,3,310,155,0,3944,3971,1,0,0,0,3945,3946,5,296,0,0,
        3946,3971,3,372,186,0,3947,3948,5,442,0,0,3948,3971,3,368,184,0,
        3949,3950,5,443,0,0,3950,3951,5,62,0,0,3951,3952,3,646,323,0,3952,
        3953,5,247,0,0,3953,3954,3,812,406,0,3954,3971,1,0,0,0,3955,3956,
        5,278,0,0,3956,3957,7,32,0,0,3957,3958,3,310,155,0,3958,3959,3,164,
        82,0,3959,3971,1,0,0,0,3960,3961,5,248,0,0,3961,3962,5,274,0,0,3962,
        3971,3,196,98,0,3963,3964,5,41,0,0,3964,3965,5,2,0,0,3965,3966,3,
        646,323,0,3966,3967,5,36,0,0,3967,3968,3,646,323,0,3968,3969,5,3,
        0,0,3969,3971,1,0,0,0,3970,3912,1,0,0,0,3970,3913,1,0,0,0,3970,3914,
        1,0,0,0,3970,3922,1,0,0,0,3970,3924,1,0,0,0,3970,3926,1,0,0,0,3970,
        3928,1,0,0,0,3970,3930,1,0,0,0,3970,3940,1,0,0,0,3970,3945,1,0,0,
        0,3970,3947,1,0,0,0,3970,3949,1,0,0,0,3970,3955,1,0,0,0,3970,3960,
        1,0,0,0,3970,3963,1,0,0,0,3971,3972,1,0,0,0,3972,3975,5,116,0,0,
        3973,3976,3,802,401,0,3974,3976,5,78,0,0,3975,3973,1,0,0,0,3975,
        3974,1,0,0,0,3976,319,1,0,0,0,3977,3978,5,327,0,0,3978,3981,5,246,
        0,0,3979,3980,5,62,0,0,3980,3982,3,58,29,0,3981,3979,1,0,0,0,3981,
        3982,1,0,0,0,3982,3983,1,0,0,0,3983,4001,5,80,0,0,3984,3985,7,33,
        0,0,3985,4002,3,646,323,0,3986,3987,5,136,0,0,3987,4002,3,388,194,
        0,3988,3989,5,44,0,0,3989,4002,3,794,397,0,3990,3991,5,211,0,0,3991,
        4002,3,376,188,0,3992,3993,5,248,0,0,3993,3994,5,274,0,0,3994,4002,
        3,196,98,0,3995,3996,5,296,0,0,3996,4002,3,372,186,0,3997,3998,5,
        442,0,0,3998,4002,3,368,184,0,3999,4002,3,304,152,0,4000,4002,3,
        306,153,0,4001,3984,1,0,0,0,4001,3986,1,0,0,0,4001,3988,1,0,0,0,
        4001,3990,1,0,0,0,4001,3992,1,0,0,0,4001,3995,1,0,0,0,4001,3997,
        1,0,0,0,4001,3999,1,0,0,0,4001,4000,1,0,0,0,4002,4003,1,0,0,0,4003,
        4006,5,116,0,0,4004,4007,3,802,401,0,4005,4007,5,78,0,0,4006,4004,
        1,0,0,0,4006,4005,1,0,0,0,4007,321,1,0,0,0,4008,4009,7,49,0,0,4009,
        4010,3,324,162,0,4010,323,1,0,0,0,4011,4013,7,50,0,0,4012,4011,1,
        0,0,0,4012,4013,1,0,0,0,4013,4015,1,0,0,0,4014,4016,3,326,163,0,
        4015,4014,1,0,0,0,4015,4016,1,0,0,0,4016,4017,1,0,0,0,4017,4055,
        3,812,406,0,4018,4020,7,51,0,0,4019,4018,1,0,0,0,4019,4020,1,0,0,
        0,4020,4021,1,0,0,0,4021,4023,3,806,403,0,4022,4024,3,326,163,0,
        4023,4022,1,0,0,0,4023,4024,1,0,0,0,4024,4025,1,0,0,0,4025,4026,
        3,812,406,0,4026,4055,1,0,0,0,4027,4029,5,210,0,0,4028,4030,3,806,
        403,0,4029,4028,1,0,0,0,4029,4030,1,0,0,0,4030,4032,1,0,0,0,4031,
        4033,3,326,163,0,4032,4031,1,0,0,0,4032,4033,1,0,0,0,4033,4034,1,
        0,0,0,4034,4055,3,812,406,0,4035,4037,5,210,0,0,4036,4035,1,0,0,
        0,4036,4037,1,0,0,0,4037,4038,1,0,0,0,4038,4040,5,30,0,0,4039,4041,
        3,326,163,0,4040,4039,1,0,0,0,4040,4041,1,0,0,0,4041,4042,1,0,0,
        0,4042,4055,3,812,406,0,4043,4048,5,144,0,0,4044,4046,5,30,0,0,4045,
        4044,1,0,0,0,4045,4046,1,0,0,0,4046,4049,1,0,0,0,4047,4049,3,806,
        403,0,4048,4045,1,0,0,0,4048,4047,1,0,0,0,4049,4051,1,0,0,0,4050,
        4052,3,326,163,0,4051,4050,1,0,0,0,4051,4052,1,0,0,0,4052,4053,1,
        0,0,0,4053,4055,3,812,406,0,4054,4012,1,0,0,0,4054,4019,1,0,0,0,
        4054,4027,1,0,0,0,4054,4036,1,0,0,0,4054,4043,1,0,0,0,4055,325,1,
        0,0,0,4056,4057,7,52,0,0,4057,327,1,0,0,0,4058,4059,5,65,0,0,4059,
        4060,3,332,166,0,4060,4061,5,80,0,0,4061,4062,3,338,169,0,4062,4063,
        5,94,0,0,4063,4067,3,340,170,0,4064,4065,5,105,0,0,4065,4066,5,65,
        0,0,4066,4068,5,279,0,0,4067,4064,1,0,0,0,4067,4068,1,0,0,0,4068,
        329,1,0,0,0,4069,4073,5,317,0,0,4070,4071,5,65,0,0,4071,4072,5,279,
        0,0,4072,4074,5,62,0,0,4073,4070,1,0,0,0,4073,4074,1,0,0,0,4074,
        4075,1,0,0,0,4075,4076,3,332,166,0,4076,4077,5,80,0,0,4077,4078,
        3,338,169,0,4078,4079,5,64,0,0,4079,4081,3,340,170,0,4080,4082,3,
        88,44,0,4081,4080,1,0,0,0,4081,4082,1,0,0,0,4082,331,1,0,0,0,4083,
        4088,3,336,168,0,4084,4085,5,6,0,0,4085,4087,3,336,168,0,4086,4084,
        1,0,0,0,4087,4090,1,0,0,0,4088,4086,1,0,0,0,4088,4089,1,0,0,0,4089,
        4107,1,0,0,0,4090,4088,1,0,0,0,4091,4093,5,30,0,0,4092,4094,5,294,
        0,0,4093,4092,1,0,0,0,4093,4094,1,0,0,0,4094,4096,1,0,0,0,4095,4097,
        3,138,69,0,4096,4095,1,0,0,0,4096,4097,1,0,0,0,4097,4107,1,0,0,0,
        4098,4103,3,334,167,0,4099,4100,5,6,0,0,4100,4102,3,334,167,0,4101,
        4099,1,0,0,0,4102,4105,1,0,0,0,4103,4101,1,0,0,0,4103,4104,1,0,0,
        0,4104,4107,1,0,0,0,4105,4103,1,0,0,0,4106,4083,1,0,0,0,4106,4091,
        1,0,0,0,4106,4098,1,0,0,0,4107,333,1,0,0,0,4108,4109,7,53,0,0,4109,
        335,1,0,0,0,4110,4115,5,88,0,0,4111,4115,5,86,0,0,4112,4115,5,46,
        0,0,4113,4115,3,812,406,0,4114,4110,1,0,0,0,4114,4111,1,0,0,0,4114,
        4112,1,0,0,0,4114,4113,1,0,0,0,4115,4117,1,0,0,0,4116,4118,3,138,
        69,0,4117,4116,1,0,0,0,4117,4118,1,0,0,0,4118,337,1,0,0,0,4119,4120,
        5,92,0,0,4120,4165,3,756,378,0,4121,4123,5,328,0,0,4122,4121,1,0,
        0,0,4122,4123,1,0,0,0,4123,4124,1,0,0,0,4124,4165,3,754,377,0,4125,
        4129,5,63,0,0,4126,4127,5,174,0,0,4127,4130,5,381,0,0,4128,4130,
        5,331,0,0,4129,4126,1,0,0,0,4129,4128,1,0,0,0,4130,4133,1,0,0,0,
        4131,4133,5,247,0,0,4132,4125,1,0,0,0,4132,4131,1,0,0,0,4133,4134,
        1,0,0,0,4134,4165,3,778,389,0,4135,4136,5,211,0,0,4136,4165,3,374,
        187,0,4137,4138,5,296,0,0,4138,4165,3,370,185,0,4139,4140,5,442,
        0,0,4140,4165,3,366,183,0,4141,4142,5,175,0,0,4142,4165,3,760,380,
        0,4143,4144,7,33,0,0,4144,4165,3,308,154,0,4145,4146,5,248,0,0,4146,
        4147,5,274,0,0,4147,4152,3,196,98,0,4148,4149,5,6,0,0,4149,4151,
        3,196,98,0,4150,4148,1,0,0,0,4151,4154,1,0,0,0,4152,4150,1,0,0,0,
        4152,4153,1,0,0,0,4153,4165,1,0,0,0,4154,4152,1,0,0,0,4155,4156,
        5,323,0,0,4156,4165,3,758,379,0,4157,4158,5,351,0,0,4158,4165,3,
        776,388,0,4159,4160,5,30,0,0,4160,4161,7,54,0,0,4161,4162,5,68,0,
        0,4162,4163,5,323,0,0,4163,4165,3,758,379,0,4164,4119,1,0,0,0,4164,
        4122,1,0,0,0,4164,4132,1,0,0,0,4164,4135,1,0,0,0,4164,4137,1,0,0,
        0,4164,4139,1,0,0,0,4164,4141,1,0,0,0,4164,4143,1,0,0,0,4164,4145,
        1,0,0,0,4164,4155,1,0,0,0,4164,4157,1,0,0,0,4164,4159,1,0,0,0,4165,
        339,1,0,0,0,4166,4168,5,66,0,0,4167,4166,1,0,0,0,4167,4168,1,0,0,
        0,4168,4169,1,0,0,0,4169,4170,3,808,404,0,4170,4178,1,0,0,0,4171,
        4173,5,6,0,0,4172,4174,5,66,0,0,4173,4172,1,0,0,0,4173,4174,1,0,
        0,0,4174,4175,1,0,0,0,4175,4177,3,808,404,0,4176,4171,1,0,0,0,4177,
        4180,1,0,0,0,4178,4176,1,0,0,0,4178,4179,1,0,0,0,4179,341,1,0,0,
        0,4180,4178,1,0,0,0,4181,4182,5,65,0,0,4182,4187,3,336,168,0,4183,
        4184,5,6,0,0,4184,4186,3,336,168,0,4185,4183,1,0,0,0,4186,4189,1,
        0,0,0,4187,4185,1,0,0,0,4187,4188,1,0,0,0,4188,4190,1,0,0,0,4189,
        4187,1,0,0,0,4190,4191,5,94,0,0,4191,4195,3,810,405,0,4192,4193,
        5,105,0,0,4193,4194,5,134,0,0,4194,4196,5,279,0,0,4195,4192,1,0,
        0,0,4195,4196,1,0,0,0,4196,4200,1,0,0,0,4197,4198,5,214,0,0,4198,
        4199,5,147,0,0,4199,4201,3,808,404,0,4200,4197,1,0,0,0,4200,4201,
        1,0,0,0,4201,343,1,0,0,0,4202,4206,5,317,0,0,4203,4204,5,134,0,0,
        4204,4205,5,279,0,0,4205,4207,5,62,0,0,4206,4203,1,0,0,0,4206,4207,
        1,0,0,0,4207,4208,1,0,0,0,4208,4213,3,336,168,0,4209,4210,5,6,0,
        0,4210,4212,3,336,168,0,4211,4209,1,0,0,0,4212,4215,1,0,0,0,4213,
        4211,1,0,0,0,4213,4214,1,0,0,0,4214,4216,1,0,0,0,4215,4213,1,0,0,
        0,4216,4217,5,64,0,0,4217,4221,3,810,405,0,4218,4219,5,214,0,0,4219,
        4220,5,147,0,0,4220,4222,3,808,404,0,4221,4218,1,0,0,0,4221,4222,
        1,0,0,0,4222,4224,1,0,0,0,4223,4225,3,88,44,0,4224,4223,1,0,0,0,
        4224,4225,1,0,0,0,4225,345,1,0,0,0,4226,4227,5,138,0,0,4227,4228,
        5,53,0,0,4228,4237,5,294,0,0,4229,4230,5,68,0,0,4230,4231,5,323,
        0,0,4231,4236,3,758,379,0,4232,4233,5,62,0,0,4233,4234,7,2,0,0,4234,
        4236,3,810,405,0,4235,4229,1,0,0,0,4235,4232,1,0,0,0,4236,4239,1,
        0,0,0,4237,4235,1,0,0,0,4237,4238,1,0,0,0,4238,4240,1,0,0,0,4239,
        4237,1,0,0,0,4240,4241,3,348,174,0,4241,347,1,0,0,0,4242,4243,5,
        65,0,0,4243,4244,3,332,166,0,4244,4245,5,80,0,0,4245,4246,3,350,
        175,0,4246,4247,5,94,0,0,4247,4251,3,340,170,0,4248,4249,5,105,0,
        0,4249,4250,5,65,0,0,4250,4252,5,279,0,0,4251,4248,1,0,0,0,4251,
        4252,1,0,0,0,4252,4268,1,0,0,0,4253,4257,5,317,0,0,4254,4255,5,65,
        0,0,4255,4256,5,279,0,0,4256,4258,5,62,0,0,4257,4254,1,0,0,0,4257,
        4258,1,0,0,0,4258,4259,1,0,0,0,4259,4260,3,332,166,0,4260,4261,5,
        80,0,0,4261,4262,3,350,175,0,4262,4263,5,64,0,0,4263,4265,3,340,
        170,0,4264,4266,3,88,44,0,4265,4264,1,0,0,0,4265,4266,1,0,0,0,4266,
        4268,1,0,0,0,4267,4242,1,0,0,0,4267,4253,1,0,0,0,4268,349,1,0,0,
        0,4269,4270,7,55,0,0,4270,351,1,0,0,0,4271,4273,5,46,0,0,4272,4274,
        5,98,0,0,4273,4272,1,0,0,0,4273,4274,1,0,0,0,4274,4275,1,0,0,0,4275,
        4277,5,226,0,0,4276,4278,5,109,0,0,4277,4276,1,0,0,0,4277,4278,1,
        0,0,0,4278,4280,1,0,0,0,4279,4281,3,288,144,0,4280,4279,1,0,0,0,
        4280,4281,1,0,0,0,4281,4283,1,0,0,0,4282,4284,3,812,406,0,4283,4282,
        1,0,0,0,4283,4284,1,0,0,0,4284,4285,1,0,0,0,4285,4286,5,80,0,0,4286,
        4288,3,618,309,0,4287,4289,3,164,82,0,4288,4287,1,0,0,0,4288,4289,
        1,0,0,0,4289,4290,1,0,0,0,4290,4293,3,354,177,0,4291,4292,5,441,
        0,0,4292,4294,3,354,177,0,4293,4291,1,0,0,0,4293,4294,1,0,0,0,4294,
        4300,1,0,0,0,4295,4297,5,273,0,0,4296,4298,5,77,0,0,4297,4296,1,
        0,0,0,4297,4298,1,0,0,0,4298,4299,1,0,0,0,4299,4301,5,56,0,0,4300,
        4295,1,0,0,0,4300,4301,1,0,0,0,4301,4303,1,0,0,0,4302,4304,3,94,
        47,0,4303,4302,1,0,0,0,4303,4304,1,0,0,0,4304,4306,1,0,0,0,4305,
        4307,3,170,85,0,4306,4305,1,0,0,0,4306,4307,1,0,0,0,4307,4309,1,
        0,0,0,4308,4310,3,632,316,0,4309,4308,1,0,0,0,4309,4310,1,0,0,0,
        4310,353,1,0,0,0,4311,4312,5,2,0,0,4312,4317,3,356,178,0,4313,4314,
        5,6,0,0,4314,4316,3,356,178,0,4315,4313,1,0,0,0,4316,4319,1,0,0,
        0,4317,4315,1,0,0,0,4317,4318,1,0,0,0,4318,4320,1,0,0,0,4319,4317,
        1,0,0,0,4320,4321,5,3,0,0,4321,355,1,0,0,0,4322,4329,3,794,397,0,
        4323,4329,3,682,341,0,4324,4325,5,2,0,0,4325,4326,3,668,334,0,4326,
        4327,5,3,0,0,4327,4329,1,0,0,0,4328,4322,1,0,0,0,4328,4323,1,0,0,
        0,4328,4324,1,0,0,0,4329,4331,1,0,0,0,4330,4332,3,90,45,0,4331,4330,
        1,0,0,0,4331,4332,1,0,0,0,4332,4339,1,0,0,0,4333,4335,3,310,155,
        0,4334,4333,1,0,0,0,4334,4335,1,0,0,0,4335,4340,1,0,0,0,4336,4337,
        3,310,155,0,4337,4338,3,92,46,0,4338,4340,1,0,0,0,4339,4334,1,0,
        0,0,4339,4336,1,0,0,0,4340,4342,1,0,0,0,4341,4343,7,56,0,0,4342,
        4341,1,0,0,0,4342,4343,1,0,0,0,4343,4346,1,0,0,0,4344,4345,5,273,
        0,0,4345,4347,7,57,0,0,4346,4344,1,0,0,0,4346,4347,1,0,0,0,4347,
        357,1,0,0,0,4348,4350,5,46,0,0,4349,4351,3,360,180,0,4350,4349,1,
        0,0,0,4350,4351,1,0,0,0,4351,4356,1,0,0,0,4352,4353,5,211,0,0,4353,
        4357,3,798,399,0,4354,4355,5,296,0,0,4355,4357,3,792,396,0,4356,
        4352,1,0,0,0,4356,4354,1,0,0,0,4357,4358,1,0,0,0,4358,4367,5,2,0,
        0,4359,4364,3,384,192,0,4360,4361,5,6,0,0,4361,4363,3,384,192,0,
        4362,4360,1,0,0,0,4363,4366,1,0,0,0,4364,4362,1,0,0,0,4364,4365,
        1,0,0,0,4365,4368,1,0,0,0,4366,4364,1,0,0,0,4367,4359,1,0,0,0,4367,
        4368,1,0,0,0,4368,4369,1,0,0,0,4369,4370,5,3,0,0,4370,4387,1,0,0,
        0,4371,4385,5,316,0,0,4372,4386,3,382,191,0,4373,4374,5,92,0,0,4374,
        4375,5,2,0,0,4375,4380,3,396,198,0,4376,4377,5,6,0,0,4377,4379,3,
        396,198,0,4378,4376,1,0,0,0,4379,4382,1,0,0,0,4380,4378,1,0,0,0,
        4380,4381,1,0,0,0,4381,4383,1,0,0,0,4382,4380,1,0,0,0,4383,4384,
        5,3,0,0,4384,4386,1,0,0,0,4385,4372,1,0,0,0,4385,4373,1,0,0,0,4386,
        4388,1,0,0,0,4387,4371,1,0,0,0,4387,4388,1,0,0,0,4388,4390,1,0,0,
        0,4389,4391,3,392,196,0,4390,4389,1,0,0,0,4391,4392,1,0,0,0,4392,
        4390,1,0,0,0,4392,4393,1,0,0,0,4393,4399,1,0,0,0,4394,4395,5,105,
        0,0,4395,4396,5,2,0,0,4396,4397,3,778,389,0,4397,4398,5,3,0,0,4398,
        4400,1,0,0,0,4399,4394,1,0,0,0,4399,4400,1,0,0,0,4400,359,1,0,0,
        0,4401,4402,5,82,0,0,4402,4403,5,311,0,0,4403,361,1,0,0,0,4404,4406,
        5,2,0,0,4405,4407,3,364,182,0,4406,4405,1,0,0,0,4406,4407,1,0,0,
        0,4407,4408,1,0,0,0,4408,4409,5,3,0,0,4409,363,1,0,0,0,4410,4415,
        3,378,189,0,4411,4412,5,6,0,0,4412,4414,3,378,189,0,4413,4411,1,
        0,0,0,4414,4417,1,0,0,0,4415,4413,1,0,0,0,4415,4416,1,0,0,0,4416,
        365,1,0,0,0,4417,4415,1,0,0,0,4418,4423,3,368,184,0,4419,4420,5,
        6,0,0,4420,4422,3,368,184,0,4421,4419,1,0,0,0,4422,4425,1,0,0,0,
        4423,4421,1,0,0,0,4423,4424,1,0,0,0,4424,367,1,0,0,0,4425,4423,1,
        0,0,0,4426,4427,3,788,394,0,4427,4428,3,362,181,0,4428,4432,1,0,
        0,0,4429,4432,3,826,413,0,4430,4432,3,774,387,0,4431,4426,1,0,0,
        0,4431,4429,1,0,0,0,4431,4430,1,0,0,0,4432,369,1,0,0,0,4433,4438,
        3,372,186,0,4434,4435,5,6,0,0,4435,4437,3,372,186,0,4436,4434,1,
        0,0,0,4437,4440,1,0,0,0,4438,4436,1,0,0,0,4438,4439,1,0,0,0,4439,
        371,1,0,0,0,4440,4438,1,0,0,0,4441,4442,3,790,395,0,4442,4443,3,
        362,181,0,4443,4447,1,0,0,0,4444,4447,3,826,413,0,4445,4447,3,774,
        387,0,4446,4441,1,0,0,0,4446,4444,1,0,0,0,4446,4445,1,0,0,0,4447,
        373,1,0,0,0,4448,4453,3,376,188,0,4449,4450,5,6,0,0,4450,4452,3,
        376,188,0,4451,4449,1,0,0,0,4452,4455,1,0,0,0,4453,4451,1,0,0,0,
        4453,4454,1,0,0,0,4454,375,1,0,0,0,4455,4453,1,0,0,0,4456,4457,3,
        800,400,0,4457,4458,3,362,181,0,4458,4462,1,0,0,0,4459,4462,3,826,
        413,0,4460,4462,3,774,387,0,4461,4456,1,0,0,0,4461,4459,1,0,0,0,
        4461,4460,1,0,0,0,4462,377,1,0,0,0,4463,4465,3,380,190,0,4464,4466,
        3,814,407,0,4465,4464,1,0,0,0,4465,4466,1,0,0,0,4466,4472,1,0,0,
        0,4467,4469,3,814,407,0,4468,4470,3,380,190,0,4469,4468,1,0,0,0,
        4469,4470,1,0,0,0,4470,4472,1,0,0,0,4471,4463,1,0,0,0,4471,4467,
        1,0,0,0,4471,4472,1,0,0,0,4472,4473,1,0,0,0,4473,4474,3,382,191,
        0,4474,379,1,0,0,0,4475,4477,5,68,0,0,4476,4478,5,453,0,0,4477,4476,
        1,0,0,0,4477,4478,1,0,0,0,4478,4483,1,0,0,0,4479,4483,5,453,0,0,
        4480,4483,5,400,0,0,4481,4483,5,101,0,0,4482,4475,1,0,0,0,4482,4479,
        1,0,0,0,4482,4480,1,0,0,0,4482,4481,1,0,0,0,4483,381,1,0,0,0,4484,
        4494,3,646,323,0,4485,4487,5,415,0,0,4486,4485,1,0,0,0,4486,4487,
        1,0,0,0,4487,4488,1,0,0,0,4488,4489,3,814,407,0,4489,4490,3,312,
        156,0,4490,4491,5,27,0,0,4491,4492,5,360,0,0,4492,4494,1,0,0,0,4493,
        4484,1,0,0,0,4493,4486,1,0,0,0,4494,383,1,0,0,0,4495,4498,3,378,
        189,0,4496,4497,7,58,0,0,4497,4499,3,668,334,0,4498,4496,1,0,0,0,
        4498,4499,1,0,0,0,4499,385,1,0,0,0,4500,4510,5,2,0,0,4501,4511,5,
        9,0,0,4502,4504,3,364,182,0,4503,4502,1,0,0,0,4503,4504,1,0,0,0,
        4504,4508,1,0,0,0,4505,4506,5,83,0,0,4506,4507,5,147,0,0,4507,4509,
        3,364,182,0,4508,4505,1,0,0,0,4508,4509,1,0,0,0,4509,4511,1,0,0,
        0,4510,4501,1,0,0,0,4510,4503,1,0,0,0,4511,4512,1,0,0,0,4512,4513,
        5,3,0,0,4513,387,1,0,0,0,4514,4515,3,800,400,0,4515,4516,3,386,193,
        0,4516,389,1,0,0,0,4517,4518,5,316,0,0,4518,4521,5,78,0,0,4519,4521,
        5,149,0,0,4520,4517,1,0,0,0,4520,4519,1,0,0,0,4521,4522,1,0,0,0,
        4522,4523,5,80,0,0,4523,4524,5,78,0,0,4524,4547,5,458,0,0,4525,4547,
        5,346,0,0,4526,4547,5,222,0,0,4527,4547,5,338,0,0,4528,4547,5,377,
        0,0,4529,4531,5,205,0,0,4530,4529,1,0,0,0,4530,4531,1,0,0,0,4531,
        4532,1,0,0,0,4532,4533,5,327,0,0,4533,4547,7,59,0,0,4534,4547,5,
        250,0,0,4535,4536,5,77,0,0,4536,4547,5,250,0,0,4537,4538,7,60,0,
        0,4538,4547,3,196,98,0,4539,4540,5,459,0,0,4540,4547,3,310,155,0,
        4541,4542,5,333,0,0,4542,4547,3,42,21,0,4543,4547,3,60,30,0,4544,
        4545,5,460,0,0,4545,4547,3,812,406,0,4546,4520,1,0,0,0,4546,4525,
        1,0,0,0,4546,4526,1,0,0,0,4546,4527,1,0,0,0,4546,4528,1,0,0,0,4546,
        4530,1,0,0,0,4546,4534,1,0,0,0,4546,4535,1,0,0,0,4546,4537,1,0,0,
        0,4546,4539,1,0,0,0,4546,4541,1,0,0,0,4546,4543,1,0,0,0,4546,4544,
        1,0,0,0,4547,391,1,0,0,0,4548,4549,5,36,0,0,4549,4550,3,802,401,
        0,4550,4551,3,456,228,0,4551,4584,1,0,0,0,4552,4553,5,247,0,0,4553,
        4584,3,58,29,0,4554,4555,5,443,0,0,4555,4556,5,62,0,0,4556,4557,
        5,360,0,0,4557,4564,3,646,323,0,4558,4559,5,6,0,0,4559,4560,5,62,
        0,0,4560,4561,5,360,0,0,4561,4563,3,646,323,0,4562,4558,1,0,0,0,
        4563,4566,1,0,0,0,4564,4562,1,0,0,0,4564,4565,1,0,0,0,4565,4584,
        1,0,0,0,4566,4564,1,0,0,0,4567,4584,5,104,0,0,4568,4569,5,333,0,
        0,4569,4576,3,812,406,0,4570,4571,5,94,0,0,4571,4577,3,812,406,0,
        4572,4573,5,10,0,0,4573,4577,3,812,406,0,4574,4575,5,64,0,0,4575,
        4577,5,434,0,0,4576,4570,1,0,0,0,4576,4572,1,0,0,0,4576,4574,1,0,
        0,0,4577,4584,1,0,0,0,4578,4579,5,36,0,0,4579,4584,3,812,406,0,4580,
        4584,3,4,2,0,4581,4584,3,390,195,0,4582,4584,3,812,406,0,4583,4548,
        1,0,0,0,4583,4552,1,0,0,0,4583,4554,1,0,0,0,4583,4567,1,0,0,0,4583,
        4568,1,0,0,0,4583,4578,1,0,0,0,4583,4580,1,0,0,0,4583,4581,1,0,0,
        0,4583,4582,1,0,0,0,4584,393,1,0,0,0,4585,4586,5,105,0,0,4586,4587,
        3,278,139,0,4587,395,1,0,0,0,4588,4589,3,794,397,0,4589,4590,3,382,
        191,0,4590,397,1,0,0,0,4591,4598,5,138,0,0,4592,4593,5,211,0,0,4593,
        4599,3,376,188,0,4594,4595,5,296,0,0,4595,4599,3,372,186,0,4596,
        4597,5,442,0,0,4597,4599,3,368,184,0,4598,4592,1,0,0,0,4598,4594,
        1,0,0,0,4598,4596,1,0,0,0,4599,4601,1,0,0,0,4600,4602,3,390,195,
        0,4601,4600,1,0,0,0,4602,4603,1,0,0,0,4603,4601,1,0,0,0,4603,4604,
        1,0,0,0,4604,4606,1,0,0,0,4605,4607,5,315,0,0,4606,4605,1,0,0,0,
        4606,4607,1,0,0,0,4607,399,1,0,0,0,4608,4624,5,191,0,0,4609,4611,
        5,211,0,0,4610,4612,3,416,208,0,4611,4610,1,0,0,0,4611,4612,1,0,
        0,0,4612,4613,1,0,0,0,4613,4625,3,374,187,0,4614,4616,5,296,0,0,
        4615,4617,3,416,208,0,4616,4615,1,0,0,0,4616,4617,1,0,0,0,4617,4618,
        1,0,0,0,4618,4625,3,370,185,0,4619,4621,5,442,0,0,4620,4622,3,416,
        208,0,4621,4620,1,0,0,0,4621,4622,1,0,0,0,4622,4623,1,0,0,0,4623,
        4625,3,366,183,0,4624,4609,1,0,0,0,4624,4614,1,0,0,0,4624,4619,1,
        0,0,0,4625,4627,1,0,0,0,4626,4628,3,88,44,0,4627,4626,1,0,0,0,4627,
        4628,1,0,0,0,4628,401,1,0,0,0,4629,4630,5,191,0,0,4630,4632,5,136,
        0,0,4631,4633,3,416,208,0,4632,4631,1,0,0,0,4632,4633,1,0,0,0,4633,
        4634,1,0,0,0,4634,4639,3,388,194,0,4635,4636,5,6,0,0,4636,4638,3,
        388,194,0,4637,4635,1,0,0,0,4638,4641,1,0,0,0,4639,4637,1,0,0,0,
        4639,4640,1,0,0,0,4640,4643,1,0,0,0,4641,4639,1,0,0,0,4642,4644,
        3,88,44,0,4643,4642,1,0,0,0,4643,4644,1,0,0,0,4644,403,1,0,0,0,4645,
        4646,5,191,0,0,4646,4648,5,278,0,0,4647,4649,3,416,208,0,4648,4647,
        1,0,0,0,4648,4649,1,0,0,0,4649,4650,1,0,0,0,4650,4655,3,410,205,
        0,4651,4652,5,6,0,0,4652,4654,3,410,205,0,4653,4651,1,0,0,0,4654,
        4657,1,0,0,0,4655,4653,1,0,0,0,4655,4656,1,0,0,0,4656,4659,1,0,0,
        0,4657,4655,1,0,0,0,4658,4660,3,88,44,0,4659,4658,1,0,0,0,4659,4660,
        1,0,0,0,4660,405,1,0,0,0,4661,4674,5,2,0,0,4662,4665,3,646,323,0,
        4663,4664,5,6,0,0,4664,4666,3,646,323,0,4665,4663,1,0,0,0,4665,4666,
        1,0,0,0,4666,4675,1,0,0,0,4667,4668,5,407,0,0,4668,4669,5,6,0,0,
        4669,4675,3,646,323,0,4670,4671,3,646,323,0,4671,4672,5,6,0,0,4672,
        4673,5,407,0,0,4673,4675,1,0,0,0,4674,4662,1,0,0,0,4674,4667,1,0,
        0,0,4674,4670,1,0,0,0,4675,4676,1,0,0,0,4676,4677,5,3,0,0,4677,407,
        1,0,0,0,4678,4679,3,812,406,0,4679,4680,5,11,0,0,4680,4682,1,0,0,
        0,4681,4678,1,0,0,0,4682,4685,1,0,0,0,4683,4681,1,0,0,0,4683,4684,
        1,0,0,0,4684,4686,1,0,0,0,4685,4683,1,0,0,0,4686,4687,3,714,357,
        0,4687,409,1,0,0,0,4688,4689,3,408,204,0,4689,4690,3,406,203,0,4690,
        411,1,0,0,0,4691,4695,5,57,0,0,4692,4696,3,802,401,0,4693,4694,5,
        247,0,0,4694,4696,3,58,29,0,4695,4692,1,0,0,0,4695,4693,1,0,0,0,
        4696,4697,1,0,0,0,4697,4695,1,0,0,0,4697,4698,1,0,0,0,4698,413,1,
        0,0,0,4699,4700,5,46,0,0,4700,4701,5,41,0,0,4701,4702,5,2,0,0,4702,
        4703,3,646,323,0,4703,4704,5,36,0,0,4704,4705,3,646,323,0,4705,4722,
        5,3,0,0,4706,4707,5,379,0,0,4707,4710,5,211,0,0,4708,4709,5,36,0,
        0,4709,4711,7,61,0,0,4710,4708,1,0,0,0,4710,4711,1,0,0,0,4711,4723,
        1,0,0,0,4712,4716,5,105,0,0,4713,4714,5,211,0,0,4714,4717,3,376,
        188,0,4715,4717,5,400,0,0,4716,4713,1,0,0,0,4716,4715,1,0,0,0,4717,
        4720,1,0,0,0,4718,4719,5,36,0,0,4719,4721,7,61,0,0,4720,4718,1,0,
        0,0,4720,4721,1,0,0,0,4721,4723,1,0,0,0,4722,4706,1,0,0,0,4722,4712,
        1,0,0,0,4723,415,1,0,0,0,4724,4725,5,220,0,0,4725,4726,5,396,0,0,
        4726,417,1,0,0,0,4727,4729,5,46,0,0,4728,4730,3,360,180,0,4729,4728,
        1,0,0,0,4729,4730,1,0,0,0,4730,4731,1,0,0,0,4731,4732,5,443,0,0,
        4732,4733,5,62,0,0,4733,4734,3,646,323,0,4734,4735,5,247,0,0,4735,
        4736,3,812,406,0,4736,4751,5,2,0,0,4737,4738,5,64,0,0,4738,4742,
        3,420,210,0,4739,4740,5,6,0,0,4740,4741,5,94,0,0,4741,4743,3,420,
        210,0,4742,4739,1,0,0,0,4742,4743,1,0,0,0,4743,4752,1,0,0,0,4744,
        4745,5,94,0,0,4745,4749,3,420,210,0,4746,4747,5,6,0,0,4747,4748,
        5,64,0,0,4748,4750,3,420,210,0,4749,4746,1,0,0,0,4749,4750,1,0,0,
        0,4750,4752,1,0,0,0,4751,4737,1,0,0,0,4751,4744,1,0,0,0,4752,4753,
        1,0,0,0,4753,4754,5,3,0,0,4754,419,1,0,0,0,4755,4756,5,461,0,0,4756,
        4757,5,105,0,0,4757,4758,5,211,0,0,4758,4759,3,376,188,0,4759,421,
        1,0,0,0,4760,4771,5,306,0,0,4761,4762,5,2,0,0,4762,4767,5,128,0,
        0,4763,4764,5,6,0,0,4764,4766,5,128,0,0,4765,4763,1,0,0,0,4766,4769,
        1,0,0,0,4767,4765,1,0,0,0,4767,4768,1,0,0,0,4768,4770,1,0,0,0,4769,
        4767,1,0,0,0,4770,4772,5,3,0,0,4771,4761,1,0,0,0,4771,4772,1,0,0,
        0,4772,4798,1,0,0,0,4773,4775,5,226,0,0,4774,4776,5,109,0,0,4775,
        4774,1,0,0,0,4775,4776,1,0,0,0,4776,4777,1,0,0,0,4777,4799,3,774,
        387,0,4778,4780,5,92,0,0,4779,4781,5,109,0,0,4780,4779,1,0,0,0,4780,
        4781,1,0,0,0,4781,4782,1,0,0,0,4782,4799,3,768,384,0,4783,4785,5,
        323,0,0,4784,4786,5,109,0,0,4785,4784,1,0,0,0,4785,4786,1,0,0,0,
        4786,4787,1,0,0,0,4787,4799,3,784,392,0,4788,4790,5,349,0,0,4789,
        4791,5,109,0,0,4790,4789,1,0,0,0,4790,4791,1,0,0,0,4791,4792,1,0,
        0,0,4792,4799,3,812,406,0,4793,4795,5,175,0,0,4794,4796,5,109,0,
        0,4795,4794,1,0,0,0,4795,4796,1,0,0,0,4796,4797,1,0,0,0,4797,4799,
        3,782,391,0,4798,4773,1,0,0,0,4798,4778,1,0,0,0,4798,4783,1,0,0,
        0,4798,4788,1,0,0,0,4798,4793,1,0,0,0,4799,423,1,0,0,0,4800,4801,
        5,138,0,0,4801,4802,3,170,85,0,4802,4803,7,16,0,0,4803,4804,3,92,
        46,0,4804,425,1,0,0,0,4805,4810,5,138,0,0,4806,4807,5,136,0,0,4807,
        4811,3,388,194,0,4808,4809,5,442,0,0,4809,4811,3,368,184,0,4810,
        4806,1,0,0,0,4810,4808,1,0,0,0,4811,4812,1,0,0,0,4812,4813,5,309,
        0,0,4813,4814,5,94,0,0,4814,4815,3,812,406,0,4815,5013,1,0,0,0,4816,
        4817,5,138,0,0,4817,4818,5,175,0,0,4818,4819,3,782,391,0,4819,4820,
        5,309,0,0,4820,4821,5,94,0,0,4821,4822,3,780,390,0,4822,5013,1,0,
        0,0,4823,4824,5,138,0,0,4824,4825,7,62,0,0,4825,4826,3,310,155,0,
        4826,4827,5,309,0,0,4827,4828,5,94,0,0,4828,4829,3,812,406,0,4829,
        5013,1,0,0,0,4830,4831,5,138,0,0,4831,4832,5,211,0,0,4832,4833,3,
        376,188,0,4833,4834,5,309,0,0,4834,4835,5,94,0,0,4835,4836,3,798,
        399,0,4836,5013,1,0,0,0,4837,4838,5,138,0,0,4838,4839,5,278,0,0,
        4839,4840,7,32,0,0,4840,4841,3,310,155,0,4841,4842,3,164,82,0,4842,
        4843,5,309,0,0,4843,4844,5,94,0,0,4844,4845,3,812,406,0,4845,5013,
        1,0,0,0,4846,4847,5,138,0,0,4847,4848,5,296,0,0,4848,4849,3,372,
        186,0,4849,4850,5,309,0,0,4850,4851,5,94,0,0,4851,4852,3,792,396,
        0,4852,5013,1,0,0,0,4853,4854,5,138,0,0,4854,4855,5,323,0,0,4855,
        4856,3,784,392,0,4856,4857,5,309,0,0,4857,4858,5,94,0,0,4858,4859,
        3,32,16,0,4859,5013,1,0,0,0,4860,4861,5,138,0,0,4861,4863,7,63,0,
        0,4862,4864,3,416,208,0,4863,4862,1,0,0,0,4863,4864,1,0,0,0,4864,
        4865,1,0,0,0,4865,4866,3,774,387,0,4866,4867,5,309,0,0,4867,4868,
        5,94,0,0,4868,4869,3,812,406,0,4869,5013,1,0,0,0,4870,4872,5,138,
        0,0,4871,4873,5,259,0,0,4872,4871,1,0,0,0,4872,4873,1,0,0,0,4873,
        4874,1,0,0,0,4874,4876,5,376,0,0,4875,4877,3,416,208,0,4876,4875,
        1,0,0,0,4876,4877,1,0,0,0,4877,4878,1,0,0,0,4878,4879,3,772,386,
        0,4879,4880,5,309,0,0,4880,4881,5,94,0,0,4881,4882,3,770,385,0,4882,
        5013,1,0,0,0,4883,4885,5,138,0,0,4884,4886,5,63,0,0,4885,4884,1,
        0,0,0,4885,4886,1,0,0,0,4886,4887,1,0,0,0,4887,4889,5,92,0,0,4888,
        4890,3,416,208,0,4889,4888,1,0,0,0,4889,4890,1,0,0,0,4890,4891,1,
        0,0,0,4891,4892,3,618,309,0,4892,4893,5,309,0,0,4893,4894,5,94,0,
        0,4894,4895,3,766,383,0,4895,5013,1,0,0,0,4896,4921,5,138,0,0,4897,
        4899,5,63,0,0,4898,4897,1,0,0,0,4898,4899,1,0,0,0,4899,4900,1,0,
        0,0,4900,4902,5,92,0,0,4901,4903,3,416,208,0,4902,4901,1,0,0,0,4902,
        4903,1,0,0,0,4903,4904,1,0,0,0,4904,4905,3,618,309,0,4905,4907,5,
        309,0,0,4906,4908,5,44,0,0,4907,4906,1,0,0,0,4907,4908,1,0,0,0,4908,
        4922,1,0,0,0,4909,4911,5,259,0,0,4910,4909,1,0,0,0,4910,4911,1,0,
        0,0,4911,4912,1,0,0,0,4912,4914,5,376,0,0,4913,4915,3,416,208,0,
        4914,4913,1,0,0,0,4914,4915,1,0,0,0,4915,4916,1,0,0,0,4916,4917,
        3,772,386,0,4917,4919,5,309,0,0,4918,4920,5,44,0,0,4919,4918,1,0,
        0,0,4919,4920,1,0,0,0,4920,4922,1,0,0,0,4921,4898,1,0,0,0,4921,4910,
        1,0,0,0,4922,4923,1,0,0,0,4923,4924,3,794,397,0,4924,4925,5,94,0,
        0,4925,4926,3,796,398,0,4926,5013,1,0,0,0,4927,4935,5,138,0,0,4928,
        4930,5,92,0,0,4929,4931,3,416,208,0,4930,4929,1,0,0,0,4930,4931,
        1,0,0,0,4931,4932,1,0,0,0,4932,4936,3,618,309,0,4933,4934,5,189,
        0,0,4934,4936,3,310,155,0,4935,4928,1,0,0,0,4935,4933,1,0,0,0,4936,
        4937,1,0,0,0,4937,4938,5,309,0,0,4938,4939,5,45,0,0,4939,4940,3,
        812,406,0,4940,4941,5,94,0,0,4941,4942,3,812,406,0,4942,5013,1,0,
        0,0,4943,4950,5,138,0,0,4944,4946,5,445,0,0,4945,4947,3,416,208,
        0,4946,4945,1,0,0,0,4946,4947,1,0,0,0,4947,4951,1,0,0,0,4948,4951,
        5,321,0,0,4949,4951,5,357,0,0,4950,4944,1,0,0,0,4950,4948,1,0,0,
        0,4950,4949,1,0,0,0,4951,4952,1,0,0,0,4952,4953,3,812,406,0,4953,
        4954,5,80,0,0,4954,4955,3,774,387,0,4955,4956,5,309,0,0,4956,4957,
        5,94,0,0,4957,4958,3,812,406,0,4958,5013,1,0,0,0,4959,4972,5,138,
        0,0,4960,4961,5,63,0,0,4961,4962,5,174,0,0,4962,4973,5,381,0,0,4963,
        4965,5,295,0,0,4964,4963,1,0,0,0,4964,4965,1,0,0,0,4965,4966,1,0,
        0,0,4966,4973,5,247,0,0,4967,4973,5,452,0,0,4968,4973,5,331,0,0,
        4969,4973,5,451,0,0,4970,4971,5,198,0,0,4971,4973,5,357,0,0,4972,
        4960,1,0,0,0,4972,4964,1,0,0,0,4972,4967,1,0,0,0,4972,4968,1,0,0,
        0,4972,4969,1,0,0,0,4972,4970,1,0,0,0,4973,4974,1,0,0,0,4974,4975,
        3,812,406,0,4975,4976,5,309,0,0,4976,4977,5,94,0,0,4977,4978,3,812,
        406,0,4978,5013,1,0,0,0,4979,4980,5,138,0,0,4980,4981,7,46,0,0,4981,
        4982,3,808,404,0,4982,4983,5,309,0,0,4983,4984,5,94,0,0,4984,4985,
        3,808,404,0,4985,5013,1,0,0,0,4986,4987,5,138,0,0,4987,4988,3,170,
        85,0,4988,4989,5,309,0,0,4989,4990,5,94,0,0,4990,4991,3,764,382,
        0,4991,5013,1,0,0,0,4992,4993,5,138,0,0,4993,4994,5,355,0,0,4994,
        4995,5,325,0,0,4995,4996,7,42,0,0,4996,4997,3,310,155,0,4997,4998,
        5,309,0,0,4998,4999,5,94,0,0,4999,5000,3,812,406,0,5000,5013,1,0,
        0,0,5001,5002,5,138,0,0,5002,5003,5,360,0,0,5003,5004,3,310,155,
        0,5004,5005,5,309,0,0,5005,5006,5,143,0,0,5006,5007,3,812,406,0,
        5007,5008,5,94,0,0,5008,5010,3,812,406,0,5009,5011,3,88,44,0,5010,
        5009,1,0,0,0,5010,5011,1,0,0,0,5011,5013,1,0,0,0,5012,4805,1,0,0,
        0,5012,4816,1,0,0,0,5012,4823,1,0,0,0,5012,4830,1,0,0,0,5012,4837,
        1,0,0,0,5012,4846,1,0,0,0,5012,4853,1,0,0,0,5012,4860,1,0,0,0,5012,
        4870,1,0,0,0,5012,4883,1,0,0,0,5012,4896,1,0,0,0,5012,4927,1,0,0,
        0,5012,4943,1,0,0,0,5012,4959,1,0,0,0,5012,4979,1,0,0,0,5012,4986,
        1,0,0,0,5012,4992,1,0,0,0,5012,5001,1,0,0,0,5013,427,1,0,0,0,5014,
        5031,5,138,0,0,5015,5016,5,211,0,0,5016,5032,3,376,188,0,5017,5018,
        5,296,0,0,5018,5032,3,372,186,0,5019,5020,5,442,0,0,5020,5032,3,
        368,184,0,5021,5022,5,357,0,0,5022,5023,3,812,406,0,5023,5024,5,
        80,0,0,5024,5025,3,774,387,0,5025,5032,1,0,0,0,5026,5027,5,259,0,
        0,5027,5028,5,376,0,0,5028,5032,3,772,386,0,5029,5030,5,226,0,0,
        5030,5032,3,774,387,0,5031,5015,1,0,0,0,5031,5017,1,0,0,0,5031,5019,
        1,0,0,0,5031,5021,1,0,0,0,5031,5026,1,0,0,0,5031,5029,1,0,0,0,5032,
        5034,1,0,0,0,5033,5035,5,269,0,0,5034,5033,1,0,0,0,5034,5035,1,0,
        0,0,5035,5036,1,0,0,0,5036,5037,5,462,0,0,5037,5038,5,80,0,0,5038,
        5039,5,204,0,0,5039,5040,3,812,406,0,5040,429,1,0,0,0,5041,5080,
        5,138,0,0,5042,5043,5,136,0,0,5043,5081,3,388,194,0,5044,5045,5,
        204,0,0,5045,5081,3,812,406,0,5046,5047,5,211,0,0,5047,5081,3,376,
        188,0,5048,5049,5,278,0,0,5049,5081,3,410,205,0,5050,5051,5,278,
        0,0,5051,5052,7,32,0,0,5052,5053,3,310,155,0,5053,5054,3,164,82,
        0,5054,5081,1,0,0,0,5055,5056,5,296,0,0,5056,5081,3,372,186,0,5057,
        5058,5,442,0,0,5058,5081,3,368,184,0,5059,5061,5,328,0,0,5060,5062,
        3,416,208,0,5061,5060,1,0,0,0,5061,5062,1,0,0,0,5062,5063,1,0,0,
        0,5063,5081,3,774,387,0,5064,5066,5,259,0,0,5065,5064,1,0,0,0,5065,
        5066,1,0,0,0,5066,5067,1,0,0,0,5067,5069,5,376,0,0,5068,5070,3,416,
        208,0,5069,5068,1,0,0,0,5069,5070,1,0,0,0,5070,5071,1,0,0,0,5071,
        5081,3,772,386,0,5072,5074,5,63,0,0,5073,5072,1,0,0,0,5073,5074,
        1,0,0,0,5074,5075,1,0,0,0,5075,5077,5,92,0,0,5076,5078,3,416,208,
        0,5077,5076,1,0,0,0,5077,5078,1,0,0,0,5078,5079,1,0,0,0,5079,5081,
        3,618,309,0,5080,5042,1,0,0,0,5080,5044,1,0,0,0,5080,5046,1,0,0,
        0,5080,5048,1,0,0,0,5080,5050,1,0,0,0,5080,5055,1,0,0,0,5080,5057,
        1,0,0,0,5080,5059,1,0,0,0,5080,5065,1,0,0,0,5080,5073,1,0,0,0,5081,
        5082,1,0,0,0,5082,5083,5,333,0,0,5083,5084,5,323,0,0,5084,5085,3,
        784,392,0,5085,5103,1,0,0,0,5086,5095,5,138,0,0,5087,5088,5,355,
        0,0,5088,5089,5,325,0,0,5089,5096,7,42,0,0,5090,5096,5,108,0,0,5091,
        5096,5,168,0,0,5092,5096,5,189,0,0,5093,5096,5,342,0,0,5094,5096,
        5,360,0,0,5095,5087,1,0,0,0,5095,5090,1,0,0,0,5095,5091,1,0,0,0,
        5095,5092,1,0,0,0,5095,5093,1,0,0,0,5095,5094,1,0,0,0,5096,5097,
        1,0,0,0,5097,5098,3,310,155,0,5098,5099,5,333,0,0,5099,5100,5,323,
        0,0,5100,5101,3,784,392,0,5101,5103,1,0,0,0,5102,5041,1,0,0,0,5102,
        5086,1,0,0,0,5103,431,1,0,0,0,5104,5105,5,138,0,0,5105,5106,5,278,
        0,0,5106,5107,3,410,205,0,5107,5108,5,333,0,0,5108,5109,3,434,217,
        0,5109,433,1,0,0,0,5110,5111,5,2,0,0,5111,5116,3,436,218,0,5112,
        5113,5,6,0,0,5113,5115,3,436,218,0,5114,5112,1,0,0,0,5115,5118,1,
        0,0,0,5116,5114,1,0,0,0,5116,5117,1,0,0,0,5117,5119,1,0,0,0,5118,
        5116,1,0,0,0,5119,5120,5,3,0,0,5120,435,1,0,0,0,5121,5122,3,818,
        409,0,5122,5129,5,10,0,0,5123,5130,5,407,0,0,5124,5130,3,382,191,
        0,5125,5130,3,828,414,0,5126,5130,3,720,360,0,5127,5130,3,196,98,
        0,5128,5130,3,802,401,0,5129,5123,1,0,0,0,5129,5124,1,0,0,0,5129,
        5125,1,0,0,0,5129,5126,1,0,0,0,5129,5127,1,0,0,0,5129,5128,1,0,0,
        0,5130,437,1,0,0,0,5131,5132,5,138,0,0,5132,5133,5,360,0,0,5133,
        5134,3,310,155,0,5134,5135,5,333,0,0,5135,5136,3,434,217,0,5136,
        439,1,0,0,0,5137,5138,5,138,0,0,5138,5139,5,278,0,0,5139,5140,7,
        32,0,0,5140,5141,3,310,155,0,5141,5142,3,164,82,0,5142,5143,5,282,
        0,0,5143,5144,5,94,0,0,5144,5145,3,808,404,0,5145,5212,1,0,0,0,5146,
        5173,5,138,0,0,5147,5148,5,136,0,0,5148,5174,3,388,194,0,5149,5150,
        5,175,0,0,5150,5174,3,782,391,0,5151,5152,5,211,0,0,5152,5174,3,
        376,188,0,5153,5155,5,295,0,0,5154,5153,1,0,0,0,5154,5155,1,0,0,
        0,5155,5156,1,0,0,0,5156,5157,5,247,0,0,5157,5174,3,812,406,0,5158,
        5159,5,248,0,0,5159,5160,5,274,0,0,5160,5174,3,196,98,0,5161,5162,
        5,248,0,0,5162,5163,5,274,0,0,5163,5174,3,196,98,0,5164,5165,5,278,
        0,0,5165,5174,3,410,205,0,5166,5167,5,296,0,0,5167,5174,3,372,186,
        0,5168,5169,5,442,0,0,5169,5174,3,368,184,0,5170,5171,5,323,0,0,
        5171,5174,3,784,392,0,5172,5174,3,170,85,0,5173,5147,1,0,0,0,5173,
        5149,1,0,0,0,5173,5151,1,0,0,0,5173,5154,1,0,0,0,5173,5158,1,0,0,
        0,5173,5161,1,0,0,0,5173,5164,1,0,0,0,5173,5166,1,0,0,0,5173,5168,
        1,0,0,0,5173,5170,1,0,0,0,5173,5172,1,0,0,0,5174,5175,1,0,0,0,5175,
        5176,5,282,0,0,5176,5177,5,94,0,0,5177,5178,3,808,404,0,5178,5212,
        1,0,0,0,5179,5188,5,138,0,0,5180,5181,5,355,0,0,5181,5182,5,325,
        0,0,5182,5189,7,64,0,0,5183,5189,5,108,0,0,5184,5189,5,168,0,0,5185,
        5189,5,189,0,0,5186,5189,5,360,0,0,5187,5189,5,342,0,0,5188,5180,
        1,0,0,0,5188,5183,1,0,0,0,5188,5184,1,0,0,0,5188,5185,1,0,0,0,5188,
        5186,1,0,0,0,5188,5187,1,0,0,0,5189,5190,1,0,0,0,5190,5191,3,310,
        155,0,5191,5192,5,282,0,0,5192,5193,5,94,0,0,5193,5194,3,808,404,
        0,5194,5212,1,0,0,0,5195,5204,5,138,0,0,5196,5205,5,331,0,0,5197,
        5198,5,63,0,0,5198,5199,5,174,0,0,5199,5205,5,381,0,0,5200,5201,
        5,198,0,0,5201,5205,5,357,0,0,5202,5205,5,452,0,0,5203,5205,5,451,
        0,0,5204,5196,1,0,0,0,5204,5197,1,0,0,0,5204,5200,1,0,0,0,5204,5202,
        1,0,0,0,5204,5203,1,0,0,0,5205,5206,1,0,0,0,5206,5207,3,812,406,
        0,5207,5208,5,282,0,0,5208,5209,5,94,0,0,5209,5210,3,808,404,0,5210,
        5212,1,0,0,0,5211,5137,1,0,0,0,5211,5146,1,0,0,0,5211,5179,1,0,0,
        0,5211,5195,1,0,0,0,5212,441,1,0,0,0,5213,5214,5,46,0,0,5214,5215,
        5,452,0,0,5215,5222,3,812,406,0,5216,5217,5,62,0,0,5217,5218,5,92,
        0,0,5218,5223,3,622,311,0,5219,5220,5,62,0,0,5220,5221,5,30,0,0,
        5221,5223,5,350,0,0,5222,5216,1,0,0,0,5222,5219,1,0,0,0,5222,5223,
        1,0,0,0,5223,5225,1,0,0,0,5224,5226,3,394,197,0,5225,5224,1,0,0,
        0,5225,5226,1,0,0,0,5226,443,1,0,0,0,5227,5228,5,138,0,0,5228,5229,
        5,452,0,0,5229,5247,3,812,406,0,5230,5231,5,282,0,0,5231,5232,5,
        94,0,0,5232,5248,3,808,404,0,5233,5234,5,333,0,0,5234,5248,3,278,
        139,0,5235,5236,5,309,0,0,5236,5237,5,94,0,0,5237,5248,3,812,406,
        0,5238,5239,7,35,0,0,5239,5244,3,620,310,0,5240,5241,5,6,0,0,5241,
        5243,3,620,310,0,5242,5240,1,0,0,0,5243,5246,1,0,0,0,5244,5242,1,
        0,0,0,5244,5245,1,0,0,0,5245,5248,1,0,0,0,5246,5244,1,0,0,0,5247,
        5230,1,0,0,0,5247,5233,1,0,0,0,5247,5235,1,0,0,0,5247,5238,1,0,0,
        0,5248,445,1,0,0,0,5249,5250,5,46,0,0,5250,5251,5,451,0,0,5251,5252,
        3,812,406,0,5252,5253,5,164,0,0,5253,5254,3,802,401,0,5254,5255,
        5,452,0,0,5255,5260,3,818,409,0,5256,5257,5,6,0,0,5257,5259,3,818,
        409,0,5258,5256,1,0,0,0,5259,5262,1,0,0,0,5260,5258,1,0,0,0,5260,
        5261,1,0,0,0,5261,5264,1,0,0,0,5262,5260,1,0,0,0,5263,5265,3,394,
        197,0,5264,5263,1,0,0,0,5264,5265,1,0,0,0,5265,447,1,0,0,0,5266,
        5267,5,138,0,0,5267,5268,5,451,0,0,5268,5269,3,812,406,0,5269,5270,
        5,333,0,0,5270,5271,3,278,139,0,5271,5323,1,0,0,0,5272,5273,5,138,
        0,0,5273,5274,5,451,0,0,5274,5275,3,812,406,0,5275,5276,5,164,0,
        0,5276,5277,3,802,401,0,5277,5323,1,0,0,0,5278,5279,5,138,0,0,5279,
        5280,5,451,0,0,5280,5281,3,812,406,0,5281,5282,5,305,0,0,5282,5284,
        5,452,0,0,5283,5285,3,394,197,0,5284,5283,1,0,0,0,5284,5285,1,0,
        0,0,5285,5323,1,0,0,0,5286,5287,5,138,0,0,5287,5288,5,451,0,0,5288,
        5289,3,812,406,0,5289,5290,7,35,0,0,5290,5291,5,452,0,0,5291,5296,
        3,818,409,0,5292,5293,5,6,0,0,5293,5295,3,818,409,0,5294,5292,1,
        0,0,0,5295,5298,1,0,0,0,5296,5294,1,0,0,0,5296,5297,1,0,0,0,5297,
        5300,1,0,0,0,5298,5296,1,0,0,0,5299,5301,3,394,197,0,5300,5299,1,
        0,0,0,5300,5301,1,0,0,0,5301,5323,1,0,0,0,5302,5303,5,138,0,0,5303,
        5304,5,451,0,0,5304,5305,3,812,406,0,5305,5306,7,65,0,0,5306,5323,
        1,0,0,0,5307,5308,5,138,0,0,5308,5309,5,451,0,0,5309,5310,3,812,
        406,0,5310,5311,5,465,0,0,5311,5312,5,2,0,0,5312,5313,3,284,142,
        0,5313,5314,5,3,0,0,5314,5323,1,0,0,0,5315,5316,5,138,0,0,5316,5317,
        5,451,0,0,5317,5318,3,812,406,0,5318,5319,5,282,0,0,5319,5320,5,
        94,0,0,5320,5321,3,808,404,0,5321,5323,1,0,0,0,5322,5266,1,0,0,0,
        5322,5272,1,0,0,0,5322,5278,1,0,0,0,5322,5286,1,0,0,0,5322,5302,
        1,0,0,0,5322,5307,1,0,0,0,5322,5315,1,0,0,0,5323,449,1,0,0,0,5324,
        5326,5,46,0,0,5325,5327,3,360,180,0,5326,5325,1,0,0,0,5326,5327,
        1,0,0,0,5327,5328,1,0,0,0,5328,5329,5,321,0,0,5329,5330,3,812,406,
        0,5330,5331,5,36,0,0,5331,5332,5,80,0,0,5332,5333,7,66,0,0,5333,
        5334,5,94,0,0,5334,5336,3,774,387,0,5335,5337,3,632,316,0,5336,5335,
        1,0,0,0,5336,5337,1,0,0,0,5337,5338,1,0,0,0,5338,5340,5,57,0,0,5339,
        5341,7,67,0,0,5340,5339,1,0,0,0,5340,5341,1,0,0,0,5341,5358,1,0,
        0,0,5342,5359,5,270,0,0,5343,5359,3,452,226,0,5344,5346,5,2,0,0,
        5345,5347,3,452,226,0,5346,5345,1,0,0,0,5346,5347,1,0,0,0,5347,5354,
        1,0,0,0,5348,5350,5,7,0,0,5349,5351,3,452,226,0,5350,5349,1,0,0,
        0,5350,5351,1,0,0,0,5351,5353,1,0,0,0,5352,5348,1,0,0,0,5353,5356,
        1,0,0,0,5354,5352,1,0,0,0,5354,5355,1,0,0,0,5355,5357,1,0,0,0,5356,
        5354,1,0,0,0,5357,5359,5,3,0,0,5358,5342,1,0,0,0,5358,5343,1,0,0,
        0,5358,5344,1,0,0,0,5359,451,1,0,0,0,5360,5366,3,554,277,0,5361,
        5366,3,532,266,0,5362,5366,3,546,273,0,5363,5366,3,542,271,0,5364,
        5366,3,454,227,0,5365,5360,1,0,0,0,5365,5361,1,0,0,0,5365,5362,1,
        0,0,0,5365,5363,1,0,0,0,5365,5364,1,0,0,0,5366,453,1,0,0,0,5367,
        5368,5,271,0,0,5368,5370,3,812,406,0,5369,5371,3,456,228,0,5370,
        5369,1,0,0,0,5370,5371,1,0,0,0,5371,455,1,0,0,0,5372,5373,5,6,0,
        0,5373,5374,3,802,401,0,5374,457,1,0,0,0,5375,5376,5,252,0,0,5376,
        5377,3,812,406,0,5377,459,1,0,0,0,5378,5381,5,366,0,0,5379,5382,
        3,812,406,0,5380,5382,5,9,0,0,5381,5379,1,0,0,0,5381,5380,1,0,0,
        0,5382,461,1,0,0,0,5383,5385,5,146,0,0,5384,5386,3,464,232,0,5385,
        5384,1,0,0,0,5385,5386,1,0,0,0,5386,5388,1,0,0,0,5387,5389,3,468,
        234,0,5388,5387,1,0,0,0,5388,5389,1,0,0,0,5389,5429,1,0,0,0,5390,
        5391,5,340,0,0,5391,5393,5,356,0,0,5392,5394,3,468,234,0,5393,5392,
        1,0,0,0,5393,5394,1,0,0,0,5394,5429,1,0,0,0,5395,5396,5,322,0,0,
        5396,5429,3,812,406,0,5397,5399,5,308,0,0,5398,5400,5,322,0,0,5399,
        5398,1,0,0,0,5399,5400,1,0,0,0,5400,5401,1,0,0,0,5401,5429,3,812,
        406,0,5402,5403,5,290,0,0,5403,5404,5,356,0,0,5404,5429,3,802,401,
        0,5405,5406,7,68,0,0,5406,5407,5,291,0,0,5407,5429,3,802,401,0,5408,
        5410,7,69,0,0,5409,5411,3,464,232,0,5410,5409,1,0,0,0,5410,5411,
        1,0,0,0,5411,5417,1,0,0,0,5412,5414,5,33,0,0,5413,5415,5,269,0,0,
        5414,5413,1,0,0,0,5414,5415,1,0,0,0,5415,5416,1,0,0,0,5416,5418,
        5,153,0,0,5417,5412,1,0,0,0,5417,5418,1,0,0,0,5418,5429,1,0,0,0,
        5419,5421,5,319,0,0,5420,5422,3,464,232,0,5421,5420,1,0,0,0,5421,
        5422,1,0,0,0,5422,5423,1,0,0,0,5423,5425,5,94,0,0,5424,5426,5,322,
        0,0,5425,5424,1,0,0,0,5425,5426,1,0,0,0,5426,5427,1,0,0,0,5427,5429,
        3,812,406,0,5428,5383,1,0,0,0,5428,5390,1,0,0,0,5428,5395,1,0,0,
        0,5428,5397,1,0,0,0,5428,5402,1,0,0,0,5428,5405,1,0,0,0,5428,5408,
        1,0,0,0,5428,5419,1,0,0,0,5429,463,1,0,0,0,5430,5431,7,70,0,0,5431,
        465,1,0,0,0,5432,5433,5,244,0,0,5433,5434,5,251,0,0,5434,5442,3,
        50,25,0,5435,5436,5,300,0,0,5436,5442,7,71,0,0,5437,5439,5,77,0,
        0,5438,5437,1,0,0,0,5438,5439,1,0,0,0,5439,5440,1,0,0,0,5440,5442,
        5,54,0,0,5441,5432,1,0,0,0,5441,5435,1,0,0,0,5441,5438,1,0,0,0,5442,
        467,1,0,0,0,5443,5450,3,466,233,0,5444,5446,5,6,0,0,5445,5444,1,
        0,0,0,5445,5446,1,0,0,0,5446,5447,1,0,0,0,5447,5449,3,466,233,0,
        5448,5445,1,0,0,0,5449,5452,1,0,0,0,5450,5448,1,0,0,0,5450,5451,
        1,0,0,0,5451,469,1,0,0,0,5452,5450,1,0,0,0,5453,5456,5,46,0,0,5454,
        5455,5,82,0,0,5455,5457,5,311,0,0,5456,5454,1,0,0,0,5456,5457,1,
        0,0,0,5457,5459,1,0,0,0,5458,5460,3,116,58,0,5459,5458,1,0,0,0,5459,
        5460,1,0,0,0,5460,5476,1,0,0,0,5461,5462,5,376,0,0,5462,5464,3,770,
        385,0,5463,5465,3,140,70,0,5464,5463,1,0,0,0,5464,5465,1,0,0,0,5465,
        5467,1,0,0,0,5466,5468,3,94,47,0,5467,5466,1,0,0,0,5467,5468,1,0,
        0,0,5468,5477,1,0,0,0,5469,5470,5,303,0,0,5470,5471,5,376,0,0,5471,
        5472,3,770,385,0,5472,5474,3,138,69,0,5473,5475,3,94,47,0,5474,5473,
        1,0,0,0,5474,5475,1,0,0,0,5475,5477,1,0,0,0,5476,5461,1,0,0,0,5476,
        5469,1,0,0,0,5477,5478,1,0,0,0,5478,5479,5,36,0,0,5479,5486,3,554,
        277,0,5480,5482,5,105,0,0,5481,5483,7,72,0,0,5482,5481,1,0,0,0,5482,
        5483,1,0,0,0,5483,5484,1,0,0,0,5484,5485,5,42,0,0,5485,5487,5,279,
        0,0,5486,5480,1,0,0,0,5486,5487,1,0,0,0,5487,471,1,0,0,0,5488,5489,
        5,253,0,0,5489,5490,3,802,401,0,5490,473,1,0,0,0,5491,5492,5,46,
        0,0,5492,5493,5,175,0,0,5493,5495,3,780,390,0,5494,5496,5,105,0,
        0,5495,5494,1,0,0,0,5495,5496,1,0,0,0,5496,5502,1,0,0,0,5497,5499,
        3,476,238,0,5498,5497,1,0,0,0,5499,5500,1,0,0,0,5500,5498,1,0,0,
        0,5500,5501,1,0,0,0,5501,5503,1,0,0,0,5502,5498,1,0,0,0,5502,5503,
        1,0,0,0,5503,475,1,0,0,0,5504,5505,5,164,0,0,5505,5513,5,74,0,0,
        5506,5513,5,194,0,0,5507,5513,5,255,0,0,5508,5513,5,282,0,0,5509,
        5513,5,351,0,0,5510,5513,5,353,0,0,5511,5513,3,820,410,0,5512,5504,
        1,0,0,0,5512,5506,1,0,0,0,5512,5507,1,0,0,0,5512,5508,1,0,0,0,5512,
        5509,1,0,0,0,5512,5510,1,0,0,0,5512,5511,1,0,0,0,5513,5515,1,0,0,
        0,5514,5516,5,10,0,0,5515,5514,1,0,0,0,5515,5516,1,0,0,0,5516,5520,
        1,0,0,0,5517,5521,3,806,403,0,5518,5521,3,54,27,0,5519,5521,5,53,
        0,0,5520,5517,1,0,0,0,5520,5518,1,0,0,0,5520,5519,1,0,0,0,5521,477,
        1,0,0,0,5522,5523,5,138,0,0,5523,5524,5,175,0,0,5524,5540,3,782,
        391,0,5525,5526,5,333,0,0,5526,5527,5,351,0,0,5527,5529,3,764,382,
        0,5528,5525,1,0,0,0,5528,5529,1,0,0,0,5529,5541,1,0,0,0,5530,5532,
        5,105,0,0,5531,5530,1,0,0,0,5531,5532,1,0,0,0,5532,5534,1,0,0,0,
        5533,5535,3,476,238,0,5534,5533,1,0,0,0,5535,5536,1,0,0,0,5536,5534,
        1,0,0,0,5536,5537,1,0,0,0,5537,5539,1,0,0,0,5538,5531,1,0,0,0,5538,
        5539,1,0,0,0,5539,5541,1,0,0,0,5540,5528,1,0,0,0,5540,5538,1,0,0,
        0,5541,479,1,0,0,0,5542,5543,5,138,0,0,5543,5544,5,175,0,0,5544,
        5546,3,782,391,0,5545,5547,3,64,32,0,5546,5545,1,0,0,0,5546,5547,
        1,0,0,0,5547,481,1,0,0,0,5548,5549,5,138,0,0,5549,5550,5,108,0,0,
        5550,5551,3,310,155,0,5551,5552,5,305,0,0,5552,5553,5,375,0,0,5553,
        483,1,0,0,0,5554,5555,5,138,0,0,5555,5556,5,349,0,0,5556,5557,7,
        16,0,0,5557,5558,3,40,20,0,5558,485,1,0,0,0,5559,5560,5,46,0,0,5560,
        5561,5,189,0,0,5561,5563,3,310,155,0,5562,5564,5,36,0,0,5563,5562,
        1,0,0,0,5563,5564,1,0,0,0,5564,5565,1,0,0,0,5565,5569,3,646,323,
        0,5566,5568,3,128,64,0,5567,5566,1,0,0,0,5568,5571,1,0,0,0,5569,
        5567,1,0,0,0,5569,5570,1,0,0,0,5570,487,1,0,0,0,5571,5569,1,0,0,
        0,5572,5573,5,138,0,0,5573,5574,5,189,0,0,5574,5597,3,310,155,0,
        5575,5598,3,86,43,0,5576,5577,7,15,0,0,5577,5578,5,77,0,0,5578,5598,
        5,78,0,0,5579,5582,5,133,0,0,5580,5581,5,45,0,0,5581,5583,3,812,
        406,0,5582,5580,1,0,0,0,5582,5583,1,0,0,0,5583,5584,1,0,0,0,5584,
        5598,3,136,68,0,5585,5586,5,191,0,0,5586,5588,5,45,0,0,5587,5589,
        3,416,208,0,5588,5587,1,0,0,0,5588,5589,1,0,0,0,5589,5590,1,0,0,
        0,5590,5592,3,812,406,0,5591,5593,3,88,44,0,5592,5591,1,0,0,0,5592,
        5593,1,0,0,0,5593,5598,1,0,0,0,5594,5595,5,372,0,0,5595,5596,5,45,
        0,0,5596,5598,3,812,406,0,5597,5575,1,0,0,0,5597,5576,1,0,0,0,5597,
        5579,1,0,0,0,5597,5585,1,0,0,0,5597,5594,1,0,0,0,5598,489,1,0,0,
        0,5599,5600,5,138,0,0,5600,5601,5,355,0,0,5601,5602,5,325,0,0,5602,
        5603,5,185,0,0,5603,5604,3,310,155,0,5604,5605,3,278,139,0,5605,
        491,1,0,0,0,5606,5607,5,138,0,0,5607,5608,5,355,0,0,5608,5609,5,
        325,0,0,5609,5610,5,163,0,0,5610,5611,3,310,155,0,5611,5612,7,73,
        0,0,5612,5613,5,257,0,0,5613,5614,5,62,0,0,5614,5615,3,778,389,0,
        5615,5616,5,105,0,0,5616,5617,3,308,154,0,5617,5648,1,0,0,0,5618,
        5619,5,138,0,0,5619,5620,5,355,0,0,5620,5621,5,325,0,0,5621,5622,
        5,163,0,0,5622,5623,3,310,155,0,5623,5624,5,138,0,0,5624,5627,5,
        257,0,0,5625,5626,5,62,0,0,5626,5628,3,778,389,0,5627,5625,1,0,0,
        0,5627,5628,1,0,0,0,5628,5629,1,0,0,0,5629,5630,5,311,0,0,5630,5631,
        3,310,155,0,5631,5632,5,105,0,0,5632,5633,3,310,155,0,5633,5648,
        1,0,0,0,5634,5635,5,138,0,0,5635,5636,5,355,0,0,5636,5637,5,325,
        0,0,5637,5638,5,163,0,0,5638,5639,3,310,155,0,5639,5640,5,191,0,
        0,5640,5642,5,257,0,0,5641,5643,3,416,208,0,5642,5641,1,0,0,0,5642,
        5643,1,0,0,0,5643,5644,1,0,0,0,5644,5645,5,62,0,0,5645,5646,3,778,
        389,0,5646,5648,1,0,0,0,5647,5606,1,0,0,0,5647,5618,1,0,0,0,5647,
        5634,1,0,0,0,5648,493,1,0,0,0,5649,5651,5,46,0,0,5650,5652,5,53,
        0,0,5651,5650,1,0,0,0,5651,5652,1,0,0,0,5652,5653,1,0,0,0,5653,5654,
        5,168,0,0,5654,5655,3,310,155,0,5655,5656,5,62,0,0,5656,5657,3,802,
        401,0,5657,5658,5,94,0,0,5658,5659,3,802,401,0,5659,5660,5,64,0,
        0,5660,5661,3,310,155,0,5661,495,1,0,0,0,5662,5664,5,158,0,0,5663,
        5665,3,508,254,0,5664,5663,1,0,0,0,5664,5665,1,0,0,0,5665,5670,1,
        0,0,0,5666,5668,3,768,384,0,5667,5669,3,164,82,0,5668,5667,1,0,0,
        0,5668,5669,1,0,0,0,5669,5671,1,0,0,0,5670,5666,1,0,0,0,5670,5671,
        1,0,0,0,5671,5688,1,0,0,0,5672,5673,5,158,0,0,5673,5674,5,2,0,0,
        5674,5679,3,508,254,0,5675,5676,5,6,0,0,5676,5678,3,508,254,0,5677,
        5675,1,0,0,0,5678,5681,1,0,0,0,5679,5677,1,0,0,0,5679,5680,1,0,0,
        0,5680,5682,1,0,0,0,5681,5679,1,0,0,0,5682,5683,5,3,0,0,5683,5685,
        3,768,384,0,5684,5686,3,164,82,0,5685,5684,1,0,0,0,5685,5686,1,0,
        0,0,5686,5688,1,0,0,0,5687,5662,1,0,0,0,5687,5672,1,0,0,0,5688,497,
        1,0,0,0,5689,5705,5,370,0,0,5690,5692,5,113,0,0,5691,5690,1,0,0,
        0,5691,5692,1,0,0,0,5692,5694,1,0,0,0,5693,5695,5,112,0,0,5694,5693,
        1,0,0,0,5694,5695,1,0,0,0,5695,5697,1,0,0,0,5696,5698,3,508,254,
        0,5697,5696,1,0,0,0,5697,5698,1,0,0,0,5698,5700,1,0,0,0,5699,5701,
        3,502,251,0,5700,5699,1,0,0,0,5700,5701,1,0,0,0,5701,5706,1,0,0,
        0,5702,5704,3,518,259,0,5703,5702,1,0,0,0,5703,5704,1,0,0,0,5704,
        5706,1,0,0,0,5705,5691,1,0,0,0,5705,5703,1,0,0,0,5706,5708,1,0,0,
        0,5707,5709,3,512,256,0,5708,5707,1,0,0,0,5708,5709,1,0,0,0,5709,
        499,1,0,0,0,5710,5725,3,502,251,0,5711,5713,3,508,254,0,5712,5711,
        1,0,0,0,5712,5713,1,0,0,0,5713,5726,1,0,0,0,5714,5715,5,2,0,0,5715,
        5720,3,506,253,0,5716,5717,5,6,0,0,5717,5719,3,506,253,0,5718,5716,
        1,0,0,0,5719,5722,1,0,0,0,5720,5718,1,0,0,0,5720,5721,1,0,0,0,5721,
        5723,1,0,0,0,5722,5720,1,0,0,0,5723,5724,5,3,0,0,5724,5726,1,0,0,
        0,5725,5712,1,0,0,0,5725,5714,1,0,0,0,5726,5728,1,0,0,0,5727,5729,
        3,512,256,0,5728,5727,1,0,0,0,5728,5729,1,0,0,0,5729,501,1,0,0,0,
        5730,5731,7,74,0,0,5731,503,1,0,0,0,5732,5735,3,816,408,0,5733,5735,
        3,502,251,0,5734,5732,1,0,0,0,5734,5733,1,0,0,0,5735,5738,1,0,0,
        0,5736,5739,3,54,27,0,5737,5739,3,196,98,0,5738,5736,1,0,0,0,5738,
        5737,1,0,0,0,5738,5739,1,0,0,0,5739,505,1,0,0,0,5740,5742,7,75,0,
        0,5741,5743,7,76,0,0,5742,5741,1,0,0,0,5742,5743,1,0,0,0,5743,5750,
        1,0,0,0,5744,5747,5,548,0,0,5745,5748,3,196,98,0,5746,5748,3,802,
        401,0,5747,5745,1,0,0,0,5747,5746,1,0,0,0,5748,5750,1,0,0,0,5749,
        5740,1,0,0,0,5749,5744,1,0,0,0,5750,507,1,0,0,0,5751,5753,5,128,
        0,0,5752,5754,7,76,0,0,5753,5752,1,0,0,0,5753,5754,1,0,0,0,5754,
        509,1,0,0,0,5755,5757,3,768,384,0,5756,5758,3,138,69,0,5757,5756,
        1,0,0,0,5757,5758,1,0,0,0,5758,511,1,0,0,0,5759,5764,3,510,255,0,
        5760,5761,5,6,0,0,5761,5763,3,510,255,0,5762,5760,1,0,0,0,5763,5766,
        1,0,0,0,5764,5762,1,0,0,0,5764,5765,1,0,0,0,5765,513,1,0,0,0,5766,
        5764,1,0,0,0,5767,5778,5,203,0,0,5768,5779,3,518,259,0,5769,5771,
        5,128,0,0,5770,5769,1,0,0,0,5770,5771,1,0,0,0,5771,5779,1,0,0,0,
        5772,5774,3,502,251,0,5773,5775,3,508,254,0,5774,5773,1,0,0,0,5774,
        5775,1,0,0,0,5775,5777,1,0,0,0,5776,5772,1,0,0,0,5776,5777,1,0,0,
        0,5777,5779,1,0,0,0,5778,5768,1,0,0,0,5778,5770,1,0,0,0,5778,5776,
        1,0,0,0,5779,5780,1,0,0,0,5780,5781,3,516,258,0,5781,515,1,0,0,0,
        5782,5792,3,554,277,0,5783,5792,3,532,266,0,5784,5792,3,546,273,
        0,5785,5792,3,542,271,0,5786,5792,3,552,276,0,5787,5792,3,180,90,
        0,5788,5792,3,186,93,0,5789,5792,3,188,94,0,5790,5792,3,526,263,
        0,5791,5782,1,0,0,0,5791,5783,1,0,0,0,5791,5784,1,0,0,0,5791,5785,
        1,0,0,0,5791,5786,1,0,0,0,5791,5787,1,0,0,0,5791,5788,1,0,0,0,5791,
        5789,1,0,0,0,5791,5790,1,0,0,0,5792,517,1,0,0,0,5793,5794,5,2,0,
        0,5794,5799,3,504,252,0,5795,5796,5,6,0,0,5796,5798,3,504,252,0,
        5797,5795,1,0,0,0,5798,5801,1,0,0,0,5799,5797,1,0,0,0,5799,5800,
        1,0,0,0,5800,5802,1,0,0,0,5801,5799,1,0,0,0,5802,5803,5,3,0,0,5803,
        519,1,0,0,0,5804,5805,5,290,0,0,5805,5807,3,812,406,0,5806,5808,
        3,522,261,0,5807,5806,1,0,0,0,5807,5808,1,0,0,0,5808,5809,1,0,0,
        0,5809,5810,5,36,0,0,5810,5811,3,524,262,0,5811,521,1,0,0,0,5812,
        5813,5,2,0,0,5813,5818,3,646,323,0,5814,5815,5,6,0,0,5815,5817,3,
        646,323,0,5816,5814,1,0,0,0,5817,5820,1,0,0,0,5818,5816,1,0,0,0,
        5818,5819,1,0,0,0,5819,5821,1,0,0,0,5820,5818,1,0,0,0,5821,5822,
        5,3,0,0,5822,523,1,0,0,0,5823,5829,3,554,277,0,5824,5829,3,532,266,
        0,5825,5829,3,546,273,0,5826,5829,3,542,271,0,5827,5829,3,894,447,
        0,5828,5823,1,0,0,0,5828,5824,1,0,0,0,5828,5825,1,0,0,0,5828,5826,
        1,0,0,0,5828,5827,1,0,0,0,5829,525,1,0,0,0,5830,5831,5,202,0,0,5831,
        5833,3,812,406,0,5832,5834,3,528,264,0,5833,5832,1,0,0,0,5833,5834,
        1,0,0,0,5834,5854,1,0,0,0,5835,5837,5,46,0,0,5836,5838,3,116,58,
        0,5837,5836,1,0,0,0,5837,5838,1,0,0,0,5838,5839,1,0,0,0,5839,5841,
        5,92,0,0,5840,5842,3,288,144,0,5841,5840,1,0,0,0,5841,5842,1,0,0,
        0,5842,5843,1,0,0,0,5843,5844,3,182,91,0,5844,5845,5,36,0,0,5845,
        5846,5,202,0,0,5846,5848,3,812,406,0,5847,5849,3,528,264,0,5848,
        5847,1,0,0,0,5848,5849,1,0,0,0,5849,5851,1,0,0,0,5850,5852,3,184,
        92,0,5851,5850,1,0,0,0,5851,5852,1,0,0,0,5852,5854,1,0,0,0,5853,
        5830,1,0,0,0,5853,5835,1,0,0,0,5854,527,1,0,0,0,5855,5856,5,2,0,
        0,5856,5857,3,724,362,0,5857,5858,5,3,0,0,5858,529,1,0,0,0,5859,
        5861,5,177,0,0,5860,5862,5,290,0,0,5861,5860,1,0,0,0,5861,5862,1,
        0,0,0,5862,5865,1,0,0,0,5863,5866,3,812,406,0,5864,5866,5,30,0,0,
        5865,5863,1,0,0,0,5865,5864,1,0,0,0,5866,531,1,0,0,0,5867,5869,3,
        566,283,0,5868,5867,1,0,0,0,5868,5869,1,0,0,0,5869,5870,1,0,0,0,
        5870,5871,5,241,0,0,5871,5872,5,71,0,0,5872,5875,3,768,384,0,5873,
        5874,5,36,0,0,5874,5876,3,812,406,0,5875,5873,1,0,0,0,5875,5876,
        1,0,0,0,5876,5877,1,0,0,0,5877,5899,3,534,267,0,5878,5879,5,80,0,
        0,5879,5887,5,464,0,0,5880,5882,3,354,177,0,5881,5883,3,632,316,
        0,5882,5881,1,0,0,0,5882,5883,1,0,0,0,5883,5888,1,0,0,0,5884,5885,
        5,80,0,0,5885,5886,5,45,0,0,5886,5888,3,812,406,0,5887,5880,1,0,
        0,0,5887,5884,1,0,0,0,5887,5888,1,0,0,0,5888,5889,1,0,0,0,5889,5897,
        5,57,0,0,5890,5891,5,369,0,0,5891,5892,5,333,0,0,5892,5894,3,548,
        274,0,5893,5895,3,632,316,0,5894,5893,1,0,0,0,5894,5895,1,0,0,0,
        5895,5898,1,0,0,0,5896,5898,5,270,0,0,5897,5890,1,0,0,0,5897,5896,
        1,0,0,0,5898,5900,1,0,0,0,5899,5878,1,0,0,0,5899,5900,1,0,0,0,5900,
        5902,1,0,0,0,5901,5903,3,540,270,0,5902,5901,1,0,0,0,5902,5903,1,
        0,0,0,5903,533,1,0,0,0,5904,5905,5,2,0,0,5905,5906,3,536,268,0,5906,
        5907,5,3,0,0,5907,5909,1,0,0,0,5908,5904,1,0,0,0,5908,5909,1,0,0,
        0,5909,5913,1,0,0,0,5910,5911,5,463,0,0,5911,5912,7,77,0,0,5912,
        5914,5,450,0,0,5913,5910,1,0,0,0,5913,5914,1,0,0,0,5914,5917,1,0,
        0,0,5915,5918,3,904,452,0,5916,5918,3,554,277,0,5917,5915,1,0,0,
        0,5917,5916,1,0,0,0,5918,535,1,0,0,0,5919,5924,3,538,269,0,5920,
        5921,5,6,0,0,5921,5923,3,538,269,0,5922,5920,1,0,0,0,5923,5926,1,
        0,0,0,5924,5922,1,0,0,0,5924,5925,1,0,0,0,5925,537,1,0,0,0,5926,
        5924,1,0,0,0,5927,5928,3,794,397,0,5928,5929,3,748,374,0,5929,539,
        1,0,0,0,5930,5931,5,87,0,0,5931,5932,3,750,375,0,5932,541,1,0,0,
        0,5933,5935,3,566,283,0,5934,5933,1,0,0,0,5934,5935,1,0,0,0,5935,
        5936,1,0,0,0,5936,5937,5,182,0,0,5937,5938,5,64,0,0,5938,5941,3,
        624,312,0,5939,5940,5,100,0,0,5940,5942,3,606,303,0,5941,5939,1,
        0,0,0,5941,5942,1,0,0,0,5942,5944,1,0,0,0,5943,5945,3,634,317,0,
        5944,5943,1,0,0,0,5944,5945,1,0,0,0,5945,5947,1,0,0,0,5946,5948,
        3,540,270,0,5947,5946,1,0,0,0,5947,5948,1,0,0,0,5948,543,1,0,0,0,
        5949,5951,5,256,0,0,5950,5952,5,92,0,0,5951,5950,1,0,0,0,5951,5952,
        1,0,0,0,5952,5953,1,0,0,0,5953,5968,3,622,311,0,5954,5965,5,68,0,
        0,5955,5956,7,78,0,0,5956,5966,7,79,0,0,5957,5962,5,334,0,0,5958,
        5959,5,369,0,0,5959,5963,5,201,0,0,5960,5961,5,414,0,0,5961,5963,
        5,201,0,0,5962,5958,1,0,0,0,5962,5960,1,0,0,0,5962,5963,1,0,0,0,
        5963,5966,1,0,0,0,5964,5966,5,201,0,0,5965,5955,1,0,0,0,5965,5957,
        1,0,0,0,5965,5964,1,0,0,0,5966,5967,1,0,0,0,5967,5969,5,263,0,0,
        5968,5954,1,0,0,0,5968,5969,1,0,0,0,5969,5971,1,0,0,0,5970,5972,
        5,272,0,0,5971,5970,1,0,0,0,5971,5972,1,0,0,0,5972,545,1,0,0,0,5973,
        5975,3,566,283,0,5974,5973,1,0,0,0,5974,5975,1,0,0,0,5975,5976,1,
        0,0,0,5976,5977,5,369,0,0,5977,5978,3,624,312,0,5978,5979,5,333,
        0,0,5979,5981,3,548,274,0,5980,5982,3,604,302,0,5981,5980,1,0,0,
        0,5981,5982,1,0,0,0,5982,5984,1,0,0,0,5983,5985,3,634,317,0,5984,
        5983,1,0,0,0,5984,5985,1,0,0,0,5985,5987,1,0,0,0,5986,5988,3,540,
        270,0,5987,5986,1,0,0,0,5987,5988,1,0,0,0,5988,547,1,0,0,0,5989,
        5994,3,550,275,0,5990,5991,5,6,0,0,5991,5993,3,550,275,0,5992,5990,
        1,0,0,0,5993,5996,1,0,0,0,5994,5992,1,0,0,0,5994,5995,1,0,0,0,5995,
        549,1,0,0,0,5996,5994,1,0,0,0,5997,5998,3,538,269,0,5998,5999,5,
        10,0,0,5999,6000,3,668,334,0,6000,6016,1,0,0,0,6001,6002,5,2,0,0,
        6002,6003,3,536,268,0,6003,6004,5,3,0,0,6004,6013,5,10,0,0,6005,
        6007,5,414,0,0,6006,6005,1,0,0,0,6006,6007,1,0,0,0,6007,6008,1,0,
        0,0,6008,6014,3,668,334,0,6009,6010,5,2,0,0,6010,6011,3,560,280,
        0,6011,6012,5,3,0,0,6012,6014,1,0,0,0,6013,6006,1,0,0,0,6013,6009,
        1,0,0,0,6014,6016,1,0,0,0,6015,5997,1,0,0,0,6015,6001,1,0,0,0,6016,
        551,1,0,0,0,6017,6018,5,178,0,0,6018,6027,3,812,406,0,6019,6021,
        5,269,0,0,6020,6019,1,0,0,0,6020,6021,1,0,0,0,6021,6022,1,0,0,0,
        6022,6026,5,324,0,0,6023,6026,5,107,0,0,6024,6026,5,240,0,0,6025,
        6020,1,0,0,0,6025,6023,1,0,0,0,6025,6024,1,0,0,0,6026,6029,1,0,0,
        0,6027,6025,1,0,0,0,6027,6028,1,0,0,0,6028,6030,1,0,0,0,6029,6027,
        1,0,0,0,6030,6033,5,172,0,0,6031,6032,7,27,0,0,6032,6034,5,217,0,
        0,6033,6031,1,0,0,0,6033,6034,1,0,0,0,6034,6035,1,0,0,0,6035,6036,
        5,62,0,0,6036,6037,3,554,277,0,6037,553,1,0,0,0,6038,6041,3,558,
        279,0,6039,6041,3,556,278,0,6040,6038,1,0,0,0,6040,6039,1,0,0,0,
        6041,555,1,0,0,0,6042,6045,5,2,0,0,6043,6046,3,558,279,0,6044,6046,
        3,556,278,0,6045,6043,1,0,0,0,6045,6044,1,0,0,0,6046,6047,1,0,0,
        0,6047,6048,5,3,0,0,6048,557,1,0,0,0,6049,6051,3,566,283,0,6050,
        6049,1,0,0,0,6050,6051,1,0,0,0,6051,6052,1,0,0,0,6052,6054,3,560,
        280,0,6053,6055,3,580,290,0,6054,6053,1,0,0,0,6054,6055,1,0,0,0,
        6055,6064,1,0,0,0,6056,6058,3,600,300,0,6057,6059,3,584,292,0,6058,
        6057,1,0,0,0,6058,6059,1,0,0,0,6059,6065,1,0,0,0,6060,6062,3,584,
        292,0,6061,6063,3,600,300,0,6062,6061,1,0,0,0,6062,6063,1,0,0,0,
        6063,6065,1,0,0,0,6064,6056,1,0,0,0,6064,6060,1,0,0,0,6064,6065,
        1,0,0,0,6065,559,1,0,0,0,6066,6069,3,562,281,0,6067,6069,3,556,278,
        0,6068,6066,1,0,0,0,6068,6067,1,0,0,0,6069,561,1,0,0,0,6070,6080,
        5,88,0,0,6071,6073,5,30,0,0,6072,6071,1,0,0,0,6072,6073,1,0,0,0,
        6073,6075,1,0,0,0,6074,6076,3,574,287,0,6075,6074,1,0,0,0,6075,6076,
        1,0,0,0,6076,6081,1,0,0,0,6077,6079,3,578,289,0,6078,6077,1,0,0,
        0,6078,6079,1,0,0,0,6079,6081,1,0,0,0,6080,6072,1,0,0,0,6080,6078,
        1,0,0,0,6081,6082,1,0,0,0,6082,6093,3,924,462,0,6083,6093,3,602,
        301,0,6084,6085,5,92,0,0,6085,6093,3,618,309,0,6086,6087,3,556,278,
        0,6087,6090,3,564,282,0,6088,6091,3,562,281,0,6089,6091,3,556,278,
        0,6090,6088,1,0,0,0,6090,6089,1,0,0,0,6091,6093,1,0,0,0,6092,6070,
        1,0,0,0,6092,6083,1,0,0,0,6092,6084,1,0,0,0,6092,6086,1,0,0,0,6093,
        6101,1,0,0,0,6094,6097,3,564,282,0,6095,6098,3,562,281,0,6096,6098,
        3,556,278,0,6097,6095,1,0,0,0,6097,6096,1,0,0,0,6098,6100,1,0,0,
        0,6099,6094,1,0,0,0,6100,6103,1,0,0,0,6101,6099,1,0,0,0,6101,6102,
        1,0,0,0,6102,563,1,0,0,0,6103,6101,1,0,0,0,6104,6106,7,80,0,0,6105,
        6107,7,81,0,0,6106,6105,1,0,0,0,6106,6107,1,0,0,0,6107,565,1,0,0,
        0,6108,6110,5,105,0,0,6109,6111,5,303,0,0,6110,6109,1,0,0,0,6110,
        6111,1,0,0,0,6111,6112,1,0,0,0,6112,6117,3,568,284,0,6113,6114,5,
        6,0,0,6114,6116,3,568,284,0,6115,6113,1,0,0,0,6116,6119,1,0,0,0,
        6117,6115,1,0,0,0,6117,6118,1,0,0,0,6118,567,1,0,0,0,6119,6117,1,
        0,0,0,6120,6122,3,812,406,0,6121,6123,3,138,69,0,6122,6121,1,0,0,
        0,6122,6123,1,0,0,0,6123,6124,1,0,0,0,6124,6129,5,36,0,0,6125,6127,
        5,77,0,0,6126,6125,1,0,0,0,6126,6127,1,0,0,0,6127,6128,1,0,0,0,6128,
        6130,5,259,0,0,6129,6126,1,0,0,0,6129,6130,1,0,0,0,6130,6131,1,0,
        0,0,6131,6132,5,2,0,0,6132,6133,3,524,262,0,6133,6135,5,3,0,0,6134,
        6136,3,570,285,0,6135,6134,1,0,0,0,6135,6136,1,0,0,0,6136,6138,1,
        0,0,0,6137,6139,3,572,286,0,6138,6137,1,0,0,0,6138,6139,1,0,0,0,
        6139,569,1,0,0,0,6140,6141,5,325,0,0,6141,6142,7,82,0,0,6142,6143,
        5,207,0,0,6143,6144,5,147,0,0,6144,6145,3,142,71,0,6145,6146,5,333,
        0,0,6146,6147,3,794,397,0,6147,571,1,0,0,0,6148,6149,5,173,0,0,6149,
        6150,3,142,71,0,6150,6151,5,333,0,0,6151,6157,3,794,397,0,6152,6153,
        5,94,0,0,6153,6154,3,812,406,0,6154,6155,5,53,0,0,6155,6156,3,812,
        406,0,6156,6158,1,0,0,0,6157,6152,1,0,0,0,6157,6158,1,0,0,0,6158,
        6159,1,0,0,0,6159,6160,5,100,0,0,6160,6161,3,794,397,0,6161,573,
        1,0,0,0,6162,6168,5,71,0,0,6163,6165,5,346,0,0,6164,6163,1,0,0,0,
        6164,6165,1,0,0,0,6165,6166,1,0,0,0,6166,6169,3,576,288,0,6167,6169,
        3,724,362,0,6168,6164,1,0,0,0,6168,6167,1,0,0,0,6169,575,1,0,0,0,
        6170,6172,7,21,0,0,6171,6170,1,0,0,0,6171,6172,1,0,0,0,6172,6173,
        1,0,0,0,6173,6175,7,22,0,0,6174,6176,5,92,0,0,6175,6174,1,0,0,0,
        6175,6176,1,0,0,0,6176,6177,1,0,0,0,6177,6186,3,766,383,0,6178,6180,
        5,367,0,0,6179,6178,1,0,0,0,6179,6180,1,0,0,0,6180,6182,1,0,0,0,
        6181,6183,5,92,0,0,6182,6181,1,0,0,0,6182,6183,1,0,0,0,6183,6184,
        1,0,0,0,6184,6186,3,766,383,0,6185,6171,1,0,0,0,6185,6179,1,0,0,
        0,6186,577,1,0,0,0,6187,6190,5,56,0,0,6188,6189,5,80,0,0,6189,6191,
        3,528,264,0,6190,6188,1,0,0,0,6190,6191,1,0,0,0,6191,579,1,0,0,0,
        6192,6193,5,83,0,0,6193,6194,5,147,0,0,6194,6199,3,582,291,0,6195,
        6196,5,6,0,0,6196,6198,3,582,291,0,6197,6195,1,0,0,0,6198,6201,1,
        0,0,0,6199,6197,1,0,0,0,6199,6200,1,0,0,0,6200,581,1,0,0,0,6201,
        6199,1,0,0,0,6202,6206,3,728,364,0,6203,6204,5,100,0,0,6204,6207,
        3,720,360,0,6205,6207,7,56,0,0,6206,6203,1,0,0,0,6206,6205,1,0,0,
        0,6206,6207,1,0,0,0,6207,6210,1,0,0,0,6208,6209,5,273,0,0,6209,6211,
        7,57,0,0,6210,6208,1,0,0,0,6210,6211,1,0,0,0,6211,583,1,0,0,0,6212,
        6214,3,590,295,0,6213,6215,3,588,294,0,6214,6213,1,0,0,0,6214,6215,
        1,0,0,0,6215,6224,1,0,0,0,6216,6219,3,586,293,0,6217,6219,3,588,
        294,0,6218,6216,1,0,0,0,6218,6217,1,0,0,0,6219,6221,1,0,0,0,6220,
        6222,3,590,295,0,6221,6220,1,0,0,0,6221,6222,1,0,0,0,6222,6224,1,
        0,0,0,6223,6212,1,0,0,0,6223,6218,1,0,0,0,6224,585,1,0,0,0,6225,
        6228,5,74,0,0,6226,6229,3,668,334,0,6227,6229,5,30,0,0,6228,6226,
        1,0,0,0,6228,6227,1,0,0,0,6229,6232,1,0,0,0,6230,6231,5,6,0,0,6231,
        6233,3,668,334,0,6232,6230,1,0,0,0,6232,6233,1,0,0,0,6233,587,1,
        0,0,0,6234,6235,5,61,0,0,6235,6237,7,83,0,0,6236,6238,3,592,296,
        0,6237,6236,1,0,0,0,6237,6238,1,0,0,0,6238,6239,1,0,0,0,6239,6243,
        7,84,0,0,6240,6244,5,81,0,0,6241,6242,5,105,0,0,6242,6244,5,467,
        0,0,6243,6240,1,0,0,0,6243,6241,1,0,0,0,6244,589,1,0,0,0,6245,6250,
        5,79,0,0,6246,6247,3,592,296,0,6247,6248,7,84,0,0,6248,6251,1,0,
        0,0,6249,6251,3,668,334,0,6250,6246,1,0,0,0,6250,6249,1,0,0,0,6251,
        591,1,0,0,0,6252,6253,7,30,0,0,6253,6256,7,85,0,0,6254,6256,3,676,
        338,0,6255,6252,1,0,0,0,6255,6254,1,0,0,0,6256,593,1,0,0,0,6257,
        6258,5,66,0,0,6258,6260,5,147,0,0,6259,6261,7,81,0,0,6260,6259,1,
        0,0,0,6260,6261,1,0,0,0,6261,6262,1,0,0,0,6262,6263,3,596,298,0,
        6263,595,1,0,0,0,6264,6269,3,598,299,0,6265,6266,5,6,0,0,6266,6268,
        3,598,299,0,6267,6265,1,0,0,0,6268,6271,1,0,0,0,6269,6267,1,0,0,
        0,6269,6270,1,0,0,0,6270,597,1,0,0,0,6271,6269,1,0,0,0,6272,6296,
        3,728,364,0,6273,6274,5,2,0,0,6274,6296,5,3,0,0,6275,6277,7,86,0,
        0,6276,6275,1,0,0,0,6276,6277,1,0,0,0,6277,6278,1,0,0,0,6278,6279,
        5,2,0,0,6279,6284,3,728,364,0,6280,6281,5,6,0,0,6281,6283,3,728,
        364,0,6282,6280,1,0,0,0,6283,6286,1,0,0,0,6284,6282,1,0,0,0,6284,
        6285,1,0,0,0,6285,6287,1,0,0,0,6286,6284,1,0,0,0,6287,6288,5,3,0,
        0,6288,6296,1,0,0,0,6289,6290,5,470,0,0,6290,6291,5,471,0,0,6291,
        6292,5,2,0,0,6292,6293,3,596,298,0,6293,6294,5,3,0,0,6294,6296,1,
        0,0,0,6295,6272,1,0,0,0,6295,6273,1,0,0,0,6295,6276,1,0,0,0,6295,
        6289,1,0,0,0,6296,599,1,0,0,0,6297,6307,5,62,0,0,6298,6299,5,269,
        0,0,6299,6301,5,245,0,0,6300,6298,1,0,0,0,6300,6301,1,0,0,0,6301,
        6302,1,0,0,0,6302,6308,5,369,0,0,6303,6305,5,245,0,0,6304,6303,1,
        0,0,0,6304,6305,1,0,0,0,6305,6306,1,0,0,0,6306,6308,5,334,0,0,6307,
        6300,1,0,0,0,6307,6304,1,0,0,0,6308,6311,1,0,0,0,6309,6310,5,275,
        0,0,6310,6312,3,754,377,0,6311,6309,1,0,0,0,6311,6312,1,0,0,0,6312,
        6316,1,0,0,0,6313,6317,5,272,0,0,6314,6315,5,465,0,0,6315,6317,5,
        466,0,0,6316,6313,1,0,0,0,6316,6314,1,0,0,0,6316,6317,1,0,0,0,6317,
        6319,1,0,0,0,6318,6297,1,0,0,0,6319,6320,1,0,0,0,6320,6318,1,0,0,
        0,6320,6321,1,0,0,0,6321,6326,1,0,0,0,6322,6323,5,62,0,0,6323,6324,
        5,300,0,0,6324,6326,5,81,0,0,6325,6318,1,0,0,0,6325,6322,1,0,0,0,
        6326,601,1,0,0,0,6327,6328,5,422,0,0,6328,6333,3,528,264,0,6329,
        6330,5,6,0,0,6330,6332,3,528,264,0,6331,6329,1,0,0,0,6332,6335,1,
        0,0,0,6333,6331,1,0,0,0,6333,6334,1,0,0,0,6334,603,1,0,0,0,6335,
        6333,1,0,0,0,6336,6337,5,64,0,0,6337,6338,3,606,303,0,6338,605,1,
        0,0,0,6339,6344,3,608,304,0,6340,6341,5,6,0,0,6341,6343,3,608,304,
        0,6342,6340,1,0,0,0,6343,6346,1,0,0,0,6344,6342,1,0,0,0,6344,6345,
        1,0,0,0,6345,607,1,0,0,0,6346,6344,1,0,0,0,6347,6362,3,618,309,0,
        6348,6350,5,81,0,0,6349,6348,1,0,0,0,6349,6350,1,0,0,0,6350,6351,
        1,0,0,0,6351,6353,3,772,386,0,6352,6354,5,9,0,0,6353,6352,1,0,0,
        0,6353,6354,1,0,0,0,6354,6356,1,0,0,0,6355,6357,3,142,71,0,6356,
        6355,1,0,0,0,6356,6357,1,0,0,0,6357,6359,1,0,0,0,6358,6360,3,632,
        316,0,6359,6358,1,0,0,0,6359,6360,1,0,0,0,6360,6362,1,0,0,0,6361,
        6347,1,0,0,0,6361,6349,1,0,0,0,6362,6364,1,0,0,0,6363,6365,3,610,
        305,0,6364,6363,1,0,0,0,6364,6365,1,0,0,0,6365,6367,1,0,0,0,6366,
        6368,3,626,313,0,6367,6366,1,0,0,0,6367,6368,1,0,0,0,6368,6411,1,
        0,0,0,6369,6371,5,72,0,0,6370,6369,1,0,0,0,6370,6371,1,0,0,0,6371,
        6384,1,0,0,0,6372,6374,3,640,320,0,6373,6375,3,610,305,0,6374,6373,
        1,0,0,0,6374,6375,1,0,0,0,6375,6385,1,0,0,0,6376,6378,3,628,314,
        0,6377,6379,3,612,306,0,6378,6377,1,0,0,0,6378,6379,1,0,0,0,6379,
        6385,1,0,0,0,6380,6382,3,556,278,0,6381,6383,3,610,305,0,6382,6381,
        1,0,0,0,6382,6383,1,0,0,0,6383,6385,1,0,0,0,6384,6372,1,0,0,0,6384,
        6376,1,0,0,0,6384,6380,1,0,0,0,6385,6411,1,0,0,0,6386,6387,5,2,0,
        0,6387,6404,3,608,304,0,6388,6389,5,110,0,0,6389,6390,5,118,0,0,
        6390,6405,3,608,304,0,6391,6393,5,121,0,0,6392,6394,3,614,307,0,
        6393,6392,1,0,0,0,6393,6394,1,0,0,0,6394,6395,1,0,0,0,6395,6396,
        5,118,0,0,6396,6405,3,608,304,0,6397,6399,3,614,307,0,6398,6397,
        1,0,0,0,6398,6399,1,0,0,0,6399,6400,1,0,0,0,6400,6401,5,118,0,0,
        6401,6402,3,608,304,0,6402,6403,3,616,308,0,6403,6405,1,0,0,0,6404,
        6388,1,0,0,0,6404,6391,1,0,0,0,6404,6398,1,0,0,0,6404,6405,1,0,0,
        0,6405,6406,1,0,0,0,6406,6408,5,3,0,0,6407,6409,3,610,305,0,6408,
        6407,1,0,0,0,6408,6409,1,0,0,0,6409,6411,1,0,0,0,6410,6361,1,0,0,
        0,6410,6370,1,0,0,0,6410,6386,1,0,0,0,6411,6430,1,0,0,0,6412,6413,
        5,110,0,0,6413,6414,5,118,0,0,6414,6429,3,608,304,0,6415,6417,5,
        121,0,0,6416,6418,3,614,307,0,6417,6416,1,0,0,0,6417,6418,1,0,0,
        0,6418,6419,1,0,0,0,6419,6420,5,118,0,0,6420,6429,3,608,304,0,6421,
        6423,3,614,307,0,6422,6421,1,0,0,0,6422,6423,1,0,0,0,6423,6424,1,
        0,0,0,6424,6425,5,118,0,0,6425,6426,3,608,304,0,6426,6427,3,616,
        308,0,6427,6429,1,0,0,0,6428,6412,1,0,0,0,6428,6415,1,0,0,0,6428,
        6422,1,0,0,0,6429,6432,1,0,0,0,6430,6428,1,0,0,0,6430,6431,1,0,0,
        0,6431,609,1,0,0,0,6432,6430,1,0,0,0,6433,6435,5,36,0,0,6434,6433,
        1,0,0,0,6434,6435,1,0,0,0,6435,6436,1,0,0,0,6436,6441,3,812,406,
        0,6437,6438,5,2,0,0,6438,6439,3,778,389,0,6439,6440,5,3,0,0,6440,
        6442,1,0,0,0,6441,6437,1,0,0,0,6441,6442,1,0,0,0,6442,611,1,0,0,
        0,6443,6456,3,610,305,0,6444,6446,5,36,0,0,6445,6447,3,812,406,0,
        6446,6445,1,0,0,0,6446,6447,1,0,0,0,6447,6450,1,0,0,0,6448,6450,
        3,812,406,0,6449,6444,1,0,0,0,6449,6448,1,0,0,0,6450,6451,1,0,0,
        0,6451,6452,5,2,0,0,6452,6453,3,636,318,0,6453,6454,5,3,0,0,6454,
        6456,1,0,0,0,6455,6443,1,0,0,0,6455,6449,1,0,0,0,6456,613,1,0,0,
        0,6457,6459,7,87,0,0,6458,6460,5,123,0,0,6459,6458,1,0,0,0,6459,
        6460,1,0,0,0,6460,615,1,0,0,0,6461,6462,5,100,0,0,6462,6466,3,138,
        69,0,6463,6464,5,80,0,0,6464,6466,3,668,334,0,6465,6461,1,0,0,0,
        6465,6463,1,0,0,0,6466,617,1,0,0,0,6467,6483,3,316,158,0,6468,6474,
        5,81,0,0,6469,6475,3,768,384,0,6470,6471,5,2,0,0,6471,6472,3,768,
        384,0,6472,6473,5,3,0,0,6473,6475,1,0,0,0,6474,6469,1,0,0,0,6474,
        6470,1,0,0,0,6475,6483,1,0,0,0,6476,6477,5,68,0,0,6477,6480,5,323,
        0,0,6478,6481,3,784,392,0,6479,6481,5,111,0,0,6480,6478,1,0,0,0,
        6480,6479,1,0,0,0,6481,6483,1,0,0,0,6482,6467,1,0,0,0,6482,6468,
        1,0,0,0,6482,6476,1,0,0,0,6483,619,1,0,0,0,6484,6485,5,92,0,0,6485,
        6487,3,316,158,0,6486,6488,3,138,69,0,6487,6486,1,0,0,0,6487,6488,
        1,0,0,0,6488,6490,1,0,0,0,6489,6491,3,632,316,0,6490,6489,1,0,0,
        0,6490,6491,1,0,0,0,6491,6509,1,0,0,0,6492,6493,5,92,0,0,6493,6499,
        5,81,0,0,6494,6500,3,768,384,0,6495,6496,5,2,0,0,6496,6497,3,768,
        384,0,6497,6498,5,3,0,0,6498,6500,1,0,0,0,6499,6494,1,0,0,0,6499,
        6495,1,0,0,0,6500,6509,1,0,0,0,6501,6502,5,350,0,0,6502,6503,5,68,
        0,0,6503,6506,5,323,0,0,6504,6507,3,784,392,0,6505,6507,5,111,0,
        0,6506,6504,1,0,0,0,6506,6505,1,0,0,0,6507,6509,1,0,0,0,6508,6484,
        1,0,0,0,6508,6492,1,0,0,0,6508,6501,1,0,0,0,6509,621,1,0,0,0,6510,
        6515,3,618,309,0,6511,6512,5,6,0,0,6512,6514,3,618,309,0,6513,6511,
        1,0,0,0,6514,6517,1,0,0,0,6515,6513,1,0,0,0,6515,6516,1,0,0,0,6516,
        623,1,0,0,0,6517,6515,1,0,0,0,6518,6523,3,618,309,0,6519,6521,5,
        36,0,0,6520,6519,1,0,0,0,6520,6521,1,0,0,0,6521,6522,1,0,0,0,6522,
        6524,3,812,406,0,6523,6520,1,0,0,0,6523,6524,1,0,0,0,6524,625,1,
        0,0,0,6525,6526,5,472,0,0,6526,6527,3,800,400,0,6527,6533,3,528,
        264,0,6528,6529,5,310,0,0,6529,6530,5,2,0,0,6530,6531,3,668,334,
        0,6531,6532,5,3,0,0,6532,6534,1,0,0,0,6533,6528,1,0,0,0,6533,6534,
        1,0,0,0,6534,627,1,0,0,0,6535,6550,3,682,341,0,6536,6537,5,320,0,
        0,6537,6538,5,64,0,0,6538,6539,5,2,0,0,6539,6544,3,630,315,0,6540,
        6541,5,6,0,0,6541,6543,3,630,315,0,6542,6540,1,0,0,0,6543,6546,1,
        0,0,0,6544,6542,1,0,0,0,6544,6545,1,0,0,0,6545,6547,1,0,0,0,6546,
        6544,1,0,0,0,6547,6548,5,3,0,0,6548,6550,1,0,0,0,6549,6535,1,0,0,
        0,6549,6536,1,0,0,0,6550,6553,1,0,0,0,6551,6552,5,105,0,0,6552,6554,
        5,473,0,0,6553,6551,1,0,0,0,6553,6554,1,0,0,0,6554,629,1,0,0,0,6555,
        6561,3,682,341,0,6556,6557,5,36,0,0,6557,6558,5,2,0,0,6558,6559,
        3,636,318,0,6559,6560,5,3,0,0,6560,6562,1,0,0,0,6561,6556,1,0,0,
        0,6561,6562,1,0,0,0,6562,631,1,0,0,0,6563,6564,5,103,0,0,6564,6565,
        3,728,364,0,6565,633,1,0,0,0,6566,6571,5,103,0,0,6567,6568,5,434,
        0,0,6568,6569,5,275,0,0,6569,6572,3,812,406,0,6570,6572,3,668,334,
        0,6571,6567,1,0,0,0,6571,6570,1,0,0,0,6572,635,1,0,0,0,6573,6578,
        3,638,319,0,6574,6575,5,6,0,0,6575,6577,3,638,319,0,6576,6574,1,
        0,0,0,6577,6580,1,0,0,0,6578,6576,1,0,0,0,6578,6579,1,0,0,0,6579,
        637,1,0,0,0,6580,6578,1,0,0,0,6581,6582,3,812,406,0,6582,6584,3,
        646,323,0,6583,6585,3,90,45,0,6584,6583,1,0,0,0,6584,6585,1,0,0,
        0,6585,639,1,0,0,0,6586,6587,5,474,0,0,6587,6601,5,2,0,0,6588,6589,
        5,476,0,0,6589,6590,5,2,0,0,6590,6595,3,644,322,0,6591,6592,5,6,
        0,0,6592,6594,3,644,322,0,6593,6591,1,0,0,0,6594,6597,1,0,0,0,6595,
        6593,1,0,0,0,6595,6596,1,0,0,0,6596,6598,1,0,0,0,6597,6595,1,0,0,
        0,6598,6599,5,3,0,0,6599,6600,5,6,0,0,6600,6602,1,0,0,0,6601,6588,
        1,0,0,0,6601,6602,1,0,0,0,6602,6603,1,0,0,0,6603,6604,3,676,338,
        0,6604,6605,3,692,346,0,6605,6606,5,475,0,0,6606,6611,3,642,321,
        0,6607,6608,5,6,0,0,6608,6610,3,642,321,0,6609,6607,1,0,0,0,6610,
        6613,1,0,0,0,6611,6609,1,0,0,0,6611,6612,1,0,0,0,6612,6614,1,0,0,
        0,6613,6611,1,0,0,0,6614,6615,5,3,0,0,6615,641,1,0,0,0,6616,6635,
        3,812,406,0,6617,6631,3,646,323,0,6618,6621,5,53,0,0,6619,6621,3,
        820,410,0,6620,6618,1,0,0,0,6620,6619,1,0,0,0,6621,6622,1,0,0,0,
        6622,6628,3,668,334,0,6623,6625,5,77,0,0,6624,6623,1,0,0,0,6624,
        6625,1,0,0,0,6625,6626,1,0,0,0,6626,6628,5,78,0,0,6627,6620,1,0,
        0,0,6627,6624,1,0,0,0,6628,6629,1,0,0,0,6629,6627,1,0,0,0,6629,6630,
        1,0,0,0,6630,6632,1,0,0,0,6631,6627,1,0,0,0,6631,6632,1,0,0,0,6632,
        6636,1,0,0,0,6633,6634,5,62,0,0,6634,6636,5,473,0,0,6635,6617,1,
        0,0,0,6635,6633,1,0,0,0,6636,643,1,0,0,0,6637,6638,3,676,338,0,6638,
        6639,5,36,0,0,6639,6640,3,818,409,0,6640,6644,1,0,0,0,6641,6642,
        5,53,0,0,6642,6644,3,676,338,0,6643,6637,1,0,0,0,6643,6641,1,0,0,
        0,6644,645,1,0,0,0,6645,6647,5,415,0,0,6646,6645,1,0,0,0,6646,6647,
        1,0,0,0,6647,6648,1,0,0,0,6648,6665,3,648,324,0,6649,6651,5,4,0,
        0,6650,6652,5,574,0,0,6651,6650,1,0,0,0,6651,6652,1,0,0,0,6652,6653,
        1,0,0,0,6653,6655,5,5,0,0,6654,6649,1,0,0,0,6655,6658,1,0,0,0,6656,
        6654,1,0,0,0,6656,6657,1,0,0,0,6657,6666,1,0,0,0,6658,6656,1,0,0,
        0,6659,6663,5,35,0,0,6660,6661,5,4,0,0,6661,6662,5,574,0,0,6662,
        6664,5,5,0,0,6663,6660,1,0,0,0,6663,6664,1,0,0,0,6664,6666,1,0,0,
        0,6665,6656,1,0,0,0,6665,6659,1,0,0,0,6666,6672,1,0,0,0,6667,6668,
        3,774,387,0,6668,6669,5,27,0,0,6669,6670,7,88,0,0,6670,6672,1,0,
        0,0,6671,6646,1,0,0,0,6671,6667,1,0,0,0,6672,647,1,0,0,0,6673,6675,
        3,814,407,0,6674,6676,3,312,156,0,6675,6674,1,0,0,0,6675,6676,1,
        0,0,0,6676,6678,1,0,0,0,6677,6679,3,528,264,0,6678,6677,1,0,0,0,
        6678,6679,1,0,0,0,6679,6689,1,0,0,0,6680,6689,3,650,325,0,6681,6686,
        5,403,0,0,6682,6684,3,662,331,0,6683,6682,1,0,0,0,6683,6684,1,0,
        0,0,6684,6687,1,0,0,0,6685,6687,3,654,327,0,6686,6683,1,0,0,0,6686,
        6685,1,0,0,0,6687,6689,1,0,0,0,6688,6673,1,0,0,0,6688,6680,1,0,0,
        0,6688,6681,1,0,0,0,6689,649,1,0,0,0,6690,6695,3,652,326,0,6691,
        6695,3,656,328,0,6692,6695,3,658,329,0,6693,6695,3,660,330,0,6694,
        6690,1,0,0,0,6694,6691,1,0,0,0,6694,6692,1,0,0,0,6694,6693,1,0,0,
        0,6695,651,1,0,0,0,6696,6713,5,401,0,0,6697,6713,5,402,0,0,6698,
        6713,5,416,0,0,6699,6713,5,388,0,0,6700,6713,5,413,0,0,6701,6703,
        5,398,0,0,6702,6704,3,654,327,0,6703,6702,1,0,0,0,6703,6704,1,0,
        0,0,6704,6713,1,0,0,0,6705,6706,5,190,0,0,6706,6713,5,412,0,0,6707,
        6709,7,89,0,0,6708,6710,3,528,264,0,6709,6708,1,0,0,0,6709,6710,
        1,0,0,0,6710,6713,1,0,0,0,6711,6713,5,390,0,0,6712,6696,1,0,0,0,
        6712,6697,1,0,0,0,6712,6698,1,0,0,0,6712,6699,1,0,0,0,6712,6700,
        1,0,0,0,6712,6701,1,0,0,0,6712,6705,1,0,0,0,6712,6707,1,0,0,0,6712,
        6711,1,0,0,0,6713,653,1,0,0,0,6714,6715,5,2,0,0,6715,6716,5,574,
        0,0,6716,6717,5,3,0,0,6717,655,1,0,0,0,6718,6720,5,389,0,0,6719,
        6721,5,374,0,0,6720,6719,1,0,0,0,6720,6721,1,0,0,0,6721,6723,1,0,
        0,0,6722,6724,3,528,264,0,6723,6722,1,0,0,0,6723,6724,1,0,0,0,6724,
        657,1,0,0,0,6725,6727,7,90,0,0,6726,6728,5,374,0,0,6727,6726,1,0,
        0,0,6727,6728,1,0,0,0,6728,6736,1,0,0,0,6729,6736,5,423,0,0,6730,
        6731,5,405,0,0,6731,6733,7,91,0,0,6732,6734,5,374,0,0,6733,6732,
        1,0,0,0,6733,6734,1,0,0,0,6734,6736,1,0,0,0,6735,6725,1,0,0,0,6735,
        6729,1,0,0,0,6735,6730,1,0,0,0,6736,6738,1,0,0,0,6737,6739,3,654,
        327,0,6738,6737,1,0,0,0,6738,6739,1,0,0,0,6739,659,1,0,0,0,6740,
        6742,7,92,0,0,6741,6743,3,654,327,0,6742,6741,1,0,0,0,6742,6743,
        1,0,0,0,6743,6747,1,0,0,0,6744,6745,7,27,0,0,6745,6746,5,418,0,0,
        6746,6748,5,386,0,0,6747,6744,1,0,0,0,6747,6748,1,0,0,0,6748,661,
        1,0,0,0,6749,6779,5,264,0,0,6750,6779,3,664,332,0,6751,6754,5,384,
        0,0,6752,6753,5,94,0,0,6753,6755,5,264,0,0,6754,6752,1,0,0,0,6754,
        6755,1,0,0,0,6755,6779,1,0,0,0,6756,6763,5,176,0,0,6757,6761,5,94,
        0,0,6758,6762,5,218,0,0,6759,6762,5,261,0,0,6760,6762,3,664,332,
        0,6761,6758,1,0,0,0,6761,6759,1,0,0,0,6761,6760,1,0,0,0,6762,6764,
        1,0,0,0,6763,6757,1,0,0,0,6763,6764,1,0,0,0,6764,6779,1,0,0,0,6765,
        6771,5,218,0,0,6766,6769,5,94,0,0,6767,6770,5,261,0,0,6768,6770,
        3,664,332,0,6769,6767,1,0,0,0,6769,6768,1,0,0,0,6770,6772,1,0,0,
        0,6771,6766,1,0,0,0,6771,6772,1,0,0,0,6772,6779,1,0,0,0,6773,6776,
        5,261,0,0,6774,6775,5,94,0,0,6775,6777,3,664,332,0,6776,6774,1,0,
        0,0,6776,6777,1,0,0,0,6777,6779,1,0,0,0,6778,6749,1,0,0,0,6778,6750,
        1,0,0,0,6778,6751,1,0,0,0,6778,6756,1,0,0,0,6778,6765,1,0,0,0,6778,
        6773,1,0,0,0,6779,663,1,0,0,0,6780,6782,5,326,0,0,6781,6783,3,654,
        327,0,6782,6781,1,0,0,0,6782,6783,1,0,0,0,6783,665,1,0,0,0,6784,
        6785,7,93,0,0,6785,667,1,0,0,0,6786,6787,3,670,335,0,6787,669,1,
        0,0,0,6788,6789,6,335,-1,0,6789,6791,3,674,337,0,6790,6792,3,672,
        336,0,6791,6790,1,0,0,0,6791,6792,1,0,0,0,6792,6796,1,0,0,0,6793,
        6794,5,77,0,0,6794,6796,3,670,335,3,6795,6788,1,0,0,0,6795,6793,
        1,0,0,0,6796,6805,1,0,0,0,6797,6798,10,2,0,0,6798,6799,5,33,0,0,
        6799,6804,3,670,335,3,6800,6801,10,1,0,0,6801,6802,5,82,0,0,6802,
        6804,3,670,335,2,6803,6797,1,0,0,0,6803,6800,1,0,0,0,6804,6807,1,
        0,0,0,6805,6803,1,0,0,0,6805,6806,1,0,0,0,6806,671,1,0,0,0,6807,
        6805,1,0,0,0,6808,6809,3,666,333,0,6809,6810,3,674,337,0,6810,6880,
        1,0,0,0,6811,6812,3,666,333,0,6812,6813,3,722,361,0,6813,6819,3,
        712,356,0,6814,6820,3,556,278,0,6815,6816,5,2,0,0,6816,6817,3,668,
        334,0,6817,6818,5,3,0,0,6818,6820,1,0,0,0,6819,6814,1,0,0,0,6819,
        6815,1,0,0,0,6820,6880,1,0,0,0,6821,6823,5,77,0,0,6822,6821,1,0,
        0,0,6822,6823,1,0,0,0,6823,6824,1,0,0,0,6824,6825,5,387,0,0,6825,
        6826,3,674,337,0,6826,6827,5,33,0,0,6827,6828,3,674,337,0,6828,6880,
        1,0,0,0,6829,6831,5,77,0,0,6830,6829,1,0,0,0,6830,6831,1,0,0,0,6831,
        6832,1,0,0,0,6832,6833,5,68,0,0,6833,6834,5,2,0,0,6834,6839,3,668,
        334,0,6835,6836,5,6,0,0,6836,6838,3,668,334,0,6837,6835,1,0,0,0,
        6838,6841,1,0,0,0,6839,6837,1,0,0,0,6839,6840,1,0,0,0,6840,6842,
        1,0,0,0,6841,6839,1,0,0,0,6842,6843,5,3,0,0,6843,6880,1,0,0,0,6844,
        6846,5,77,0,0,6845,6844,1,0,0,0,6845,6846,1,0,0,0,6846,6847,1,0,
        0,0,6847,6848,5,68,0,0,6848,6880,3,556,278,0,6849,6851,5,77,0,0,
        6850,6849,1,0,0,0,6850,6851,1,0,0,0,6851,6860,1,0,0,0,6852,6861,
        5,120,0,0,6853,6861,5,114,0,0,6854,6855,5,127,0,0,6855,6861,5,94,
        0,0,6856,6858,5,387,0,0,6857,6859,5,91,0,0,6858,6857,1,0,0,0,6858,
        6859,1,0,0,0,6859,6861,1,0,0,0,6860,6852,1,0,0,0,6860,6853,1,0,0,
        0,6860,6854,1,0,0,0,6860,6856,1,0,0,0,6861,6862,1,0,0,0,6862,6865,
        3,674,337,0,6863,6864,5,197,0,0,6864,6866,3,674,337,0,6865,6863,
        1,0,0,0,6865,6866,1,0,0,0,6866,6880,1,0,0,0,6867,6869,5,116,0,0,
        6868,6870,5,77,0,0,6869,6868,1,0,0,0,6869,6870,1,0,0,0,6870,6871,
        1,0,0,0,6871,6880,5,78,0,0,6872,6874,5,116,0,0,6873,6875,5,77,0,
        0,6874,6873,1,0,0,0,6874,6875,1,0,0,0,6875,6876,1,0,0,0,6876,6877,
        5,56,0,0,6877,6878,5,64,0,0,6878,6880,3,674,337,0,6879,6808,1,0,
        0,0,6879,6811,1,0,0,0,6879,6822,1,0,0,0,6879,6830,1,0,0,0,6879,6845,
        1,0,0,0,6879,6850,1,0,0,0,6879,6867,1,0,0,0,6879,6872,1,0,0,0,6880,
        673,1,0,0,0,6881,6882,6,337,-1,0,6882,6886,3,676,338,0,6883,6884,
        7,30,0,0,6884,6886,3,674,337,4,6885,6881,1,0,0,0,6885,6883,1,0,0,
        0,6886,6903,1,0,0,0,6887,6888,10,3,0,0,6888,6889,7,94,0,0,6889,6902,
        3,674,337,4,6890,6891,10,2,0,0,6891,6892,7,30,0,0,6892,6902,3,674,
        337,3,6893,6894,10,1,0,0,6894,6895,5,15,0,0,6895,6902,3,674,337,
        2,6896,6897,10,5,0,0,6897,6898,5,142,0,0,6898,6899,5,418,0,0,6899,
        6900,5,386,0,0,6900,6902,3,668,334,0,6901,6887,1,0,0,0,6901,6890,
        1,0,0,0,6901,6893,1,0,0,0,6901,6896,1,0,0,0,6902,6905,1,0,0,0,6903,
        6901,1,0,0,0,6903,6904,1,0,0,0,6904,675,1,0,0,0,6905,6903,1,0,0,
        0,6906,6907,6,338,-1,0,6907,6908,7,95,0,0,6908,6995,3,556,278,0,
        6909,6912,5,35,0,0,6910,6913,3,556,278,0,6911,6913,3,734,367,0,6912,
        6910,1,0,0,0,6912,6911,1,0,0,0,6913,6995,1,0,0,0,6914,6915,5,28,
        0,0,6915,6995,3,748,374,0,6916,6917,5,470,0,0,6917,6995,3,528,264,
        0,6918,6995,5,574,0,0,6919,6995,5,576,0,0,6920,6995,5,566,0,0,6921,
        6995,5,570,0,0,6922,6932,3,800,400,0,6923,6933,3,802,401,0,6924,
        6925,5,2,0,0,6925,6927,3,730,365,0,6926,6928,3,580,290,0,6927,6926,
        1,0,0,0,6927,6928,1,0,0,0,6928,6929,1,0,0,0,6929,6930,5,3,0,0,6930,
        6931,3,802,401,0,6931,6933,1,0,0,0,6932,6923,1,0,0,0,6932,6924,1,
        0,0,0,6933,6995,1,0,0,0,6934,6936,3,650,325,0,6935,6934,1,0,0,0,
        6935,6936,1,0,0,0,6936,6937,1,0,0,0,6937,6995,3,802,401,0,6938,6946,
        5,403,0,0,6939,6941,3,802,401,0,6940,6942,3,662,331,0,6941,6940,
        1,0,0,0,6941,6942,1,0,0,0,6942,6947,1,0,0,0,6943,6944,3,654,327,
        0,6944,6945,3,802,401,0,6945,6947,1,0,0,0,6946,6939,1,0,0,0,6946,
        6943,1,0,0,0,6947,6995,1,0,0,0,6948,6995,5,96,0,0,6949,6995,5,60,
        0,0,6950,6995,5,78,0,0,6951,6995,5,577,0,0,6952,6953,5,2,0,0,6953,
        6954,3,668,334,0,6954,6955,5,3,0,0,6955,6956,3,748,374,0,6956,6995,
        1,0,0,0,6957,6959,5,40,0,0,6958,6960,3,668,334,0,6959,6958,1,0,0,
        0,6959,6960,1,0,0,0,6960,6962,1,0,0,0,6961,6963,3,742,371,0,6962,
        6961,1,0,0,0,6963,6964,1,0,0,0,6964,6962,1,0,0,0,6964,6965,1,0,0,
        0,6965,6968,1,0,0,0,6966,6967,5,58,0,0,6967,6969,3,668,334,0,6968,
        6966,1,0,0,0,6968,6969,1,0,0,0,6969,6970,1,0,0,0,6970,6971,5,454,
        0,0,6971,6995,1,0,0,0,6972,6995,3,680,340,0,6973,6975,3,556,278,
        0,6974,6976,3,746,373,0,6975,6974,1,0,0,0,6975,6976,1,0,0,0,6976,
        6995,1,0,0,0,6977,6995,3,710,355,0,6978,6979,5,2,0,0,6979,6980,3,
        668,334,0,6980,6981,5,6,0,0,6981,6982,3,724,362,0,6982,6983,5,3,
        0,0,6983,6995,1,0,0,0,6984,6985,3,708,354,0,6985,6986,5,125,0,0,
        6986,6987,3,708,354,0,6987,6995,1,0,0,0,6988,6995,3,774,387,0,6989,
        6990,7,30,0,0,6990,6995,3,676,338,5,6991,6992,3,718,359,0,6992,6993,
        3,676,338,2,6993,6995,1,0,0,0,6994,6906,1,0,0,0,6994,6909,1,0,0,
        0,6994,6914,1,0,0,0,6994,6916,1,0,0,0,6994,6918,1,0,0,0,6994,6919,
        1,0,0,0,6994,6920,1,0,0,0,6994,6921,1,0,0,0,6994,6922,1,0,0,0,6994,
        6935,1,0,0,0,6994,6938,1,0,0,0,6994,6948,1,0,0,0,6994,6949,1,0,0,
        0,6994,6950,1,0,0,0,6994,6951,1,0,0,0,6994,6952,1,0,0,0,6994,6957,
        1,0,0,0,6994,6972,1,0,0,0,6994,6973,1,0,0,0,6994,6977,1,0,0,0,6994,
        6978,1,0,0,0,6994,6984,1,0,0,0,6994,6988,1,0,0,0,6994,6989,1,0,0,
        0,6994,6991,1,0,0,0,6995,7023,1,0,0,0,6996,6997,10,3,0,0,6997,6998,
        3,716,358,0,6998,6999,3,676,338,4,6999,7022,1,0,0,0,7000,7001,10,
        6,0,0,7001,7002,5,26,0,0,7002,7022,3,646,323,0,7003,7004,10,4,0,
        0,7004,7006,3,718,359,0,7005,7007,3,676,338,0,7006,7005,1,0,0,0,
        7006,7007,1,0,0,0,7007,7022,1,0,0,0,7008,7009,10,1,0,0,7009,7011,
        5,116,0,0,7010,7012,5,77,0,0,7011,7010,1,0,0,0,7011,7012,1,0,0,0,
        7012,7019,1,0,0,0,7013,7014,5,56,0,0,7014,7015,5,64,0,0,7015,7020,
        3,676,338,0,7016,7017,5,275,0,0,7017,7020,3,522,261,0,7018,7020,
        5,188,0,0,7019,7013,1,0,0,0,7019,7016,1,0,0,0,7019,7018,1,0,0,0,
        7020,7022,1,0,0,0,7021,6996,1,0,0,0,7021,7000,1,0,0,0,7021,7003,
        1,0,0,0,7021,7008,1,0,0,0,7022,7025,1,0,0,0,7023,7021,1,0,0,0,7023,
        7024,1,0,0,0,7024,677,1,0,0,0,7025,7023,1,0,0,0,7026,7027,3,800,
        400,0,7027,7048,5,2,0,0,7028,7032,3,730,365,0,7029,7030,5,6,0,0,
        7030,7031,5,101,0,0,7031,7033,3,732,366,0,7032,7029,1,0,0,0,7032,
        7033,1,0,0,0,7033,7035,1,0,0,0,7034,7036,3,580,290,0,7035,7034,1,
        0,0,0,7035,7036,1,0,0,0,7036,7049,1,0,0,0,7037,7038,5,101,0,0,7038,
        7040,3,732,366,0,7039,7041,3,580,290,0,7040,7039,1,0,0,0,7040,7041,
        1,0,0,0,7041,7049,1,0,0,0,7042,7043,7,81,0,0,7043,7045,3,730,365,
        0,7044,7046,3,580,290,0,7045,7044,1,0,0,0,7045,7046,1,0,0,0,7046,
        7049,1,0,0,0,7047,7049,5,9,0,0,7048,7028,1,0,0,0,7048,7037,1,0,0,
        0,7048,7042,1,0,0,0,7048,7047,1,0,0,0,7048,7049,1,0,0,0,7049,7050,
        1,0,0,0,7050,7051,5,3,0,0,7051,679,1,0,0,0,7052,7059,3,678,339,0,
        7053,7054,5,479,0,0,7054,7055,5,66,0,0,7055,7056,5,2,0,0,7056,7057,
        3,580,290,0,7057,7058,5,3,0,0,7058,7060,1,0,0,0,7059,7053,1,0,0,
        0,7059,7060,1,0,0,0,7060,7067,1,0,0,0,7061,7062,5,480,0,0,7062,7063,
        5,2,0,0,7063,7064,5,103,0,0,7064,7065,3,668,334,0,7065,7066,5,3,
        0,0,7066,7068,1,0,0,0,7067,7061,1,0,0,0,7067,7068,1,0,0,0,7068,7074,
        1,0,0,0,7069,7072,5,124,0,0,7070,7073,3,702,351,0,7071,7073,3,812,
        406,0,7072,7070,1,0,0,0,7072,7071,1,0,0,0,7073,7075,1,0,0,0,7074,
        7069,1,0,0,0,7074,7075,1,0,0,0,7075,7078,1,0,0,0,7076,7078,3,684,
        342,0,7077,7052,1,0,0,0,7077,7076,1,0,0,0,7078,681,1,0,0,0,7079,
        7082,3,678,339,0,7080,7082,3,684,342,0,7081,7079,1,0,0,0,7081,7080,
        1,0,0,0,7082,683,1,0,0,0,7083,7084,5,108,0,0,7084,7085,5,62,0,0,
        7085,7086,5,2,0,0,7086,7087,3,668,334,0,7087,7088,5,3,0,0,7088,7258,
        1,0,0,0,7089,7258,5,48,0,0,7090,7092,7,96,0,0,7091,7093,3,654,327,
        0,7092,7091,1,0,0,0,7092,7093,1,0,0,0,7093,7258,1,0,0,0,7094,7258,
        5,49,0,0,7095,7258,5,52,0,0,7096,7258,5,89,0,0,7097,7258,5,99,0,
        0,7098,7258,5,47,0,0,7099,7258,5,111,0,0,7100,7101,7,97,0,0,7101,
        7102,5,2,0,0,7102,7103,3,668,334,0,7103,7104,5,36,0,0,7104,7105,
        3,646,323,0,7105,7106,5,3,0,0,7106,7258,1,0,0,0,7107,7108,5,397,
        0,0,7108,7113,5,2,0,0,7109,7110,3,736,368,0,7110,7111,5,64,0,0,7111,
        7112,3,668,334,0,7112,7114,1,0,0,0,7113,7109,1,0,0,0,7113,7114,1,
        0,0,0,7114,7115,1,0,0,0,7115,7258,5,3,0,0,7116,7117,5,489,0,0,7117,
        7118,5,2,0,0,7118,7121,3,668,334,0,7119,7120,5,6,0,0,7120,7122,3,
        738,369,0,7121,7119,1,0,0,0,7121,7122,1,0,0,0,7122,7123,1,0,0,0,
        7123,7124,5,3,0,0,7124,7258,1,0,0,0,7125,7126,5,410,0,0,7126,7127,
        5,2,0,0,7127,7128,3,668,334,0,7128,7129,5,84,0,0,7129,7130,3,668,
        334,0,7130,7131,5,64,0,0,7131,7134,3,668,334,0,7132,7133,5,62,0,
        0,7133,7135,3,668,334,0,7134,7132,1,0,0,0,7134,7135,1,0,0,0,7135,
        7136,1,0,0,0,7136,7137,5,3,0,0,7137,7258,1,0,0,0,7138,7139,5,411,
        0,0,7139,7144,5,2,0,0,7140,7141,3,676,338,0,7141,7142,5,68,0,0,7142,
        7143,3,676,338,0,7143,7145,1,0,0,0,7144,7140,1,0,0,0,7144,7145,1,
        0,0,0,7145,7146,1,0,0,0,7146,7258,5,3,0,0,7147,7148,5,417,0,0,7148,
        7150,5,2,0,0,7149,7151,3,740,370,0,7150,7149,1,0,0,0,7150,7151,1,
        0,0,0,7151,7152,1,0,0,0,7152,7258,5,3,0,0,7153,7154,5,421,0,0,7154,
        7156,5,2,0,0,7155,7157,7,98,0,0,7156,7155,1,0,0,0,7156,7157,1,0,
        0,0,7157,7162,1,0,0,0,7158,7160,3,668,334,0,7159,7158,1,0,0,0,7159,
        7160,1,0,0,0,7160,7161,1,0,0,0,7161,7163,5,64,0,0,7162,7159,1,0,
        0,0,7162,7163,1,0,0,0,7163,7164,1,0,0,0,7164,7165,3,724,362,0,7165,
        7166,1,0,0,0,7166,7167,5,3,0,0,7167,7258,1,0,0,0,7168,7169,5,408,
        0,0,7169,7170,5,2,0,0,7170,7171,3,668,334,0,7171,7172,5,6,0,0,7172,
        7173,3,668,334,0,7173,7174,5,3,0,0,7174,7258,1,0,0,0,7175,7176,7,
        99,0,0,7176,7258,3,528,264,0,7177,7178,5,426,0,0,7178,7179,5,2,0,
        0,7179,7180,5,266,0,0,7180,7190,3,818,409,0,7181,7188,5,6,0,0,7182,
        7183,5,424,0,0,7183,7184,5,2,0,0,7184,7185,3,686,343,0,7185,7186,
        5,3,0,0,7186,7189,1,0,0,0,7187,7189,3,724,362,0,7188,7182,1,0,0,
        0,7188,7187,1,0,0,0,7189,7191,1,0,0,0,7190,7181,1,0,0,0,7190,7191,
        1,0,0,0,7191,7192,1,0,0,0,7192,7193,5,3,0,0,7193,7258,1,0,0,0,7194,
        7195,5,427,0,0,7195,7196,5,2,0,0,7196,7197,3,676,338,0,7197,7198,
        3,692,346,0,7198,7199,5,3,0,0,7199,7258,1,0,0,0,7200,7201,5,428,
        0,0,7201,7202,5,2,0,0,7202,7203,3,686,343,0,7203,7204,5,3,0,0,7204,
        7258,1,0,0,0,7205,7206,5,429,0,0,7206,7207,5,2,0,0,7207,7208,3,690,
        345,0,7208,7211,3,668,334,0,7209,7210,7,100,0,0,7210,7212,5,378,
        0,0,7211,7209,1,0,0,0,7211,7212,1,0,0,0,7212,7213,1,0,0,0,7213,7214,
        5,3,0,0,7214,7258,1,0,0,0,7215,7216,5,430,0,0,7216,7217,5,2,0,0,
        7217,7218,5,266,0,0,7218,7221,3,818,409,0,7219,7220,5,6,0,0,7220,
        7222,3,668,334,0,7221,7219,1,0,0,0,7221,7222,1,0,0,0,7222,7223,1,
        0,0,0,7223,7224,5,3,0,0,7224,7258,1,0,0,0,7225,7226,5,431,0,0,7226,
        7227,5,2,0,0,7227,7228,5,383,0,0,7228,7229,3,668,334,0,7229,7230,
        5,6,0,0,7230,7234,5,375,0,0,7231,7232,5,269,0,0,7232,7235,5,450,
        0,0,7233,7235,3,668,334,0,7234,7231,1,0,0,0,7234,7233,1,0,0,0,7235,
        7245,1,0,0,0,7236,7237,5,6,0,0,7237,7243,5,339,0,0,7238,7240,5,269,
        0,0,7239,7238,1,0,0,0,7239,7240,1,0,0,0,7240,7241,1,0,0,0,7241,7244,
        5,450,0,0,7242,7244,5,385,0,0,7243,7239,1,0,0,0,7243,7242,1,0,0,
        0,7244,7246,1,0,0,0,7245,7236,1,0,0,0,7245,7246,1,0,0,0,7246,7247,
        1,0,0,0,7247,7248,5,3,0,0,7248,7258,1,0,0,0,7249,7250,5,432,0,0,
        7250,7251,5,2,0,0,7251,7252,3,690,345,0,7252,7253,3,668,334,0,7253,
        7254,5,36,0,0,7254,7255,3,648,324,0,7255,7256,5,3,0,0,7256,7258,
        1,0,0,0,7257,7083,1,0,0,0,7257,7089,1,0,0,0,7257,7090,1,0,0,0,7257,
        7094,1,0,0,0,7257,7095,1,0,0,0,7257,7096,1,0,0,0,7257,7097,1,0,0,
        0,7257,7098,1,0,0,0,7257,7099,1,0,0,0,7257,7100,1,0,0,0,7257,7107,
        1,0,0,0,7257,7116,1,0,0,0,7257,7125,1,0,0,0,7257,7138,1,0,0,0,7257,
        7147,1,0,0,0,7257,7153,1,0,0,0,7257,7168,1,0,0,0,7257,7175,1,0,0,
        0,7257,7177,1,0,0,0,7257,7194,1,0,0,0,7257,7200,1,0,0,0,7257,7205,
        1,0,0,0,7257,7215,1,0,0,0,7257,7225,1,0,0,0,7257,7249,1,0,0,0,7258,
        685,1,0,0,0,7259,7264,3,688,344,0,7260,7261,5,6,0,0,7261,7263,3,
        688,344,0,7262,7260,1,0,0,0,7263,7266,1,0,0,0,7264,7262,1,0,0,0,
        7264,7265,1,0,0,0,7265,687,1,0,0,0,7266,7264,1,0,0,0,7267,7270,3,
        668,334,0,7268,7269,5,36,0,0,7269,7271,3,818,409,0,7270,7268,1,0,
        0,0,7270,7271,1,0,0,0,7271,689,1,0,0,0,7272,7273,7,101,0,0,7273,
        691,1,0,0,0,7274,7276,5,286,0,0,7275,7277,3,694,347,0,7276,7275,
        1,0,0,0,7276,7277,1,0,0,0,7277,7278,1,0,0,0,7278,7280,3,676,338,
        0,7279,7281,3,694,347,0,7280,7279,1,0,0,0,7280,7281,1,0,0,0,7281,
        693,1,0,0,0,7282,7283,5,147,0,0,7283,7284,7,102,0,0,7284,695,1,0,
        0,0,7285,7286,5,104,0,0,7286,7291,3,698,349,0,7287,7288,5,6,0,0,
        7288,7290,3,698,349,0,7289,7287,1,0,0,0,7290,7293,1,0,0,0,7291,7289,
        1,0,0,0,7291,7292,1,0,0,0,7292,697,1,0,0,0,7293,7291,1,0,0,0,7294,
        7295,3,812,406,0,7295,7296,5,36,0,0,7296,7297,3,702,351,0,7297,699,
        1,0,0,0,7298,7301,5,124,0,0,7299,7302,3,702,351,0,7300,7302,3,812,
        406,0,7301,7299,1,0,0,0,7301,7300,1,0,0,0,7302,701,1,0,0,0,7303,
        7305,5,2,0,0,7304,7306,3,812,406,0,7305,7304,1,0,0,0,7305,7306,1,
        0,0,0,7306,7310,1,0,0,0,7307,7308,5,285,0,0,7308,7309,5,147,0,0,
        7309,7311,3,724,362,0,7310,7307,1,0,0,0,7310,7311,1,0,0,0,7311,7313,
        1,0,0,0,7312,7314,3,580,290,0,7313,7312,1,0,0,0,7313,7314,1,0,0,
        0,7314,7316,1,0,0,0,7315,7317,3,704,352,0,7316,7315,1,0,0,0,7316,
        7317,1,0,0,0,7317,7318,1,0,0,0,7318,7319,5,3,0,0,7319,703,1,0,0,
        0,7320,7325,7,103,0,0,7321,7322,5,387,0,0,7322,7323,3,706,353,0,
        7323,7324,5,33,0,0,7324,7326,1,0,0,0,7325,7321,1,0,0,0,7325,7326,
        1,0,0,0,7326,7327,1,0,0,0,7327,7328,3,706,353,0,7328,7338,1,0,0,
        0,7329,7336,5,199,0,0,7330,7331,5,434,0,0,7331,7337,5,414,0,0,7332,
        7337,5,66,0,0,7333,7337,5,467,0,0,7334,7335,5,269,0,0,7335,7337,
        5,482,0,0,7336,7330,1,0,0,0,7336,7332,1,0,0,0,7336,7333,1,0,0,0,
        7336,7334,1,0,0,0,7337,7339,1,0,0,0,7338,7329,1,0,0,0,7338,7339,
        1,0,0,0,7339,705,1,0,0,0,7340,7343,5,362,0,0,7341,7343,3,668,334,
        0,7342,7340,1,0,0,0,7342,7341,1,0,0,0,7343,7344,1,0,0,0,7344,7348,
        7,104,0,0,7345,7346,5,434,0,0,7346,7348,5,414,0,0,7347,7342,1,0,
        0,0,7347,7345,1,0,0,0,7348,707,1,0,0,0,7349,7357,3,710,355,0,7350,
        7351,5,2,0,0,7351,7352,3,724,362,0,7352,7353,5,6,0,0,7353,7354,3,
        668,334,0,7354,7355,5,3,0,0,7355,7357,1,0,0,0,7356,7349,1,0,0,0,
        7356,7350,1,0,0,0,7357,709,1,0,0,0,7358,7359,5,414,0,0,7359,7361,
        5,2,0,0,7360,7362,3,724,362,0,7361,7360,1,0,0,0,7361,7362,1,0,0,
        0,7362,7363,1,0,0,0,7363,7364,5,3,0,0,7364,711,1,0,0,0,7365,7366,
        7,105,0,0,7366,713,1,0,0,0,7367,7370,5,29,0,0,7368,7370,3,716,358,
        0,7369,7367,1,0,0,0,7369,7368,1,0,0,0,7370,715,1,0,0,0,7371,7372,
        7,106,0,0,7372,717,1,0,0,0,7373,7380,5,29,0,0,7374,7375,5,278,0,
        0,7375,7376,5,2,0,0,7376,7377,3,408,204,0,7377,7378,5,3,0,0,7378,
        7380,1,0,0,0,7379,7373,1,0,0,0,7379,7374,1,0,0,0,7380,719,1,0,0,
        0,7381,7388,3,714,357,0,7382,7383,5,278,0,0,7383,7384,5,2,0,0,7384,
        7385,3,408,204,0,7385,7386,5,3,0,0,7386,7388,1,0,0,0,7387,7381,1,
        0,0,0,7387,7382,1,0,0,0,7388,721,1,0,0,0,7389,7395,3,720,360,0,7390,
        7392,5,77,0,0,7391,7390,1,0,0,0,7391,7392,1,0,0,0,7392,7393,1,0,
        0,0,7393,7395,7,107,0,0,7394,7389,1,0,0,0,7394,7391,1,0,0,0,7395,
        723,1,0,0,0,7396,7401,3,668,334,0,7397,7398,5,6,0,0,7398,7400,3,
        668,334,0,7399,7397,1,0,0,0,7400,7403,1,0,0,0,7401,7399,1,0,0,0,
        7401,7402,1,0,0,0,7402,725,1,0,0,0,7403,7401,1,0,0,0,7404,7405,5,
        2,0,0,7405,7406,3,668,334,0,7406,7407,5,3,0,0,7407,7410,1,0,0,0,
        7408,7410,3,794,397,0,7409,7404,1,0,0,0,7409,7408,1,0,0,0,7410,727,
        1,0,0,0,7411,7414,3,668,334,0,7412,7414,3,794,397,0,7413,7411,1,
        0,0,0,7413,7412,1,0,0,0,7414,729,1,0,0,0,7415,7420,3,732,366,0,7416,
        7417,5,6,0,0,7417,7419,3,732,366,0,7418,7416,1,0,0,0,7419,7422,1,
        0,0,0,7420,7418,1,0,0,0,7420,7421,1,0,0,0,7421,731,1,0,0,0,7422,
        7420,1,0,0,0,7423,7431,3,794,397,0,7424,7431,3,668,334,0,7425,7428,
        3,814,407,0,7426,7427,7,108,0,0,7427,7429,3,668,334,0,7428,7426,
        1,0,0,0,7428,7429,1,0,0,0,7429,7431,1,0,0,0,7430,7423,1,0,0,0,7430,
        7424,1,0,0,0,7430,7425,1,0,0,0,7431,733,1,0,0,0,7432,7442,5,4,0,
        0,7433,7443,3,724,362,0,7434,7439,3,734,367,0,7435,7436,5,6,0,0,
        7436,7438,3,734,367,0,7437,7435,1,0,0,0,7438,7441,1,0,0,0,7439,7437,
        1,0,0,0,7439,7440,1,0,0,0,7440,7443,1,0,0,0,7441,7439,1,0,0,0,7442,
        7433,1,0,0,0,7442,7434,1,0,0,0,7442,7443,1,0,0,0,7443,7444,1,0,0,
        0,7444,7445,5,5,0,0,7445,735,1,0,0,0,7446,7455,3,820,410,0,7447,
        7455,5,384,0,0,7448,7455,5,264,0,0,7449,7455,5,176,0,0,7450,7455,
        5,218,0,0,7451,7455,5,261,0,0,7452,7455,5,326,0,0,7453,7455,3,802,
        401,0,7454,7446,1,0,0,0,7454,7447,1,0,0,0,7454,7448,1,0,0,0,7454,
        7449,1,0,0,0,7454,7450,1,0,0,0,7454,7451,1,0,0,0,7454,7452,1,0,0,
        0,7454,7453,1,0,0,0,7455,737,1,0,0,0,7456,7457,7,109,0,0,7457,739,
        1,0,0,0,7458,7459,3,668,334,0,7459,7460,5,64,0,0,7460,7463,3,668,
        334,0,7461,7462,5,62,0,0,7462,7464,3,668,334,0,7463,7461,1,0,0,0,
        7463,7464,1,0,0,0,7464,7480,1,0,0,0,7465,7466,3,668,334,0,7466,7467,
        5,62,0,0,7467,7470,3,668,334,0,7468,7469,5,64,0,0,7469,7471,3,668,
        334,0,7470,7468,1,0,0,0,7470,7471,1,0,0,0,7471,7480,1,0,0,0,7472,
        7473,3,668,334,0,7473,7474,5,127,0,0,7474,7475,3,668,334,0,7475,
        7476,5,197,0,0,7476,7477,3,668,334,0,7477,7480,1,0,0,0,7478,7480,
        3,724,362,0,7479,7458,1,0,0,0,7479,7465,1,0,0,0,7479,7472,1,0,0,
        0,7479,7478,1,0,0,0,7480,741,1,0,0,0,7481,7482,5,102,0,0,7482,7483,
        3,668,334,0,7483,7484,5,93,0,0,7484,7485,3,668,334,0,7485,743,1,
        0,0,0,7486,7489,5,11,0,0,7487,7490,3,818,409,0,7488,7490,5,9,0,0,
        7489,7487,1,0,0,0,7489,7488,1,0,0,0,7490,7504,1,0,0,0,7491,7500,
        5,4,0,0,7492,7501,3,668,334,0,7493,7495,3,668,334,0,7494,7493,1,
        0,0,0,7494,7495,1,0,0,0,7495,7496,1,0,0,0,7496,7498,5,8,0,0,7497,
        7499,3,668,334,0,7498,7497,1,0,0,0,7498,7499,1,0,0,0,7499,7501,1,
        0,0,0,7500,7492,1,0,0,0,7500,7494,1,0,0,0,7501,7502,1,0,0,0,7502,
        7504,5,5,0,0,7503,7486,1,0,0,0,7503,7491,1,0,0,0,7504,745,1,0,0,
        0,7505,7507,3,744,372,0,7506,7505,1,0,0,0,7507,7508,1,0,0,0,7508,
        7506,1,0,0,0,7508,7509,1,0,0,0,7509,747,1,0,0,0,7510,7512,3,744,
        372,0,7511,7510,1,0,0,0,7512,7515,1,0,0,0,7513,7511,1,0,0,0,7513,
        7514,1,0,0,0,7514,749,1,0,0,0,7515,7513,1,0,0,0,7516,7521,3,752,
        376,0,7517,7518,5,6,0,0,7518,7520,3,752,376,0,7519,7517,1,0,0,0,
        7520,7523,1,0,0,0,7521,7519,1,0,0,0,7521,7522,1,0,0,0,7522,751,1,
        0,0,0,7523,7521,1,0,0,0,7524,7529,3,728,364,0,7525,7526,5,36,0,0,
        7526,7530,3,818,409,0,7527,7530,3,820,410,0,7528,7530,1,0,0,0,7529,
        7525,1,0,0,0,7529,7527,1,0,0,0,7529,7528,1,0,0,0,7530,7533,1,0,0,
        0,7531,7533,5,9,0,0,7532,7524,1,0,0,0,7532,7531,1,0,0,0,7533,753,
        1,0,0,0,7534,7539,3,774,387,0,7535,7536,5,6,0,0,7536,7538,3,774,
        387,0,7537,7535,1,0,0,0,7538,7541,1,0,0,0,7539,7537,1,0,0,0,7539,
        7540,1,0,0,0,7540,755,1,0,0,0,7541,7539,1,0,0,0,7542,7547,3,768,
        384,0,7543,7544,5,6,0,0,7544,7546,3,768,384,0,7545,7543,1,0,0,0,
        7546,7549,1,0,0,0,7547,7545,1,0,0,0,7547,7548,1,0,0,0,7548,757,1,
        0,0,0,7549,7547,1,0,0,0,7550,7555,3,784,392,0,7551,7552,5,6,0,0,
        7552,7554,3,784,392,0,7553,7551,1,0,0,0,7554,7557,1,0,0,0,7555,7553,
        1,0,0,0,7555,7556,1,0,0,0,7556,759,1,0,0,0,7557,7555,1,0,0,0,7558,
        7563,3,782,391,0,7559,7560,5,6,0,0,7560,7562,3,782,391,0,7561,7559,
        1,0,0,0,7562,7565,1,0,0,0,7563,7561,1,0,0,0,7563,7564,1,0,0,0,7564,
        761,1,0,0,0,7565,7563,1,0,0,0,7566,7567,3,774,387,0,7567,763,1,0,
        0,0,7568,7569,3,774,387,0,7569,765,1,0,0,0,7570,7571,3,774,387,0,
        7571,767,1,0,0,0,7572,7573,3,774,387,0,7573,769,1,0,0,0,7574,7575,
        3,774,387,0,7575,771,1,0,0,0,7576,7577,3,310,155,0,7577,773,1,0,
        0,0,7578,7580,3,812,406,0,7579,7581,3,746,373,0,7580,7579,1,0,0,
        0,7580,7581,1,0,0,0,7581,775,1,0,0,0,7582,7587,3,764,382,0,7583,
        7584,5,6,0,0,7584,7586,3,764,382,0,7585,7583,1,0,0,0,7586,7589,1,
        0,0,0,7587,7585,1,0,0,0,7587,7588,1,0,0,0,7588,777,1,0,0,0,7589,
        7587,1,0,0,0,7590,7595,3,812,406,0,7591,7592,5,6,0,0,7592,7594,3,
        812,406,0,7593,7591,1,0,0,0,7594,7597,1,0,0,0,7595,7593,1,0,0,0,
        7595,7596,1,0,0,0,7596,779,1,0,0,0,7597,7595,1,0,0,0,7598,7599,3,
        310,155,0,7599,781,1,0,0,0,7600,7601,3,310,155,0,7601,783,1,0,0,
        0,7602,7603,3,310,155,0,7603,785,1,0,0,0,7604,7605,3,812,406,0,7605,
        787,1,0,0,0,7606,7607,3,812,406,0,7607,789,1,0,0,0,7608,7613,3,814,
        407,0,7609,7610,3,812,406,0,7610,7611,3,746,373,0,7611,7613,1,0,
        0,0,7612,7608,1,0,0,0,7612,7609,1,0,0,0,7613,791,1,0,0,0,7614,7619,
        3,814,407,0,7615,7616,3,812,406,0,7616,7617,3,746,373,0,7617,7619,
        1,0,0,0,7618,7614,1,0,0,0,7618,7615,1,0,0,0,7619,793,1,0,0,0,7620,
        7621,3,812,406,0,7621,7622,3,748,374,0,7622,7625,1,0,0,0,7623,7625,
        4,397,10,0,7624,7620,1,0,0,0,7624,7623,1,0,0,0,7625,795,1,0,0,0,
        7626,7627,3,812,406,0,7627,797,1,0,0,0,7628,7633,3,814,407,0,7629,
        7630,3,812,406,0,7630,7631,3,746,373,0,7631,7633,1,0,0,0,7632,7628,
        1,0,0,0,7632,7629,1,0,0,0,7633,799,1,0,0,0,7634,7639,3,814,407,0,
        7635,7636,3,812,406,0,7636,7637,3,746,373,0,7637,7639,1,0,0,0,7638,
        7634,1,0,0,0,7638,7635,1,0,0,0,7639,801,1,0,0,0,7640,7643,3,804,
        402,0,7641,7642,5,487,0,0,7642,7644,3,804,402,0,7643,7641,1,0,0,
        0,7643,7644,1,0,0,0,7644,803,1,0,0,0,7645,7657,5,561,0,0,7646,7657,
        5,563,0,0,7647,7651,5,565,0,0,7648,7650,5,591,0,0,7649,7648,1,0,
        0,0,7650,7653,1,0,0,0,7651,7649,1,0,0,0,7651,7652,1,0,0,0,7652,7654,
        1,0,0,0,7653,7651,1,0,0,0,7654,7657,5,592,0,0,7655,7657,5,587,0,
        0,7656,7645,1,0,0,0,7656,7646,1,0,0,0,7656,7647,1,0,0,0,7656,7655,
        1,0,0,0,7657,805,1,0,0,0,7658,7660,7,30,0,0,7659,7658,1,0,0,0,7659,
        7660,1,0,0,0,7660,7661,1,0,0,0,7661,7662,5,574,0,0,7662,807,1,0,
        0,0,7663,7669,3,816,408,0,7664,7669,5,52,0,0,7665,7669,5,49,0,0,
        7666,7669,5,89,0,0,7667,7669,5,524,0,0,7668,7663,1,0,0,0,7668,7664,
        1,0,0,0,7668,7665,1,0,0,0,7668,7666,1,0,0,0,7668,7667,1,0,0,0,7669,
        809,1,0,0,0,7670,7675,3,808,404,0,7671,7672,5,6,0,0,7672,7674,3,
        808,404,0,7673,7671,1,0,0,0,7674,7677,1,0,0,0,7675,7673,1,0,0,0,
        7675,7676,1,0,0,0,7676,811,1,0,0,0,7677,7675,1,0,0,0,7678,7681,3,
        820,410,0,7679,7681,3,824,412,0,7680,7678,1,0,0,0,7680,7679,1,0,
        0,0,7681,813,1,0,0,0,7682,7685,3,820,410,0,7683,7685,3,826,413,0,
        7684,7682,1,0,0,0,7684,7683,1,0,0,0,7685,815,1,0,0,0,7686,7690,3,
        820,410,0,7687,7690,3,824,412,0,7688,7690,3,826,413,0,7689,7686,
        1,0,0,0,7689,7687,1,0,0,0,7689,7688,1,0,0,0,7690,817,1,0,0,0,7691,
        7696,3,820,410,0,7692,7696,3,824,412,0,7693,7696,3,826,413,0,7694,
        7696,3,828,414,0,7695,7691,1,0,0,0,7695,7692,1,0,0,0,7695,7693,1,
        0,0,0,7695,7694,1,0,0,0,7696,819,1,0,0,0,7697,7700,5,552,0,0,7698,
        7699,5,487,0,0,7699,7701,3,804,402,0,7700,7698,1,0,0,0,7700,7701,
        1,0,0,0,7701,7709,1,0,0,0,7702,7709,3,802,401,0,7703,7709,5,553,
        0,0,7704,7709,5,557,0,0,7705,7709,5,577,0,0,7706,7709,5,578,0,0,
        7707,7709,3,822,411,0,7708,7697,1,0,0,0,7708,7702,1,0,0,0,7708,7703,
        1,0,0,0,7708,7704,1,0,0,0,7708,7705,1,0,0,0,7708,7706,1,0,0,0,7708,
        7707,1,0,0,0,7709,821,1,0,0,0,7710,7711,7,110,0,0,7711,823,1,0,0,
        0,7712,7764,5,387,0,0,7713,7764,5,388,0,0,7714,7764,3,656,328,0,
        7715,7764,5,390,0,0,7716,7764,5,391,0,0,7717,7764,3,658,329,0,7718,
        7764,5,393,0,0,7719,7764,5,394,0,0,7720,7764,5,395,0,0,7721,7764,
        5,396,0,0,7722,7764,5,397,0,0,7723,7764,5,398,0,0,7724,7764,5,399,
        0,0,7725,7764,5,470,0,0,7726,7764,5,400,0,0,7727,7764,5,401,0,0,
        7728,7764,5,402,0,0,7729,7764,5,403,0,0,7730,7764,5,404,0,0,7731,
        7764,5,405,0,0,7732,7764,5,406,0,0,7733,7764,5,407,0,0,7734,7764,
        5,489,0,0,7735,7764,5,408,0,0,7736,7764,3,652,326,0,7737,7764,5,
        453,0,0,7738,7764,5,410,0,0,7739,7764,5,411,0,0,7740,7764,5,412,
        0,0,7741,7764,5,413,0,0,7742,7764,5,414,0,0,7743,7764,5,415,0,0,
        7744,7764,5,416,0,0,7745,7764,5,417,0,0,7746,7764,5,418,0,0,7747,
        7764,5,419,0,0,7748,7764,5,420,0,0,7749,7764,5,421,0,0,7750,7764,
        5,422,0,0,7751,7764,5,423,0,0,7752,7764,5,424,0,0,7753,7764,5,425,
        0,0,7754,7764,5,426,0,0,7755,7764,5,427,0,0,7756,7764,5,428,0,0,
        7757,7764,5,476,0,0,7758,7764,5,429,0,0,7759,7764,5,430,0,0,7760,
        7764,5,431,0,0,7761,7764,5,432,0,0,7762,7764,5,474,0,0,7763,7712,
        1,0,0,0,7763,7713,1,0,0,0,7763,7714,1,0,0,0,7763,7715,1,0,0,0,7763,
        7716,1,0,0,0,7763,7717,1,0,0,0,7763,7718,1,0,0,0,7763,7719,1,0,0,
        0,7763,7720,1,0,0,0,7763,7721,1,0,0,0,7763,7722,1,0,0,0,7763,7723,
        1,0,0,0,7763,7724,1,0,0,0,7763,7725,1,0,0,0,7763,7726,1,0,0,0,7763,
        7727,1,0,0,0,7763,7728,1,0,0,0,7763,7729,1,0,0,0,7763,7730,1,0,0,
        0,7763,7731,1,0,0,0,7763,7732,1,0,0,0,7763,7733,1,0,0,0,7763,7734,
        1,0,0,0,7763,7735,1,0,0,0,7763,7736,1,0,0,0,7763,7737,1,0,0,0,7763,
        7738,1,0,0,0,7763,7739,1,0,0,0,7763,7740,1,0,0,0,7763,7741,1,0,0,
        0,7763,7742,1,0,0,0,7763,7743,1,0,0,0,7763,7744,1,0,0,0,7763,7745,
        1,0,0,0,7763,7746,1,0,0,0,7763,7747,1,0,0,0,7763,7748,1,0,0,0,7763,
        7749,1,0,0,0,7763,7750,1,0,0,0,7763,7751,1,0,0,0,7763,7752,1,0,0,
        0,7763,7753,1,0,0,0,7763,7754,1,0,0,0,7763,7755,1,0,0,0,7763,7756,
        1,0,0,0,7763,7757,1,0,0,0,7763,7758,1,0,0,0,7763,7759,1,0,0,0,7763,
        7760,1,0,0,0,7763,7761,1,0,0,0,7763,7762,1,0,0,0,7764,825,1,0,0,
        0,7765,7766,7,111,0,0,7766,827,1,0,0,0,7767,7768,7,112,0,0,7768,
        829,1,0,0,0,7769,7771,3,832,416,0,7770,7769,1,0,0,0,7770,7771,1,
        0,0,0,7771,7782,1,0,0,0,7772,7780,5,178,0,0,7773,7777,3,834,417,
        0,7774,7777,5,178,0,0,7775,7777,3,832,416,0,7776,7773,1,0,0,0,7776,
        7774,1,0,0,0,7776,7775,1,0,0,0,7777,7778,1,0,0,0,7778,7776,1,0,0,
        0,7778,7779,1,0,0,0,7779,7781,1,0,0,0,7780,7776,1,0,0,0,7780,7781,
        1,0,0,0,7781,7783,1,0,0,0,7782,7772,1,0,0,0,7782,7783,1,0,0,0,7783,
        7784,1,0,0,0,7784,7788,5,146,0,0,7785,7787,3,840,420,0,7786,7785,
        1,0,0,0,7787,7790,1,0,0,0,7788,7786,1,0,0,0,7788,7789,1,0,0,0,7789,
        7792,1,0,0,0,7790,7788,1,0,0,0,7791,7793,3,918,459,0,7792,7791,1,
        0,0,0,7792,7793,1,0,0,0,7793,7794,1,0,0,0,7794,7796,5,454,0,0,7795,
        7797,3,922,461,0,7796,7795,1,0,0,0,7796,7797,1,0,0,0,7797,831,1,
        0,0,0,7798,7799,5,18,0,0,7799,7800,3,922,461,0,7800,7801,5,19,0,
        0,7801,833,1,0,0,0,7802,7849,3,922,461,0,7803,7804,5,496,0,0,7804,
        7807,5,62,0,0,7805,7808,5,28,0,0,7806,7808,3,812,406,0,7807,7805,
        1,0,0,0,7807,7806,1,0,0,0,7808,7850,1,0,0,0,7809,7811,5,497,0,0,
        7810,7809,1,0,0,0,7810,7811,1,0,0,0,7811,7812,1,0,0,0,7812,7814,
        3,646,323,0,7813,7815,3,90,45,0,7814,7813,1,0,0,0,7814,7815,1,0,
        0,0,7815,7818,1,0,0,0,7816,7817,5,77,0,0,7817,7819,5,78,0,0,7818,
        7816,1,0,0,0,7818,7819,1,0,0,0,7819,7825,1,0,0,0,7820,7823,3,838,
        419,0,7821,7823,5,53,0,0,7822,7820,1,0,0,0,7822,7821,1,0,0,0,7823,
        7824,1,0,0,0,7824,7826,3,924,462,0,7825,7822,1,0,0,0,7825,7826,1,
        0,0,0,7826,7850,1,0,0,0,7827,7829,5,269,0,0,7828,7827,1,0,0,0,7828,
        7829,1,0,0,0,7829,7830,1,0,0,0,7830,7832,5,324,0,0,7831,7828,1,0,
        0,0,7831,7832,1,0,0,0,7832,7833,1,0,0,0,7833,7845,5,172,0,0,7834,
        7835,5,2,0,0,7835,7840,3,836,418,0,7836,7837,5,6,0,0,7837,7839,3,
        836,418,0,7838,7836,1,0,0,0,7839,7842,1,0,0,0,7840,7838,1,0,0,0,
        7840,7841,1,0,0,0,7841,7843,1,0,0,0,7842,7840,1,0,0,0,7843,7844,
        5,3,0,0,7844,7846,1,0,0,0,7845,7834,1,0,0,0,7845,7846,1,0,0,0,7846,
        7847,1,0,0,0,7847,7848,7,113,0,0,7848,7850,3,554,277,0,7849,7803,
        1,0,0,0,7849,7810,1,0,0,0,7849,7831,1,0,0,0,7850,7851,1,0,0,0,7851,
        7852,5,7,0,0,7852,835,1,0,0,0,7853,7854,3,922,461,0,7854,7855,3,
        646,323,0,7855,837,1,0,0,0,7856,7857,7,114,0,0,7857,839,1,0,0,0,
        7858,7859,3,830,415,0,7859,7860,5,7,0,0,7860,7883,1,0,0,0,7861,7883,
        3,868,434,0,7862,7883,3,870,435,0,7863,7883,3,846,423,0,7864,7883,
        3,854,427,0,7865,7883,3,858,429,0,7866,7883,3,860,430,0,7867,7883,
        3,864,432,0,7868,7883,3,866,433,0,7869,7883,3,874,437,0,7870,7883,
        3,878,439,0,7871,7883,3,880,440,0,7872,7883,3,842,421,0,7873,7883,
        3,844,422,0,7874,7883,3,848,424,0,7875,7883,3,884,442,0,7876,7883,
        3,888,444,0,7877,7883,3,892,446,0,7878,7883,3,908,454,0,7879,7883,
        3,910,455,0,7880,7883,3,912,456,0,7881,7883,3,914,457,0,7882,7858,
        1,0,0,0,7882,7861,1,0,0,0,7882,7862,1,0,0,0,7882,7863,1,0,0,0,7882,
        7864,1,0,0,0,7882,7865,1,0,0,0,7882,7866,1,0,0,0,7882,7867,1,0,0,
        0,7882,7868,1,0,0,0,7882,7869,1,0,0,0,7882,7870,1,0,0,0,7882,7871,
        1,0,0,0,7882,7872,1,0,0,0,7882,7873,1,0,0,0,7882,7874,1,0,0,0,7882,
        7875,1,0,0,0,7882,7876,1,0,0,0,7882,7877,1,0,0,0,7882,7878,1,0,0,
        0,7882,7879,1,0,0,0,7882,7880,1,0,0,0,7882,7881,1,0,0,0,7883,841,
        1,0,0,0,7884,7885,5,498,0,0,7885,7886,3,924,462,0,7886,7887,5,7,
        0,0,7887,843,1,0,0,0,7888,7889,5,433,0,0,7889,7896,3,922,461,0,7890,
        7892,5,2,0,0,7891,7893,3,724,362,0,7892,7891,1,0,0,0,7892,7893,1,
        0,0,0,7893,7894,1,0,0,0,7894,7895,5,3,0,0,7895,7897,5,7,0,0,7896,
        7890,1,0,0,0,7896,7897,1,0,0,0,7897,7908,1,0,0,0,7898,7899,5,57,
        0,0,7899,7900,3,922,461,0,7900,7902,5,2,0,0,7901,7903,3,724,362,
        0,7902,7901,1,0,0,0,7902,7903,1,0,0,0,7903,7904,1,0,0,0,7904,7905,
        5,3,0,0,7905,7906,5,7,0,0,7906,7908,1,0,0,0,7907,7888,1,0,0,0,7907,
        7898,1,0,0,0,7908,845,1,0,0,0,7909,7910,3,852,426,0,7910,7911,3,
        838,419,0,7911,7912,3,924,462,0,7912,7913,5,7,0,0,7913,847,1,0,0,
        0,7914,7916,5,499,0,0,7915,7917,7,115,0,0,7916,7915,1,0,0,0,7916,
        7917,1,0,0,0,7917,7918,1,0,0,0,7918,7919,5,500,0,0,7919,7924,3,850,
        425,0,7920,7921,5,6,0,0,7921,7923,3,850,425,0,7922,7920,1,0,0,0,
        7923,7926,1,0,0,0,7924,7922,1,0,0,0,7924,7925,1,0,0,0,7925,7927,
        1,0,0,0,7926,7924,1,0,0,0,7927,7928,5,7,0,0,7928,849,1,0,0,0,7929,
        7930,3,852,426,0,7930,7931,3,838,419,0,7931,7932,3,812,406,0,7932,
        851,1,0,0,0,7933,7936,3,310,155,0,7934,7936,5,28,0,0,7935,7933,1,
        0,0,0,7935,7934,1,0,0,0,7936,7943,1,0,0,0,7937,7938,5,4,0,0,7938,
        7939,3,668,334,0,7939,7940,5,5,0,0,7940,7942,1,0,0,0,7941,7937,1,
        0,0,0,7942,7945,1,0,0,0,7943,7941,1,0,0,0,7943,7944,1,0,0,0,7944,
        853,1,0,0,0,7945,7943,1,0,0,0,7946,7947,5,220,0,0,7947,7948,3,924,
        462,0,7948,7952,5,93,0,0,7949,7951,3,840,420,0,7950,7949,1,0,0,0,
        7951,7954,1,0,0,0,7952,7950,1,0,0,0,7952,7953,1,0,0,0,7953,7966,
        1,0,0,0,7954,7952,1,0,0,0,7955,7956,5,502,0,0,7956,7957,3,668,334,
        0,7957,7961,5,93,0,0,7958,7960,3,840,420,0,7959,7958,1,0,0,0,7960,
        7963,1,0,0,0,7961,7959,1,0,0,0,7961,7962,1,0,0,0,7962,7965,1,0,0,
        0,7963,7961,1,0,0,0,7964,7955,1,0,0,0,7965,7968,1,0,0,0,7966,7964,
        1,0,0,0,7966,7967,1,0,0,0,7967,7970,1,0,0,0,7968,7966,1,0,0,0,7969,
        7971,3,856,428,0,7970,7969,1,0,0,0,7970,7971,1,0,0,0,7971,7972,1,
        0,0,0,7972,7973,5,454,0,0,7973,7974,5,220,0,0,7974,7975,5,7,0,0,
        7975,855,1,0,0,0,7976,7980,5,58,0,0,7977,7979,3,840,420,0,7978,7977,
        1,0,0,0,7979,7982,1,0,0,0,7980,7978,1,0,0,0,7980,7981,1,0,0,0,7981,
        857,1,0,0,0,7982,7980,1,0,0,0,7983,7985,5,40,0,0,7984,7986,3,924,
        462,0,7985,7984,1,0,0,0,7985,7986,1,0,0,0,7986,7996,1,0,0,0,7987,
        7988,5,102,0,0,7988,7989,3,724,362,0,7989,7993,5,93,0,0,7990,7992,
        3,840,420,0,7991,7990,1,0,0,0,7992,7995,1,0,0,0,7993,7991,1,0,0,
        0,7993,7994,1,0,0,0,7994,7997,1,0,0,0,7995,7993,1,0,0,0,7996,7987,
        1,0,0,0,7997,7998,1,0,0,0,7998,7996,1,0,0,0,7998,7999,1,0,0,0,7999,
        8001,1,0,0,0,8000,8002,3,856,428,0,8001,8000,1,0,0,0,8001,8002,1,
        0,0,0,8002,8003,1,0,0,0,8003,8004,5,454,0,0,8004,8005,5,40,0,0,8005,
        8006,5,7,0,0,8006,859,1,0,0,0,8007,8009,3,832,416,0,8008,8007,1,
        0,0,0,8008,8009,1,0,0,0,8009,8014,1,0,0,0,8010,8011,5,503,0,0,8011,
        8015,3,668,334,0,8012,8013,5,62,0,0,8013,8015,3,862,431,0,8014,8010,
        1,0,0,0,8014,8012,1,0,0,0,8014,8015,1,0,0,0,8015,8016,1,0,0,0,8016,
        8017,3,876,438,0,8017,861,1,0,0,0,8018,8019,3,308,154,0,8019,8042,
        5,68,0,0,8020,8022,3,812,406,0,8021,8023,3,528,264,0,8022,8021,1,
        0,0,0,8022,8023,1,0,0,0,8023,8043,1,0,0,0,8024,8043,3,554,277,0,
        8025,8043,3,514,257,0,8026,8027,5,202,0,0,8027,8030,3,668,334,0,
        8028,8029,5,100,0,0,8029,8031,3,724,362,0,8030,8028,1,0,0,0,8030,
        8031,1,0,0,0,8031,8043,1,0,0,0,8032,8034,5,504,0,0,8033,8032,1,0,
        0,0,8033,8034,1,0,0,0,8034,8035,1,0,0,0,8035,8036,3,668,334,0,8036,
        8037,5,24,0,0,8037,8040,3,668,334,0,8038,8039,5,147,0,0,8039,8041,
        3,668,334,0,8040,8038,1,0,0,0,8040,8041,1,0,0,0,8041,8043,1,0,0,
        0,8042,8020,1,0,0,0,8042,8024,1,0,0,0,8042,8025,1,0,0,0,8042,8026,
        1,0,0,0,8042,8033,1,0,0,0,8043,863,1,0,0,0,8044,8046,3,832,416,0,
        8045,8044,1,0,0,0,8045,8046,1,0,0,0,8046,8047,1,0,0,0,8047,8048,
        5,505,0,0,8048,8051,3,308,154,0,8049,8050,5,506,0,0,8050,8052,5,
        574,0,0,8051,8049,1,0,0,0,8051,8052,1,0,0,0,8052,8053,1,0,0,0,8053,
        8054,5,68,0,0,8054,8055,5,35,0,0,8055,8056,3,668,334,0,8056,8057,
        3,876,438,0,8057,865,1,0,0,0,8058,8060,7,116,0,0,8059,8061,3,922,
        461,0,8060,8059,1,0,0,0,8060,8061,1,0,0,0,8061,8064,1,0,0,0,8062,
        8063,5,102,0,0,8063,8065,3,924,462,0,8064,8062,1,0,0,0,8064,8065,
        1,0,0,0,8065,8066,1,0,0,0,8066,8067,5,7,0,0,8067,867,1,0,0,0,8068,
        8083,5,508,0,0,8069,8070,5,268,0,0,8070,8084,3,924,462,0,8071,8078,
        5,509,0,0,8072,8073,5,202,0,0,8073,8074,3,668,334,0,8074,8075,5,
        100,0,0,8075,8076,3,724,362,0,8076,8079,1,0,0,0,8077,8079,3,554,
        277,0,8078,8072,1,0,0,0,8078,8077,1,0,0,0,8079,8084,1,0,0,0,8080,
        8082,3,924,462,0,8081,8080,1,0,0,0,8081,8082,1,0,0,0,8082,8084,1,
        0,0,0,8083,8069,1,0,0,0,8083,8071,1,0,0,0,8083,8081,1,0,0,0,8084,
        8085,1,0,0,0,8085,8086,5,7,0,0,8086,869,1,0,0,0,8087,8117,5,510,
        0,0,8088,8090,7,117,0,0,8089,8088,1,0,0,0,8089,8090,1,0,0,0,8090,
        8103,1,0,0,0,8091,8104,3,820,410,0,8092,8093,5,511,0,0,8093,8104,
        3,802,401,0,8094,8101,3,802,401,0,8095,8096,5,6,0,0,8096,8098,3,
        668,334,0,8097,8095,1,0,0,0,8098,8099,1,0,0,0,8099,8097,1,0,0,0,
        8099,8100,1,0,0,0,8100,8102,1,0,0,0,8101,8097,1,0,0,0,8101,8102,
        1,0,0,0,8102,8104,1,0,0,0,8103,8091,1,0,0,0,8103,8092,1,0,0,0,8103,
        8094,1,0,0,0,8103,8104,1,0,0,0,8104,8114,1,0,0,0,8105,8106,5,100,
        0,0,8106,8111,3,872,436,0,8107,8108,5,6,0,0,8108,8110,3,872,436,
        0,8109,8107,1,0,0,0,8110,8113,1,0,0,0,8111,8109,1,0,0,0,8111,8112,
        1,0,0,0,8112,8115,1,0,0,0,8113,8111,1,0,0,0,8114,8105,1,0,0,0,8114,
        8115,1,0,0,0,8115,8116,1,0,0,0,8116,8118,5,7,0,0,8117,8089,1,0,0,
        0,8117,8118,1,0,0,0,8118,871,1,0,0,0,8119,8120,3,820,410,0,8120,
        8121,5,10,0,0,8121,8122,3,668,334,0,8122,873,1,0,0,0,8123,8124,5,
        518,0,0,8124,8127,3,924,462,0,8125,8126,5,6,0,0,8126,8128,3,924,
        462,0,8127,8125,1,0,0,0,8127,8128,1,0,0,0,8128,8129,1,0,0,0,8129,
        8130,5,7,0,0,8130,875,1,0,0,0,8131,8135,5,519,0,0,8132,8134,3,840,
        420,0,8133,8132,1,0,0,0,8134,8137,1,0,0,0,8135,8133,1,0,0,0,8135,
        8136,1,0,0,0,8136,8138,1,0,0,0,8137,8135,1,0,0,0,8138,8139,5,454,
        0,0,8139,8141,5,519,0,0,8140,8142,3,922,461,0,8141,8140,1,0,0,0,
        8141,8142,1,0,0,0,8142,8143,1,0,0,0,8143,8144,5,7,0,0,8144,877,1,
        0,0,0,8145,8147,3,4,2,0,8146,8148,3,882,441,0,8147,8146,1,0,0,0,
        8147,8148,1,0,0,0,8148,8149,1,0,0,0,8149,8150,5,7,0,0,8150,879,1,
        0,0,0,8151,8152,5,202,0,0,8152,8168,3,668,334,0,8153,8155,3,882,
        441,0,8154,8153,1,0,0,0,8154,8155,1,0,0,0,8155,8158,1,0,0,0,8156,
        8157,5,100,0,0,8157,8159,3,724,362,0,8158,8156,1,0,0,0,8158,8159,
        1,0,0,0,8159,8169,1,0,0,0,8160,8161,5,100,0,0,8161,8163,3,724,362,
        0,8162,8160,1,0,0,0,8162,8163,1,0,0,0,8163,8165,1,0,0,0,8164,8166,
        3,882,441,0,8165,8164,1,0,0,0,8165,8166,1,0,0,0,8166,8169,1,0,0,
        0,8167,8169,1,0,0,0,8168,8154,1,0,0,0,8168,8162,1,0,0,0,8168,8167,
        1,0,0,0,8169,8170,1,0,0,0,8170,8171,5,7,0,0,8171,881,1,0,0,0,8172,
        8174,5,71,0,0,8173,8175,5,346,0,0,8174,8173,1,0,0,0,8174,8175,1,
        0,0,0,8175,8176,1,0,0,0,8176,8177,3,724,362,0,8177,883,1,0,0,0,8178,
        8210,5,520,0,0,8179,8184,3,916,458,0,8180,8182,5,269,0,0,8181,8180,
        1,0,0,0,8181,8182,1,0,0,0,8182,8183,1,0,0,0,8183,8185,5,324,0,0,
        8184,8181,1,0,0,0,8184,8185,1,0,0,0,8185,8186,1,0,0,0,8186,8194,
        5,62,0,0,8187,8195,3,554,277,0,8188,8189,5,202,0,0,8189,8192,3,924,
        462,0,8190,8191,5,100,0,0,8191,8193,3,724,362,0,8192,8190,1,0,0,
        0,8192,8193,1,0,0,0,8193,8195,1,0,0,0,8194,8187,1,0,0,0,8194,8188,
        1,0,0,0,8195,8211,1,0,0,0,8196,8208,3,812,406,0,8197,8198,5,2,0,
        0,8198,8203,3,886,443,0,8199,8200,5,6,0,0,8200,8202,3,886,443,0,
        8201,8199,1,0,0,0,8202,8205,1,0,0,0,8203,8201,1,0,0,0,8203,8204,
        1,0,0,0,8204,8206,1,0,0,0,8205,8203,1,0,0,0,8206,8207,5,3,0,0,8207,
        8209,1,0,0,0,8208,8197,1,0,0,0,8208,8209,1,0,0,0,8209,8211,1,0,0,
        0,8210,8179,1,0,0,0,8210,8196,1,0,0,0,8211,8212,1,0,0,0,8212,8213,
        5,7,0,0,8213,885,1,0,0,0,8214,8215,3,812,406,0,8215,8216,5,20,0,
        0,8216,8218,1,0,0,0,8217,8214,1,0,0,0,8217,8218,1,0,0,0,8218,8219,
        1,0,0,0,8219,8220,3,668,334,0,8220,887,1,0,0,0,8221,8223,5,61,0,
        0,8222,8224,3,890,445,0,8223,8222,1,0,0,0,8223,8224,1,0,0,0,8224,
        8226,1,0,0,0,8225,8227,3,326,163,0,8226,8225,1,0,0,0,8226,8227,1,
        0,0,0,8227,8228,1,0,0,0,8228,8229,3,916,458,0,8229,8230,5,71,0,0,
        8230,8231,3,724,362,0,8231,8232,5,7,0,0,8232,889,1,0,0,0,8233,8248,
        5,268,0,0,8234,8248,5,293,0,0,8235,8248,5,207,0,0,8236,8248,5,249,
        0,0,8237,8239,7,51,0,0,8238,8237,1,0,0,0,8238,8239,1,0,0,0,8239,
        8240,1,0,0,0,8240,8248,3,668,334,0,8241,8248,5,30,0,0,8242,8245,
        7,118,0,0,8243,8246,3,668,334,0,8244,8246,5,30,0,0,8245,8243,1,0,
        0,0,8245,8244,1,0,0,0,8245,8246,1,0,0,0,8246,8248,1,0,0,0,8247,8233,
        1,0,0,0,8247,8234,1,0,0,0,8247,8235,1,0,0,0,8247,8236,1,0,0,0,8247,
        8238,1,0,0,0,8247,8241,1,0,0,0,8247,8242,1,0,0,0,8248,891,1,0,0,
        0,8249,8251,5,265,0,0,8250,8252,3,890,445,0,8251,8250,1,0,0,0,8251,
        8252,1,0,0,0,8252,8253,1,0,0,0,8253,8254,3,916,458,0,8254,8255,5,
        7,0,0,8255,893,1,0,0,0,8256,8258,3,566,283,0,8257,8256,1,0,0,0,8257,
        8258,1,0,0,0,8258,8259,1,0,0,0,8259,8260,5,525,0,0,8260,8262,5,71,
        0,0,8261,8263,5,81,0,0,8262,8261,1,0,0,0,8262,8263,1,0,0,0,8263,
        8264,1,0,0,0,8264,8266,3,768,384,0,8265,8267,5,9,0,0,8266,8265,1,
        0,0,0,8266,8267,1,0,0,0,8267,8272,1,0,0,0,8268,8270,5,36,0,0,8269,
        8268,1,0,0,0,8269,8270,1,0,0,0,8270,8271,1,0,0,0,8271,8273,3,812,
        406,0,8272,8269,1,0,0,0,8272,8273,1,0,0,0,8273,8274,1,0,0,0,8274,
        8275,5,100,0,0,8275,8276,3,896,448,0,8276,8277,5,80,0,0,8277,8279,
        3,668,334,0,8278,8280,3,898,449,0,8279,8278,1,0,0,0,8280,8281,1,
        0,0,0,8281,8279,1,0,0,0,8281,8282,1,0,0,0,8282,8284,1,0,0,0,8283,
        8285,3,540,270,0,8284,8283,1,0,0,0,8284,8285,1,0,0,0,8285,895,1,
        0,0,0,8286,8288,5,81,0,0,8287,8286,1,0,0,0,8287,8288,1,0,0,0,8288,
        8289,1,0,0,0,8289,8291,3,768,384,0,8290,8292,5,9,0,0,8291,8290,1,
        0,0,0,8291,8292,1,0,0,0,8292,8298,1,0,0,0,8293,8296,3,558,279,0,
        8294,8296,3,602,301,0,8295,8293,1,0,0,0,8295,8294,1,0,0,0,8296,8298,
        1,0,0,0,8297,8287,1,0,0,0,8297,8295,1,0,0,0,8298,8303,1,0,0,0,8299,
        8301,5,36,0,0,8300,8299,1,0,0,0,8300,8301,1,0,0,0,8301,8302,1,0,
        0,0,8302,8304,3,812,406,0,8303,8300,1,0,0,0,8303,8304,1,0,0,0,8304,
        897,1,0,0,0,8305,8306,5,102,0,0,8306,8309,5,526,0,0,8307,8308,5,
        33,0,0,8308,8310,3,668,334,0,8309,8307,1,0,0,0,8309,8310,1,0,0,0,
        8310,8311,1,0,0,0,8311,8316,5,93,0,0,8312,8317,3,902,451,0,8313,
        8317,5,182,0,0,8314,8315,5,57,0,0,8315,8317,5,270,0,0,8316,8312,
        1,0,0,0,8316,8313,1,0,0,0,8316,8314,1,0,0,0,8317,8332,1,0,0,0,8318,
        8319,5,102,0,0,8319,8320,5,77,0,0,8320,8323,5,526,0,0,8321,8322,
        5,33,0,0,8322,8324,3,668,334,0,8323,8321,1,0,0,0,8323,8324,1,0,0,
        0,8324,8325,1,0,0,0,8325,8329,5,93,0,0,8326,8330,3,900,450,0,8327,
        8328,5,57,0,0,8328,8330,5,270,0,0,8329,8326,1,0,0,0,8329,8327,1,
        0,0,0,8330,8332,1,0,0,0,8331,8305,1,0,0,0,8331,8318,1,0,0,0,8332,
        899,1,0,0,0,8333,8335,5,241,0,0,8334,8336,3,138,69,0,8335,8334,1,
        0,0,0,8335,8336,1,0,0,0,8336,8340,1,0,0,0,8337,8338,5,463,0,0,8338,
        8339,7,77,0,0,8339,8341,5,450,0,0,8340,8337,1,0,0,0,8340,8341,1,
        0,0,0,8341,8342,1,0,0,0,8342,8343,3,904,452,0,8343,901,1,0,0,0,8344,
        8345,5,369,0,0,8345,8363,5,333,0,0,8346,8347,3,794,397,0,8347,8348,
        5,10,0,0,8348,8349,3,906,453,0,8349,8364,1,0,0,0,8350,8351,3,138,
        69,0,8351,8352,5,10,0,0,8352,8353,5,2,0,0,8353,8358,3,906,453,0,
        8354,8355,5,6,0,0,8355,8357,3,906,453,0,8356,8354,1,0,0,0,8357,8360,
        1,0,0,0,8358,8356,1,0,0,0,8358,8359,1,0,0,0,8359,8361,1,0,0,0,8360,
        8358,1,0,0,0,8361,8362,5,3,0,0,8362,8364,1,0,0,0,8363,8346,1,0,0,
        0,8363,8350,1,0,0,0,8364,8365,1,0,0,0,8365,8363,1,0,0,0,8365,8366,
        1,0,0,0,8366,903,1,0,0,0,8367,8368,5,422,0,0,8368,8369,5,2,0,0,8369,
        8374,3,906,453,0,8370,8371,5,6,0,0,8371,8373,3,906,453,0,8372,8370,
        1,0,0,0,8373,8376,1,0,0,0,8374,8372,1,0,0,0,8374,8375,1,0,0,0,8375,
        8377,1,0,0,0,8376,8374,1,0,0,0,8377,8378,5,3,0,0,8378,8382,1,0,0,
        0,8379,8380,5,53,0,0,8380,8382,5,422,0,0,8381,8367,1,0,0,0,8381,
        8379,1,0,0,0,8382,905,1,0,0,0,8383,8386,3,582,291,0,8384,8386,5,
        53,0,0,8385,8383,1,0,0,0,8385,8384,1,0,0,0,8386,907,1,0,0,0,8387,
        8388,5,157,0,0,8388,8389,3,916,458,0,8389,8390,5,7,0,0,8390,909,
        1,0,0,0,8391,8392,5,78,0,0,8392,8393,5,7,0,0,8393,911,1,0,0,0,8394,
        8400,7,68,0,0,8395,8397,5,33,0,0,8396,8398,5,269,0,0,8397,8396,1,
        0,0,0,8397,8398,1,0,0,0,8398,8399,1,0,0,0,8399,8401,5,153,0,0,8400,
        8395,1,0,0,0,8400,8401,1,0,0,0,8401,8402,1,0,0,0,8402,8403,5,7,0,
        0,8403,913,1,0,0,0,8404,8405,5,333,0,0,8405,8406,3,310,155,0,8406,
        8407,5,94,0,0,8407,8408,5,53,0,0,8408,8409,5,7,0,0,8409,8417,1,0,
        0,0,8410,8413,5,313,0,0,8411,8414,3,310,155,0,8412,8414,5,30,0,0,
        8413,8411,1,0,0,0,8413,8412,1,0,0,0,8414,8415,1,0,0,0,8415,8417,
        5,7,0,0,8416,8404,1,0,0,0,8416,8410,1,0,0,0,8417,915,1,0,0,0,8418,
        8421,3,812,406,0,8419,8421,5,28,0,0,8420,8418,1,0,0,0,8420,8419,
        1,0,0,0,8421,917,1,0,0,0,8422,8439,5,517,0,0,8423,8424,5,102,0,0,
        8424,8429,3,920,460,0,8425,8426,5,82,0,0,8426,8428,3,920,460,0,8427,
        8425,1,0,0,0,8428,8431,1,0,0,0,8429,8427,1,0,0,0,8429,8430,1,0,0,
        0,8430,8432,1,0,0,0,8431,8429,1,0,0,0,8432,8436,5,93,0,0,8433,8435,
        3,840,420,0,8434,8433,1,0,0,0,8435,8438,1,0,0,0,8436,8434,1,0,0,
        0,8436,8437,1,0,0,0,8437,8440,1,0,0,0,8438,8436,1,0,0,0,8439,8423,
        1,0,0,0,8440,8441,1,0,0,0,8441,8439,1,0,0,0,8441,8442,1,0,0,0,8442,
        919,1,0,0,0,8443,8447,3,922,461,0,8444,8445,5,511,0,0,8445,8447,
        3,802,401,0,8446,8443,1,0,0,0,8446,8444,1,0,0,0,8447,921,1,0,0,0,
        8448,8451,3,812,406,0,8449,8451,3,822,411,0,8450,8448,1,0,0,0,8450,
        8449,1,0,0,0,8451,923,1,0,0,0,8452,8454,3,750,375,0,8453,8452,1,
        0,0,0,8453,8454,1,0,0,0,8454,8456,1,0,0,0,8455,8457,3,574,287,0,
        8456,8455,1,0,0,0,8456,8457,1,0,0,0,8457,8459,1,0,0,0,8458,8460,
        3,604,302,0,8459,8458,1,0,0,0,8459,8460,1,0,0,0,8460,8462,1,0,0,
        0,8461,8463,3,632,316,0,8462,8461,1,0,0,0,8462,8463,1,0,0,0,8463,
        8465,1,0,0,0,8464,8466,3,594,297,0,8465,8464,1,0,0,0,8465,8466,1,
        0,0,0,8466,8469,1,0,0,0,8467,8468,5,67,0,0,8468,8470,3,668,334,0,
        8469,8467,1,0,0,0,8469,8470,1,0,0,0,8470,8472,1,0,0,0,8471,8473,
        3,696,348,0,8472,8471,1,0,0,0,8472,8473,1,0,0,0,8473,925,1,0,0,0,
        1190,929,936,1056,1058,1067,1072,1078,1113,1123,1129,1134,1141,1146,
        1153,1164,1172,1176,1188,1194,1200,1204,1209,1213,1226,1236,1238,
        1244,1249,1262,1265,1270,1275,1286,1290,1302,1306,1309,1313,1325,
        1343,1350,1358,1363,1370,1378,1384,1392,1400,1404,1418,1423,1428,
        1440,1446,1458,1463,1473,1479,1484,1493,1500,1505,1510,1520,1525,
        1530,1537,1541,1555,1561,1567,1572,1579,1588,1597,1606,1615,1619,
        1631,1639,1649,1669,1674,1677,1684,1687,1691,1695,1698,1703,1708,
        1712,1721,1727,1731,1740,1743,1749,1758,1770,1774,1778,1783,1786,
        1792,1794,1796,1800,1806,1810,1815,1820,1824,1827,1834,1847,1860,
        1885,1895,1902,1907,1911,1918,1923,1926,1928,1933,1937,1941,1945,
        1950,1953,1957,1960,1964,1972,1977,1980,1984,1990,1999,2003,2013,
        2018,2022,2026,2028,2030,2037,2042,2046,2051,2063,2068,2072,2076,
        2081,2085,2088,2091,2094,2097,2100,2105,2108,2111,2114,2117,2120,
        2126,2130,2133,2136,2139,2142,2144,2151,2159,2169,2174,2184,2187,
        2192,2197,2202,2205,2210,2219,2221,2225,2228,2232,2237,2242,2246,
        2249,2253,2256,2261,2264,2269,2272,2276,2279,2282,2287,2290,2298,
        2310,2314,2321,2326,2329,2332,2335,2340,2351,2357,2361,2364,2367,
        2372,2379,2382,2386,2394,2399,2402,2405,2412,2417,2426,2429,2432,
        2437,2440,2452,2462,2479,2483,2487,2489,2506,2508,2524,2535,2538,
        2541,2550,2559,2575,2578,2581,2589,2593,2600,2609,2613,2619,2623,
        2626,2629,2632,2635,2641,2645,2650,2654,2657,2660,2663,2668,2674,
        2678,2682,2686,2692,2694,2699,2705,2711,2715,2730,2735,2738,2740,
        2743,2747,2751,2754,2757,2765,2771,2773,2779,2784,2789,2793,2800,
        2802,2813,2852,2862,2864,2867,2871,2875,2885,2887,2893,2895,2904,
        2916,2930,2935,2938,2945,2950,2958,2960,2966,2971,2975,2980,2986,
        2993,2999,3001,3010,3016,3024,3030,3035,3040,3048,3063,3065,3069,
        3073,3076,3079,3088,3091,3094,3100,3106,3110,3122,3128,3131,3136,
        3140,3147,3157,3159,3183,3195,3200,3202,3206,3209,3212,3222,3225,
        3235,3240,3245,3248,3251,3259,3265,3272,3280,3283,3294,3298,3304,
        3311,3314,3323,3337,3340,3354,3365,3368,3380,3385,3398,3403,3416,
        3425,3428,3431,3438,3441,3453,3459,3461,3469,3477,3485,3497,3502,
        3513,3524,3532,3540,3547,3554,3556,3559,3564,3569,3588,3597,3600,
        3627,3636,3639,3643,3647,3651,3658,3662,3666,3670,3674,3679,3683,
        3688,3694,3699,3706,3710,3716,3720,3725,3733,3739,3744,3751,3756,
        3760,3765,3771,3778,3783,3790,3795,3802,3806,3814,3818,3820,3823,
        3828,3838,3853,3856,3864,3871,3876,3882,3886,3893,3898,3901,3904,
        3908,3917,3935,3938,3970,3975,3981,4001,4006,4012,4015,4019,4023,
        4029,4032,4036,4040,4045,4048,4051,4054,4067,4073,4081,4088,4093,
        4096,4103,4106,4114,4117,4122,4129,4132,4152,4164,4167,4173,4178,
        4187,4195,4200,4206,4213,4221,4224,4235,4237,4251,4257,4265,4267,
        4273,4277,4280,4283,4288,4293,4297,4300,4303,4306,4309,4317,4328,
        4331,4334,4339,4342,4346,4350,4356,4364,4367,4380,4385,4387,4392,
        4399,4406,4415,4423,4431,4438,4446,4453,4461,4465,4469,4471,4477,
        4482,4486,4493,4498,4503,4508,4510,4520,4530,4546,4564,4576,4583,
        4598,4603,4606,4611,4616,4621,4624,4627,4632,4639,4643,4648,4655,
        4659,4665,4674,4683,4695,4697,4710,4716,4720,4722,4729,4742,4749,
        4751,4767,4771,4775,4780,4785,4790,4795,4798,4810,4863,4872,4876,
        4885,4889,4898,4902,4907,4910,4914,4919,4921,4930,4935,4946,4950,
        4964,4972,5010,5012,5031,5034,5061,5065,5069,5073,5077,5080,5095,
        5102,5116,5129,5154,5173,5188,5204,5211,5222,5225,5244,5247,5260,
        5264,5284,5296,5300,5322,5326,5336,5340,5346,5350,5354,5358,5365,
        5370,5381,5385,5388,5393,5399,5410,5414,5417,5421,5425,5428,5438,
        5441,5445,5450,5456,5459,5464,5467,5474,5476,5482,5486,5495,5500,
        5502,5512,5515,5520,5528,5531,5536,5538,5540,5546,5563,5569,5582,
        5588,5592,5597,5627,5642,5647,5651,5664,5668,5670,5679,5685,5687,
        5691,5694,5697,5700,5703,5705,5708,5712,5720,5725,5728,5734,5738,
        5742,5747,5749,5753,5757,5764,5770,5774,5776,5778,5791,5799,5807,
        5818,5828,5833,5837,5841,5848,5851,5853,5861,5865,5868,5875,5882,
        5887,5894,5897,5899,5902,5908,5913,5917,5924,5934,5941,5944,5947,
        5951,5962,5965,5968,5971,5974,5981,5984,5987,5994,6006,6013,6015,
        6020,6025,6027,6033,6040,6045,6050,6054,6058,6062,6064,6068,6072,
        6075,6078,6080,6090,6092,6097,6101,6106,6110,6117,6122,6126,6129,
        6135,6138,6157,6164,6168,6171,6175,6179,6182,6185,6190,6199,6206,
        6210,6214,6218,6221,6223,6228,6232,6237,6243,6250,6255,6260,6269,
        6276,6284,6295,6300,6304,6307,6311,6316,6320,6325,6333,6344,6349,
        6353,6356,6359,6361,6364,6367,6370,6374,6378,6382,6384,6393,6398,
        6404,6408,6410,6417,6422,6428,6430,6434,6441,6446,6449,6455,6459,
        6465,6474,6480,6482,6487,6490,6499,6506,6508,6515,6520,6523,6533,
        6544,6549,6553,6561,6571,6578,6584,6595,6601,6611,6620,6624,6627,
        6629,6631,6635,6643,6646,6651,6656,6663,6665,6671,6675,6678,6683,
        6686,6688,6694,6703,6709,6712,6720,6723,6727,6733,6735,6738,6742,
        6747,6754,6761,6763,6769,6771,6776,6778,6782,6791,6795,6803,6805,
        6819,6822,6830,6839,6845,6850,6858,6860,6865,6869,6874,6879,6885,
        6901,6903,6912,6927,6932,6935,6941,6946,6959,6964,6968,6975,6994,
        7006,7011,7019,7021,7023,7032,7035,7040,7045,7048,7059,7067,7072,
        7074,7077,7081,7092,7113,7121,7134,7144,7150,7156,7159,7162,7188,
        7190,7211,7221,7234,7239,7243,7245,7257,7264,7270,7276,7280,7291,
        7301,7305,7310,7313,7316,7325,7336,7338,7342,7347,7356,7361,7369,
        7379,7387,7391,7394,7401,7409,7413,7420,7428,7430,7439,7442,7454,
        7463,7470,7479,7489,7494,7498,7500,7503,7508,7513,7521,7529,7532,
        7539,7547,7555,7563,7580,7587,7595,7612,7618,7624,7632,7638,7643,
        7651,7656,7659,7668,7675,7680,7684,7689,7695,7700,7708,7763,7770,
        7776,7778,7780,7782,7788,7792,7796,7807,7810,7814,7818,7822,7825,
        7828,7831,7840,7845,7849,7882,7892,7896,7902,7907,7916,7924,7935,
        7943,7952,7961,7966,7970,7980,7985,7993,7998,8001,8008,8014,8022,
        8030,8033,8040,8042,8045,8051,8060,8064,8078,8081,8083,8089,8099,
        8101,8103,8111,8114,8117,8127,8135,8141,8147,8154,8158,8162,8165,
        8168,8174,8181,8184,8192,8194,8203,8208,8210,8217,8223,8226,8238,
        8245,8247,8251,8257,8262,8266,8269,8272,8281,8284,8287,8291,8295,
        8297,8300,8303,8309,8316,8323,8329,8331,8335,8340,8358,8363,8365,
        8374,8381,8385,8397,8400,8413,8416,8420,8429,8436,8441,8446,8450,
        8453,8456,8459,8462,8465,8469,8472
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!PostgreSqlParser.__ATN) {
            PostgreSqlParser.__ATN = new antlr.ATNDeserializer().deserialize(PostgreSqlParser._serializedATN);
        }

        return PostgreSqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(PostgreSqlParser.literalNames, PostgreSqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return PostgreSqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = PostgreSqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EOF, 0)!;
    }
    public singleStmt(): SingleStmtContext[];
    public singleStmt(i: number): SingleStmtContext | null;
    public singleStmt(i?: number): SingleStmtContext[] | SingleStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SingleStmtContext);
        }

        return this.getRuleContext(i, SingleStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_program;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stmt(): StmtContext {
        return this.getRuleContext(0, StmtContext)!;
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_singleStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSingleStmt) {
             listener.enterSingleStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSingleStmt) {
             listener.exitSingleStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSingleStmt) {
            return visitor.visitSingleStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterEventTrigStmt(): AlterEventTrigStmtContext | null {
        return this.getRuleContext(0, AlterEventTrigStmtContext);
    }
    public alterCollationStmt(): AlterCollationStmtContext | null {
        return this.getRuleContext(0, AlterCollationStmtContext);
    }
    public alterDatabaseStmt(): AlterDatabaseStmtContext | null {
        return this.getRuleContext(0, AlterDatabaseStmtContext);
    }
    public alterDatabaseSetStmt(): AlterDatabaseSetStmtContext | null {
        return this.getRuleContext(0, AlterDatabaseSetStmtContext);
    }
    public alterDefaultPrivilegesStmt(): AlterDefaultPrivilegesStmtContext | null {
        return this.getRuleContext(0, AlterDefaultPrivilegesStmtContext);
    }
    public alterDomainStmt(): AlterDomainStmtContext | null {
        return this.getRuleContext(0, AlterDomainStmtContext);
    }
    public alterEnumStmt(): AlterEnumStmtContext | null {
        return this.getRuleContext(0, AlterEnumStmtContext);
    }
    public alterExtensionStmt(): AlterExtensionStmtContext | null {
        return this.getRuleContext(0, AlterExtensionStmtContext);
    }
    public alterExtensionContentsStmt(): AlterExtensionContentsStmtContext | null {
        return this.getRuleContext(0, AlterExtensionContentsStmtContext);
    }
    public alterFdwStmt(): AlterFdwStmtContext | null {
        return this.getRuleContext(0, AlterFdwStmtContext);
    }
    public alterForeignServerStmt(): AlterForeignServerStmtContext | null {
        return this.getRuleContext(0, AlterForeignServerStmtContext);
    }
    public alterFunctionStmt(): AlterFunctionStmtContext | null {
        return this.getRuleContext(0, AlterFunctionStmtContext);
    }
    public alterGroupStmt(): AlterGroupStmtContext | null {
        return this.getRuleContext(0, AlterGroupStmtContext);
    }
    public alterObjectDependsStmt(): AlterObjectDependsStmtContext | null {
        return this.getRuleContext(0, AlterObjectDependsStmtContext);
    }
    public alterObjectSchemaStmt(): AlterObjectSchemaStmtContext | null {
        return this.getRuleContext(0, AlterObjectSchemaStmtContext);
    }
    public alterOwnerStmt(): AlterOwnerStmtContext | null {
        return this.getRuleContext(0, AlterOwnerStmtContext);
    }
    public alterOperatorStmt(): AlterOperatorStmtContext | null {
        return this.getRuleContext(0, AlterOperatorStmtContext);
    }
    public alterTypeStmt(): AlterTypeStmtContext | null {
        return this.getRuleContext(0, AlterTypeStmtContext);
    }
    public alterPolicyStmt(): AlterPolicyStmtContext | null {
        return this.getRuleContext(0, AlterPolicyStmtContext);
    }
    public alterProcedureStmt(): AlterProcedureStmtContext | null {
        return this.getRuleContext(0, AlterProcedureStmtContext);
    }
    public alterSeqStmt(): AlterSeqStmtContext | null {
        return this.getRuleContext(0, AlterSeqStmtContext);
    }
    public alterSystemStmt(): AlterSystemStmtContext | null {
        return this.getRuleContext(0, AlterSystemStmtContext);
    }
    public alterTableStmt(): AlterTableStmtContext | null {
        return this.getRuleContext(0, AlterTableStmtContext);
    }
    public alterTblSpcStmt(): AlterTblSpcStmtContext | null {
        return this.getRuleContext(0, AlterTblSpcStmtContext);
    }
    public alterCompositeTypeStmt(): AlterCompositeTypeStmtContext | null {
        return this.getRuleContext(0, AlterCompositeTypeStmtContext);
    }
    public alterPublicationStmt(): AlterPublicationStmtContext | null {
        return this.getRuleContext(0, AlterPublicationStmtContext);
    }
    public alterRoleSetStmt(): AlterRoleSetStmtContext | null {
        return this.getRuleContext(0, AlterRoleSetStmtContext);
    }
    public alterRoutineStmt(): AlterRoutineStmtContext | null {
        return this.getRuleContext(0, AlterRoutineStmtContext);
    }
    public alterRoleStmt(): AlterRoleStmtContext | null {
        return this.getRuleContext(0, AlterRoleStmtContext);
    }
    public alterSubscriptionStmt(): AlterSubscriptionStmtContext | null {
        return this.getRuleContext(0, AlterSubscriptionStmtContext);
    }
    public alterStatsStmt(): AlterStatsStmtContext | null {
        return this.getRuleContext(0, AlterStatsStmtContext);
    }
    public alterSearchConfigurationStmt(): AlterSearchConfigurationStmtContext | null {
        return this.getRuleContext(0, AlterSearchConfigurationStmtContext);
    }
    public alterSearchDictionaryStmt(): AlterSearchDictionaryStmtContext | null {
        return this.getRuleContext(0, AlterSearchDictionaryStmtContext);
    }
    public alterUserMappingStmt(): AlterUserMappingStmtContext | null {
        return this.getRuleContext(0, AlterUserMappingStmtContext);
    }
    public analyzeStmt(): AnalyzeStmtContext | null {
        return this.getRuleContext(0, AnalyzeStmtContext);
    }
    public callStmt(): CallStmtContext | null {
        return this.getRuleContext(0, CallStmtContext);
    }
    public checkPointStmt(): CheckPointStmtContext | null {
        return this.getRuleContext(0, CheckPointStmtContext);
    }
    public closePortalStmt(): ClosePortalStmtContext | null {
        return this.getRuleContext(0, ClosePortalStmtContext);
    }
    public clusterStmt(): ClusterStmtContext | null {
        return this.getRuleContext(0, ClusterStmtContext);
    }
    public commentStmt(): CommentStmtContext | null {
        return this.getRuleContext(0, CommentStmtContext);
    }
    public constraintsSetStmt(): ConstraintsSetStmtContext | null {
        return this.getRuleContext(0, ConstraintsSetStmtContext);
    }
    public copyStmt(): CopyStmtContext | null {
        return this.getRuleContext(0, CopyStmtContext);
    }
    public createAccessMethodStmt(): CreateAccessMethodStmtContext | null {
        return this.getRuleContext(0, CreateAccessMethodStmtContext);
    }
    public createAsStmt(): CreateAsStmtContext | null {
        return this.getRuleContext(0, CreateAsStmtContext);
    }
    public createAssertionStmt(): CreateAssertionStmtContext | null {
        return this.getRuleContext(0, CreateAssertionStmtContext);
    }
    public createCastStmt(): CreateCastStmtContext | null {
        return this.getRuleContext(0, CreateCastStmtContext);
    }
    public createConversionStmt(): CreateConversionStmtContext | null {
        return this.getRuleContext(0, CreateConversionStmtContext);
    }
    public createDomainStmt(): CreateDomainStmtContext | null {
        return this.getRuleContext(0, CreateDomainStmtContext);
    }
    public createExtensionStmt(): CreateExtensionStmtContext | null {
        return this.getRuleContext(0, CreateExtensionStmtContext);
    }
    public createFdwStmt(): CreateFdwStmtContext | null {
        return this.getRuleContext(0, CreateFdwStmtContext);
    }
    public createForeignServerStmt(): CreateForeignServerStmtContext | null {
        return this.getRuleContext(0, CreateForeignServerStmtContext);
    }
    public createForeignTableStmt(): CreateForeignTableStmtContext | null {
        return this.getRuleContext(0, CreateForeignTableStmtContext);
    }
    public createFunctionStmt(): CreateFunctionStmtContext | null {
        return this.getRuleContext(0, CreateFunctionStmtContext);
    }
    public createGroupStmt(): CreateGroupStmtContext | null {
        return this.getRuleContext(0, CreateGroupStmtContext);
    }
    public createMaterializedViewStmt(): CreateMaterializedViewStmtContext | null {
        return this.getRuleContext(0, CreateMaterializedViewStmtContext);
    }
    public createOperatorClassStmt(): CreateOperatorClassStmtContext | null {
        return this.getRuleContext(0, CreateOperatorClassStmtContext);
    }
    public createOperatorFamilyStmt(): CreateOperatorFamilyStmtContext | null {
        return this.getRuleContext(0, CreateOperatorFamilyStmtContext);
    }
    public createPublicationStmt(): CreatePublicationStmtContext | null {
        return this.getRuleContext(0, CreatePublicationStmtContext);
    }
    public alterOperatorFamilyStmt(): AlterOperatorFamilyStmtContext | null {
        return this.getRuleContext(0, AlterOperatorFamilyStmtContext);
    }
    public createPolicyStmt(): CreatePolicyStmtContext | null {
        return this.getRuleContext(0, CreatePolicyStmtContext);
    }
    public createProceduralLangStmt(): CreateProceduralLangStmtContext | null {
        return this.getRuleContext(0, CreateProceduralLangStmtContext);
    }
    public createSchemaStmt(): CreateSchemaStmtContext | null {
        return this.getRuleContext(0, CreateSchemaStmtContext);
    }
    public createSeqStmt(): CreateSeqStmtContext | null {
        return this.getRuleContext(0, CreateSeqStmtContext);
    }
    public createStmt(): CreateStmtContext | null {
        return this.getRuleContext(0, CreateStmtContext);
    }
    public createSubscriptionStmt(): CreateSubscriptionStmtContext | null {
        return this.getRuleContext(0, CreateSubscriptionStmtContext);
    }
    public createStatsStmt(): CreateStatsStmtContext | null {
        return this.getRuleContext(0, CreateStatsStmtContext);
    }
    public createTableSpaceStmt(): CreateTableSpaceStmtContext | null {
        return this.getRuleContext(0, CreateTableSpaceStmtContext);
    }
    public createTransformStmt(): CreateTransformStmtContext | null {
        return this.getRuleContext(0, CreateTransformStmtContext);
    }
    public createTrigStmt(): CreateTrigStmtContext | null {
        return this.getRuleContext(0, CreateTrigStmtContext);
    }
    public createEventTrigStmt(): CreateEventTrigStmtContext | null {
        return this.getRuleContext(0, CreateEventTrigStmtContext);
    }
    public createRoleStmt(): CreateRoleStmtContext | null {
        return this.getRuleContext(0, CreateRoleStmtContext);
    }
    public createUserStmt(): CreateUserStmtContext | null {
        return this.getRuleContext(0, CreateUserStmtContext);
    }
    public createUserMappingStmt(): CreateUserMappingStmtContext | null {
        return this.getRuleContext(0, CreateUserMappingStmtContext);
    }
    public createDbStmt(): CreateDbStmtContext | null {
        return this.getRuleContext(0, CreateDbStmtContext);
    }
    public dealLocateStmt(): DealLocateStmtContext | null {
        return this.getRuleContext(0, DealLocateStmtContext);
    }
    public declareCursorStmt(): DeclareCursorStmtContext | null {
        return this.getRuleContext(0, DeclareCursorStmtContext);
    }
    public defineStmt(): DefineStmtContext | null {
        return this.getRuleContext(0, DefineStmtContext);
    }
    public deleteStmt(): DeleteStmtContext | null {
        return this.getRuleContext(0, DeleteStmtContext);
    }
    public discardStmt(): DiscardStmtContext | null {
        return this.getRuleContext(0, DiscardStmtContext);
    }
    public doStmt(): DoStmtContext | null {
        return this.getRuleContext(0, DoStmtContext);
    }
    public dropStmt(): DropStmtContext | null {
        return this.getRuleContext(0, DropStmtContext);
    }
    public executeStmt(): ExecuteStmtContext | null {
        return this.getRuleContext(0, ExecuteStmtContext);
    }
    public explainStmt(): ExplainStmtContext | null {
        return this.getRuleContext(0, ExplainStmtContext);
    }
    public fetchStmt(): FetchStmtContext | null {
        return this.getRuleContext(0, FetchStmtContext);
    }
    public grantStmt(): GrantStmtContext | null {
        return this.getRuleContext(0, GrantStmtContext);
    }
    public grantRoleStmt(): GrantRoleStmtContext | null {
        return this.getRuleContext(0, GrantRoleStmtContext);
    }
    public mergeStmt(): MergeStmtContext | null {
        return this.getRuleContext(0, MergeStmtContext);
    }
    public importForeignSchemaStmt(): ImportForeignSchemaStmtContext | null {
        return this.getRuleContext(0, ImportForeignSchemaStmtContext);
    }
    public indexStmt(): IndexStmtContext | null {
        return this.getRuleContext(0, IndexStmtContext);
    }
    public insertStmt(): InsertStmtContext | null {
        return this.getRuleContext(0, InsertStmtContext);
    }
    public listenStmt(): ListenStmtContext | null {
        return this.getRuleContext(0, ListenStmtContext);
    }
    public refreshMaterializedViewStmt(): RefreshMaterializedViewStmtContext | null {
        return this.getRuleContext(0, RefreshMaterializedViewStmtContext);
    }
    public loadStmt(): LoadStmtContext | null {
        return this.getRuleContext(0, LoadStmtContext);
    }
    public lockStmt(): LockStmtContext | null {
        return this.getRuleContext(0, LockStmtContext);
    }
    public notifyStmt(): NotifyStmtContext | null {
        return this.getRuleContext(0, NotifyStmtContext);
    }
    public prepareStmt(): PrepareStmtContext | null {
        return this.getRuleContext(0, PrepareStmtContext);
    }
    public reassignOwnedStmt(): ReassignOwnedStmtContext | null {
        return this.getRuleContext(0, ReassignOwnedStmtContext);
    }
    public reindexStmt(): ReindexStmtContext | null {
        return this.getRuleContext(0, ReindexStmtContext);
    }
    public removeAggregateStmt(): RemoveAggregateStmtContext | null {
        return this.getRuleContext(0, RemoveAggregateStmtContext);
    }
    public removeFuncStmt(): RemoveFuncStmtContext | null {
        return this.getRuleContext(0, RemoveFuncStmtContext);
    }
    public removeOperatorStmt(): RemoveOperatorStmtContext | null {
        return this.getRuleContext(0, RemoveOperatorStmtContext);
    }
    public renameStmt(): RenameStmtContext | null {
        return this.getRuleContext(0, RenameStmtContext);
    }
    public revokeStmt(): RevokeStmtContext | null {
        return this.getRuleContext(0, RevokeStmtContext);
    }
    public revokeRoleStmt(): RevokeRoleStmtContext | null {
        return this.getRuleContext(0, RevokeRoleStmtContext);
    }
    public ruleStmt(): RuleStmtContext | null {
        return this.getRuleContext(0, RuleStmtContext);
    }
    public secLabelStmt(): SecLabelStmtContext | null {
        return this.getRuleContext(0, SecLabelStmtContext);
    }
    public selectStmt(): SelectStmtContext | null {
        return this.getRuleContext(0, SelectStmtContext);
    }
    public transactionStmt(): TransactionStmtContext | null {
        return this.getRuleContext(0, TransactionStmtContext);
    }
    public truncateStmt(): TruncateStmtContext | null {
        return this.getRuleContext(0, TruncateStmtContext);
    }
    public unListenStmt(): UnListenStmtContext | null {
        return this.getRuleContext(0, UnListenStmtContext);
    }
    public updateStmt(): UpdateStmtContext | null {
        return this.getRuleContext(0, UpdateStmtContext);
    }
    public vacuumStmt(): VacuumStmtContext | null {
        return this.getRuleContext(0, VacuumStmtContext);
    }
    public variableResetStmt(): VariableResetStmtContext | null {
        return this.getRuleContext(0, VariableResetStmtContext);
    }
    public variableSetStmt(): VariableSetStmtContext | null {
        return this.getRuleContext(0, VariableSetStmtContext);
    }
    public variableShowStmt(): VariableShowStmtContext | null {
        return this.getRuleContext(0, VariableShowStmtContext);
    }
    public viewStmt(): ViewStmtContext | null {
        return this.getRuleContext(0, ViewStmtContext);
    }
    public MetaCommand(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MetaCommand, 0);
    }
    public EndMetaCommand(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EndMetaCommand, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt) {
             listener.enterStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt) {
             listener.exitStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt) {
            return visitor.visitStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CALL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CALL, 0)!;
    }
    public funcApplication(): FuncApplicationContext {
        return this.getRuleContext(0, FuncApplicationContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_callStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCallStmt) {
             listener.enterCallStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCallStmt) {
             listener.exitCallStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCallStmt) {
            return visitor.visitCallStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoleStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0)!;
    }
    public roleSpec(): RoleSpecContext {
        return this.getRuleContext(0, RoleSpecContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createOperatorRoleElem(): CreateOperatorRoleElemContext[];
    public createOperatorRoleElem(i: number): CreateOperatorRoleElemContext | null;
    public createOperatorRoleElem(i?: number): CreateOperatorRoleElemContext[] | CreateOperatorRoleElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateOperatorRoleElemContext);
        }

        return this.getRuleContext(i, CreateOperatorRoleElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createRoleStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateRoleStmt) {
             listener.enterCreateRoleStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateRoleStmt) {
             listener.exitCreateRoleStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRoleStmt) {
            return visitor.visitCreateRoleStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterOperatorRoleElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PASSWORD, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCRYPTED, 0);
    }
    public KW_UNENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNENCRYPTED, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public KW_NOINHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOINHERIT, 0);
    }
    public KW_CREATEUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATEUSER, 0);
    }
    public KW_NOCREATEUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOCREATEUSER, 0);
    }
    public KW_CREATEROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATEROLE, 0);
    }
    public KW_NOCREATEROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOCREATEROLE, 0);
    }
    public KW_CREATEDB(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATEDB, 0);
    }
    public KW_NOCREATEDB(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOCREATEDB, 0);
    }
    public KW_SUPERUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUPERUSER, 0);
    }
    public KW_NOSUPERUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOSUPERUSER, 0);
    }
    public KW_LOGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOGIN, 0);
    }
    public KW_NOLOGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOLOGIN, 0);
    }
    public KW_REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICATION, 0);
    }
    public KW_NOREPLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOREPLICATION, 0);
    }
    public KW_BYPASSRLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BYPASSRLS, 0);
    }
    public KW_NOBYPASSRLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOBYPASSRLS, 0);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public signedConst(): SignedConstContext | null {
        return this.getRuleContext(0, SignedConstContext);
    }
    public KW_VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALID, 0);
    }
    public KW_UNTIL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNTIL, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public nameList(): NameListContext | null {
        return this.getRuleContext(0, NameListContext);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(0, RoleListContext);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterOperatorRoleElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterOperatorRoleElem) {
             listener.enterAlterOperatorRoleElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterOperatorRoleElem) {
             listener.exitAlterOperatorRoleElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterOperatorRoleElem) {
            return visitor.visitAlterOperatorRoleElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOperatorRoleElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterOperatorRoleElem(): AlterOperatorRoleElemContext | null {
        return this.getRuleContext(0, AlterOperatorRoleElemContext);
    }
    public KW_SYSID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSID, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(0, RoleListContext);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createOperatorRoleElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateOperatorRoleElem) {
             listener.enterCreateOperatorRoleElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateOperatorRoleElem) {
             listener.exitCreateOperatorRoleElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOperatorRoleElem) {
            return visitor.visitCreateOperatorRoleElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_USER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USER, 0)!;
    }
    public roleSpec(): RoleSpecContext {
        return this.getRuleContext(0, RoleSpecContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createOperatorRoleElem(): CreateOperatorRoleElemContext[];
    public createOperatorRoleElem(i: number): CreateOperatorRoleElemContext | null;
    public createOperatorRoleElem(i?: number): CreateOperatorRoleElemContext[] | CreateOperatorRoleElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateOperatorRoleElemContext);
        }

        return this.getRuleContext(i, CreateOperatorRoleElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createUserStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateUserStmt) {
             listener.enterCreateUserStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateUserStmt) {
             listener.exitCreateUserStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUserStmt) {
            return visitor.visitCreateUserStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterRoleStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public roleSpec(): RoleSpecContext {
        return this.getRuleContext(0, RoleSpecContext)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public alterOperatorRoleElem(): AlterOperatorRoleElemContext[];
    public alterOperatorRoleElem(i: number): AlterOperatorRoleElemContext | null;
    public alterOperatorRoleElem(i?: number): AlterOperatorRoleElemContext[] | AlterOperatorRoleElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterOperatorRoleElemContext);
        }

        return this.getRuleContext(i, AlterOperatorRoleElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterRoleStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterRoleStmt) {
             listener.enterAlterRoleStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterRoleStmt) {
             listener.exitAlterRoleStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterRoleStmt) {
            return visitor.visitAlterRoleStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterRoleSetStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public databaseName(): DatabaseNameContext {
        return this.getRuleContext(0, DatabaseNameContext)!;
    }
    public setOrResetClause(): SetOrResetClauseContext {
        return this.getRuleContext(0, SetOrResetClauseContext)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterRoleSetStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterRoleSetStmt) {
             listener.enterAlterRoleSetStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterRoleSetStmt) {
             listener.exitAlterRoleSetStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterRoleSetStmt) {
            return visitor.visitAlterRoleSetStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterRoutineStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_ROUTINE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0)!;
    }
    public routineName(): RoutineNameContext {
        return this.getRuleContext(0, RoutineNameContext)!;
    }
    public alterRoutineClause(): AlterRoutineClauseContext {
        return this.getRuleContext(0, AlterRoutineClauseContext)!;
    }
    public funcArgs(): FuncArgsContext | null {
        return this.getRuleContext(0, FuncArgsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterRoutineStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterRoutineStmt) {
             listener.enterAlterRoutineStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterRoutineStmt) {
             listener.exitAlterRoutineStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterRoutineStmt) {
            return visitor.visitAlterRoutineStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterRoutineClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routineAction(): RoutineActionContext[];
    public routineAction(i: number): RoutineActionContext | null;
    public routineAction(i?: number): RoutineActionContext[] | RoutineActionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineActionContext);
        }

        return this.getRuleContext(i, RoutineActionContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public routineNameCreate(): RoutineNameCreateContext | null {
        return this.getRuleContext(0, RoutineNameCreateContext);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaNameCreate(): SchemaNameCreateContext | null {
        return this.getRuleContext(0, SchemaNameCreateContext);
    }
    public KW_DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterRoutineClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterRoutineClause) {
             listener.enterAlterRoutineClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterRoutineClause) {
             listener.exitAlterRoutineClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterRoutineClause) {
            return visitor.visitAlterRoutineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMUTABLE, 0);
    }
    public KW_STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STABLE, 0);
    }
    public KW_VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VOLATILE, 0);
    }
    public KW_LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAKPROOF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARALLEL, 0);
    }
    public KW_UNSAFE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNSAFE, 0);
    }
    public KW_RESTRICTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICTED, 0);
    }
    public KW_SAFE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SAFE, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COST, 0);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routineAction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutineAction) {
             listener.enterRoutineAction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutineAction) {
             listener.exitRoutineAction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineAction) {
            return visitor.visitRoutineAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateGroupStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0)!;
    }
    public roleSpec(): RoleSpecContext {
        return this.getRuleContext(0, RoleSpecContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createOperatorRoleElem(): CreateOperatorRoleElemContext[];
    public createOperatorRoleElem(i: number): CreateOperatorRoleElemContext | null;
    public createOperatorRoleElem(i?: number): CreateOperatorRoleElemContext[] | CreateOperatorRoleElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateOperatorRoleElemContext);
        }

        return this.getRuleContext(i, CreateOperatorRoleElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createGroupStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateGroupStmt) {
             listener.enterCreateGroupStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateGroupStmt) {
             listener.exitCreateGroupStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateGroupStmt) {
            return visitor.visitCreateGroupStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterGroupStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0)!;
    }
    public roleSpec(): RoleSpecContext {
        return this.getRuleContext(0, RoleSpecContext)!;
    }
    public KW_USER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USER, 0)!;
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(0, RoleListContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterGroupStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterGroupStmt) {
             listener.enterAlterGroupStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterGroupStmt) {
             listener.exitAlterGroupStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterGroupStmt) {
            return visitor.visitAlterGroupStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateSchemaStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0)!;
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public schemaNameCreate(): SchemaNameCreateContext | null {
        return this.getRuleContext(0, SchemaNameCreateContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public schemaStmt(): SchemaStmtContext[];
    public schemaStmt(i: number): SchemaStmtContext | null;
    public schemaStmt(i?: number): SchemaStmtContext[] | SchemaStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SchemaStmtContext);
        }

        return this.getRuleContext(i, SchemaStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createSchemaStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateSchemaStmt) {
             listener.enterCreateSchemaStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateSchemaStmt) {
             listener.exitCreateSchemaStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateSchemaStmt) {
            return visitor.visitCreateSchemaStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schemaNameCreate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchemaNameCreate) {
             listener.enterSchemaNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchemaNameCreate) {
             listener.exitSchemaNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaNameCreate) {
            return visitor.visitSchemaNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createStmt(): CreateStmtContext | null {
        return this.getRuleContext(0, CreateStmtContext);
    }
    public indexStmt(): IndexStmtContext | null {
        return this.getRuleContext(0, IndexStmtContext);
    }
    public createSeqStmt(): CreateSeqStmtContext | null {
        return this.getRuleContext(0, CreateSeqStmtContext);
    }
    public createTrigStmt(): CreateTrigStmtContext | null {
        return this.getRuleContext(0, CreateTrigStmtContext);
    }
    public grantStmt(): GrantStmtContext | null {
        return this.getRuleContext(0, GrantStmtContext);
    }
    public viewStmt(): ViewStmtContext | null {
        return this.getRuleContext(0, ViewStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schemaStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchemaStmt) {
             listener.enterSchemaStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchemaStmt) {
             listener.exitSchemaStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaStmt) {
            return visitor.visitSchemaStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableSetStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public setRest(): SetRestContext {
        return this.getRuleContext(0, SetRestContext)!;
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_variableSetStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVariableSetStmt) {
             listener.enterVariableSetStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVariableSetStmt) {
             listener.exitVariableSetStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableSetStmt) {
            return visitor.visitVariableSetStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetRestContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public transactionModeList(): TransactionModeListContext | null {
        return this.getRuleContext(0, TransactionModeListContext);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_CHARACTERISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHARACTERISTICS, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public setRestMore(): SetRestMoreContext | null {
        return this.getRuleContext(0, SetRestMoreContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_setRest;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSetRest) {
             listener.enterSetRest(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSetRest) {
             listener.exitSetRest(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetRest) {
            return visitor.visitSetRest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GenericSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public varName(): VarNameContext | null {
        return this.getRuleContext(0, VarNameContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public varList(): VarListContext | null {
        return this.getRuleContext(0, VarListContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_genericSet;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGenericSet) {
             listener.enterGenericSet(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGenericSet) {
             listener.exitGenericSet(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGenericSet) {
            return visitor.visitGenericSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetRestMoreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public zoneValue(): ZoneValueContext | null {
        return this.getRuleContext(0, ZoneValueContext);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CATALOG, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(0, SchemaNameContext);
    }
    public KW_NAMES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAMES, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public nonReservedWordOrStringConst(): NonReservedWordOrStringConstContext | null {
        return this.getRuleContext(0, NonReservedWordOrStringConstContext);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_XML(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XML, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public documentOrContent(): DocumentOrContentContext | null {
        return this.getRuleContext(0, DocumentOrContentContext);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SNAPSHOT, 0);
    }
    public varName(): VarNameContext | null {
        return this.getRuleContext(0, VarNameContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public genericSet(): GenericSetContext | null {
        return this.getRuleContext(0, GenericSetContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_setRestMore;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSetRestMore) {
             listener.enterSetRestMore(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSetRestMore) {
             listener.exitSetRestMore(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetRestMore) {
            return visitor.visitSetRestMore(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VarNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DOT);
    	} else {
    		return this.getToken(PostgreSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_varName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVarName) {
             listener.enterVarName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVarName) {
             listener.exitVarName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVarName) {
            return visitor.visitVarName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VarListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public varValue(): VarValueContext[];
    public varValue(i: number): VarValueContext | null;
    public varValue(i?: number): VarValueContext[] | VarValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VarValueContext);
        }

        return this.getRuleContext(i, VarValueContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_varList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVarList) {
             listener.enterVarList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVarList) {
             listener.exitVarList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVarList) {
            return visitor.visitVarList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VarValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanOrString(): BooleanOrStringContext | null {
        return this.getRuleContext(0, BooleanOrStringContext);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_varValue;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVarValue) {
             listener.enterVarValue(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVarValue) {
             listener.exitVarValue(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVarValue) {
            return visitor.visitVarValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsoLevelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNCOMMITTED, 0);
    }
    public KW_COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMITTED, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPEATABLE, 0);
    }
    public KW_SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERIALIZABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_isoLevel;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIsoLevel) {
             listener.enterIsoLevel(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIsoLevel) {
             listener.exitIsoLevel(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIsoLevel) {
            return visitor.visitIsoLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptBooleanOrStringColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public typeFuncNameKeyword(): TypeFuncNameKeywordContext | null {
        return this.getRuleContext(0, TypeFuncNameKeywordContext);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optBooleanOrStringColumn;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptBooleanOrStringColumn) {
             listener.enterOptBooleanOrStringColumn(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptBooleanOrStringColumn) {
             listener.exitOptBooleanOrStringColumn(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptBooleanOrStringColumn) {
            return visitor.visitOptBooleanOrStringColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanOrStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public nonReservedWordOrStringConst(): NonReservedWordOrStringConstContext | null {
        return this.getRuleContext(0, NonReservedWordOrStringConstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_booleanOrString;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterBooleanOrString) {
             listener.enterBooleanOrString(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitBooleanOrString) {
             listener.exitBooleanOrString(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanOrString) {
            return visitor.visitBooleanOrString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZoneValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public optInterval(): OptIntervalContext | null {
        return this.getRuleContext(0, OptIntervalContext);
    }
    public optFloat(): OptFloatContext | null {
        return this.getRuleContext(0, OptFloatContext);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_zoneValue;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterZoneValue) {
             listener.enterZoneValue(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitZoneValue) {
             listener.exitZoneValue(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitZoneValue) {
            return visitor.visitZoneValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedWordOrStringConstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonReservedWord(): NonReservedWordContext | null {
        return this.getRuleContext(0, NonReservedWordContext);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_nonReservedWordOrStringConst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNonReservedWordOrStringConst) {
             listener.enterNonReservedWordOrStringConst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNonReservedWordOrStringConst) {
             listener.exitNonReservedWordOrStringConst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonReservedWordOrStringConst) {
            return visitor.visitNonReservedWordOrStringConst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableResetStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RESET, 0)!;
    }
    public resetRest(): ResetRestContext {
        return this.getRuleContext(0, ResetRestContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_variableResetStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVariableResetStmt) {
             listener.enterVariableResetStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVariableResetStmt) {
             listener.exitVariableResetStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableResetStmt) {
            return visitor.visitVariableResetStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResetRestContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public varName(): VarNameContext | null {
        return this.getRuleContext(0, VarNameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_resetRest;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterResetRest) {
             listener.enterResetRest(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitResetRest) {
             listener.exitResetRest(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResetRest) {
            return visitor.visitResetRest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetOrResetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public setRest(): SetRestContext | null {
        return this.getRuleContext(0, SetRestContext);
    }
    public variableResetStmt(): VariableResetStmtContext | null {
        return this.getRuleContext(0, VariableResetStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_setOrResetClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSetOrResetClause) {
             listener.enterSetOrResetClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSetOrResetClause) {
             listener.exitSetOrResetClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetOrResetClause) {
            return visitor.visitSetOrResetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionSetOrResetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public setRestMore(): SetRestMoreContext | null {
        return this.getRuleContext(0, SetRestMoreContext);
    }
    public variableResetStmt(): VariableResetStmtContext | null {
        return this.getRuleContext(0, VariableResetStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_functionSetOrResetClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionSetOrResetClause) {
             listener.enterFunctionSetOrResetClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionSetOrResetClause) {
             listener.exitFunctionSetOrResetClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionSetOrResetClause) {
            return visitor.visitFunctionSetOrResetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableShowStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SHOW, 0)!;
    }
    public varName(): VarNameContext | null {
        return this.getRuleContext(0, VarNameContext);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_variableShowStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVariableShowStmt) {
             listener.enterVariableShowStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVariableShowStmt) {
             listener.exitVariableShowStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableShowStmt) {
            return visitor.visitVariableShowStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintsSetStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINTS, 0)!;
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public qualifiedNameList(): QualifiedNameListContext | null {
        return this.getRuleContext(0, QualifiedNameListContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constraintsSetStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstraintsSetStmt) {
             listener.enterConstraintsSetStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstraintsSetStmt) {
             listener.exitConstraintsSetStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintsSetStmt) {
            return visitor.visitConstraintsSetStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckPointStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHECKPOINT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CHECKPOINT, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_checkPointStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCheckPointStmt) {
             listener.enterCheckPointStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCheckPointStmt) {
             listener.exitCheckPointStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCheckPointStmt) {
            return visitor.visitCheckPointStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DiscardStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISCARD(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DISCARD, 0)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLANS, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_discardStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDiscardStmt) {
             listener.enterDiscardStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDiscardStmt) {
             listener.exitDiscardStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDiscardStmt) {
            return visitor.visitDiscardStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relationExpr(): RelationExprContext | null {
        return this.getRuleContext(0, RelationExprContext);
    }
    public alterTableCmds(): AlterTableCmdsContext | null {
        return this.getRuleContext(0, AlterTableCmdsContext);
    }
    public partitionCmd(): PartitionCmdContext | null {
        return this.getRuleContext(0, PartitionCmdContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public optTableSpace(): OptTableSpaceContext[];
    public optTableSpace(i: number): OptTableSpaceContext | null;
    public optTableSpace(i?: number): OptTableSpaceContext[] | OptTableSpaceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OptTableSpaceContext);
        }

        return this.getRuleContext(i, OptTableSpaceContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tableSpaceName(): TableSpaceNameContext | null {
        return this.getRuleContext(0, TableSpaceNameContext);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(0, RoleListContext);
    }
    public KW_NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOWAIT, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public indexPartitionCmd(): IndexPartitionCmdContext | null {
        return this.getRuleContext(0, IndexPartitionCmdContext);
    }
    public partitionBoundSpec(): PartitionBoundSpecContext | null {
        return this.getRuleContext(0, PartitionBoundSpecContext);
    }
    public KW_DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DETACH, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public KW_FINALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FINALIZE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterTableStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterTableStmt) {
             listener.enterAlterTableStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterTableStmt) {
             listener.exitAlterTableStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableStmt) {
            return visitor.visitAlterTableStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableCmdsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterTableCmd(): AlterTableCmdContext[];
    public alterTableCmd(i: number): AlterTableCmdContext | null;
    public alterTableCmd(i?: number): AlterTableCmdContext[] | AlterTableCmdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterTableCmdContext);
        }

        return this.getRuleContext(i, AlterTableCmdContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterTableCmds;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterTableCmds) {
             listener.enterAlterTableCmds(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterTableCmds) {
             listener.exitAlterTableCmds(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableCmds) {
            return visitor.visitAlterTableCmds(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionCmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexPartitionCmd(): IndexPartitionCmdContext | null {
        return this.getRuleContext(0, IndexPartitionCmdContext);
    }
    public partitionBoundSpec(): PartitionBoundSpecContext | null {
        return this.getRuleContext(0, PartitionBoundSpecContext);
    }
    public KW_DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DETACH, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partitionCmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartitionCmd) {
             listener.enterPartitionCmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartitionCmd) {
             listener.exitPartitionCmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionCmd) {
            return visitor.visitPartitionCmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexPartitionCmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ATTACH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ATTACH, 0)!;
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indexPartitionCmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndexPartitionCmd) {
             listener.enterIndexPartitionCmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndexPartitionCmd) {
             listener.exitIndexPartitionCmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexPartitionCmd) {
            return visitor.visitIndexPartitionCmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableCmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public constraintElem(): ConstraintElemContext | null {
        return this.getRuleContext(0, ConstraintElemContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0);
    }
    public constraintAttributeElem(): ConstraintAttributeElemContext[];
    public constraintAttributeElem(i: number): ConstraintAttributeElemContext | null;
    public constraintAttributeElem(i?: number): ConstraintAttributeElemContext[] | ConstraintAttributeElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstraintAttributeElemContext);
        }

        return this.getRuleContext(i, ConstraintAttributeElemContext);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public KW_SET(): antlr.TerminalNode[];
    public KW_SET(i: number): antlr.TerminalNode | null;
    public KW_SET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SET);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SET, i);
    	}
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OIDS, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLUSTER, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_LOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOGGED, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICA, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tableSpaceName(): TableSpaceNameContext | null {
        return this.getRuleContext(0, TableSpaceNameContext);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public existingIndex(): ExistingIndexContext | null {
        return this.getRuleContext(0, ExistingIndexContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORCE, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public column_def(): Column_defContext | null {
        return this.getRuleContext(0, Column_defContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public alterColumnDefault(): AlterColumnDefaultContext | null {
        return this.getRuleContext(0, AlterColumnDefaultContext);
    }
    public alterGenericOptions(): AlterGenericOptionsContext | null {
        return this.getRuleContext(0, AlterGenericOptionsContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXPRESSION, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public signedConst(): SignedConstContext | null {
        return this.getRuleContext(0, SignedConstContext);
    }
    public relOptions(): RelOptionsContext | null {
        return this.getRuleContext(0, RelOptionsContext);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode[];
    public KW_GENERATED(i: number): antlr.TerminalNode | null;
    public KW_GENERATED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_GENERATED);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_GENERATED, i);
    	}
    }
    public generatedWhen(): GeneratedWhenContext[];
    public generatedWhen(i: number): GeneratedWhenContext | null;
    public generatedWhen(i?: number): GeneratedWhenContext[] | GeneratedWhenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GeneratedWhenContext);
        }

        return this.getRuleContext(i, GeneratedWhenContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public seqOptElem(): SeqOptElemContext[];
    public seqOptElem(i: number): SeqOptElemContext | null;
    public seqOptElem(i?: number): SeqOptElemContext[] | SeqOptElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SeqOptElemContext);
        }

        return this.getRuleContext(i, SeqOptElemContext);
    }
    public KW_RESTART(): antlr.TerminalNode[];
    public KW_RESTART(i: number): antlr.TerminalNode | null;
    public KW_RESTART(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_RESTART);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_RESTART, i);
    	}
    }
    public numericOnly(): NumericOnlyContext[];
    public numericOnly(i: number): NumericOnlyContext | null;
    public numericOnly(i?: number): NumericOnlyContext[] | NumericOnlyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericOnlyContext);
        }

        return this.getRuleContext(i, NumericOnlyContext);
    }
    public KW_WITH(): antlr.TerminalNode[];
    public KW_WITH(i: number): antlr.TerminalNode | null;
    public KW_WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_WITH);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_WITH, i);
    	}
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public collateClause(): CollateClauseContext | null {
        return this.getRuleContext(0, CollateClauseContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterTableCmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterTableCmd) {
             listener.enterAlterTableCmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterTableCmd) {
             listener.exitAlterTableCmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableCmd) {
            return visitor.visitAlterTableCmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColumnDefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterColumnDefault;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterColumnDefault) {
             listener.enterAlterColumnDefault(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterColumnDefault) {
             listener.exitAlterColumnDefault(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColumnDefault) {
            return visitor.visitAlterColumnDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptDropBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADE, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optDropBehavior;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptDropBehavior) {
             listener.enterOptDropBehavior(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptDropBehavior) {
             listener.exitOptDropBehavior(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptDropBehavior) {
            return visitor.visitOptDropBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollateClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COLLATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COLLATE, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_collateClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCollateClause) {
             listener.enterCollateClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCollateClause) {
             listener.exitCollateClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCollateClause) {
            return visitor.visitCollateClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public relOptionElem(): RelOptionElemContext[];
    public relOptionElem(i: number): RelOptionElemContext | null;
    public relOptionElem(i?: number): RelOptionElemContext[] | RelOptionElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelOptionElemContext);
        }

        return this.getRuleContext(i, RelOptionElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relOptions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelOptions) {
             listener.enterRelOptions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelOptions) {
             listener.exitRelOptions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelOptions) {
            return visitor.visitRelOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptRelOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public relOptions(): RelOptionsContext {
        return this.getRuleContext(0, RelOptionsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optRelOptions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptRelOptions) {
             listener.enterOptRelOptions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptRelOptions) {
             listener.exitOptRelOptions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptRelOptions) {
            return visitor.visitOptRelOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelOptionElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public defArg(): DefArgContext | null {
        return this.getRuleContext(0, DefArgContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT, 0);
    }
    public defElem(): DefElemContext | null {
        return this.getRuleContext(0, DefElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relOptionElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelOptionElem) {
             listener.enterRelOptionElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelOptionElem) {
             listener.exitRelOptionElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelOptionElem) {
            return visitor.visitRelOptionElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionBoundSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_MODULUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MODULUS, 0);
    }
    public numericOnly(): NumericOnlyContext[];
    public numericOnly(i: number): NumericOnlyContext | null;
    public numericOnly(i?: number): NumericOnlyContext[] | NumericOnlyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericOnlyContext);
        }

        return this.getRuleContext(i, NumericOnlyContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public KW_REMAINDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REMAINDER, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public executeParamClause(): ExecuteParamClauseContext[];
    public executeParamClause(i: number): ExecuteParamClauseContext | null;
    public executeParamClause(i?: number): ExecuteParamClauseContext[] | ExecuteParamClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExecuteParamClauseContext);
        }

        return this.getRuleContext(i, ExecuteParamClauseContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partitionBoundSpec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartitionBoundSpec) {
             listener.enterPartitionBoundSpec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartitionBoundSpec) {
             listener.exitPartitionBoundSpec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionBoundSpec) {
            return visitor.visitPartitionBoundSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterCompositeTypeStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public alterTypeCmd(): AlterTypeCmdContext[];
    public alterTypeCmd(i: number): AlterTypeCmdContext | null;
    public alterTypeCmd(i?: number): AlterTypeCmdContext[] | AlterTypeCmdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterTypeCmdContext);
        }

        return this.getRuleContext(i, AlterTypeCmdContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterCompositeTypeStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterCompositeTypeStmt) {
             listener.enterAlterCompositeTypeStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterCompositeTypeStmt) {
             listener.exitAlterCompositeTypeStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterCompositeTypeStmt) {
            return visitor.visitAlterCompositeTypeStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTypeCmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_ATTRIBUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ATTRIBUTE, 0)!;
    }
    public tableFuncElement(): TableFuncElementContext | null {
        return this.getRuleContext(0, TableFuncElementContext);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public collateClause(): CollateClauseContext | null {
        return this.getRuleContext(0, CollateClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterTypeCmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterTypeCmd) {
             listener.enterAlterTypeCmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterTypeCmd) {
             listener.exitAlterTypeCmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTypeCmd) {
            return visitor.visitAlterTypeCmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClosePortalStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLOSE, 0)!;
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_closePortalStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterClosePortalStmt) {
             listener.enterClosePortalStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitClosePortalStmt) {
             listener.exitClosePortalStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitClosePortalStmt) {
            return visitor.visitClosePortalStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopyStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COPY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COPY, 0)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public copyOptions(): CopyOptionsContext {
        return this.getRuleContext(0, CopyOptionsContext)!;
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public stringConst(): StringConstContext[];
    public stringConst(i: number): StringConstContext | null;
    public stringConst(i?: number): StringConstContext[] | StringConstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringConstContext);
        }

        return this.getRuleContext(i, StringConstContext);
    }
    public KW_STDIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDIN, 0);
    }
    public KW_STDOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDOUT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BINARY, 0);
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public KW_PROGRAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROGRAM, 0);
    }
    public KW_DELIMITERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELIMITERS, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public preParableStmt(): PreParableStmtContext | null {
        return this.getRuleContext(0, PreParableStmtContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copyStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopyStmt) {
             listener.enterCopyStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopyStmt) {
             listener.exitCopyStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopyStmt) {
            return visitor.visitCopyStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopyOptionsNoparensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BINARY(): antlr.TerminalNode[];
    public KW_BINARY(i: number): antlr.TerminalNode | null;
    public KW_BINARY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_BINARY);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_BINARY, i);
    	}
    }
    public KW_FREEZE(): antlr.TerminalNode[];
    public KW_FREEZE(i: number): antlr.TerminalNode | null;
    public KW_FREEZE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FREEZE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FREEZE, i);
    	}
    }
    public stringConst(): StringConstContext[];
    public stringConst(i: number): StringConstContext | null;
    public stringConst(i?: number): StringConstContext[] | StringConstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringConstContext);
        }

        return this.getRuleContext(i, StringConstContext);
    }
    public KW_CSV(): antlr.TerminalNode[];
    public KW_CSV(i: number): antlr.TerminalNode | null;
    public KW_CSV(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_CSV);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_CSV, i);
    	}
    }
    public KW_HEADER(): antlr.TerminalNode[];
    public KW_HEADER(i: number): antlr.TerminalNode | null;
    public KW_HEADER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_HEADER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_HEADER, i);
    	}
    }
    public KW_FORCE(): antlr.TerminalNode[];
    public KW_FORCE(i: number): antlr.TerminalNode | null;
    public KW_FORCE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FORCE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FORCE, i);
    	}
    }
    public KW_QUOTE(): antlr.TerminalNode[];
    public KW_QUOTE(i: number): antlr.TerminalNode | null;
    public KW_QUOTE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_QUOTE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_QUOTE, i);
    	}
    }
    public KW_NULL(): antlr.TerminalNode[];
    public KW_NULL(i: number): antlr.TerminalNode | null;
    public KW_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NULL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NULL, i);
    	}
    }
    public columnList(): ColumnListContext[];
    public columnList(i: number): ColumnListContext | null;
    public columnList(i?: number): ColumnListContext[] | ColumnListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnListContext);
        }

        return this.getRuleContext(i, ColumnListContext);
    }
    public KW_ENCODING(): antlr.TerminalNode[];
    public KW_ENCODING(i: number): antlr.TerminalNode | null;
    public KW_ENCODING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ENCODING);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ENCODING, i);
    	}
    }
    public KW_DELIMITER(): antlr.TerminalNode[];
    public KW_DELIMITER(i: number): antlr.TerminalNode | null;
    public KW_DELIMITER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_DELIMITER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_DELIMITER, i);
    	}
    }
    public KW_ESCAPE(): antlr.TerminalNode[];
    public KW_ESCAPE(i: number): antlr.TerminalNode | null;
    public KW_ESCAPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ESCAPE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ESCAPE, i);
    	}
    }
    public KW_FORCE_QUOTE(): antlr.TerminalNode[];
    public KW_FORCE_QUOTE(i: number): antlr.TerminalNode | null;
    public KW_FORCE_QUOTE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FORCE_QUOTE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FORCE_QUOTE, i);
    	}
    }
    public KW_FORCE_NOT_NULL(): antlr.TerminalNode[];
    public KW_FORCE_NOT_NULL(i: number): antlr.TerminalNode | null;
    public KW_FORCE_NOT_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FORCE_NOT_NULL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FORCE_NOT_NULL, i);
    	}
    }
    public KW_FORCE_NULL(): antlr.TerminalNode[];
    public KW_FORCE_NULL(i: number): antlr.TerminalNode | null;
    public KW_FORCE_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FORCE_NULL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FORCE_NULL, i);
    	}
    }
    public STAR(): antlr.TerminalNode[];
    public STAR(i: number): antlr.TerminalNode | null;
    public STAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.STAR);
    	} else {
    		return this.getToken(PostgreSqlParser.STAR, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_AS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_AS, i);
    	}
    }
    public KW_NOT(): antlr.TerminalNode[];
    public KW_NOT(i: number): antlr.TerminalNode | null;
    public KW_NOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NOT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NOT, i);
    	}
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copyOptionsNoparens;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopyOptionsNoparens) {
             listener.enterCopyOptionsNoparens(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopyOptionsNoparens) {
             listener.exitCopyOptionsNoparens(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopyOptionsNoparens) {
            return visitor.visitCopyOptionsNoparens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopyOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public copyOptionsNoparens(): CopyOptionsNoparensContext[];
    public copyOptionsNoparens(i: number): CopyOptionsNoparensContext | null;
    public copyOptionsNoparens(i?: number): CopyOptionsNoparensContext[] | CopyOptionsNoparensContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CopyOptionsNoparensContext);
        }

        return this.getRuleContext(i, CopyOptionsNoparensContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public copyGenericOptElem(): CopyGenericOptElemContext[];
    public copyGenericOptElem(i: number): CopyGenericOptElemContext | null;
    public copyGenericOptElem(i?: number): CopyGenericOptElemContext[] | CopyGenericOptElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CopyGenericOptElemContext);
        }

        return this.getRuleContext(i, CopyGenericOptElemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copyOptions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopyOptions) {
             listener.enterCopyOptions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopyOptions) {
             listener.exitCopyOptions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopyOptions) {
            return visitor.visitCopyOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopyGenericOptElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public booleanOrString(): BooleanOrStringContext | null {
        return this.getRuleContext(0, BooleanOrStringContext);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public optBooleanOrStringColumn(): OptBooleanOrStringColumnContext[];
    public optBooleanOrStringColumn(i: number): OptBooleanOrStringColumnContext | null;
    public optBooleanOrStringColumn(i?: number): OptBooleanOrStringColumnContext[] | OptBooleanOrStringColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OptBooleanOrStringColumnContext);
        }

        return this.getRuleContext(i, OptBooleanOrStringColumnContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copyGenericOptElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopyGenericOptElem) {
             listener.enterCopyGenericOptElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopyGenericOptElem) {
             listener.exitCopyGenericOptElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopyGenericOptElem) {
            return visitor.visitCopyGenericOptElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createStmt;
    }
    public override copyFrom(ctx: CreateStmtContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnCreateTableContext extends CreateStmtContext {
    public constructor(ctx: CreateStmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public partitionBoundSpec(): PartitionBoundSpecContext | null {
        return this.getRuleContext(0, PartitionBoundSpecContext);
    }
    public optTemp(): OptTempContext | null {
        return this.getRuleContext(0, OptTempContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public tableElementList(): TableElementListContext | null {
        return this.getRuleContext(0, TableElementListContext);
    }
    public optInherit(): OptInheritContext | null {
        return this.getRuleContext(0, OptInheritContext);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public optWith(): OptWithContext | null {
        return this.getRuleContext(0, OptWithContext);
    }
    public onCommitOption(): OnCommitOptionContext | null {
        return this.getRuleContext(0, OnCommitOptionContext);
    }
    public optTableSpace(): OptTableSpaceContext | null {
        return this.getRuleContext(0, OptTableSpaceContext);
    }
    public optTypedTableElEmentList(): OptTypedTableElEmentListContext | null {
        return this.getRuleContext(0, OptTypedTableElEmentListContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnCreateTable) {
             listener.enterColumnCreateTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnCreateTable) {
             listener.exitColumnCreateTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnCreateTable) {
            return visitor.visitColumnCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptTempContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GLOBAL, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optTemp;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptTemp) {
             listener.enterOptTemp(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptTemp) {
             listener.exitOptTemp(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptTemp) {
            return visitor.visitOptTemp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptTypedTableElEmentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public typedTableElement(): TypedTableElementContext[];
    public typedTableElement(i: number): TypedTableElementContext | null;
    public typedTableElement(i?: number): TypedTableElementContext[] | TypedTableElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypedTableElementContext);
        }

        return this.getRuleContext(i, TypedTableElementContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optTypedTableElEmentList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptTypedTableElEmentList) {
             listener.enterOptTypedTableElEmentList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptTypedTableElEmentList) {
             listener.exitOptTypedTableElEmentList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptTypedTableElEmentList) {
            return visitor.visitOptTypedTableElEmentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableElement(): TableElementContext[];
    public tableElement(i: number): TableElementContext | null;
    public tableElement(i?: number): TableElementContext[] | TableElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementContext);
        }

        return this.getRuleContext(i, TableElementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableElementList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableElementList) {
             listener.enterTableElementList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableElementList) {
             listener.exitTableElementList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementList) {
            return visitor.visitTableElementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constraintElem(): ConstraintElemContext | null {
        return this.getRuleContext(0, ConstraintElemContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public column_def(): Column_defContext | null {
        return this.getRuleContext(0, Column_defContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public tableLikeOption(): TableLikeOptionContext[];
    public tableLikeOption(i: number): TableLikeOptionContext | null;
    public tableLikeOption(i?: number): TableLikeOptionContext[] | TableLikeOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableLikeOptionContext);
        }

        return this.getRuleContext(i, TableLikeOptionContext);
    }
    public KW_INCLUDING(): antlr.TerminalNode[];
    public KW_INCLUDING(i: number): antlr.TerminalNode | null;
    public KW_INCLUDING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_INCLUDING);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_INCLUDING, i);
    	}
    }
    public KW_EXCLUDING(): antlr.TerminalNode[];
    public KW_EXCLUDING(i: number): antlr.TerminalNode | null;
    public KW_EXCLUDING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_EXCLUDING);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_EXCLUDING, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableElement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableElement) {
             listener.enterTableElement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableElement) {
             listener.exitTableElement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableElement) {
            return visitor.visitTableElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypedTableElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext | null {
        return this.getRuleContext(0, ColumnNameCreateContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0);
    }
    public colConstraint(): ColConstraintContext[];
    public colConstraint(i: number): ColConstraintContext | null;
    public colConstraint(i?: number): ColConstraintContext[] | ColConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColConstraintContext);
        }

        return this.getRuleContext(i, ColConstraintContext);
    }
    public constraintElem(): ConstraintElemContext | null {
        return this.getRuleContext(0, ConstraintElemContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_typedTableElement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTypedTableElement) {
             listener.enterTypedTableElement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTypedTableElement) {
             listener.exitTypedTableElement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTypedTableElement) {
            return visitor.visitTypedTableElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_defContext extends antlr.ParserRuleContext {
    public _colType?: TypenameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public createGenericOptions(): CreateGenericOptionsContext | null {
        return this.getRuleContext(0, CreateGenericOptionsContext);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_COMPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMPRESSION, 0);
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public collateClause(): CollateClauseContext | null {
        return this.getRuleContext(0, CollateClauseContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0);
    }
    public colConstraint(): ColConstraintContext[];
    public colConstraint(i: number): ColConstraintContext | null;
    public colConstraint(i?: number): ColConstraintContext[] | ColConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColConstraintContext);
        }

        return this.getRuleContext(i, ColConstraintContext);
    }
    public KW_PLAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLAIN, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENDED, 0);
    }
    public KW_MAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAIN, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_def;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_def) {
             listener.enterColumn_def(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_def) {
             listener.exitColumn_def(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_def) {
            return visitor.visitColumn_def(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colConstraintElem(): ColConstraintElemContext {
        return this.getRuleContext(0, ColConstraintElemContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INITIALLY, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colConstraint;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColConstraint) {
             listener.enterColConstraint(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColConstraint) {
             listener.exitColConstraint(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColConstraint) {
            return visitor.visitColConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColConstraintElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public optDefinition(): OptDefinitionContext | null {
        return this.getRuleContext(0, OptDefinitionContext);
    }
    public optConstableSpace(): OptConstableSpaceContext | null {
        return this.getRuleContext(0, OptConstableSpaceContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0);
    }
    public indexParams(): IndexParamsContext | null {
        return this.getRuleContext(0, IndexParamsContext);
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIMARY, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_KEY, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public generatedWhen(): GeneratedWhenContext | null {
        return this.getRuleContext(0, GeneratedWhenContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORED, 0);
    }
    public seqOptElem(): SeqOptElemContext[];
    public seqOptElem(i: number): SeqOptElemContext | null;
    public seqOptElem(i?: number): SeqOptElemContext[] | SeqOptElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SeqOptElemContext);
        }

        return this.getRuleContext(i, SeqOptElemContext);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public keyMatch(): KeyMatchContext | null {
        return this.getRuleContext(0, KeyMatchContext);
    }
    public keyActions(): KeyActionsContext | null {
        return this.getRuleContext(0, KeyActionsContext);
    }
    public collateClause(): CollateClauseContext | null {
        return this.getRuleContext(0, CollateClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colConstraintElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColConstraintElem) {
             listener.enterColConstraintElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColConstraintElem) {
             listener.exitColConstraintElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColConstraintElem) {
            return visitor.visitColConstraintElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeneratedWhenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_generatedWhen;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGeneratedWhen) {
             listener.enterGeneratedWhen(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGeneratedWhen) {
             listener.exitGeneratedWhen(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGeneratedWhen) {
            return visitor.visitGeneratedWhen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableLikeOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMENTS, 0);
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINTS, 0);
    }
    public KW_DEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULTS, 0);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEXES, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableLikeOption;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableLikeOption) {
             listener.enterTableLikeOption(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableLikeOption) {
             listener.exitTableLikeOption(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableLikeOption) {
            return visitor.visitTableLikeOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public constraintAttributeElem(): ConstraintAttributeElemContext[];
    public constraintAttributeElem(i: number): ConstraintAttributeElemContext | null;
    public constraintAttributeElem(i?: number): ConstraintAttributeElemContext[] | ConstraintAttributeElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstraintAttributeElemContext);
        }

        return this.getRuleContext(i, ConstraintAttributeElemContext);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public optColumnList(): OptColumnListContext[];
    public optColumnList(i: number): OptColumnListContext | null;
    public optColumnList(i?: number): OptColumnListContext[] | OptColumnListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OptColumnListContext);
        }

        return this.getRuleContext(i, OptColumnListContext);
    }
    public existingIndex(): ExistingIndexContext | null {
        return this.getRuleContext(0, ExistingIndexContext);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIMARY, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_KEY, 0);
    }
    public columnListInclude(): ColumnListIncludeContext | null {
        return this.getRuleContext(0, ColumnListIncludeContext);
    }
    public optDefinition(): OptDefinitionContext | null {
        return this.getRuleContext(0, OptDefinitionContext);
    }
    public optConstableSpace(): OptConstableSpaceContext | null {
        return this.getRuleContext(0, OptConstableSpaceContext);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDE, 0);
    }
    public exclusionConstraintElem(): ExclusionConstraintElemContext[];
    public exclusionConstraintElem(i: number): ExclusionConstraintElemContext | null;
    public exclusionConstraintElem(i?: number): ExclusionConstraintElemContext[] | ExclusionConstraintElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExclusionConstraintElemContext);
        }

        return this.getRuleContext(i, ExclusionConstraintElemContext);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public keyMatch(): KeyMatchContext | null {
        return this.getRuleContext(0, KeyMatchContext);
    }
    public keyActions(): KeyActionsContext | null {
        return this.getRuleContext(0, KeyActionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constraintElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstraintElem) {
             listener.enterConstraintElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstraintElem) {
             listener.exitConstraintElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintElem) {
            return visitor.visitConstraintElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptColumnListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public columnList(): ColumnListContext {
        return this.getRuleContext(0, ColumnListContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optColumnList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptColumnList) {
             listener.enterOptColumnList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptColumnList) {
             listener.exitOptColumnList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptColumnList) {
            return visitor.visitOptColumnList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnListCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public columnNameCreate(): ColumnNameCreateContext[];
    public columnNameCreate(i: number): ColumnNameCreateContext | null;
    public columnNameCreate(i?: number): ColumnNameCreateContext[] | ColumnNameCreateContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameCreateContext);
        }

        return this.getRuleContext(i, ColumnNameCreateContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_columnListCreate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnListCreate) {
             listener.enterColumnListCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnListCreate) {
             listener.exitColumnListCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnListCreate) {
            return visitor.visitColumnListCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_columnList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnList) {
             listener.enterColumnList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnList) {
             listener.exitColumnList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnList) {
            return visitor.visitColumnList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnListIncludeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INCLUDE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0)!;
    }
    public optColumnList(): OptColumnListContext {
        return this.getRuleContext(0, OptColumnListContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_columnListInclude;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnListInclude) {
             listener.enterColumnListInclude(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnListInclude) {
             listener.exitColumnListInclude(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnListInclude) {
            return visitor.visitColumnListInclude(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyMatchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MATCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATCH, 0)!;
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTIAL, 0);
    }
    public KW_SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMPLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_keyMatch;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKeyMatch) {
             listener.enterKeyMatch(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKeyMatch) {
             listener.exitKeyMatch(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyMatch) {
            return visitor.visitKeyMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExclusionConstraintElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexElem(): IndexElemContext {
        return this.getRuleContext(0, IndexElemContext)!;
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public anyOperator(): AnyOperatorContext | null {
        return this.getRuleContext(0, AnyOperatorContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exclusionConstraintElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExclusionConstraintElem) {
             listener.enterExclusionConstraintElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExclusionConstraintElem) {
             listener.exitExclusionConstraintElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExclusionConstraintElem) {
            return visitor.visitExclusionConstraintElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyActionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyUpdate(): KeyUpdateContext | null {
        return this.getRuleContext(0, KeyUpdateContext);
    }
    public keyDelete(): KeyDeleteContext | null {
        return this.getRuleContext(0, KeyDeleteContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_keyActions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKeyActions) {
             listener.enterKeyActions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKeyActions) {
             listener.exitKeyActions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyActions) {
            return visitor.visitKeyActions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyUpdateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public keyAction(): KeyActionContext {
        return this.getRuleContext(0, KeyActionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_keyUpdate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKeyUpdate) {
             listener.enterKeyUpdate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKeyUpdate) {
             listener.exitKeyUpdate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyUpdate) {
            return visitor.visitKeyUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyDeleteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0)!;
    }
    public keyAction(): KeyActionContext {
        return this.getRuleContext(0, KeyActionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_keyDelete;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKeyDelete) {
             listener.enterKeyDelete(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKeyDelete) {
             listener.exitKeyDelete(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyDelete) {
            return visitor.visitKeyDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACTION, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public columnList(): ColumnListContext | null {
        return this.getRuleContext(0, ColumnListContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_keyAction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKeyAction) {
             listener.enterKeyAction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKeyAction) {
             listener.exitKeyAction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyAction) {
            return visitor.visitKeyAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptInheritContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INHERITS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INHERITS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public qualifiedNameList(): QualifiedNameListContext {
        return this.getRuleContext(0, QualifiedNameListContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optInherit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptInherit) {
             listener.enterOptInherit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptInherit) {
             listener.exitOptInherit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptInherit) {
            return visitor.visitOptInherit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public partElem(): PartElemContext[];
    public partElem(i: number): PartElemContext | null;
    public partElem(i?: number): PartElemContext[] | PartElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartElemContext);
        }

        return this.getRuleContext(i, PartElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partitionSpec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartitionSpec) {
             listener.enterPartitionSpec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartitionSpec) {
             listener.exitPartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpec) {
            return visitor.visitPartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public funcExprWindowless(): FuncExprWindowlessContext | null {
        return this.getRuleContext(0, FuncExprWindowlessContext);
    }
    public collateClause(): CollateClauseContext | null {
        return this.getRuleContext(0, CollateClauseContext);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartElem) {
             listener.enterPartElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartElem) {
             listener.exitPartElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartElem) {
            return visitor.visitPartElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAccessMethodClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableAccessMethodClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableAccessMethodClause) {
             listener.enterTableAccessMethodClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableAccessMethodClause) {
             listener.exitTableAccessMethodClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableAccessMethodClause) {
            return visitor.visitTableAccessMethodClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptWithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public relOptions(): RelOptionsContext | null {
        return this.getRuleContext(0, RelOptionsContext);
    }
    public KW_OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OIDS, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optWith;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptWith) {
             listener.enterOptWith(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptWith) {
             listener.exitOptWith(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptWith) {
            return visitor.visitOptWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnCommitOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_COMMIT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0)!;
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRESERVE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_onCommitOption;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOnCommitOption) {
             listener.enterOnCommitOption(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOnCommitOption) {
             listener.exitOnCommitOption(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOnCommitOption) {
            return visitor.visitOnCommitOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptTableSpaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESPACE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0)!;
    }
    public tableSpaceName(): TableSpaceNameContext {
        return this.getRuleContext(0, TableSpaceNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optTableSpace;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptTableSpace) {
             listener.enterOptTableSpace(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptTableSpace) {
             listener.exitOptTableSpace(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptTableSpace) {
            return visitor.visitOptTableSpace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptConstableSpaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0)!;
    }
    public optTableSpace(): OptTableSpaceContext {
        return this.getRuleContext(0, OptTableSpaceContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optConstableSpace;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptConstableSpace) {
             listener.enterOptConstableSpace(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptConstableSpace) {
             listener.exitOptConstableSpace(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptConstableSpace) {
            return visitor.visitOptConstableSpace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExistingIndexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_existingIndex;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExistingIndex) {
             listener.enterExistingIndex(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExistingIndex) {
             listener.exitExistingIndex(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExistingIndex) {
            return visitor.visitExistingIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateStatsStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public columnExpr(): ColumnExprContext[];
    public columnExpr(i: number): ColumnExprContext | null;
    public columnExpr(i?: number): ColumnExprContext[] | ColumnExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExprContext);
        }

        return this.getRuleContext(i, ColumnExprContext);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createStatsStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateStatsStmt) {
             listener.enterCreateStatsStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateStatsStmt) {
             listener.exitCreateStatsStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateStatsStmt) {
            return visitor.visitCreateStatsStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatsStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode[];
    public KW_STATISTICS(i: number): antlr.TerminalNode | null;
    public KW_STATISTICS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_STATISTICS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_STATISTICS, i);
    	}
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public signedConst(): SignedConstContext {
        return this.getRuleContext(0, SignedConstContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterStatsStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterStatsStmt) {
             listener.enterAlterStatsStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterStatsStmt) {
             listener.exitAlterStatsStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStatsStmt) {
            return visitor.visitAlterStatsStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateAsStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createAsStmt;
    }
    public override copyFrom(ctx: CreateAsStmtContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryCreateTableContext extends CreateAsStmtContext {
    public constructor(ctx: CreateAsStmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public createAsTarget(): CreateAsTargetContext {
        return this.getRuleContext(0, CreateAsTargetContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public selectStmt(): SelectStmtContext {
        return this.getRuleContext(0, SelectStmtContext)!;
    }
    public optTemp(): OptTempContext | null {
        return this.getRuleContext(0, OptTempContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public optWithData(): OptWithDataContext | null {
        return this.getRuleContext(0, OptWithDataContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQueryCreateTable) {
             listener.enterQueryCreateTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQueryCreateTable) {
             listener.exitQueryCreateTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryCreateTable) {
            return visitor.visitQueryCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateAsTargetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public columnListCreate(): ColumnListCreateContext | null {
        return this.getRuleContext(0, ColumnListCreateContext);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public optWith(): OptWithContext | null {
        return this.getRuleContext(0, OptWithContext);
    }
    public onCommitOption(): OnCommitOptionContext | null {
        return this.getRuleContext(0, OnCommitOptionContext);
    }
    public optTableSpace(): OptTableSpaceContext | null {
        return this.getRuleContext(0, OptTableSpaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createAsTarget;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateAsTarget) {
             listener.enterCreateAsTarget(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateAsTarget) {
             listener.exitCreateAsTarget(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateAsTarget) {
            return visitor.visitCreateAsTarget(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptWithDataContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optWithData;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptWithData) {
             listener.enterOptWithData(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptWithData) {
             listener.exitOptWithData(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptWithData) {
            return visitor.visitOptWithData(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMaterializedViewStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createMaterializedViewStmt;
    }
    public override copyFrom(ctx: CreateMaterializedViewStmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateMaterializedViewContext extends CreateMaterializedViewStmtContext {
    public constructor(ctx: CreateMaterializedViewStmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public selectStmt(): SelectStmtContext {
        return this.getRuleContext(0, SelectStmtContext)!;
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public columnListCreate(): ColumnListCreateContext | null {
        return this.getRuleContext(0, ColumnListCreateContext);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public optRelOptions(): OptRelOptionsContext | null {
        return this.getRuleContext(0, OptRelOptionsContext);
    }
    public optTableSpace(): OptTableSpaceContext | null {
        return this.getRuleContext(0, OptTableSpaceContext);
    }
    public optWithData(): OptWithDataContext | null {
        return this.getRuleContext(0, OptWithDataContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateMaterializedView) {
             listener.enterCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateMaterializedView) {
             listener.exitCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedView) {
            return visitor.visitCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RefreshMaterializedViewStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public optWithData(): OptWithDataContext | null {
        return this.getRuleContext(0, OptWithDataContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_refreshMaterializedViewStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRefreshMaterializedViewStmt) {
             listener.enterRefreshMaterializedViewStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRefreshMaterializedViewStmt) {
             listener.exitRefreshMaterializedViewStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshMaterializedViewStmt) {
            return visitor.visitRefreshMaterializedViewStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateSeqStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SEQUENCE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public optTemp(): OptTempContext | null {
        return this.getRuleContext(0, OptTempContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public seqOptElem(): SeqOptElemContext[];
    public seqOptElem(i: number): SeqOptElemContext | null;
    public seqOptElem(i?: number): SeqOptElemContext[] | SeqOptElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SeqOptElemContext);
        }

        return this.getRuleContext(i, SeqOptElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createSeqStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateSeqStmt) {
             listener.enterCreateSeqStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateSeqStmt) {
             listener.exitCreateSeqStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateSeqStmt) {
            return visitor.visitCreateSeqStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterSeqStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SEQUENCE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public seqOptElem(): SeqOptElemContext[];
    public seqOptElem(i: number): SeqOptElemContext | null;
    public seqOptElem(i?: number): SeqOptElemContext[] | SeqOptElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SeqOptElemContext);
        }

        return this.getRuleContext(i, SeqOptElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterSeqStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterSeqStmt) {
             listener.enterAlterSeqStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterSeqStmt) {
             listener.exitAlterSeqStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterSeqStmt) {
            return visitor.visitAlterSeqStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SeqOptElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public simpleTypeName(): SimpleTypeNameContext | null {
        return this.getRuleContext(0, SimpleTypeNameContext);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CACHE, 0);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public KW_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCREMENT, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public KW_MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAXVALUE, 0);
    }
    public KW_MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINVALUE, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_CYCLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CYCLE, 0);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAME, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_START, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTART, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_seqOptElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSeqOptElem) {
             listener.enterSeqOptElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSeqOptElem) {
             listener.exitSeqOptElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSeqOptElem) {
            return visitor.visitSeqOptElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericOnlyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public signedConst(): SignedConstContext | null {
        return this.getRuleContext(0, SignedConstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_numericOnly;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNumericOnly) {
             listener.enterNumericOnly(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNumericOnly) {
             listener.exitNumericOnly(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumericOnly) {
            return visitor.visitNumericOnly(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateProceduralLangStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_LANGUAGE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public orReplaceOpt(): OrReplaceOptContext | null {
        return this.getRuleContext(0, OrReplaceOptContext);
    }
    public KW_TRUSTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUSTED, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0);
    }
    public anyName(): AnyNameContext[];
    public anyName(i: number): AnyNameContext | null;
    public anyName(i?: number): AnyNameContext[] | AnyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnyNameContext);
        }

        return this.getRuleContext(i, AnyNameContext);
    }
    public KW_INLINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INLINE, 0);
    }
    public KW_VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATOR, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createProceduralLangStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateProceduralLangStmt) {
             listener.enterCreateProceduralLangStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateProceduralLangStmt) {
             listener.exitCreateProceduralLangStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateProceduralLangStmt) {
            return visitor.visitCreateProceduralLangStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableSpaceStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public optTableSpace(): OptTableSpaceContext {
        return this.getRuleContext(0, OptTableSpaceContext)!;
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LOCATION, 0)!;
    }
    public stringConst(): StringConstContext {
        return this.getRuleContext(0, StringConstContext)!;
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public optRelOptions(): OptRelOptionsContext | null {
        return this.getRuleContext(0, OptRelOptionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createTableSpaceStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateTableSpaceStmt) {
             listener.enterCreateTableSpaceStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateTableSpaceStmt) {
             listener.exitCreateTableSpaceStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableSpaceStmt) {
            return visitor.visitCreateTableSpaceStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateExtensionStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode[];
    public KW_SCHEMA(i: number): antlr.TerminalNode | null;
    public KW_SCHEMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SCHEMA);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SCHEMA, i);
    	}
    }
    public schemaName(): SchemaNameContext[];
    public schemaName(i: number): SchemaNameContext | null;
    public schemaName(i?: number): SchemaNameContext[] | SchemaNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SchemaNameContext);
        }

        return this.getRuleContext(i, SchemaNameContext);
    }
    public nonReservedWordOrStringConst(): NonReservedWordOrStringConstContext[];
    public nonReservedWordOrStringConst(i: number): NonReservedWordOrStringConstContext | null;
    public nonReservedWordOrStringConst(i?: number): NonReservedWordOrStringConstContext[] | NonReservedWordOrStringConstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NonReservedWordOrStringConstContext);
        }

        return this.getRuleContext(i, NonReservedWordOrStringConstContext);
    }
    public KW_CASCADE(): antlr.TerminalNode[];
    public KW_CASCADE(i: number): antlr.TerminalNode | null;
    public KW_CASCADE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_CASCADE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_CASCADE, i);
    	}
    }
    public KW_VERSION(): antlr.TerminalNode[];
    public KW_VERSION(i: number): antlr.TerminalNode | null;
    public KW_VERSION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_VERSION);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_VERSION, i);
    	}
    }
    public KW_FROM(): antlr.TerminalNode[];
    public KW_FROM(i: number): antlr.TerminalNode | null;
    public KW_FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FROM);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FROM, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createExtensionStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateExtensionStmt) {
             listener.enterCreateExtensionStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateExtensionStmt) {
             listener.exitCreateExtensionStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateExtensionStmt) {
            return visitor.visitCreateExtensionStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterExtensionStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public KW_TO(): antlr.TerminalNode[];
    public KW_TO(i: number): antlr.TerminalNode | null;
    public KW_TO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TO);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TO, i);
    	}
    }
    public nonReservedWordOrStringConst(): NonReservedWordOrStringConstContext[];
    public nonReservedWordOrStringConst(i: number): NonReservedWordOrStringConstContext | null;
    public nonReservedWordOrStringConst(i?: number): NonReservedWordOrStringConstContext[] | NonReservedWordOrStringConstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NonReservedWordOrStringConstContext);
        }

        return this.getRuleContext(i, NonReservedWordOrStringConstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterExtensionStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterExtensionStmt) {
             listener.enterAlterExtensionStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterExtensionStmt) {
             listener.exitAlterExtensionStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterExtensionStmt) {
            return visitor.visitAlterExtensionStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterExtensionContentsStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routineWithArgTypes(): RoutineWithArgTypesContext | null {
        return this.getRuleContext(0, RoutineWithArgTypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureWithArgTypes(): ProcedureWithArgTypesContext | null {
        return this.getRuleContext(0, ProcedureWithArgTypesContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public operatorWithArgTypes(): OperatorWithArgTypesContext | null {
        return this.getRuleContext(0, OperatorWithArgTypesContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregateWithArgTypes(): AggregateWithArgTypesContext | null {
        return this.getRuleContext(0, AggregateWithArgTypesContext);
    }
    public objectTypeName(): ObjectTypeNameContext | null {
        return this.getRuleContext(0, ObjectTypeNameContext);
    }
    public objectTypeAnyName(): ObjectTypeAnyNameContext | null {
        return this.getRuleContext(0, ObjectTypeAnyNameContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterExtensionContentsStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterExtensionContentsStmt) {
             listener.enterAlterExtensionContentsStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterExtensionContentsStmt) {
             listener.exitAlterExtensionContentsStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterExtensionContentsStmt) {
            return visitor.visitAlterExtensionContentsStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFdwStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATA, 0)!;
    }
    public KW_WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public createGenericOptions(): CreateGenericOptionsContext | null {
        return this.getRuleContext(0, CreateGenericOptionsContext);
    }
    public fdwOption(): FdwOptionContext[];
    public fdwOption(i: number): FdwOptionContext | null;
    public fdwOption(i?: number): FdwOptionContext[] | FdwOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FdwOptionContext);
        }

        return this.getRuleContext(i, FdwOptionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createFdwStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateFdwStmt) {
             listener.enterCreateFdwStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateFdwStmt) {
             listener.exitCreateFdwStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFdwStmt) {
            return visitor.visitCreateFdwStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FdwOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0);
    }
    public KW_VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATOR, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fdwOption;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFdwOption) {
             listener.enterFdwOption(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFdwOption) {
             listener.exitFdwOption(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFdwOption) {
            return visitor.visitFdwOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterFdwStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATA, 0)!;
    }
    public KW_WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public alterGenericOptions(): AlterGenericOptionsContext | null {
        return this.getRuleContext(0, AlterGenericOptionsContext);
    }
    public fdwOption(): FdwOptionContext[];
    public fdwOption(i: number): FdwOptionContext | null;
    public fdwOption(i?: number): FdwOptionContext[] | FdwOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FdwOptionContext);
        }

        return this.getRuleContext(i, FdwOptionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterFdwStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterFdwStmt) {
             listener.enterAlterFdwStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterFdwStmt) {
             listener.exitAlterFdwStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterFdwStmt) {
            return visitor.visitAlterFdwStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateGenericOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPTIONS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public genericOptionElem(): GenericOptionElemContext[];
    public genericOptionElem(i: number): GenericOptionElemContext | null;
    public genericOptionElem(i?: number): GenericOptionElemContext[] | GenericOptionElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GenericOptionElemContext);
        }

        return this.getRuleContext(i, GenericOptionElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createGenericOptions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateGenericOptions) {
             listener.enterCreateGenericOptions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateGenericOptions) {
             listener.exitCreateGenericOptions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateGenericOptions) {
            return visitor.visitCreateGenericOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterGenericOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPTIONS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public alterGenericOptionElem(): AlterGenericOptionElemContext[];
    public alterGenericOptionElem(i: number): AlterGenericOptionElemContext | null;
    public alterGenericOptionElem(i?: number): AlterGenericOptionElemContext[] | AlterGenericOptionElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterGenericOptionElemContext);
        }

        return this.getRuleContext(i, AlterGenericOptionElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterGenericOptions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterGenericOptions) {
             listener.enterAlterGenericOptions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterGenericOptions) {
             listener.exitAlterGenericOptions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterGenericOptions) {
            return visitor.visitAlterGenericOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterGenericOptionElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public genericOptionElem(): GenericOptionElemContext {
        return this.getRuleContext(0, GenericOptionElemContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterGenericOptionElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterGenericOptionElem) {
             listener.enterAlterGenericOptionElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterGenericOptionElem) {
             listener.exitAlterGenericOptionElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterGenericOptionElem) {
            return visitor.visitAlterGenericOptionElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GenericOptionElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public stringConst(): StringConstContext {
        return this.getRuleContext(0, StringConstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_genericOptionElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGenericOptionElem) {
             listener.enterGenericOptionElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGenericOptionElem) {
             listener.exitGenericOptionElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGenericOptionElem) {
            return visitor.visitGenericOptionElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateForeignServerStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATA, 0)!;
    }
    public KW_WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public foreignServerVersion(): ForeignServerVersionContext | null {
        return this.getRuleContext(0, ForeignServerVersionContext);
    }
    public createGenericOptions(): CreateGenericOptionsContext | null {
        return this.getRuleContext(0, CreateGenericOptionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createForeignServerStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateForeignServerStmt) {
             listener.enterCreateForeignServerStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateForeignServerStmt) {
             listener.exitCreateForeignServerStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateForeignServerStmt) {
            return visitor.visitCreateForeignServerStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForeignServerVersionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VERSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0)!;
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_foreignServerVersion;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterForeignServerVersion) {
             listener.enterForeignServerVersion(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitForeignServerVersion) {
             listener.exitForeignServerVersion(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitForeignServerVersion) {
            return visitor.visitForeignServerVersion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterForeignServerStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public alterGenericOptions(): AlterGenericOptionsContext | null {
        return this.getRuleContext(0, AlterGenericOptionsContext);
    }
    public foreignServerVersion(): ForeignServerVersionContext | null {
        return this.getRuleContext(0, ForeignServerVersionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterForeignServerStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterForeignServerStmt) {
             listener.enterAlterForeignServerStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterForeignServerStmt) {
             listener.exitAlterForeignServerStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterForeignServerStmt) {
            return visitor.visitAlterForeignServerStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateForeignTableStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createForeignTableStmt;
    }
    public override copyFrom(ctx: CreateForeignTableStmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateForeignTableContext extends CreateForeignTableStmtContext {
    public constructor(ctx: CreateForeignTableStmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public tableElementList(): TableElementListContext | null {
        return this.getRuleContext(0, TableElementListContext);
    }
    public optInherit(): OptInheritContext | null {
        return this.getRuleContext(0, OptInheritContext);
    }
    public createGenericOptions(): CreateGenericOptionsContext | null {
        return this.getRuleContext(0, CreateGenericOptionsContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateForeignTable) {
             listener.enterCreateForeignTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateForeignTable) {
             listener.exitCreateForeignTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateForeignTable) {
            return visitor.visitCreateForeignTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreatePartitionForeignTableContext extends CreateForeignTableStmtContext {
    public constructor(ctx: CreateForeignTableStmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0)!;
    }
    public KW_OF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OF, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionBoundSpec(): PartitionBoundSpecContext {
        return this.getRuleContext(0, PartitionBoundSpecContext)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public optTypedTableElEmentList(): OptTypedTableElEmentListContext | null {
        return this.getRuleContext(0, OptTypedTableElEmentListContext);
    }
    public createGenericOptions(): CreateGenericOptionsContext | null {
        return this.getRuleContext(0, CreateGenericOptionsContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatePartitionForeignTable) {
             listener.enterCreatePartitionForeignTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatePartitionForeignTable) {
             listener.exitCreatePartitionForeignTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatePartitionForeignTable) {
            return visitor.visitCreatePartitionForeignTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportForeignSchemaStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IMPORT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IMPORT, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0)!;
    }
    public schemaName(): SchemaNameContext {
        return this.getRuleContext(0, SchemaNameContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public relationExprList(): RelationExprListContext | null {
        return this.getRuleContext(0, RelationExprListContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public createGenericOptions(): CreateGenericOptionsContext | null {
        return this.getRuleContext(0, CreateGenericOptionsContext);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_importForeignSchemaStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterImportForeignSchemaStmt) {
             listener.enterImportForeignSchemaStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitImportForeignSchemaStmt) {
             listener.exitImportForeignSchemaStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitImportForeignSchemaStmt) {
            return visitor.visitImportForeignSchemaStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserMappingStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_USER(): antlr.TerminalNode[];
    public KW_USER(i: number): antlr.TerminalNode | null;
    public KW_USER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_USER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_USER, i);
    	}
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public createGenericOptions(): CreateGenericOptionsContext | null {
        return this.getRuleContext(0, CreateGenericOptionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createUserMappingStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateUserMappingStmt) {
             listener.enterCreateUserMappingStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateUserMappingStmt) {
             listener.exitCreateUserMappingStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUserMappingStmt) {
            return visitor.visitCreateUserMappingStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUserMappingStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_USER(): antlr.TerminalNode[];
    public KW_USER(i: number): antlr.TerminalNode | null;
    public KW_USER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_USER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_USER, i);
    	}
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public alterGenericOptions(): AlterGenericOptionsContext {
        return this.getRuleContext(0, AlterGenericOptionsContext)!;
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterUserMappingStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterUserMappingStmt) {
             listener.enterAlterUserMappingStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterUserMappingStmt) {
             listener.exitAlterUserMappingStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterUserMappingStmt) {
            return visitor.visitAlterUserMappingStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatePolicyStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_POLICY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(0, RoleListContext);
    }
    public rowSecurityOptionalExpr(): RowSecurityOptionalExprContext | null {
        return this.getRuleContext(0, RowSecurityOptionalExprContext);
    }
    public rowSecurityOptionalWithCheck(): RowSecurityOptionalWithCheckContext | null {
        return this.getRuleContext(0, RowSecurityOptionalWithCheckContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PERMISSIVE, 0);
    }
    public KW_RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICTIVE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createPolicyStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatePolicyStmt) {
             listener.enterCreatePolicyStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatePolicyStmt) {
             listener.exitCreatePolicyStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatePolicyStmt) {
            return visitor.visitCreatePolicyStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPolicyStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_POLICY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(0, RoleListContext);
    }
    public rowSecurityOptionalExpr(): RowSecurityOptionalExprContext | null {
        return this.getRuleContext(0, RowSecurityOptionalExprContext);
    }
    public rowSecurityOptionalWithCheck(): RowSecurityOptionalWithCheckContext | null {
        return this.getRuleContext(0, RowSecurityOptionalWithCheckContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterPolicyStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterPolicyStmt) {
             listener.enterAlterPolicyStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterPolicyStmt) {
             listener.exitAlterPolicyStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterPolicyStmt) {
            return visitor.visitAlterPolicyStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterProcedureStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_PROCEDURE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0)!;
    }
    public procedureName(): ProcedureNameContext {
        return this.getRuleContext(0, ProcedureNameContext)!;
    }
    public procedureAction(): ProcedureActionContext[];
    public procedureAction(i: number): ProcedureActionContext | null;
    public procedureAction(i?: number): ProcedureActionContext[] | ProcedureActionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureActionContext);
        }

        return this.getRuleContext(i, ProcedureActionContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public procedureNameCreate(): ProcedureNameCreateContext | null {
        return this.getRuleContext(0, ProcedureNameCreateContext);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaNameCreate(): SchemaNameCreateContext | null {
        return this.getRuleContext(0, SchemaNameCreateContext);
    }
    public KW_DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public funcArgs(): FuncArgsContext | null {
        return this.getRuleContext(0, FuncArgsContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterProcedureStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterProcedureStmt) {
             listener.enterAlterProcedureStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterProcedureStmt) {
             listener.exitAlterProcedureStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterProcedureStmt) {
            return visitor.visitAlterProcedureStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedureAction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedureAction) {
             listener.enterProcedureAction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedureAction) {
             listener.exitProcedureAction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureAction) {
            return visitor.visitProcedureAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowSecurityOptionalExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowSecurityOptionalExpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowSecurityOptionalExpr) {
             listener.enterRowSecurityOptionalExpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowSecurityOptionalExpr) {
             listener.exitRowSecurityOptionalExpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowSecurityOptionalExpr) {
            return visitor.visitRowSecurityOptionalExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowSecurityOptionalWithCheckContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_CHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowSecurityOptionalWithCheck;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowSecurityOptionalWithCheck) {
             listener.enterRowSecurityOptionalWithCheck(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowSecurityOptionalWithCheck) {
             listener.exitRowSecurityOptionalWithCheck(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowSecurityOptionalWithCheck) {
            return visitor.visitRowSecurityOptionalWithCheck(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateAccessMethodStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_ACCESS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0)!;
    }
    public KW_METHOD(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public KW_HANDLER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createAccessMethodStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateAccessMethodStmt) {
             listener.enterCreateAccessMethodStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateAccessMethodStmt) {
             listener.exitCreateAccessMethodStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateAccessMethodStmt) {
            return visitor.visitCreateAccessMethodStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTrigStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0)!;
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public triggerActionTime(): TriggerActionTimeContext {
        return this.getRuleContext(0, TriggerActionTimeContext)!;
    }
    public triggerEvents(): TriggerEventsContext {
        return this.getRuleContext(0, TriggerEventsContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public functionOrProcedure(): FunctionOrProcedureContext {
        return this.getRuleContext(0, FunctionOrProcedureContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public triggerFuncArgs(): TriggerFuncArgsContext {
        return this.getRuleContext(0, TriggerFuncArgsContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public orReplaceOpt(): OrReplaceOptContext | null {
        return this.getRuleContext(0, OrReplaceOptContext);
    }
    public KW_REFERENCING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCING, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public triggerWhen(): TriggerWhenContext | null {
        return this.getRuleContext(0, TriggerWhenContext);
    }
    public KW_ROW(): antlr.TerminalNode[];
    public KW_ROW(i: number): antlr.TerminalNode | null;
    public KW_ROW(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ROW);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ROW, i);
    	}
    }
    public KW_STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATEMENT, 0);
    }
    public KW_EACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EACH, 0);
    }
    public KW_NEW(): antlr.TerminalNode[];
    public KW_NEW(i: number): antlr.TerminalNode | null;
    public KW_NEW(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NEW);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NEW, i);
    	}
    }
    public KW_OLD(): antlr.TerminalNode[];
    public KW_OLD(i: number): antlr.TerminalNode | null;
    public KW_OLD(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_OLD);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_OLD, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode[];
    public KW_TABLE(i: number): antlr.TerminalNode | null;
    public KW_TABLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TABLE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TABLE, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_AS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_AS, i);
    	}
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public constraintAttributeElem(): ConstraintAttributeElemContext[];
    public constraintAttributeElem(i: number): ConstraintAttributeElemContext | null;
    public constraintAttributeElem(i?: number): ConstraintAttributeElemContext[] | ConstraintAttributeElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstraintAttributeElemContext);
        }

        return this.getRuleContext(i, ConstraintAttributeElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createTrigStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateTrigStmt) {
             listener.enterCreateTrigStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateTrigStmt) {
             listener.exitCreateTrigStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTrigStmt) {
            return visitor.visitCreateTrigStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerActionTimeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEFORE, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AFTER, 0);
    }
    public KW_INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSTEAD, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerActionTime;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerActionTime) {
             listener.enterTriggerActionTime(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerActionTime) {
             listener.exitTriggerActionTime(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerActionTime) {
            return visitor.visitTriggerActionTime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerEventsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggerOneEvent(): TriggerOneEventContext[];
    public triggerOneEvent(i: number): TriggerOneEventContext | null;
    public triggerOneEvent(i?: number): TriggerOneEventContext[] | TriggerOneEventContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggerOneEventContext);
        }

        return this.getRuleContext(i, TriggerOneEventContext);
    }
    public KW_OR(): antlr.TerminalNode[];
    public KW_OR(i: number): antlr.TerminalNode | null;
    public KW_OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_OR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerEvents;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerEvents) {
             listener.enterTriggerEvents(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerEvents) {
             listener.exitTriggerEvents(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerEvents) {
            return visitor.visitTriggerEvents(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerOneEventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public columnList(): ColumnListContext | null {
        return this.getRuleContext(0, ColumnListContext);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerOneEvent;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerOneEvent) {
             listener.enterTriggerOneEvent(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerOneEvent) {
             listener.exitTriggerOneEvent(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerOneEvent) {
            return visitor.visitTriggerOneEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerWhenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerWhen;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerWhen) {
             listener.enterTriggerWhen(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerWhen) {
             listener.exitTriggerWhen(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerWhen) {
            return visitor.visitTriggerWhen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionOrProcedureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureName(): ProcedureNameContext | null {
        return this.getRuleContext(0, ProcedureNameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_functionOrProcedure;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionOrProcedure) {
             listener.enterFunctionOrProcedure(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionOrProcedure) {
             listener.exitFunctionOrProcedure(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionOrProcedure) {
            return visitor.visitFunctionOrProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerFuncArgsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggerFuncArg(): TriggerFuncArgContext[];
    public triggerFuncArg(i: number): TriggerFuncArgContext | null;
    public triggerFuncArg(i?: number): TriggerFuncArgContext[] | TriggerFuncArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggerFuncArgContext);
        }

        return this.getRuleContext(i, TriggerFuncArgContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerFuncArgs;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerFuncArgs) {
             listener.enterTriggerFuncArgs(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerFuncArgs) {
             listener.exitTriggerFuncArgs(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerFuncArgs) {
            return visitor.visitTriggerFuncArgs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerFuncArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerFuncArg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerFuncArg) {
             listener.enterTriggerFuncArg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerFuncArg) {
             listener.exitTriggerFuncArg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerFuncArg) {
            return visitor.visitTriggerFuncArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintAttributeElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INITIALLY, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALID, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constraintAttributeElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstraintAttributeElem) {
             listener.enterConstraintAttributeElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstraintAttributeElem) {
             listener.exitConstraintAttributeElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintAttributeElem) {
            return visitor.visitConstraintAttributeElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateEventTrigStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_EVENT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public functionOrProcedure(): FunctionOrProcedureContext {
        return this.getRuleContext(0, FunctionOrProcedureContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0);
    }
    public eventTriggerWhenItem(): EventTriggerWhenItemContext[];
    public eventTriggerWhenItem(i: number): EventTriggerWhenItemContext | null;
    public eventTriggerWhenItem(i?: number): EventTriggerWhenItemContext[] | EventTriggerWhenItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(EventTriggerWhenItemContext);
        }

        return this.getRuleContext(i, EventTriggerWhenItemContext);
    }
    public KW_AND(): antlr.TerminalNode[];
    public KW_AND(i: number): antlr.TerminalNode | null;
    public KW_AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_AND);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createEventTrigStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateEventTrigStmt) {
             listener.enterCreateEventTrigStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateEventTrigStmt) {
             listener.exitCreateEventTrigStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateEventTrigStmt) {
            return visitor.visitCreateEventTrigStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EventTriggerWhenItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public stringConst(): StringConstContext {
        return this.getRuleContext(0, StringConstContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public notifyPayload(): NotifyPayloadContext[];
    public notifyPayload(i: number): NotifyPayloadContext | null;
    public notifyPayload(i?: number): NotifyPayloadContext[] | NotifyPayloadContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NotifyPayloadContext);
        }

        return this.getRuleContext(i, NotifyPayloadContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_eventTriggerWhenItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterEventTriggerWhenItem) {
             listener.enterEventTriggerWhenItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitEventTriggerWhenItem) {
             listener.exitEventTriggerWhenItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEventTriggerWhenItem) {
            return visitor.visitEventTriggerWhenItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterEventTrigStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_EVENT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICA, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterEventTrigStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterEventTrigStmt) {
             listener.enterAlterEventTrigStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterEventTrigStmt) {
             listener.exitAlterEventTrigStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterEventTrigStmt) {
            return visitor.visitAlterEventTrigStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateAssertionStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_ASSERTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ASSERTION, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public KW_CHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public constraintAttributeElem(): ConstraintAttributeElemContext[];
    public constraintAttributeElem(i: number): ConstraintAttributeElemContext | null;
    public constraintAttributeElem(i?: number): ConstraintAttributeElemContext[] | ConstraintAttributeElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstraintAttributeElemContext);
        }

        return this.getRuleContext(i, ConstraintAttributeElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createAssertionStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateAssertionStmt) {
             listener.enterCreateAssertionStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateAssertionStmt) {
             listener.exitCreateAssertionStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateAssertionStmt) {
            return visitor.visitCreateAssertionStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefineStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public oldAggregateElem(): OldAggregateElemContext[];
    public oldAggregateElem(i: number): OldAggregateElemContext | null;
    public oldAggregateElem(i?: number): OldAggregateElemContext[] | OldAggregateElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OldAggregateElemContext);
        }

        return this.getRuleContext(i, OldAggregateElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public orReplaceOpt(): OrReplaceOptContext | null {
        return this.getRuleContext(0, OrReplaceOptContext);
    }
    public aggregateArgs(): AggregateArgsContext | null {
        return this.getRuleContext(0, AggregateArgsContext);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public anyOperator(): AnyOperatorContext | null {
        return this.getRuleContext(0, AnyOperatorContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public anyName(): AnyNameContext[];
    public anyName(i: number): AnyNameContext | null;
    public anyName(i?: number): AnyNameContext[] | AnyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnyNameContext);
        }

        return this.getRuleContext(i, AnyNameContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_ENUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENUM, 0);
    }
    public tableFuncElementList(): TableFuncElementListContext | null {
        return this.getRuleContext(0, TableFuncElementListContext);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public notifyPayload(): NotifyPayloadContext[];
    public notifyPayload(i: number): NotifyPayloadContext | null;
    public notifyPayload(i?: number): NotifyPayloadContext[] | NotifyPayloadContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NotifyPayloadContext);
        }

        return this.getRuleContext(i, NotifyPayloadContext);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RANGE, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defineStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefineStmt) {
             listener.enterDefineStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefineStmt) {
             listener.exitDefineStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefineStmt) {
            return visitor.visitDefineStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public defElem(): DefElemContext[];
    public defElem(i: number): DefElemContext | null;
    public defElem(i?: number): DefElemContext[] | DefElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DefElemContext);
        }

        return this.getRuleContext(i, DefElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_definition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefinition) {
             listener.enterDefinition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefinition) {
             listener.exitDefinition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefinition) {
            return visitor.visitDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public defArg(): DefArgContext | null {
        return this.getRuleContext(0, DefArgContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefElem) {
             listener.enterDefElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefElem) {
             listener.exitDefElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefElem) {
            return visitor.visitDefElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public funcType(): FuncTypeContext | null {
        return this.getRuleContext(0, FuncTypeContext);
    }
    public reservedKeyword(): ReservedKeywordContext | null {
        return this.getRuleContext(0, ReservedKeywordContext);
    }
    public qualAllOp(): QualAllOpContext | null {
        return this.getRuleContext(0, QualAllOpContext);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defArg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefArg) {
             listener.enterDefArg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefArg) {
             listener.exitDefArg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefArg) {
            return visitor.visitDefArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OldAggregateElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public defArg(): DefArgContext {
        return this.getRuleContext(0, DefArgContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_oldAggregateElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOldAggregateElem) {
             listener.enterOldAggregateElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOldAggregateElem) {
             listener.exitOldAggregateElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOldAggregateElem) {
            return visitor.visitOldAggregateElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterEnumStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_VALUE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0)!;
    }
    public stringConst(): StringConstContext[];
    public stringConst(i: number): StringConstContext | null;
    public stringConst(i?: number): StringConstContext[] | StringConstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringConstContext);
        }

        return this.getRuleContext(i, StringConstContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEFORE, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AFTER, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterEnumStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterEnumStmt) {
             listener.enterAlterEnumStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterEnumStmt) {
             listener.exitAlterEnumStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterEnumStmt) {
            return visitor.visitAlterEnumStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_ifNotExists;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOperatorClassStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public KW_CLASS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0)!;
    }
    public anyName(): AnyNameContext[];
    public anyName(i: number): AnyNameContext | null;
    public anyName(i?: number): AnyNameContext[] | AnyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnyNameContext);
        }

        return this.getRuleContext(i, AnyNameContext);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext {
        return this.getRuleContext(0, TableAccessMethodClauseContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public opClassItem(): OpClassItemContext[];
    public opClassItem(i: number): OpClassItemContext | null;
    public opClassItem(i?: number): OpClassItemContext[] | OpClassItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OpClassItemContext);
        }

        return this.getRuleContext(i, OpClassItemContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createOperatorClassStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateOperatorClassStmt) {
             listener.enterCreateOperatorClassStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateOperatorClassStmt) {
             listener.exitCreateOperatorClassStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOperatorClassStmt) {
            return visitor.visitCreateOperatorClassStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpClassItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public anyOperator(): AnyOperatorContext | null {
        return this.getRuleContext(0, AnyOperatorContext);
    }
    public operatorArgTypes(): OperatorArgTypesContext | null {
        return this.getRuleContext(0, OperatorArgTypesContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_RECHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECHECK, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesContext);
    }
    public prepTypeClause(): PrepTypeClauseContext | null {
        return this.getRuleContext(0, PrepTypeClauseContext);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opClassItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpClassItem) {
             listener.enterOpClassItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpClassItem) {
             listener.exitOpClassItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpClassItem) {
            return visitor.visitOpClassItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOperatorFamilyStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public KW_FAMILY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext {
        return this.getRuleContext(0, TableAccessMethodClauseContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createOperatorFamilyStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateOperatorFamilyStmt) {
             listener.enterCreateOperatorFamilyStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateOperatorFamilyStmt) {
             listener.exitCreateOperatorFamilyStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOperatorFamilyStmt) {
            return visitor.visitCreateOperatorFamilyStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterOperatorFamilyStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public KW_FAMILY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext {
        return this.getRuleContext(0, TableAccessMethodClauseContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public opClassItem(): OpClassItemContext[];
    public opClassItem(i: number): OpClassItemContext | null;
    public opClassItem(i?: number): OpClassItemContext[] | OpClassItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OpClassItemContext);
        }

        return this.getRuleContext(i, OpClassItemContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public opClassDrop(): OpClassDropContext[];
    public opClassDrop(i: number): OpClassDropContext | null;
    public opClassDrop(i?: number): OpClassDropContext[] | OpClassDropContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OpClassDropContext);
        }

        return this.getRuleContext(i, OpClassDropContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterOperatorFamilyStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterOperatorFamilyStmt) {
             listener.enterAlterOperatorFamilyStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterOperatorFamilyStmt) {
             listener.exitAlterOperatorFamilyStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterOperatorFamilyStmt) {
            return visitor.visitAlterOperatorFamilyStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpClassDropContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Integral, 0)!;
    }
    public prepTypeClause(): PrepTypeClauseContext {
        return this.getRuleContext(0, PrepTypeClauseContext)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opClassDrop;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpClassDrop) {
             listener.enterOpClassDrop(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpClassDrop) {
             listener.exitOpClassDrop(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpClassDrop) {
            return visitor.visitOpClassDrop(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReassignOwnedStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REASSIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REASSIGN, 0)!;
    }
    public KW_OWNED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(0, RoleListContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public roleSpec(): RoleSpecContext {
        return this.getRuleContext(0, RoleSpecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reassignOwnedStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReassignOwnedStmt) {
             listener.enterReassignOwnedStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReassignOwnedStmt) {
             listener.exitReassignOwnedStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReassignOwnedStmt) {
            return visitor.visitReassignOwnedStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public nameList(): NameListContext | null {
        return this.getRuleContext(0, NameListContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext[];
    public viewName(i: number): ViewNameContext | null;
    public viewName(i?: number): ViewNameContext[] | ViewNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ViewNameContext);
        }

        return this.getRuleContext(i, ViewNameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public tableNameList(): TableNameListContext | null {
        return this.getRuleContext(0, TableNameListContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaNameList(): SchemaNameListContext | null {
        return this.getRuleContext(0, SchemaNameListContext);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public anyNameList(): AnyNameListContext | null {
        return this.getRuleContext(0, AnyNameListContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(0, RoleListContext);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tableSpaceName(): TableSpaceNameContext | null {
        return this.getRuleContext(0, TableSpaceNameContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_USER(): antlr.TerminalNode[];
    public KW_USER(i: number): antlr.TerminalNode | null;
    public KW_USER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_USER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_USER, i);
    	}
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public databaseName(): DatabaseNameContext | null {
        return this.getRuleContext(0, DatabaseNameContext);
    }
    public KW_FORCE(): antlr.TerminalNode[];
    public KW_FORCE(i: number): antlr.TerminalNode | null;
    public KW_FORCE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FORCE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FORCE, i);
    	}
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_dropStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDropStmt) {
             listener.enterDropStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDropStmt) {
             listener.exitDropStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropStmt) {
            return visitor.visitDropStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectTypeAnyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_objectTypeAnyName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterObjectTypeAnyName) {
             listener.enterObjectTypeAnyName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitObjectTypeAnyName) {
             listener.exitObjectTypeAnyName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitObjectTypeAnyName) {
            return visitor.visitObjectTypeAnyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectTypeNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(0, SchemaNameContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public databaseName(): DatabaseNameContext | null {
        return this.getRuleContext(0, DatabaseNameContext);
    }
    public optTableSpace(): OptTableSpaceContext | null {
        return this.getRuleContext(0, OptTableSpaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_objectTypeName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterObjectTypeName) {
             listener.enterObjectTypeName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitObjectTypeName) {
             listener.exitObjectTypeName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitObjectTypeName) {
            return visitor.visitObjectTypeName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnyNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyName(): AnyNameContext[];
    public anyName(i: number): AnyNameContext | null;
    public anyName(i?: number): AnyNameContext[] | AnyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnyNameContext);
        }

        return this.getRuleContext(i, AnyNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_anyNameList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnyNameList) {
             listener.enterAnyNameList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnyNameList) {
             listener.exitAnyNameList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnyNameList) {
            return visitor.visitAnyNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_anyName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnyName) {
             listener.enterAnyName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnyName) {
             listener.exitAnyName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnyName) {
            return visitor.visitAnyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AttrsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DOT);
    	} else {
    		return this.getToken(PostgreSqlParser.DOT, i);
    	}
    }
    public colLabel(): ColLabelContext[];
    public colLabel(i: number): ColLabelContext | null;
    public colLabel(i?: number): ColLabelContext[] | ColLabelContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColLabelContext);
        }

        return this.getRuleContext(i, ColLabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_attrs;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAttrs) {
             listener.enterAttrs(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAttrs) {
             listener.exitAttrs(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAttrs) {
            return visitor.visitAttrs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0)!;
    }
    public truncateTable(): TruncateTableContext[];
    public truncateTable(i: number): TruncateTableContext | null;
    public truncateTable(i?: number): TruncateTableContext[] | TruncateTableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TruncateTableContext);
        }

        return this.getRuleContext(i, TruncateTableContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTINUE, 0);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTART, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_truncateStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTruncateStmt) {
             listener.enterTruncateStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTruncateStmt) {
             listener.exitTruncateStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateStmt) {
            return visitor.visitTruncateStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_truncateTable;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTruncateTable) {
             listener.enterTruncateTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTruncateTable) {
             listener.exitTruncateTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommentStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ON);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ON, i);
    	}
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public objectTypeAnyName(): ObjectTypeAnyNameContext | null {
        return this.getRuleContext(0, ObjectTypeAnyNameContext);
    }
    public objectTypeName(): ObjectTypeNameContext | null {
        return this.getRuleContext(0, ObjectTypeNameContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregateWithArgTypes(): AggregateWithArgTypesContext | null {
        return this.getRuleContext(0, AggregateWithArgTypesContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public operatorWithArgTypes(): OperatorWithArgTypesContext | null {
        return this.getRuleContext(0, OperatorWithArgTypesContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureWithArgTypes(): ProcedureWithArgTypesContext | null {
        return this.getRuleContext(0, ProcedureWithArgTypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routineWithArgTypes(): RoutineWithArgTypesContext | null {
        return this.getRuleContext(0, RoutineWithArgTypesContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_commentStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCommentStmt) {
             listener.enterCommentStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCommentStmt) {
             listener.exitCommentStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentStmt) {
            return visitor.visitCommentStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SecLabelStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECURITY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0)!;
    }
    public KW_LABEL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LABEL, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregateWithArgTypes(): AggregateWithArgTypesContext | null {
        return this.getRuleContext(0, AggregateWithArgTypesContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesContext);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureWithArgTypes(): ProcedureWithArgTypesContext | null {
        return this.getRuleContext(0, ProcedureWithArgTypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routineWithArgTypes(): RoutineWithArgTypesContext | null {
        return this.getRuleContext(0, RoutineWithArgTypesContext);
    }
    public objectTypeAnyName(): ObjectTypeAnyNameContext | null {
        return this.getRuleContext(0, ObjectTypeAnyNameContext);
    }
    public objectTypeName(): ObjectTypeNameContext | null {
        return this.getRuleContext(0, ObjectTypeNameContext);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public nonReservedWordOrStringConst(): NonReservedWordOrStringConstContext | null {
        return this.getRuleContext(0, NonReservedWordOrStringConstContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_secLabelStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSecLabelStmt) {
             listener.enterSecLabelStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSecLabelStmt) {
             listener.exitSecLabelStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSecLabelStmt) {
            return visitor.visitSecLabelStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FetchStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fetch_args(): Fetch_argsContext {
        return this.getRuleContext(0, Fetch_argsContext)!;
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MOVE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fetchStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFetchStmt) {
             listener.enterFetchStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFetchStmt) {
             listener.exitFetchStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFetchStmt) {
            return visitor.visitFetchStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Fetch_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public fromIn(): FromInContext | null {
        return this.getRuleContext(0, FromInContext);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIOR, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public signedConst(): SignedConstContext | null {
        return this.getRuleContext(0, SignedConstContext);
    }
    public KW_ABSOLUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABSOLUTE, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELATIVE, 0);
    }
    public KW_FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORWARD, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BACKWARD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fetch_args;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFetch_args) {
             listener.enterFetch_args(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFetch_args) {
             listener.exitFetch_args(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFetch_args) {
            return visitor.visitFetch_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromInContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fromIn;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFromIn) {
             listener.enterFromIn(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFromIn) {
             listener.exitFromIn(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromIn) {
            return visitor.visitFromIn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode[];
    public KW_GRANT(i: number): antlr.TerminalNode | null;
    public KW_GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_GRANT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_GRANT, i);
    	}
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public privilegeTarget(): PrivilegeTargetContext {
        return this.getRuleContext(0, PrivilegeTargetContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public granteeList(): GranteeListContext {
        return this.getRuleContext(0, GranteeListContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_grantStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGrantStmt) {
             listener.enterGrantStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGrantStmt) {
             listener.exitGrantStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantStmt) {
            return visitor.visitGrantStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0)!;
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public privilegeTarget(): PrivilegeTargetContext {
        return this.getRuleContext(0, PrivilegeTargetContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public granteeList(): GranteeListContext {
        return this.getRuleContext(0, GranteeListContext)!;
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_revokeStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRevokeStmt) {
             listener.enterRevokeStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRevokeStmt) {
             listener.exitRevokeStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokeStmt) {
            return visitor.visitRevokeStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIVILEGES, 0);
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public beforePrivilegeSelect(): BeforePrivilegeSelectContext[];
    public beforePrivilegeSelect(i: number): BeforePrivilegeSelectContext | null;
    public beforePrivilegeSelect(i?: number): BeforePrivilegeSelectContext[] | BeforePrivilegeSelectContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BeforePrivilegeSelectContext);
        }

        return this.getRuleContext(i, BeforePrivilegeSelectContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_privileges;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrivileges) {
             listener.enterPrivileges(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrivileges) {
             listener.exitPrivileges(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivileges) {
            return visitor.visitPrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BeforePrivilegeSelectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0);
    }
    public KW_PEFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PEFERENCES, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_USAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USAGE, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public KW_CONNECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECT, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_beforePrivilegeSelect;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterBeforePrivilegeSelect) {
             listener.enterBeforePrivilegeSelect(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitBeforePrivilegeSelect) {
             listener.exitBeforePrivilegeSelect(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBeforePrivilegeSelect) {
            return visitor.visitBeforePrivilegeSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_privilege;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrivilege) {
             listener.enterPrivilege(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrivilege) {
             listener.exitPrivilege(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeTargetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public tableNameList(): TableNameListContext | null {
        return this.getRuleContext(0, TableNameListContext);
    }
    public qualifiedNameList(): QualifiedNameListContext | null {
        return this.getRuleContext(0, QualifiedNameListContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public nameList(): NameListContext | null {
        return this.getRuleContext(0, NameListContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypesList(): FunctionWithArgTypesListContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesListContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureWithArgTypesList(): ProcedureWithArgTypesListContext | null {
        return this.getRuleContext(0, ProcedureWithArgTypesListContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routineWithArgTypesList(): RoutineWithArgTypesListContext | null {
        return this.getRuleContext(0, RoutineWithArgTypesListContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public databaseNameList(): DatabaseNameListContext | null {
        return this.getRuleContext(0, DatabaseNameListContext);
    }
    public anyNameList(): AnyNameListContext | null {
        return this.getRuleContext(0, AnyNameListContext);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericOnly(): NumericOnlyContext[];
    public numericOnly(i: number): NumericOnlyContext | null;
    public numericOnly(i?: number): NumericOnlyContext[] | NumericOnlyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericOnlyContext);
        }

        return this.getRuleContext(i, NumericOnlyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaNameList(): SchemaNameListContext | null {
        return this.getRuleContext(0, SchemaNameListContext);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tableSpaceNameList(): TableSpaceNameListContext | null {
        return this.getRuleContext(0, TableSpaceNameListContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_PROCEDURES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURES, 0);
    }
    public KW_ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_privilegeTarget;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrivilegeTarget) {
             listener.enterPrivilegeTarget(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrivilegeTarget) {
             listener.exitPrivilegeTarget(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeTarget) {
            return visitor.visitPrivilegeTarget(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GranteeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleSpec(): RoleSpecContext[];
    public roleSpec(i: number): RoleSpecContext | null;
    public roleSpec(i?: number): RoleSpecContext[] | RoleSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleSpecContext);
        }

        return this.getRuleContext(i, RoleSpecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_GROUP(): antlr.TerminalNode[];
    public KW_GROUP(i: number): antlr.TerminalNode | null;
    public KW_GROUP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_GROUP);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_GROUP, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_granteeList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGranteeList) {
             listener.enterGranteeList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGranteeList) {
             listener.exitGranteeList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGranteeList) {
            return visitor.visitGranteeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantRoleStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(0, RoleListContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANTED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_grantRoleStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGrantRoleStmt) {
             listener.enterGrantRoleStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGrantRoleStmt) {
             listener.exitGrantRoleStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantRoleStmt) {
            return visitor.visitGrantRoleStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeRoleStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(0, RoleListContext)!;
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANTED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_revokeRoleStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRevokeRoleStmt) {
             listener.enterRevokeRoleStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRevokeRoleStmt) {
             listener.exitRevokeRoleStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokeRoleStmt) {
            return visitor.visitRevokeRoleStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDefaultPrivilegesStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0)!;
    }
    public KW_PRIVILEGES(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PRIVILEGES, 0)!;
    }
    public defaclaction(): DefaclactionContext {
        return this.getRuleContext(0, DefaclactionContext)!;
    }
    public KW_IN(): antlr.TerminalNode[];
    public KW_IN(i: number): antlr.TerminalNode | null;
    public KW_IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_IN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_IN, i);
    	}
    }
    public KW_SCHEMA(): antlr.TerminalNode[];
    public KW_SCHEMA(i: number): antlr.TerminalNode | null;
    public KW_SCHEMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SCHEMA);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SCHEMA, i);
    	}
    }
    public schemaNameList(): SchemaNameListContext[];
    public schemaNameList(i: number): SchemaNameListContext | null;
    public schemaNameList(i?: number): SchemaNameListContext[] | SchemaNameListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SchemaNameListContext);
        }

        return this.getRuleContext(i, SchemaNameListContext);
    }
    public KW_FOR(): antlr.TerminalNode[];
    public KW_FOR(i: number): antlr.TerminalNode | null;
    public KW_FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FOR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FOR, i);
    	}
    }
    public roleList(): RoleListContext[];
    public roleList(i: number): RoleListContext | null;
    public roleList(i?: number): RoleListContext[] | RoleListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleListContext);
        }

        return this.getRuleContext(i, RoleListContext);
    }
    public KW_ROLE(): antlr.TerminalNode[];
    public KW_ROLE(i: number): antlr.TerminalNode | null;
    public KW_ROLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ROLE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ROLE, i);
    	}
    }
    public KW_USER(): antlr.TerminalNode[];
    public KW_USER(i: number): antlr.TerminalNode | null;
    public KW_USER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_USER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_USER, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterDefaultPrivilegesStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterDefaultPrivilegesStmt) {
             listener.enterAlterDefaultPrivilegesStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterDefaultPrivilegesStmt) {
             listener.exitAlterDefaultPrivilegesStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDefaultPrivilegesStmt) {
            return visitor.visitAlterDefaultPrivilegesStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaclactionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode[];
    public KW_GRANT(i: number): antlr.TerminalNode | null;
    public KW_GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_GRANT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_GRANT, i);
    	}
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public defaclPrivilegeTarget(): DefaclPrivilegeTargetContext {
        return this.getRuleContext(0, DefaclPrivilegeTargetContext)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public granteeList(): GranteeListContext {
        return this.getRuleContext(0, GranteeListContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defaclaction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefaclaction) {
             listener.enterDefaclaction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefaclaction) {
             listener.exitDefaclaction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaclaction) {
            return visitor.visitDefaclaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaclPrivilegeTargetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINES, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public KW_TYPES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPES, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMAS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defaclPrivilegeTarget;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefaclPrivilegeTarget) {
             listener.enterDefaclPrivilegeTarget(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefaclPrivilegeTarget) {
             listener.exitDefaclPrivilegeTarget(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaclPrivilegeTarget) {
            return visitor.visitDefaclPrivilegeTarget(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public relationExpr(): RelationExprContext {
        return this.getRuleContext(0, RelationExprContext)!;
    }
    public indexParams(): IndexParamsContext[];
    public indexParams(i: number): IndexParamsContext | null;
    public indexParams(i?: number): IndexParamsContext[] | IndexParamsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexParamsContext);
        }

        return this.getRuleContext(i, IndexParamsContext);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public optRelOptions(): OptRelOptionsContext | null {
        return this.getRuleContext(0, OptRelOptionsContext);
    }
    public optTableSpace(): OptTableSpaceContext | null {
        return this.getRuleContext(0, OptTableSpaceContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indexStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndexStmt) {
             listener.enterIndexStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndexStmt) {
             listener.exitIndexStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexStmt) {
            return visitor.visitIndexStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexParamsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public indexElem(): IndexElemContext[];
    public indexElem(i: number): IndexElemContext | null;
    public indexElem(i?: number): IndexElemContext[] | IndexElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexElemContext);
        }

        return this.getRuleContext(i, IndexElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indexParams;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndexParams) {
             listener.enterIndexParams(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndexParams) {
             listener.exitIndexParams(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexParams) {
            return visitor.visitIndexParams(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public funcExprWindowless(): FuncExprWindowlessContext | null {
        return this.getRuleContext(0, FuncExprWindowlessContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public relOptions(): RelOptionsContext | null {
        return this.getRuleContext(0, RelOptionsContext);
    }
    public collateClause(): CollateClauseContext | null {
        return this.getRuleContext(0, CollateClauseContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DESC, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indexElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndexElem) {
             listener.enterIndexElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndexElem) {
             listener.exitIndexElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexElem) {
            return visitor.visitIndexElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFunctionStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionNameCreate(): FunctionNameCreateContext | null {
        return this.getRuleContext(0, FunctionNameCreateContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureNameCreate(): ProcedureNameCreateContext | null {
        return this.getRuleContext(0, ProcedureNameCreateContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public orReplaceOpt(): OrReplaceOptContext | null {
        return this.getRuleContext(0, OrReplaceOptContext);
    }
    public KW_RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNS, 0);
    }
    public createFuncOptItem(): CreateFuncOptItemContext[];
    public createFuncOptItem(i: number): CreateFuncOptItemContext | null;
    public createFuncOptItem(i?: number): CreateFuncOptItemContext[] | CreateFuncOptItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFuncOptItemContext);
        }

        return this.getRuleContext(i, CreateFuncOptItemContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public nameList(): NameListContext | null {
        return this.getRuleContext(0, NameListContext);
    }
    public funcArgWithDefault(): FuncArgWithDefaultContext[];
    public funcArgWithDefault(i: number): FuncArgWithDefaultContext | null;
    public funcArgWithDefault(i?: number): FuncArgWithDefaultContext[] | FuncArgWithDefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FuncArgWithDefaultContext);
        }

        return this.getRuleContext(i, FuncArgWithDefaultContext);
    }
    public funcType(): FuncTypeContext | null {
        return this.getRuleContext(0, FuncTypeContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public tableFuncColumn(): TableFuncColumnContext[];
    public tableFuncColumn(i: number): TableFuncColumnContext | null;
    public tableFuncColumn(i?: number): TableFuncColumnContext[] | TableFuncColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableFuncColumnContext);
        }

        return this.getRuleContext(i, TableFuncColumnContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createFunctionStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateFunctionStmt) {
             listener.enterCreateFunctionStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateFunctionStmt) {
             listener.exitCreateFunctionStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFunctionStmt) {
            return visitor.visitCreateFunctionStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrReplaceOptContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OR, 0)!;
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_orReplaceOpt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOrReplaceOpt) {
             listener.enterOrReplaceOpt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOrReplaceOpt) {
             listener.exitOrReplaceOpt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrReplaceOpt) {
            return visitor.visitOrReplaceOpt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncArgsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public funcArgsList(): FuncArgsListContext | null {
        return this.getRuleContext(0, FuncArgsListContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcArgs;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncArgs) {
             listener.enterFuncArgs(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncArgs) {
             listener.exitFuncArgs(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncArgs) {
            return visitor.visitFuncArgs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncArgsListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public funcArg(): FuncArgContext[];
    public funcArg(i: number): FuncArgContext | null;
    public funcArg(i?: number): FuncArgContext[] | FuncArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FuncArgContext);
        }

        return this.getRuleContext(i, FuncArgContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcArgsList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncArgsList) {
             listener.enterFuncArgsList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncArgsList) {
             listener.exitFuncArgsList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncArgsList) {
            return visitor.visitFuncArgsList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineWithArgTypesListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routineWithArgTypes(): RoutineWithArgTypesContext[];
    public routineWithArgTypes(i: number): RoutineWithArgTypesContext | null;
    public routineWithArgTypes(i?: number): RoutineWithArgTypesContext[] | RoutineWithArgTypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineWithArgTypesContext);
        }

        return this.getRuleContext(i, RoutineWithArgTypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routineWithArgTypesList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutineWithArgTypesList) {
             listener.enterRoutineWithArgTypesList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutineWithArgTypesList) {
             listener.exitRoutineWithArgTypesList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineWithArgTypesList) {
            return visitor.visitRoutineWithArgTypesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineWithArgTypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routineName(): RoutineNameContext | null {
        return this.getRuleContext(0, RoutineNameContext);
    }
    public funcArgs(): FuncArgsContext | null {
        return this.getRuleContext(0, FuncArgsContext);
    }
    public typeFuncNameKeyword(): TypeFuncNameKeywordContext | null {
        return this.getRuleContext(0, TypeFuncNameKeywordContext);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routineWithArgTypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutineWithArgTypes) {
             listener.enterRoutineWithArgTypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutineWithArgTypes) {
             listener.exitRoutineWithArgTypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineWithArgTypes) {
            return visitor.visitRoutineWithArgTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureWithArgTypesListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedureWithArgTypes(): ProcedureWithArgTypesContext[];
    public procedureWithArgTypes(i: number): ProcedureWithArgTypesContext | null;
    public procedureWithArgTypes(i?: number): ProcedureWithArgTypesContext[] | ProcedureWithArgTypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcedureWithArgTypesContext);
        }

        return this.getRuleContext(i, ProcedureWithArgTypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedureWithArgTypesList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedureWithArgTypesList) {
             listener.enterProcedureWithArgTypesList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedureWithArgTypesList) {
             listener.exitProcedureWithArgTypesList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureWithArgTypesList) {
            return visitor.visitProcedureWithArgTypesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureWithArgTypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedureName(): ProcedureNameContext | null {
        return this.getRuleContext(0, ProcedureNameContext);
    }
    public funcArgs(): FuncArgsContext | null {
        return this.getRuleContext(0, FuncArgsContext);
    }
    public typeFuncNameKeyword(): TypeFuncNameKeywordContext | null {
        return this.getRuleContext(0, TypeFuncNameKeywordContext);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedureWithArgTypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedureWithArgTypes) {
             listener.enterProcedureWithArgTypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedureWithArgTypes) {
             listener.exitProcedureWithArgTypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureWithArgTypes) {
            return visitor.visitProcedureWithArgTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionWithArgTypesListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext[];
    public functionWithArgTypes(i: number): FunctionWithArgTypesContext | null;
    public functionWithArgTypes(i?: number): FunctionWithArgTypesContext[] | FunctionWithArgTypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionWithArgTypesContext);
        }

        return this.getRuleContext(i, FunctionWithArgTypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_functionWithArgTypesList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionWithArgTypesList) {
             listener.enterFunctionWithArgTypesList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionWithArgTypesList) {
             listener.exitFunctionWithArgTypesList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionWithArgTypesList) {
            return visitor.visitFunctionWithArgTypesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionWithArgTypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public funcArgs(): FuncArgsContext | null {
        return this.getRuleContext(0, FuncArgsContext);
    }
    public typeFuncNameKeyword(): TypeFuncNameKeywordContext | null {
        return this.getRuleContext(0, TypeFuncNameKeywordContext);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_functionWithArgTypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionWithArgTypes) {
             listener.enterFunctionWithArgTypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionWithArgTypes) {
             listener.exitFunctionWithArgTypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionWithArgTypes) {
            return visitor.visitFunctionWithArgTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public funcType(): FuncTypeContext {
        return this.getRuleContext(0, FuncTypeContext)!;
    }
    public argClass(): ArgClassContext | null {
        return this.getRuleContext(0, ArgClassContext);
    }
    public typeFunctionName(): TypeFunctionNameContext | null {
        return this.getRuleContext(0, TypeFunctionNameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcArg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncArg) {
             listener.enterFuncArg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncArg) {
             listener.exitFuncArg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncArg) {
            return visitor.visitFuncArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArgClassContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUT, 0);
    }
    public KW_INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INOUT, 0);
    }
    public KW_VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIADIC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_argClass;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArgClass) {
             listener.enterArgClass(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArgClass) {
             listener.exitArgClass(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArgClass) {
            return visitor.visitArgClass(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public typeFunctionName(): TypeFunctionNameContext | null {
        return this.getRuleContext(0, TypeFunctionNameContext);
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETOF, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcType;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncType) {
             listener.enterFuncType(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncType) {
             listener.exitFuncType(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncType) {
            return visitor.visitFuncType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncArgWithDefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public funcArg(): FuncArgContext {
        return this.getRuleContext(0, FuncArgContext)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcArgWithDefault;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncArgWithDefault) {
             listener.enterFuncArgWithDefault(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncArgWithDefault) {
             listener.exitFuncArgWithDefault(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncArgWithDefault) {
            return visitor.visitFuncArgWithDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateArgsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public funcArgsList(): FuncArgsListContext[];
    public funcArgsList(i: number): FuncArgsListContext | null;
    public funcArgsList(i?: number): FuncArgsListContext[] | FuncArgsListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FuncArgsListContext);
        }

        return this.getRuleContext(i, FuncArgsListContext);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_aggregateArgs;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAggregateArgs) {
             listener.enterAggregateArgs(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAggregateArgs) {
             listener.exitAggregateArgs(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateArgs) {
            return visitor.visitAggregateArgs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateWithArgTypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public aggregateArgs(): AggregateArgsContext {
        return this.getRuleContext(0, AggregateArgsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_aggregateWithArgTypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAggregateWithArgTypes) {
             listener.enterAggregateWithArgTypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAggregateWithArgTypes) {
             listener.exitAggregateWithArgTypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateWithArgTypes) {
            return visitor.visitAggregateWithArgTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonFuncOptItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_NULL(): antlr.TerminalNode[];
    public KW_NULL(i: number): antlr.TerminalNode | null;
    public KW_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NULL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NULL, i);
    	}
    }
    public KW_INPUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INPUT, 0);
    }
    public KW_RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNS, 0);
    }
    public KW_CALLED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALLED, 0);
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public KW_IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMUTABLE, 0);
    }
    public KW_STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STABLE, 0);
    }
    public KW_VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VOLATILE, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAKPROOF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COST, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_SUPPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUPPORT, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public setRestMore(): SetRestMoreContext | null {
        return this.getRuleContext(0, SetRestMoreContext);
    }
    public variableResetStmt(): VariableResetStmtContext | null {
        return this.getRuleContext(0, VariableResetStmtContext);
    }
    public KW_PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARALLEL, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_commonFuncOptItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCommonFuncOptItem) {
             listener.enterCommonFuncOptItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCommonFuncOptItem) {
             listener.exitCommonFuncOptItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommonFuncOptItem) {
            return visitor.visitCommonFuncOptItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFuncOptItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public notifyPayload(): NotifyPayloadContext | null {
        return this.getRuleContext(0, NotifyPayloadContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public nonReservedWordOrStringConst(): NonReservedWordOrStringConstContext | null {
        return this.getRuleContext(0, NonReservedWordOrStringConstContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode[];
    public KW_FOR(i: number): antlr.TerminalNode | null;
    public KW_FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FOR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FOR, i);
    	}
    }
    public KW_TYPE(): antlr.TerminalNode[];
    public KW_TYPE(i: number): antlr.TerminalNode | null;
    public KW_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TYPE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TYPE, i);
    	}
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WINDOW, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public stmt(): StmtContext | null {
        return this.getRuleContext(0, StmtContext);
    }
    public commonFuncOptItem(): CommonFuncOptItemContext | null {
        return this.getRuleContext(0, CommonFuncOptItemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createFuncOptItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateFuncOptItem) {
             listener.enterCreateFuncOptItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateFuncOptItem) {
             listener.exitCreateFuncOptItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFuncOptItem) {
            return visitor.visitCreateFuncOptItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public definition(): DefinitionContext {
        return this.getRuleContext(0, DefinitionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optDefinition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptDefinition) {
             listener.enterOptDefinition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptDefinition) {
             listener.exitOptDefinition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptDefinition) {
            return visitor.visitOptDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFuncColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public funcType(): FuncTypeContext {
        return this.getRuleContext(0, FuncTypeContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableFuncColumn;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableFuncColumn) {
             listener.enterTableFuncColumn(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableFuncColumn) {
             listener.exitTableFuncColumn(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableFuncColumn) {
            return visitor.visitTableFuncColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterFunctionStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureWithArgTypes(): ProcedureWithArgTypesContext | null {
        return this.getRuleContext(0, ProcedureWithArgTypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routineWithArgTypes(): RoutineWithArgTypesContext | null {
        return this.getRuleContext(0, RoutineWithArgTypesContext);
    }
    public commonFuncOptItem(): CommonFuncOptItemContext[];
    public commonFuncOptItem(i: number): CommonFuncOptItemContext | null;
    public commonFuncOptItem(i?: number): CommonFuncOptItemContext[] | CommonFuncOptItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommonFuncOptItemContext);
        }

        return this.getRuleContext(i, CommonFuncOptItemContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterFunctionStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterFunctionStmt) {
             listener.enterAlterFunctionStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterFunctionStmt) {
             listener.exitAlterFunctionStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterFunctionStmt) {
            return visitor.visitAlterFunctionStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveFuncStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypesList(): FunctionWithArgTypesListContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesListContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureWithArgTypesList(): ProcedureWithArgTypesListContext | null {
        return this.getRuleContext(0, ProcedureWithArgTypesListContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routineWithArgTypesList(): RoutineWithArgTypesListContext | null {
        return this.getRuleContext(0, RoutineWithArgTypesListContext);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_removeFuncStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRemoveFuncStmt) {
             listener.enterRemoveFuncStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRemoveFuncStmt) {
             listener.exitRemoveFuncStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRemoveFuncStmt) {
            return visitor.visitRemoveFuncStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveAggregateStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public KW_AGGREGATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0)!;
    }
    public aggregateWithArgTypes(): AggregateWithArgTypesContext[];
    public aggregateWithArgTypes(i: number): AggregateWithArgTypesContext | null;
    public aggregateWithArgTypes(i?: number): AggregateWithArgTypesContext[] | AggregateWithArgTypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AggregateWithArgTypesContext);
        }

        return this.getRuleContext(i, AggregateWithArgTypesContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_removeAggregateStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRemoveAggregateStmt) {
             listener.enterRemoveAggregateStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRemoveAggregateStmt) {
             listener.exitRemoveAggregateStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRemoveAggregateStmt) {
            return visitor.visitRemoveAggregateStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveOperatorStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public operatorWithArgTypes(): OperatorWithArgTypesContext[];
    public operatorWithArgTypes(i: number): OperatorWithArgTypesContext | null;
    public operatorWithArgTypes(i?: number): OperatorWithArgTypesContext[] | OperatorWithArgTypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OperatorWithArgTypesContext);
        }

        return this.getRuleContext(i, OperatorWithArgTypesContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_removeOperatorStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRemoveOperatorStmt) {
             listener.enterRemoveOperatorStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRemoveOperatorStmt) {
             listener.exitRemoveOperatorStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRemoveOperatorStmt) {
            return visitor.visitRemoveOperatorStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OperatorArgTypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operatorArgTypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperatorArgTypes) {
             listener.enterOperatorArgTypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperatorArgTypes) {
             listener.exitOperatorArgTypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperatorArgTypes) {
            return visitor.visitOperatorArgTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnyOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public allOp(): AllOpContext {
        return this.getRuleContext(0, AllOpContext)!;
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DOT);
    	} else {
    		return this.getToken(PostgreSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_anyOperator;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnyOperator) {
             listener.enterAnyOperator(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnyOperator) {
             listener.exitAnyOperator(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnyOperator) {
            return visitor.visitAnyOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OperatorWithArgTypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyOperator(): AnyOperatorContext {
        return this.getRuleContext(0, AnyOperatorContext)!;
    }
    public operatorArgTypes(): OperatorArgTypesContext {
        return this.getRuleContext(0, OperatorArgTypesContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operatorWithArgTypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperatorWithArgTypes) {
             listener.enterOperatorWithArgTypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperatorWithArgTypes) {
             listener.exitOperatorWithArgTypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperatorWithArgTypes) {
            return visitor.visitOperatorWithArgTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DoStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DO, 0)!;
    }
    public stringConst(): StringConstContext[];
    public stringConst(i: number): StringConstContext | null;
    public stringConst(i?: number): StringConstContext[] | StringConstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringConstContext);
        }

        return this.getRuleContext(i, StringConstContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode[];
    public KW_LANGUAGE(i: number): antlr.TerminalNode | null;
    public KW_LANGUAGE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_LANGUAGE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_LANGUAGE, i);
    	}
    }
    public nonReservedWordOrStringConst(): NonReservedWordOrStringConstContext[];
    public nonReservedWordOrStringConst(i: number): NonReservedWordOrStringConstContext | null;
    public nonReservedWordOrStringConst(i?: number): NonReservedWordOrStringConstContext[] | NonReservedWordOrStringConstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NonReservedWordOrStringConstContext);
        }

        return this.getRuleContext(i, NonReservedWordOrStringConstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_doStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDoStmt) {
             listener.enterDoStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDoStmt) {
             listener.exitDoStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDoStmt) {
            return visitor.visitDoStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateCastStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_CAST(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CAST, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_AS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_AS, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesContext);
    }
    public KW_INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INOUT, 0);
    }
    public KW_ASSIGNMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSIGNMENT, 0);
    }
    public KW_IMPLICIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMPLICIT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createCastStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateCastStmt) {
             listener.enterCreateCastStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateCastStmt) {
             listener.exitCreateCastStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateCastStmt) {
            return visitor.visitCreateCastStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_ifExists;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTransformStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TRANSFORM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public KW_LANGUAGE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public sqlWithFunction(): SqlWithFunctionContext[];
    public sqlWithFunction(i: number): SqlWithFunctionContext | null;
    public sqlWithFunction(i?: number): SqlWithFunctionContext[] | SqlWithFunctionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SqlWithFunctionContext);
        }

        return this.getRuleContext(i, SqlWithFunctionContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public orReplaceOpt(): OrReplaceOptContext | null {
        return this.getRuleContext(0, OrReplaceOptContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createTransformStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateTransformStmt) {
             listener.enterCreateTransformStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateTransformStmt) {
             listener.exitCreateTransformStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTransformStmt) {
            return visitor.visitCreateTransformStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlWithFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SQL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SQL, 0)!;
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0)!;
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext {
        return this.getRuleContext(0, FunctionWithArgTypesContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sqlWithFunction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSqlWithFunction) {
             listener.enterSqlWithFunction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSqlWithFunction) {
             listener.exitSqlWithFunction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSqlWithFunction) {
            return visitor.visitSqlWithFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReindexStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REINDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REINDEX, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_VERBOSE(): antlr.TerminalNode[];
    public KW_VERBOSE(i: number): antlr.TerminalNode | null;
    public KW_VERBOSE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_VERBOSE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_VERBOSE, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(0, SchemaNameContext);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public databaseName(): DatabaseNameContext | null {
        return this.getRuleContext(0, DatabaseNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reindexStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReindexStmt) {
             listener.enterReindexStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReindexStmt) {
             listener.exitReindexStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReindexStmt) {
            return visitor.visitReindexStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTblSpcStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public optTableSpace(): OptTableSpaceContext {
        return this.getRuleContext(0, OptTableSpaceContext)!;
    }
    public relOptions(): RelOptionsContext {
        return this.getRuleContext(0, RelOptionsContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterTblSpcStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterTblSpcStmt) {
             listener.enterAlterTblSpcStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterTblSpcStmt) {
             listener.exitAlterTblSpcStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTblSpcStmt) {
            return visitor.visitAlterTblSpcStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregateWithArgTypes(): AggregateWithArgTypesContext | null {
        return this.getRuleContext(0, AggregateWithArgTypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routineWithArgTypes(): RoutineWithArgTypesContext | null {
        return this.getRuleContext(0, RoutineWithArgTypesContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public databaseName(): DatabaseNameContext | null {
        return this.getRuleContext(0, DatabaseNameContext);
    }
    public databaseNameCreate(): DatabaseNameCreateContext | null {
        return this.getRuleContext(0, DatabaseNameCreateContext);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesContext);
    }
    public functionNameCreate(): FunctionNameCreateContext | null {
        return this.getRuleContext(0, FunctionNameCreateContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureWithArgTypes(): ProcedureWithArgTypesContext | null {
        return this.getRuleContext(0, ProcedureWithArgTypesContext);
    }
    public procedureNameCreate(): ProcedureNameCreateContext | null {
        return this.getRuleContext(0, ProcedureNameCreateContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(0, SchemaNameContext);
    }
    public schemaNameCreate(): SchemaNameCreateContext | null {
        return this.getRuleContext(0, SchemaNameCreateContext);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public viewNameCreate(): ViewNameCreateContext | null {
        return this.getRuleContext(0, ViewNameCreateContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relationExpr(): RelationExprContext | null {
        return this.getRuleContext(0, RelationExprContext);
    }
    public tableNameCreate(): TableNameCreateContext | null {
        return this.getRuleContext(0, TableNameCreateContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public columnNameCreate(): ColumnNameCreateContext | null {
        return this.getRuleContext(0, ColumnNameCreateContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public roleSpec(): RoleSpecContext[];
    public roleSpec(i: number): RoleSpecContext | null;
    public roleSpec(i?: number): RoleSpecContext[] | RoleSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleSpecContext);
        }

        return this.getRuleContext(i, RoleSpecContext);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public optTableSpace(): OptTableSpaceContext | null {
        return this.getRuleContext(0, OptTableSpaceContext);
    }
    public tableSpaceName(): TableSpaceNameContext | null {
        return this.getRuleContext(0, TableSpaceNameContext);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ATTRIBUTE, 0);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_renameStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRenameStmt) {
             listener.enterRenameStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRenameStmt) {
             listener.exitRenameStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameStmt) {
            return visitor.visitRenameStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterObjectDependsStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DEPENDS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0)!;
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ON);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ON, i);
    	}
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureWithArgTypes(): ProcedureWithArgTypesContext | null {
        return this.getRuleContext(0, ProcedureWithArgTypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routineWithArgTypes(): RoutineWithArgTypesContext | null {
        return this.getRuleContext(0, RoutineWithArgTypesContext);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterObjectDependsStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterObjectDependsStmt) {
             listener.enterAlterObjectDependsStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterObjectDependsStmt) {
             listener.exitAlterObjectDependsStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterObjectDependsStmt) {
            return visitor.visitAlterObjectDependsStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterObjectSchemaStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0)!;
    }
    public schemaName(): SchemaNameContext {
        return this.getRuleContext(0, SchemaNameContext)!;
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregateWithArgTypes(): AggregateWithArgTypesContext | null {
        return this.getRuleContext(0, AggregateWithArgTypesContext);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public operatorWithArgTypes(): OperatorWithArgTypesContext | null {
        return this.getRuleContext(0, OperatorWithArgTypesContext);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureWithArgTypes(): ProcedureWithArgTypesContext | null {
        return this.getRuleContext(0, ProcedureWithArgTypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routineWithArgTypes(): RoutineWithArgTypesContext | null {
        return this.getRuleContext(0, RoutineWithArgTypesContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relationExpr(): RelationExprContext | null {
        return this.getRuleContext(0, RelationExprContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterObjectSchemaStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterObjectSchemaStmt) {
             listener.enterAlterObjectSchemaStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterObjectSchemaStmt) {
             listener.exitAlterObjectSchemaStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterObjectSchemaStmt) {
            return visitor.visitAlterObjectSchemaStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterOperatorStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public operatorWithArgTypes(): OperatorWithArgTypesContext {
        return this.getRuleContext(0, OperatorWithArgTypesContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public operatorDefList(): OperatorDefListContext {
        return this.getRuleContext(0, OperatorDefListContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterOperatorStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterOperatorStmt) {
             listener.enterAlterOperatorStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterOperatorStmt) {
             listener.exitAlterOperatorStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterOperatorStmt) {
            return visitor.visitAlterOperatorStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OperatorDefListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public operatorDefElem(): OperatorDefElemContext[];
    public operatorDefElem(i: number): OperatorDefElemContext | null;
    public operatorDefElem(i?: number): OperatorDefElemContext[] | OperatorDefElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OperatorDefElemContext);
        }

        return this.getRuleContext(i, OperatorDefElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operatorDefList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperatorDefList) {
             listener.enterOperatorDefList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperatorDefList) {
             listener.exitOperatorDefList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperatorDefList) {
            return visitor.visitOperatorDefList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OperatorDefElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public funcType(): FuncTypeContext | null {
        return this.getRuleContext(0, FuncTypeContext);
    }
    public reservedKeyword(): ReservedKeywordContext | null {
        return this.getRuleContext(0, ReservedKeywordContext);
    }
    public qualAllOp(): QualAllOpContext | null {
        return this.getRuleContext(0, QualAllOpContext);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operatorDefElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperatorDefElem) {
             listener.enterOperatorDefElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperatorDefElem) {
             listener.exitOperatorDefElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperatorDefElem) {
            return visitor.visitOperatorDefElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTypeStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public operatorDefList(): OperatorDefListContext {
        return this.getRuleContext(0, OperatorDefListContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterTypeStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterTypeStmt) {
             listener.enterAlterTypeStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterTypeStmt) {
             listener.exitAlterTypeStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTypeStmt) {
            return visitor.visitAlterTypeStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterOwnerStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public KW_OWNER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public roleSpec(): RoleSpecContext {
        return this.getRuleContext(0, RoleSpecContext)!;
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregateWithArgTypes(): AggregateWithArgTypesContext | null {
        return this.getRuleContext(0, AggregateWithArgTypesContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public databaseName(): DatabaseNameContext | null {
        return this.getRuleContext(0, DatabaseNameContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public functionWithArgTypes(): FunctionWithArgTypesContext | null {
        return this.getRuleContext(0, FunctionWithArgTypesContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public operatorWithArgTypes(): OperatorWithArgTypesContext | null {
        return this.getRuleContext(0, OperatorWithArgTypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedureWithArgTypes(): ProcedureWithArgTypesContext | null {
        return this.getRuleContext(0, ProcedureWithArgTypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routineWithArgTypes(): RoutineWithArgTypesContext | null {
        return this.getRuleContext(0, RoutineWithArgTypesContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(0, SchemaNameContext);
    }
    public optTableSpace(): OptTableSpaceContext | null {
        return this.getRuleContext(0, OptTableSpaceContext);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterOwnerStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterOwnerStmt) {
             listener.enterAlterOwnerStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterOwnerStmt) {
             listener.exitAlterOwnerStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterOwnerStmt) {
            return visitor.visitAlterOwnerStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatePublicationStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relationExprList(): RelationExprListContext | null {
        return this.getRuleContext(0, RelationExprListContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public optDefinition(): OptDefinitionContext | null {
        return this.getRuleContext(0, OptDefinitionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createPublicationStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatePublicationStmt) {
             listener.enterCreatePublicationStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatePublicationStmt) {
             listener.exitCreatePublicationStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatePublicationStmt) {
            return visitor.visitCreatePublicationStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPublicationStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0)!;
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public publicationRelationExpr(): PublicationRelationExprContext[];
    public publicationRelationExpr(i: number): PublicationRelationExprContext | null;
    public publicationRelationExpr(i?: number): PublicationRelationExprContext[] | PublicationRelationExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PublicationRelationExprContext);
        }

        return this.getRuleContext(i, PublicationRelationExprContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterPublicationStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterPublicationStmt) {
             listener.enterAlterPublicationStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterPublicationStmt) {
             listener.exitAlterPublicationStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterPublicationStmt) {
            return visitor.visitAlterPublicationStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateSubscriptionStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_CONNECTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0)!;
    }
    public stringConst(): StringConstContext {
        return this.getRuleContext(0, StringConstContext)!;
    }
    public KW_PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0)!;
    }
    public colLabel(): ColLabelContext[];
    public colLabel(i: number): ColLabelContext | null;
    public colLabel(i?: number): ColLabelContext[] | ColLabelContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColLabelContext);
        }

        return this.getRuleContext(i, ColLabelContext);
    }
    public optDefinition(): OptDefinitionContext | null {
        return this.getRuleContext(0, OptDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createSubscriptionStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateSubscriptionStmt) {
             listener.enterCreateSubscriptionStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateSubscriptionStmt) {
             listener.exitCreateSubscriptionStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateSubscriptionStmt) {
            return visitor.visitCreateSubscriptionStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterSubscriptionStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public optDefinition(): OptDefinitionContext | null {
        return this.getRuleContext(0, OptDefinitionContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public colLabel(): ColLabelContext[];
    public colLabel(i: number): ColLabelContext | null;
    public colLabel(i?: number): ColLabelContext[] | ColLabelContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColLabelContext);
        }

        return this.getRuleContext(i, ColLabelContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_SKIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public oldAggregateElem(): OldAggregateElemContext | null {
        return this.getRuleContext(0, OldAggregateElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public roleSpec(): RoleSpecContext | null {
        return this.getRuleContext(0, RoleSpecContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterSubscriptionStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterSubscriptionStmt) {
             listener.enterAlterSubscriptionStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterSubscriptionStmt) {
             listener.exitAlterSubscriptionStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterSubscriptionStmt) {
            return visitor.visitAlterSubscriptionStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RuleStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_RULE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RULE, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public KW_DO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DO, 0)!;
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public ruleActionStmt(): RuleActionStmtContext[];
    public ruleActionStmt(i: number): RuleActionStmtContext | null;
    public ruleActionStmt(i?: number): RuleActionStmtContext[] | RuleActionStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RuleActionStmtContext);
        }

        return this.getRuleContext(i, RuleActionStmtContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public orReplaceOpt(): OrReplaceOptContext | null {
        return this.getRuleContext(0, OrReplaceOptContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSTEAD, 0);
    }
    public KW_ALSO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALSO, 0);
    }
    public SEMI(): antlr.TerminalNode[];
    public SEMI(i: number): antlr.TerminalNode | null;
    public SEMI(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.SEMI);
    	} else {
    		return this.getToken(PostgreSqlParser.SEMI, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_ruleStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRuleStmt) {
             listener.enterRuleStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRuleStmt) {
             listener.exitRuleStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRuleStmt) {
            return visitor.visitRuleStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RuleActionStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStmt(): SelectStmtContext | null {
        return this.getRuleContext(0, SelectStmtContext);
    }
    public insertStmt(): InsertStmtContext | null {
        return this.getRuleContext(0, InsertStmtContext);
    }
    public updateStmt(): UpdateStmtContext | null {
        return this.getRuleContext(0, UpdateStmtContext);
    }
    public deleteStmt(): DeleteStmtContext | null {
        return this.getRuleContext(0, DeleteStmtContext);
    }
    public notifyStmt(): NotifyStmtContext | null {
        return this.getRuleContext(0, NotifyStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_ruleActionStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRuleActionStmt) {
             listener.enterRuleActionStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRuleActionStmt) {
             listener.exitRuleActionStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRuleActionStmt) {
            return visitor.visitRuleActionStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotifyStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOTIFY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NOTIFY, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public notifyPayload(): NotifyPayloadContext | null {
        return this.getRuleContext(0, NotifyPayloadContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_notifyStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNotifyStmt) {
             listener.enterNotifyStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNotifyStmt) {
             listener.exitNotifyStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotifyStmt) {
            return visitor.visitNotifyStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotifyPayloadContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.COMMA, 0)!;
    }
    public stringConst(): StringConstContext {
        return this.getRuleContext(0, StringConstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_notifyPayload;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNotifyPayload) {
             listener.enterNotifyPayload(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNotifyPayload) {
             listener.exitNotifyPayload(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotifyPayload) {
            return visitor.visitNotifyPayload(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListenStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LISTEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LISTEN, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_listenStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterListenStmt) {
             listener.enterListenStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitListenStmt) {
             listener.exitListenStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitListenStmt) {
            return visitor.visitListenStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnListenStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNLISTEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UNLISTEN, 0)!;
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_unListenStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUnListenStmt) {
             listener.enterUnListenStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUnListenStmt) {
             listener.exitUnListenStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnListenStmt) {
            return visitor.visitUnListenStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BEGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEGIN, 0);
    }
    public optTransaction(): OptTransactionContext | null {
        return this.getRuleContext(0, OptTransactionContext);
    }
    public transactionModeList(): TransactionModeListContext | null {
        return this.getRuleContext(0, TransactionModeListContext);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_START, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SAVEPOINT, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_RELEASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELEASE, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public KW_PREPARED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARED, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABORT, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_END, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAIN, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transactionStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransactionStmt) {
             listener.enterTransactionStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransactionStmt) {
             listener.exitTransactionStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionStmt) {
            return visitor.visitTransactionStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptTransactionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WORK, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optTransaction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptTransaction) {
             listener.enterOptTransaction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptTransaction) {
             listener.exitOptTransaction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptTransaction) {
            return visitor.visitOptTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public isoLevel(): IsoLevelContext | null {
        return this.getRuleContext(0, IsoLevelContext);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRITE, 0);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transactionModeItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransactionModeItem) {
             listener.enterTransactionModeItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransactionModeItem) {
             listener.exitTransactionModeItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionModeItem) {
            return visitor.visitTransactionModeItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transactionModeItem(): TransactionModeItemContext[];
    public transactionModeItem(i: number): TransactionModeItemContext | null;
    public transactionModeItem(i?: number): TransactionModeItemContext[] | TransactionModeItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeItemContext);
        }

        return this.getRuleContext(i, TransactionModeItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transactionModeList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransactionModeList) {
             listener.enterTransactionModeList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransactionModeList) {
             listener.exitTransactionModeList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionModeList) {
            return visitor.visitTransactionModeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_viewStmt;
    }
    public override copyFrom(ctx: ViewStmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateViewContext extends ViewStmtContext {
    public constructor(ctx: ViewStmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public selectStmt(): SelectStmtContext {
        return this.getRuleContext(0, SelectStmtContext)!;
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public viewNameCreate(): ViewNameCreateContext | null {
        return this.getRuleContext(0, ViewNameCreateContext);
    }
    public KW_RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECURSIVE, 0);
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0);
    }
    public optTemp(): OptTempContext | null {
        return this.getRuleContext(0, OptTempContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public columnListCreate(): ColumnListCreateContext | null {
        return this.getRuleContext(0, ColumnListCreateContext);
    }
    public optRelOptions(): OptRelOptionsContext | null {
        return this.getRuleContext(0, OptRelOptionsContext);
    }
    public KW_CASCADED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADED, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LOAD, 0)!;
    }
    public stringConst(): StringConstContext {
        return this.getRuleContext(0, StringConstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_loadStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLoadStmt) {
             listener.enterLoadStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLoadStmt) {
             listener.exitLoadStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadStmt) {
            return visitor.visitLoadStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDbStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createDbStmt;
    }
    public override copyFrom(ctx: CreateDbStmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateDatabaseContext extends CreateDbStmtContext {
    public constructor(ctx: CreateDbStmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public databaseNameCreate(): DatabaseNameCreateContext {
        return this.getRuleContext(0, DatabaseNameCreateContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createDbOptItem(): CreateDbOptItemContext[];
    public createDbOptItem(i: number): CreateDbOptItemContext | null;
    public createDbOptItem(i?: number): CreateDbOptItemContext[] | CreateDbOptItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateDbOptItemContext);
        }

        return this.getRuleContext(i, CreateDbOptItemContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateDatabase) {
             listener.enterCreateDatabase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateDatabase) {
             listener.exitCreateDatabase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabase) {
            return visitor.visitCreateDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDbOptItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public KW_ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCODING, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCATION, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public signedConst(): SignedConstContext | null {
        return this.getRuleContext(0, SignedConstContext);
    }
    public booleanOrString(): BooleanOrStringContext | null {
        return this.getRuleContext(0, BooleanOrStringContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createDbOptItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateDbOptItem) {
             listener.enterCreateDbOptItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateDbOptItem) {
             listener.exitCreateDbOptItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDbOptItem) {
            return visitor.visitCreateDbOptItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public databaseName(): DatabaseNameContext {
        return this.getRuleContext(0, DatabaseNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tableSpaceName(): TableSpaceNameContext | null {
        return this.getRuleContext(0, TableSpaceNameContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createDbOptItem(): CreateDbOptItemContext[];
    public createDbOptItem(i: number): CreateDbOptItemContext | null;
    public createDbOptItem(i?: number): CreateDbOptItemContext[] | CreateDbOptItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateDbOptItemContext);
        }

        return this.getRuleContext(i, CreateDbOptItemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterDatabaseStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterDatabaseStmt) {
             listener.enterAlterDatabaseStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterDatabaseStmt) {
             listener.exitAlterDatabaseStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseStmt) {
            return visitor.visitAlterDatabaseStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseSetStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public databaseName(): DatabaseNameContext {
        return this.getRuleContext(0, DatabaseNameContext)!;
    }
    public setOrResetClause(): SetOrResetClauseContext | null {
        return this.getRuleContext(0, SetOrResetClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterDatabaseSetStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterDatabaseSetStmt) {
             listener.enterAlterDatabaseSetStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterDatabaseSetStmt) {
             listener.exitAlterDatabaseSetStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseSetStmt) {
            return visitor.visitAlterDatabaseSetStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterCollationStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_COLLATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0)!;
    }
    public KW_VERSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterCollationStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterCollationStmt) {
             listener.enterAlterCollationStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterCollationStmt) {
             listener.exitAlterCollationStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterCollationStmt) {
            return visitor.visitAlterCollationStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterSystemStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SYSTEM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0)!;
    }
    public genericSet(): GenericSetContext {
        return this.getRuleContext(0, GenericSetContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterSystemStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterSystemStmt) {
             listener.enterAlterSystemStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterSystemStmt) {
             listener.exitAlterSystemStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterSystemStmt) {
            return visitor.visitAlterSystemStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDomainStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_DOMAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colConstraint(): ColConstraintContext[];
    public colConstraint(i: number): ColConstraintContext | null;
    public colConstraint(i?: number): ColConstraintContext[] | ColConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColConstraintContext);
        }

        return this.getRuleContext(i, ColConstraintContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createDomainStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateDomainStmt) {
             listener.enterCreateDomainStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateDomainStmt) {
             listener.exitCreateDomainStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDomainStmt) {
            return visitor.visitCreateDomainStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDomainStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DOMAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public alterColumnDefault(): AlterColumnDefaultContext | null {
        return this.getRuleContext(0, AlterColumnDefaultContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public constraintElem(): ConstraintElemContext | null {
        return this.getRuleContext(0, ConstraintElemContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public optDropBehavior(): OptDropBehaviorContext | null {
        return this.getRuleContext(0, OptDropBehaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterDomainStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterDomainStmt) {
             listener.enterAlterDomainStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterDomainStmt) {
             listener.exitAlterDomainStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDomainStmt) {
            return visitor.visitAlterDomainStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterSearchDictionaryStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TEXT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0)!;
    }
    public KW_SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0)!;
    }
    public KW_DICTIONARY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0)!;
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public definition(): DefinitionContext {
        return this.getRuleContext(0, DefinitionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterSearchDictionaryStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterSearchDictionaryStmt) {
             listener.enterAlterSearchDictionaryStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterSearchDictionaryStmt) {
             listener.exitAlterSearchDictionaryStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterSearchDictionaryStmt) {
            return visitor.visitAlterSearchDictionaryStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterSearchConfigurationStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode[];
    public KW_ALTER(i: number): antlr.TerminalNode | null;
    public KW_ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ALTER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ALTER, i);
    	}
    }
    public KW_TEXT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0)!;
    }
    public KW_SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0)!;
    }
    public KW_CONFIGURATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0)!;
    }
    public anyName(): AnyNameContext[];
    public anyName(i: number): AnyNameContext | null;
    public anyName(i?: number): AnyNameContext[] | AnyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnyNameContext);
        }

        return this.getRuleContext(i, AnyNameContext);
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public nameList(): NameListContext | null {
        return this.getRuleContext(0, NameListContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public anyNameList(): AnyNameListContext | null {
        return this.getRuleContext(0, AnyNameListContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterSearchConfigurationStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterSearchConfigurationStmt) {
             listener.enterAlterSearchConfigurationStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterSearchConfigurationStmt) {
             listener.exitAlterSearchConfigurationStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterSearchConfigurationStmt) {
            return visitor.visitAlterSearchConfigurationStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateConversionStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_CONVERSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0)!;
    }
    public anyName(): AnyNameContext[];
    public anyName(i: number): AnyNameContext | null;
    public anyName(i?: number): AnyNameContext[] | AnyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnyNameContext);
        }

        return this.getRuleContext(i, AnyNameContext);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public stringConst(): StringConstContext[];
    public stringConst(i: number): StringConstContext | null;
    public stringConst(i?: number): StringConstContext[] | StringConstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringConstContext);
        }

        return this.getRuleContext(i, StringConstContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createConversionStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateConversionStmt) {
             listener.enterCreateConversionStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateConversionStmt) {
             listener.exitCreateConversionStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateConversionStmt) {
            return visitor.visitCreateConversionStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLUSTER, 0)!;
    }
    public optVerbose(): OptVerboseContext[];
    public optVerbose(i: number): OptVerboseContext | null;
    public optVerbose(i?: number): OptVerboseContext[] | OptVerboseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OptVerboseContext);
        }

        return this.getRuleContext(i, OptVerboseContext);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public tableAccessMethodClause(): TableAccessMethodClauseContext | null {
        return this.getRuleContext(0, TableAccessMethodClauseContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_clusterStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterClusterStmt) {
             listener.enterClusterStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitClusterStmt) {
             listener.exitClusterStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitClusterStmt) {
            return visitor.visitClusterStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VacuumStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VACUUM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VACUUM, 0)!;
    }
    public vacuumRelationList(): VacuumRelationListContext | null {
        return this.getRuleContext(0, VacuumRelationListContext);
    }
    public explainOptionList(): ExplainOptionListContext | null {
        return this.getRuleContext(0, ExplainOptionListContext);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_FREEZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FREEZE, 0);
    }
    public optVerbose(): OptVerboseContext | null {
        return this.getRuleContext(0, OptVerboseContext);
    }
    public analyzeKeyword(): AnalyzeKeywordContext | null {
        return this.getRuleContext(0, AnalyzeKeywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vacuumStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVacuumStmt) {
             listener.enterVacuumStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVacuumStmt) {
             listener.exitVacuumStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVacuumStmt) {
            return visitor.visitVacuumStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzeStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public analyzeKeyword(): AnalyzeKeywordContext {
        return this.getRuleContext(0, AnalyzeKeywordContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public analyzeOptionElem(): AnalyzeOptionElemContext[];
    public analyzeOptionElem(i: number): AnalyzeOptionElemContext | null;
    public analyzeOptionElem(i?: number): AnalyzeOptionElemContext[] | AnalyzeOptionElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnalyzeOptionElemContext);
        }

        return this.getRuleContext(i, AnalyzeOptionElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public vacuumRelationList(): VacuumRelationListContext | null {
        return this.getRuleContext(0, VacuumRelationListContext);
    }
    public optVerbose(): OptVerboseContext | null {
        return this.getRuleContext(0, OptVerboseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_analyzeStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnalyzeStmt) {
             listener.enterAnalyzeStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnalyzeStmt) {
             listener.exitAnalyzeStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeStmt) {
            return visitor.visitAnalyzeStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzeKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYZE, 0);
    }
    public KW_ANALYSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYSE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_analyzeKeyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnalyzeKeyword) {
             listener.enterAnalyzeKeyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnalyzeKeyword) {
             listener.exitAnalyzeKeyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeKeyword) {
            return visitor.visitAnalyzeKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VacAnalyzeOptionElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonReservedWord(): NonReservedWordContext | null {
        return this.getRuleContext(0, NonReservedWordContext);
    }
    public analyzeKeyword(): AnalyzeKeywordContext | null {
        return this.getRuleContext(0, AnalyzeKeywordContext);
    }
    public booleanOrString(): BooleanOrStringContext | null {
        return this.getRuleContext(0, BooleanOrStringContext);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vacAnalyzeOptionElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVacAnalyzeOptionElem) {
             listener.enterVacAnalyzeOptionElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVacAnalyzeOptionElem) {
             listener.exitVacAnalyzeOptionElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVacAnalyzeOptionElem) {
            return visitor.visitVacAnalyzeOptionElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzeOptionElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SKIP_LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP_LOCKED, 0);
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_BUFFER_USAGE_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BUFFER_USAGE_LIMIT, 0);
    }
    public numericOnly(): NumericOnlyContext | null {
        return this.getRuleContext(0, NumericOnlyContext);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_analyzeOptionElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnalyzeOptionElem) {
             listener.enterAnalyzeOptionElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnalyzeOptionElem) {
             listener.exitAnalyzeOptionElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeOptionElem) {
            return visitor.visitAnalyzeOptionElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptVerboseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VERBOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0)!;
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optVerbose;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptVerbose) {
             listener.enterOptVerbose(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptVerbose) {
             listener.exitOptVerbose(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptVerbose) {
            return visitor.visitOptVerbose(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VacuumRelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vacuumRelation;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVacuumRelation) {
             listener.enterVacuumRelation(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVacuumRelation) {
             listener.exitVacuumRelation(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVacuumRelation) {
            return visitor.visitVacuumRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VacuumRelationListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public vacuumRelation(): VacuumRelationContext[];
    public vacuumRelation(i: number): VacuumRelationContext | null;
    public vacuumRelation(i?: number): VacuumRelationContext[] | VacuumRelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VacuumRelationContext);
        }

        return this.getRuleContext(i, VacuumRelationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vacuumRelationList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVacuumRelationList) {
             listener.enterVacuumRelationList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVacuumRelationList) {
             listener.exitVacuumRelationList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVacuumRelationList) {
            return visitor.visitVacuumRelationList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXPLAIN, 0)!;
    }
    public explainableStmt(): ExplainableStmtContext {
        return this.getRuleContext(0, ExplainableStmtContext)!;
    }
    public explainOptionList(): ExplainOptionListContext | null {
        return this.getRuleContext(0, ExplainOptionListContext);
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0);
    }
    public analyzeKeyword(): AnalyzeKeywordContext | null {
        return this.getRuleContext(0, AnalyzeKeywordContext);
    }
    public optVerbose(): OptVerboseContext | null {
        return this.getRuleContext(0, OptVerboseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explainStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplainStmt) {
             listener.enterExplainStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplainStmt) {
             listener.exitExplainStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainStmt) {
            return visitor.visitExplainStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainableStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStmt(): SelectStmtContext | null {
        return this.getRuleContext(0, SelectStmtContext);
    }
    public insertStmt(): InsertStmtContext | null {
        return this.getRuleContext(0, InsertStmtContext);
    }
    public updateStmt(): UpdateStmtContext | null {
        return this.getRuleContext(0, UpdateStmtContext);
    }
    public deleteStmt(): DeleteStmtContext | null {
        return this.getRuleContext(0, DeleteStmtContext);
    }
    public declareCursorStmt(): DeclareCursorStmtContext | null {
        return this.getRuleContext(0, DeclareCursorStmtContext);
    }
    public createAsStmt(): CreateAsStmtContext | null {
        return this.getRuleContext(0, CreateAsStmtContext);
    }
    public createMaterializedViewStmt(): CreateMaterializedViewStmtContext | null {
        return this.getRuleContext(0, CreateMaterializedViewStmtContext);
    }
    public refreshMaterializedViewStmt(): RefreshMaterializedViewStmtContext | null {
        return this.getRuleContext(0, RefreshMaterializedViewStmtContext);
    }
    public executeStmt(): ExecuteStmtContext | null {
        return this.getRuleContext(0, ExecuteStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explainableStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplainableStmt) {
             listener.enterExplainableStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplainableStmt) {
             listener.exitExplainableStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainableStmt) {
            return visitor.visitExplainableStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainOptionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public vacAnalyzeOptionElem(): VacAnalyzeOptionElemContext[];
    public vacAnalyzeOptionElem(i: number): VacAnalyzeOptionElemContext | null;
    public vacAnalyzeOptionElem(i?: number): VacAnalyzeOptionElemContext[] | VacAnalyzeOptionElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VacAnalyzeOptionElemContext);
        }

        return this.getRuleContext(i, VacAnalyzeOptionElemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explainOptionList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplainOptionList) {
             listener.enterExplainOptionList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplainOptionList) {
             listener.exitExplainOptionList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainOptionList) {
            return visitor.visitExplainOptionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrepareStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PREPARE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public preParableStmt(): PreParableStmtContext {
        return this.getRuleContext(0, PreParableStmtContext)!;
    }
    public prepTypeClause(): PrepTypeClauseContext | null {
        return this.getRuleContext(0, PrepTypeClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_prepareStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrepareStmt) {
             listener.enterPrepareStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrepareStmt) {
             listener.exitPrepareStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrepareStmt) {
            return visitor.visitPrepareStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrepTypeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_prepTypeClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrepTypeClause) {
             listener.enterPrepTypeClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrepTypeClause) {
             listener.exitPrepTypeClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrepTypeClause) {
            return visitor.visitPrepTypeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreParableStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStmt(): SelectStmtContext | null {
        return this.getRuleContext(0, SelectStmtContext);
    }
    public insertStmt(): InsertStmtContext | null {
        return this.getRuleContext(0, InsertStmtContext);
    }
    public updateStmt(): UpdateStmtContext | null {
        return this.getRuleContext(0, UpdateStmtContext);
    }
    public deleteStmt(): DeleteStmtContext | null {
        return this.getRuleContext(0, DeleteStmtContext);
    }
    public mergeStmt(): MergeStmtContext | null {
        return this.getRuleContext(0, MergeStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_preParableStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPreParableStmt) {
             listener.enterPreParableStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPreParableStmt) {
             listener.exitPreParableStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPreParableStmt) {
            return visitor.visitPreParableStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecuteStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public executeParamClause(): ExecuteParamClauseContext | null {
        return this.getRuleContext(0, ExecuteParamClauseContext);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public createAsTarget(): CreateAsTargetContext | null {
        return this.getRuleContext(0, CreateAsTargetContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public optTemp(): OptTempContext | null {
        return this.getRuleContext(0, OptTempContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public optWithData(): OptWithDataContext | null {
        return this.getRuleContext(0, OptWithDataContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_executeStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExecuteStmt) {
             listener.enterExecuteStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExecuteStmt) {
             listener.exitExecuteStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecuteStmt) {
            return visitor.visitExecuteStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecuteParamClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(0, ExprListContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_executeParamClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExecuteParamClause) {
             listener.enterExecuteParamClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExecuteParamClause) {
             listener.exitExecuteParamClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecuteParamClause) {
            return visitor.visitExecuteParamClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DealLocateStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEALLOCATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEALLOCATE, 0)!;
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_dealLocateStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDealLocateStmt) {
             listener.enterDealLocateStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDealLocateStmt) {
             listener.exitDealLocateStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDealLocateStmt) {
            return visitor.visitDealLocateStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insertStmt;
    }
    public override copyFrom(ctx: InsertStmtContext): void {
        super.copyFrom(ctx);
    }
}
export class InsertStatementContext extends InsertStmtContext {
    public constructor(ctx: InsertStmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public insertRest(): InsertRestContext {
        return this.getRuleContext(0, InsertRestContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ON);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ON, i);
    	}
    }
    public KW_CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFLICT, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public returningClause(): ReturningClauseContext | null {
        return this.getRuleContext(0, ReturningClauseContext);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public setClauseList(): SetClauseListContext | null {
        return this.getRuleContext(0, SetClauseListContext);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public indexParams(): IndexParamsContext | null {
        return this.getRuleContext(0, IndexParamsContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public whereClause(): WhereClauseContext[];
    public whereClause(i: number): WhereClauseContext | null;
    public whereClause(i?: number): WhereClauseContext[] | WhereClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhereClauseContext);
        }

        return this.getRuleContext(i, WhereClauseContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsertStatement) {
             listener.enterInsertStatement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsertStatement) {
             listener.exitInsertStatement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertRestContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public defaultValuesOrValues(): DefaultValuesOrValuesContext | null {
        return this.getRuleContext(0, DefaultValuesOrValuesContext);
    }
    public selectStmt(): SelectStmtContext | null {
        return this.getRuleContext(0, SelectStmtContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public insertColumnList(): InsertColumnListContext | null {
        return this.getRuleContext(0, InsertColumnListContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERRIDING, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insertRest;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsertRest) {
             listener.enterInsertRest(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsertRest) {
             listener.exitInsertRest(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertRest) {
            return visitor.visitInsertRest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertColumnListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertColumnItem(): InsertColumnItemContext[];
    public insertColumnItem(i: number): InsertColumnItemContext | null;
    public insertColumnItem(i?: number): InsertColumnItemContext[] | InsertColumnItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InsertColumnItemContext);
        }

        return this.getRuleContext(i, InsertColumnItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insertColumnList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsertColumnList) {
             listener.enterInsertColumnList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsertColumnList) {
             listener.exitInsertColumnList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertColumnList) {
            return visitor.visitInsertColumnList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertColumnItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public optIndirection(): OptIndirectionContext {
        return this.getRuleContext(0, OptIndirectionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insertColumnItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsertColumnItem) {
             listener.enterInsertColumnItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsertColumnItem) {
             listener.exitInsertColumnItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertColumnItem) {
            return visitor.visitInsertColumnItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturningClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RETURNING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RETURNING, 0)!;
    }
    public targetList(): TargetListContext {
        return this.getRuleContext(0, TargetListContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_returningClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReturningClause) {
             listener.enterReturningClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReturningClause) {
             listener.exitReturningClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReturningClause) {
            return visitor.visitReturningClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public relationExprOptAlias(): RelationExprOptAliasContext {
        return this.getRuleContext(0, RelationExprOptAliasContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public fromList(): FromListContext | null {
        return this.getRuleContext(0, FromListContext);
    }
    public whereOrCurrentClause(): WhereOrCurrentClauseContext | null {
        return this.getRuleContext(0, WhereOrCurrentClauseContext);
    }
    public returningClause(): ReturningClauseContext | null {
        return this.getRuleContext(0, ReturningClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_deleteStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeleteStmt) {
             listener.enterDeleteStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeleteStmt) {
             listener.exitDeleteStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteStmt) {
            return visitor.visitDeleteStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCK(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LOCK, 0)!;
    }
    public relationExprList(): RelationExprListContext {
        return this.getRuleContext(0, RelationExprListContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_MODE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MODE, 0);
    }
    public KW_NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOWAIT, 0);
    }
    public KW_SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SHARE, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUSIVE, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_lockStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLockStmt) {
             listener.enterLockStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLockStmt) {
             listener.exitLockStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockStmt) {
            return visitor.visitLockStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public relationExprOptAlias(): RelationExprOptAliasContext {
        return this.getRuleContext(0, RelationExprOptAliasContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public setClauseList(): SetClauseListContext {
        return this.getRuleContext(0, SetClauseListContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public whereOrCurrentClause(): WhereOrCurrentClauseContext | null {
        return this.getRuleContext(0, WhereOrCurrentClauseContext);
    }
    public returningClause(): ReturningClauseContext | null {
        return this.getRuleContext(0, ReturningClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_updateStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUpdateStmt) {
             listener.enterUpdateStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUpdateStmt) {
             listener.exitUpdateStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateStmt) {
            return visitor.visitUpdateStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetClauseListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public setClause(): SetClauseContext[];
    public setClause(i: number): SetClauseContext | null;
    public setClause(i?: number): SetClauseContext[] | SetClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetClauseContext);
        }

        return this.getRuleContext(i, SetClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_setClauseList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSetClauseList) {
             listener.enterSetClauseList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSetClauseList) {
             listener.exitSetClauseList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetClauseList) {
            return visitor.visitSetClauseList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertColumnItem(): InsertColumnItemContext | null {
        return this.getRuleContext(0, InsertColumnItemContext);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public insertColumnList(): InsertColumnListContext | null {
        return this.getRuleContext(0, InsertColumnListContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_setClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSetClause) {
             listener.enterSetClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSetClause) {
             listener.exitSetClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetClause) {
            return visitor.visitSetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeclareCursorStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DECLARE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DECLARE, 0)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_CURSOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CURSOR, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public selectStmt(): SelectStmtContext {
        return this.getRuleContext(0, SelectStmtContext)!;
    }
    public KW_HOLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOLD, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode[];
    public KW_BINARY(i: number): antlr.TerminalNode | null;
    public KW_BINARY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_BINARY);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_BINARY, i);
    	}
    }
    public KW_INSENSITIVE(): antlr.TerminalNode[];
    public KW_INSENSITIVE(i: number): antlr.TerminalNode | null;
    public KW_INSENSITIVE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_INSENSITIVE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_INSENSITIVE, i);
    	}
    }
    public KW_SCROLL(): antlr.TerminalNode[];
    public KW_SCROLL(i: number): antlr.TerminalNode | null;
    public KW_SCROLL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SCROLL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SCROLL, i);
    	}
    }
    public KW_NO(): antlr.TerminalNode[];
    public KW_NO(i: number): antlr.TerminalNode | null;
    public KW_NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NO);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NO, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_declareCursorStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeclareCursorStmt) {
             listener.enterDeclareCursorStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeclareCursorStmt) {
             listener.exitDeclareCursorStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclareCursorStmt) {
            return visitor.visitDeclareCursorStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_selectStmt;
    }
    public override copyFrom(ctx: SelectStmtContext): void {
        super.copyFrom(ctx);
    }
}
export class SelectStatementContext extends SelectStmtContext {
    public constructor(ctx: SelectStmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectNoParens(): SelectNoParensContext | null {
        return this.getRuleContext(0, SelectNoParensContext);
    }
    public selectWithParens(): SelectWithParensContext | null {
        return this.getRuleContext(0, SelectWithParensContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelectStatement) {
             listener.enterSelectStatement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelectStatement) {
             listener.exitSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectWithParensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public selectNoParens(): SelectNoParensContext | null {
        return this.getRuleContext(0, SelectNoParensContext);
    }
    public selectWithParens(): SelectWithParensContext | null {
        return this.getRuleContext(0, SelectWithParensContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_selectWithParens;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelectWithParens) {
             listener.enterSelectWithParens(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelectWithParens) {
             listener.exitSelectWithParens(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectWithParens) {
            return visitor.visitSelectWithParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectNoParensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public forLockingClause(): ForLockingClauseContext | null {
        return this.getRuleContext(0, ForLockingClauseContext);
    }
    public selectLimit(): SelectLimitContext | null {
        return this.getRuleContext(0, SelectLimitContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_selectNoParens;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelectNoParens) {
             listener.enterSelectNoParens(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelectNoParens) {
             listener.exitSelectNoParens(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectNoParens) {
            return visitor.visitSelectNoParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleSelect(): SimpleSelectContext | null {
        return this.getRuleContext(0, SimpleSelectContext);
    }
    public selectWithParens(): SelectWithParensContext | null {
        return this.getRuleContext(0, SelectWithParensContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_selectClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelectClause) {
             listener.enterSelectClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelectClause) {
             listener.exitSelectClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleSelectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public sqlExpression(): SqlExpressionContext | null {
        return this.getRuleContext(0, SqlExpressionContext);
    }
    public valuesClause(): ValuesClauseContext | null {
        return this.getRuleContext(0, ValuesClauseContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relationExpr(): RelationExprContext | null {
        return this.getRuleContext(0, RelationExprContext);
    }
    public selectWithParens(): SelectWithParensContext[];
    public selectWithParens(i: number): SelectWithParensContext | null;
    public selectWithParens(i?: number): SelectWithParensContext[] | SelectWithParensContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectWithParensContext);
        }

        return this.getRuleContext(i, SelectWithParensContext);
    }
    public setOperatorWithAllOrDistinct(): SetOperatorWithAllOrDistinctContext[];
    public setOperatorWithAllOrDistinct(i: number): SetOperatorWithAllOrDistinctContext | null;
    public setOperatorWithAllOrDistinct(i?: number): SetOperatorWithAllOrDistinctContext[] | SetOperatorWithAllOrDistinctContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetOperatorWithAllOrDistinctContext);
        }

        return this.getRuleContext(i, SetOperatorWithAllOrDistinctContext);
    }
    public simpleSelect(): SimpleSelectContext[];
    public simpleSelect(i: number): SimpleSelectContext | null;
    public simpleSelect(i?: number): SimpleSelectContext[] | SimpleSelectContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimpleSelectContext);
        }

        return this.getRuleContext(i, SimpleSelectContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public intoClause(): IntoClauseContext | null {
        return this.getRuleContext(0, IntoClauseContext);
    }
    public distinctClause(): DistinctClauseContext | null {
        return this.getRuleContext(0, DistinctClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_simpleSelect;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSimpleSelect) {
             listener.enterSimpleSelect(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSimpleSelect) {
             listener.exitSimpleSelect(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleSelect) {
            return visitor.visitSimpleSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetOperatorWithAllOrDistinctContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNION, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERSECT, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPT, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_setOperatorWithAllOrDistinct;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSetOperatorWithAllOrDistinct) {
             listener.enterSetOperatorWithAllOrDistinct(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSetOperatorWithAllOrDistinct) {
             listener.exitSetOperatorWithAllOrDistinct(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetOperatorWithAllOrDistinct) {
            return visitor.visitSetOperatorWithAllOrDistinct(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public commonTableExpr(): CommonTableExprContext[];
    public commonTableExpr(i: number): CommonTableExprContext | null;
    public commonTableExpr(i?: number): CommonTableExprContext[] | CommonTableExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommonTableExprContext);
        }

        return this.getRuleContext(i, CommonTableExprContext);
    }
    public KW_RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECURSIVE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_withClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWithClause) {
             listener.enterWithClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWithClause) {
             listener.exitWithClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonTableExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public preParableStmt(): PreParableStmtContext {
        return this.getRuleContext(0, PreParableStmtContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public searchClause(): SearchClauseContext | null {
        return this.getRuleContext(0, SearchClauseContext);
    }
    public cycleClause(): CycleClauseContext | null {
        return this.getRuleContext(0, CycleClauseContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_commonTableExpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCommonTableExpr) {
             listener.enterCommonTableExpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCommonTableExpr) {
             listener.exitCommonTableExpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommonTableExpr) {
            return visitor.visitCommonTableExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0)!;
    }
    public KW_FIRST(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public columnList(): ColumnListContext {
        return this.getRuleContext(0, ColumnListContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_BREADTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BREADTH, 0);
    }
    public KW_DEPTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPTH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_searchClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSearchClause) {
             listener.enterSearchClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSearchClause) {
             listener.exitSearchClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSearchClause) {
            return visitor.visitSearchClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CycleClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CYCLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CYCLE, 0)!;
    }
    public columnList(): ColumnListContext {
        return this.getRuleContext(0, ColumnListContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_cycleClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCycleClause) {
             listener.enterCycleClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCycleClause) {
             listener.exitCycleClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCycleClause) {
            return visitor.visitCycleClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntoClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public optTempTableName(): OptTempTableNameContext | null {
        return this.getRuleContext(0, OptTempTableNameContext);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_intoClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIntoClause) {
             listener.enterIntoClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIntoClause) {
             listener.exitIntoClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntoClause) {
            return visitor.visitIntoClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptTempTableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GLOBAL, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optTempTableName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptTempTableName) {
             listener.enterOptTempTableName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptTempTableName) {
             listener.exitOptTempTableName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptTempTableName) {
            return visitor.visitOptTempTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DistinctClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public executeParamClause(): ExecuteParamClauseContext | null {
        return this.getRuleContext(0, ExecuteParamClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_distinctClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDistinctClause) {
             listener.enterDistinctClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDistinctClause) {
             listener.exitDistinctClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDistinctClause) {
            return visitor.visitDistinctClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public sortBy(): SortByContext[];
    public sortBy(i: number): SortByContext | null;
    public sortBy(i?: number): SortByContext[] | SortByContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortByContext);
        }

        return this.getRuleContext(i, SortByContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sortClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSortClause) {
             listener.enterSortClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSortClause) {
             listener.exitSortClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSortClause) {
            return visitor.visitSortClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExprNoParen(): ColumnExprNoParenContext {
        return this.getRuleContext(0, ColumnExprNoParenContext)!;
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public qualAllOp(): QualAllOpContext | null {
        return this.getRuleContext(0, QualAllOpContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DESC, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sortBy;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSortBy) {
             listener.enterSortBy(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSortBy) {
             listener.exitSortBy(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSortBy) {
            return visitor.visitSortBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectLimitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public offsetClause(): OffsetClauseContext | null {
        return this.getRuleContext(0, OffsetClauseContext);
    }
    public fetchClause(): FetchClauseContext | null {
        return this.getRuleContext(0, FetchClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_selectLimit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelectLimit) {
             listener.enterSelectLimit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelectLimit) {
             listener.exitSelectLimit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectLimit) {
            return visitor.visitSelectLimit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIMIT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_limitClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLimitClause) {
             listener.enterLimitClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLimitClause) {
             listener.exitLimitClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FetchClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FETCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0)!;
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIES, 0);
    }
    public selectFetchFirstValue(): SelectFetchFirstValueContext | null {
        return this.getRuleContext(0, SelectFetchFirstValueContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fetchClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFetchClause) {
             listener.enterFetchClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFetchClause) {
             listener.exitFetchClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFetchClause) {
            return visitor.visitFetchClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OffsetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OFFSET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OFFSET, 0)!;
    }
    public selectFetchFirstValue(): SelectFetchFirstValueContext | null {
        return this.getRuleContext(0, SelectFetchFirstValueContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_offsetClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOffsetClause) {
             listener.enterOffsetClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOffsetClause) {
             listener.exitOffsetClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOffsetClause) {
            return visitor.visitOffsetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectFetchFirstValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_selectFetchFirstValue;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelectFetchFirstValue) {
             listener.enterSelectFetchFirstValue(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelectFetchFirstValue) {
             listener.exitSelectFetchFirstValue(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectFetchFirstValue) {
            return visitor.visitSelectFetchFirstValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public groupByList(): GroupByListContext {
        return this.getRuleContext(0, GroupByListContext)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_groupClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGroupClause) {
             listener.enterGroupClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGroupClause) {
             listener.exitGroupClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupClause) {
            return visitor.visitGroupClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupByItem(): GroupByItemContext[];
    public groupByItem(i: number): GroupByItemContext | null;
    public groupByItem(i?: number): GroupByItemContext[] | GroupByItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupByItemContext);
        }

        return this.getRuleContext(i, GroupByItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_groupByList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGroupByList) {
             listener.enterGroupByList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGroupByList) {
             listener.exitGroupByList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByList) {
            return visitor.visitGroupByList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExprNoParen(): ColumnExprNoParenContext[];
    public columnExprNoParen(i: number): ColumnExprNoParenContext | null;
    public columnExprNoParen(i?: number): ColumnExprNoParenContext[] | ColumnExprNoParenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExprNoParenContext);
        }

        return this.getRuleContext(i, ColumnExprNoParenContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CUBE, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLUP, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPING, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETS, 0);
    }
    public groupByList(): GroupByListContext | null {
        return this.getRuleContext(0, GroupByListContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_groupByItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGroupByItem) {
             listener.enterGroupByItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGroupByItem) {
             listener.exitGroupByItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByItem) {
            return visitor.visitGroupByItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForLockingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode[];
    public KW_FOR(i: number): antlr.TerminalNode | null;
    public KW_FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FOR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FOR, i);
    	}
    }
    public KW_UPDATE(): antlr.TerminalNode[];
    public KW_UPDATE(i: number): antlr.TerminalNode | null;
    public KW_UPDATE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_UPDATE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_UPDATE, i);
    	}
    }
    public KW_SHARE(): antlr.TerminalNode[];
    public KW_SHARE(i: number): antlr.TerminalNode | null;
    public KW_SHARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SHARE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SHARE, i);
    	}
    }
    public KW_OF(): antlr.TerminalNode[];
    public KW_OF(i: number): antlr.TerminalNode | null;
    public KW_OF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_OF);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_OF, i);
    	}
    }
    public qualifiedNameList(): QualifiedNameListContext[];
    public qualifiedNameList(i: number): QualifiedNameListContext | null;
    public qualifiedNameList(i?: number): QualifiedNameListContext[] | QualifiedNameListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameListContext);
        }

        return this.getRuleContext(i, QualifiedNameListContext);
    }
    public KW_NOWAIT(): antlr.TerminalNode[];
    public KW_NOWAIT(i: number): antlr.TerminalNode | null;
    public KW_NOWAIT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NOWAIT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NOWAIT, i);
    	}
    }
    public KW_SKIP(): antlr.TerminalNode[];
    public KW_SKIP(i: number): antlr.TerminalNode | null;
    public KW_SKIP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SKIP);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SKIP, i);
    	}
    }
    public KW_LOCKED(): antlr.TerminalNode[];
    public KW_LOCKED(i: number): antlr.TerminalNode | null;
    public KW_LOCKED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_LOCKED);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_LOCKED, i);
    	}
    }
    public KW_NO(): antlr.TerminalNode[];
    public KW_NO(i: number): antlr.TerminalNode | null;
    public KW_NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NO);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NO, i);
    	}
    }
    public KW_KEY(): antlr.TerminalNode[];
    public KW_KEY(i: number): antlr.TerminalNode | null;
    public KW_KEY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_KEY);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_KEY, i);
    	}
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_forLockingClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterForLockingClause) {
             listener.enterForLockingClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitForLockingClause) {
             listener.exitForLockingClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitForLockingClause) {
            return visitor.visitForLockingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0)!;
    }
    public executeParamClause(): ExecuteParamClauseContext[];
    public executeParamClause(i: number): ExecuteParamClauseContext | null;
    public executeParamClause(i?: number): ExecuteParamClauseContext[] | ExecuteParamClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExecuteParamClauseContext);
        }

        return this.getRuleContext(i, ExecuteParamClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_valuesClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterValuesClause) {
             listener.enterValuesClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitValuesClause) {
             listener.exitValuesClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValuesClause) {
            return visitor.visitValuesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public fromList(): FromListContext {
        return this.getRuleContext(0, FromListContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fromClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext[];
    public tableRef(i: number): TableRefContext | null;
    public tableRef(i?: number): TableRefContext[] | TableRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableRefContext);
        }

        return this.getRuleContext(i, TableRefContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fromList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFromList) {
             listener.enterFromList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFromList) {
             listener.exitFromList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromList) {
            return visitor.visitFromList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public tableRef(): TableRefContext[];
    public tableRef(i: number): TableRefContext | null;
    public tableRef(i?: number): TableRefContext[] | TableRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableRefContext);
        }

        return this.getRuleContext(i, TableRefContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_CROSS(): antlr.TerminalNode[];
    public KW_CROSS(i: number): antlr.TerminalNode | null;
    public KW_CROSS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_CROSS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_CROSS, i);
    	}
    }
    public KW_JOIN(): antlr.TerminalNode[];
    public KW_JOIN(i: number): antlr.TerminalNode | null;
    public KW_JOIN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_JOIN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_JOIN, i);
    	}
    }
    public KW_NATURAL(): antlr.TerminalNode[];
    public KW_NATURAL(i: number): antlr.TerminalNode | null;
    public KW_NATURAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NATURAL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NATURAL, i);
    	}
    }
    public joinQual(): JoinQualContext[];
    public joinQual(i: number): JoinQualContext | null;
    public joinQual(i?: number): JoinQualContext[] | JoinQualContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinQualContext);
        }

        return this.getRuleContext(i, JoinQualContext);
    }
    public relationExpr(): RelationExprContext | null {
        return this.getRuleContext(0, RelationExprContext);
    }
    public xmlTable(): XmlTableContext | null {
        return this.getRuleContext(0, XmlTableContext);
    }
    public funcTable(): FuncTableContext | null {
        return this.getRuleContext(0, FuncTableContext);
    }
    public selectWithParens(): SelectWithParensContext | null {
        return this.getRuleContext(0, SelectWithParensContext);
    }
    public aliasClause(): AliasClauseContext | null {
        return this.getRuleContext(0, AliasClauseContext);
    }
    public tableSampleClause(): TableSampleClauseContext | null {
        return this.getRuleContext(0, TableSampleClauseContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LATERAL, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public joinType(): JoinTypeContext[];
    public joinType(i: number): JoinTypeContext | null;
    public joinType(i?: number): JoinTypeContext[] | JoinTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinTypeContext);
        }

        return this.getRuleContext(i, JoinTypeContext);
    }
    public funcAliasClause(): FuncAliasClauseContext | null {
        return this.getRuleContext(0, FuncAliasClauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public columnList(): ColumnListContext | null {
        return this.getRuleContext(0, ColumnListContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableRef;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableRef) {
             listener.enterTableRef(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableRef) {
             listener.exitTableRef(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRef) {
            return visitor.visitTableRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasClauseContext extends antlr.ParserRuleContext {
    public _alias?: ColIdContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public nameList(): NameListContext | null {
        return this.getRuleContext(0, NameListContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_aliasClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAliasClause) {
             listener.enterAliasClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAliasClause) {
             listener.exitAliasClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAliasClause) {
            return visitor.visitAliasClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncAliasClauseContext extends antlr.ParserRuleContext {
    public _alias?: ColIdContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aliasClause(): AliasClauseContext | null {
        return this.getRuleContext(0, AliasClauseContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public tableFuncElementList(): TableFuncElementListContext | null {
        return this.getRuleContext(0, TableFuncElementListContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcAliasClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncAliasClause) {
             listener.enterFuncAliasClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncAliasClause) {
             listener.exitFuncAliasClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncAliasClause) {
            return visitor.visitFuncAliasClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RIGHT, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INNER, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUTER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_joinType;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterJoinType) {
             listener.enterJoinType(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitJoinType) {
             listener.exitJoinType(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinQualContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_joinQual;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterJoinQual) {
             listener.enterJoinQual(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitJoinQual) {
             listener.exitJoinQual(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinQual) {
            return visitor.visitJoinQual(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public truncateTable(): TruncateTableContext | null {
        return this.getRuleContext(0, TruncateTableContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(0, SchemaNameContext);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relationExpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelationExpr) {
             listener.enterRelationExpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelationExpr) {
             listener.exitRelationExpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelationExpr) {
            return visitor.visitRelationExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PublicationRelationExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public truncateTable(): TruncateTableContext | null {
        return this.getRuleContext(0, TruncateTableContext);
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(0, SchemaNameContext);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_publicationRelationExpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPublicationRelationExpr) {
             listener.enterPublicationRelationExpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPublicationRelationExpr) {
             listener.exitPublicationRelationExpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPublicationRelationExpr) {
            return visitor.visitPublicationRelationExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationExprListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relationExpr(): RelationExprContext[];
    public relationExpr(i: number): RelationExprContext | null;
    public relationExpr(i?: number): RelationExprContext[] | RelationExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationExprContext);
        }

        return this.getRuleContext(i, RelationExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relationExprList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelationExprList) {
             listener.enterRelationExprList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelationExprList) {
             listener.exitRelationExprList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelationExprList) {
            return visitor.visitRelationExprList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationExprOptAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relationExpr(): RelationExprContext {
        return this.getRuleContext(0, RelationExprContext)!;
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relationExprOptAlias;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelationExprOptAlias) {
             listener.enterRelationExprOptAlias(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelationExprOptAlias) {
             listener.exitRelationExprOptAlias(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelationExprOptAlias) {
            return visitor.visitRelationExprOptAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSampleClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLESAMPLE, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public executeParamClause(): ExecuteParamClauseContext {
        return this.getRuleContext(0, ExecuteParamClauseContext)!;
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPEATABLE, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableSampleClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableSampleClause) {
             listener.enterTableSampleClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableSampleClause) {
             listener.exitTableSampleClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSampleClause) {
            return visitor.visitTableSampleClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public funcExprWindowless(): FuncExprWindowlessContext | null {
        return this.getRuleContext(0, FuncExprWindowlessContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDINALITY, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public rowsFromItem(): RowsFromItemContext[];
    public rowsFromItem(i: number): RowsFromItemContext | null;
    public rowsFromItem(i?: number): RowsFromItemContext[] | RowsFromItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowsFromItemContext);
        }

        return this.getRuleContext(i, RowsFromItemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcTable;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncTable) {
             listener.enterFuncTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncTable) {
             listener.exitFuncTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncTable) {
            return visitor.visitFuncTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsFromItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public funcExprWindowless(): FuncExprWindowlessContext {
        return this.getRuleContext(0, FuncExprWindowlessContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public tableFuncElementList(): TableFuncElementListContext | null {
        return this.getRuleContext(0, TableFuncElementListContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowsFromItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowsFromItem) {
             listener.enterRowsFromItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowsFromItem) {
             listener.exitRowsFromItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowsFromItem) {
            return visitor.visitRowsFromItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0)!;
    }
    public columnExprNoParen(): ColumnExprNoParenContext {
        return this.getRuleContext(0, ColumnExprNoParenContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_whereClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereOrCurrentClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_whereOrCurrentClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWhereOrCurrentClause) {
             listener.enterWhereOrCurrentClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWhereOrCurrentClause) {
             listener.exitWhereOrCurrentClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhereOrCurrentClause) {
            return visitor.visitWhereOrCurrentClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFuncElementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableFuncElement(): TableFuncElementContext[];
    public tableFuncElement(i: number): TableFuncElementContext | null;
    public tableFuncElement(i?: number): TableFuncElementContext[] | TableFuncElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableFuncElementContext);
        }

        return this.getRuleContext(i, TableFuncElementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableFuncElementList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableFuncElementList) {
             listener.enterTableFuncElementList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableFuncElementList) {
             listener.exitTableFuncElementList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableFuncElementList) {
            return visitor.visitTableFuncElementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFuncElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public collateClause(): CollateClauseContext | null {
        return this.getRuleContext(0, CollateClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableFuncElement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableFuncElement) {
             listener.enterTableFuncElement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableFuncElement) {
             listener.exitTableFuncElement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableFuncElement) {
            return visitor.visitTableFuncElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmlTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_XMLTABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_XMLTABLE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public xmlExistsArgument(): XmlExistsArgumentContext | null {
        return this.getRuleContext(0, XmlExistsArgumentContext);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMNS, 0);
    }
    public xmlTableColumnEl(): XmlTableColumnElContext[];
    public xmlTableColumnEl(i: number): XmlTableColumnElContext | null;
    public xmlTableColumnEl(i?: number): XmlTableColumnElContext[] | XmlTableColumnElContext | null {
        if (i === undefined) {
            return this.getRuleContexts(XmlTableColumnElContext);
        }

        return this.getRuleContext(i, XmlTableColumnElContext);
    }
    public KW_XMLNAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLNAMESPACES, 0);
    }
    public xmlNamespaceEle(): XmlNamespaceEleContext[];
    public xmlNamespaceEle(i: number): XmlNamespaceEleContext | null;
    public xmlNamespaceEle(i?: number): XmlNamespaceEleContext[] | XmlNamespaceEleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(XmlNamespaceEleContext);
        }

        return this.getRuleContext(i, XmlNamespaceEleContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmlTable;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmlTable) {
             listener.enterXmlTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmlTable) {
             listener.exitXmlTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmlTable) {
            return visitor.visitXmlTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmlTableColumnElContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDINALITY, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_NULL(): antlr.TerminalNode[];
    public KW_NULL(i: number): antlr.TerminalNode | null;
    public KW_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NULL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NULL, i);
    	}
    }
    public KW_DEFAULT(): antlr.TerminalNode[];
    public KW_DEFAULT(i: number): antlr.TerminalNode | null;
    public KW_DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_DEFAULT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_DEFAULT, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public KW_NOT(): antlr.TerminalNode[];
    public KW_NOT(i: number): antlr.TerminalNode | null;
    public KW_NOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NOT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmlTableColumnEl;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmlTableColumnEl) {
             listener.enterXmlTableColumnEl(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmlTableColumnEl) {
             listener.exitXmlTableColumnEl(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmlTableColumnEl) {
            return visitor.visitXmlTableColumnEl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmlNamespaceEleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmlNamespaceEle;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmlNamespaceEle) {
             listener.enterXmlNamespaceEle(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmlNamespaceEle) {
             listener.exitXmlNamespaceEle(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmlNamespaceEle) {
            return visitor.visitXmlNamespaceEle(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleTypeName(): SimpleTypeNameContext | null {
        return this.getRuleContext(0, SimpleTypeNameContext);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0);
    }
    public KW_SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETOF, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode[];
    public OPEN_BRACKET(i: number): antlr.TerminalNode | null;
    public OPEN_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_BRACKET, i);
    	}
    }
    public Integral(): antlr.TerminalNode[];
    public Integral(i: number): antlr.TerminalNode | null;
    public Integral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.Integral);
    	} else {
    		return this.getToken(PostgreSqlParser.Integral, i);
    	}
    }
    public CLOSE_BRACKET(): antlr.TerminalNode[];
    public CLOSE_BRACKET(i: number): antlr.TerminalNode | null;
    public CLOSE_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_BRACKET, i);
    	}
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public KW_ROWTYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWTYPE, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_typename;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTypename) {
             listener.enterTypename(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTypename) {
             listener.exitTypename(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTypename) {
            return visitor.visitTypename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleTypeNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typeFunctionName(): TypeFunctionNameContext | null {
        return this.getRuleContext(0, TypeFunctionNameContext);
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public executeParamClause(): ExecuteParamClauseContext | null {
        return this.getRuleContext(0, ExecuteParamClauseContext);
    }
    public constTypeName(): ConstTypeNameContext | null {
        return this.getRuleContext(0, ConstTypeNameContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public optFloat(): OptFloatContext | null {
        return this.getRuleContext(0, OptFloatContext);
    }
    public optInterval(): OptIntervalContext | null {
        return this.getRuleContext(0, OptIntervalContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_simpleTypeName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSimpleTypeName) {
             listener.enterSimpleTypeName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSimpleTypeName) {
             listener.exitSimpleTypeName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleTypeName) {
            return visitor.visitSimpleTypeName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstTypeNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numeric(): NumericContext | null {
        return this.getRuleContext(0, NumericContext);
    }
    public bit(): BitContext | null {
        return this.getRuleContext(0, BitContext);
    }
    public character(): CharacterContext | null {
        return this.getRuleContext(0, CharacterContext);
    }
    public constDatetime(): ConstDatetimeContext | null {
        return this.getRuleContext(0, ConstDatetimeContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constTypeName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstTypeName) {
             listener.enterConstTypeName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstTypeName) {
             listener.exitConstTypeName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstTypeName) {
            return visitor.visitConstTypeName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTEGER, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SMALLINT, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BIGINT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REAL, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FLOAT, 0);
    }
    public optFloat(): OptFloatContext | null {
        return this.getRuleContext(0, OptFloatContext);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOUBLE, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECISION, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DECIMAL, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEC, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NUMERIC, 0);
    }
    public executeParamClause(): ExecuteParamClauseContext | null {
        return this.getRuleContext(0, ExecuteParamClauseContext);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOOLEAN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_numeric;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNumeric) {
             listener.enterNumeric(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNumeric) {
             listener.exitNumeric(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumeric) {
            return visitor.visitNumeric(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptFloatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Integral, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optFloat;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptFloat) {
             listener.enterOptFloat(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptFloat) {
             listener.exitOptFloat(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptFloat) {
            return visitor.visitOptFloat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BIT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BIT, 0)!;
    }
    public KW_VARYING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARYING, 0);
    }
    public executeParamClause(): ExecuteParamClauseContext | null {
        return this.getRuleContext(0, ExecuteParamClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_bit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterBit) {
             listener.enterBit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitBit) {
             listener.exitBit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBit) {
            return visitor.visitBit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharacterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARCHAR, 0);
    }
    public KW_NATIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NATIONAL, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHARACTER, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAR, 0);
    }
    public KW_NCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NCHAR, 0);
    }
    public optFloat(): OptFloatContext | null {
        return this.getRuleContext(0, OptFloatContext);
    }
    public KW_VARYING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARYING, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_character;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCharacter) {
             listener.enterCharacter(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCharacter) {
             listener.exitCharacter(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCharacter) {
            return visitor.visitCharacter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstDatetimeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIME(): antlr.TerminalNode[];
    public KW_TIME(i: number): antlr.TerminalNode | null;
    public KW_TIME(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TIME);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TIME, i);
    	}
    }
    public optFloat(): OptFloatContext | null {
        return this.getRuleContext(0, OptFloatContext);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constDatetime;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstDatetime) {
             listener.enterConstDatetime(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstDatetime) {
             listener.exitConstDatetime(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstDatetime) {
            return visitor.visitConstDatetime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptIntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MONTH, 0);
    }
    public intervalSecond(): IntervalSecondContext | null {
        return this.getRuleContext(0, IntervalSecondContext);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YEAR, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINUTE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optInterval;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptInterval) {
             listener.enterOptInterval(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptInterval) {
             listener.exitOptInterval(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptInterval) {
            return visitor.visitOptInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalSecondContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECOND(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SECOND, 0)!;
    }
    public optFloat(): OptFloatContext | null {
        return this.getRuleContext(0, OptFloatContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_intervalSecond;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIntervalSecond) {
             listener.enterIntervalSecond(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIntervalSecond) {
             listener.exitIntervalSecond(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalSecond) {
            return visitor.visitIntervalSecond(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public LESS_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LESS_EQUALS, 0);
    }
    public GREATER_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GREATER_EQUALS, 0);
    }
    public NOT_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.NOT_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_expression;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_booleanExpression;
    }
    public override copyFrom(ctx: BooleanExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LogicalNotContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NOT, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLogicalNot) {
             listener.enterLogicalNot(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLogicalNot) {
             listener.exitLogicalNot(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicatedContext extends BooleanExpressionContext {
    public _valueExpression?: ValueExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPredicated) {
             listener.enterPredicated(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPredicated) {
             listener.exitPredicated(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalBinaryContext extends BooleanExpressionContext {
    public _left?: BooleanExpressionContext;
    public _operator?: Token | null;
    public _right?: BooleanExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OR, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLogicalBinary) {
             listener.enterLogicalBinary(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLogicalBinary) {
             listener.exitLogicalBinary(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalBinary) {
            return visitor.visitLogicalBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public value: antlr.ParserRuleContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number, value: antlr.ParserRuleContext) {
        super(parent, invokingState);
        this.value = value;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_predicate;
    }
    public override copyFrom(ctx: PredicateContext): void {
        super.copyFrom(ctx);
        this.value = ctx.value;
    }
}
export class ComparisonContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterComparison) {
             listener.enterComparison(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitComparison) {
             listener.exitComparison(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LikeContext extends PredicateContext {
    public _pattern?: ValueExpressionContext;
    public _escape?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ILIKE, 0);
    }
    public KW_SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMILAR, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ESCAPE, 0);
    }
    public KW_SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYMMETRIC, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLike) {
             listener.enterLike(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLike) {
             listener.exitLike(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLike) {
            return visitor.visitLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InSubqueryContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public selectWithParens(): SelectWithParensContext {
        return this.getRuleContext(0, SelectWithParensContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInSubquery) {
             listener.enterInSubquery(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInSubquery) {
             listener.exitInSubquery(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInSubquery) {
            return visitor.visitInSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DistinctFromContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDistinctFrom) {
             listener.enterDistinctFrom(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDistinctFrom) {
             listener.exitDistinctFrom(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDistinctFrom) {
            return visitor.visitDistinctFrom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InListContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInList) {
             listener.enterInList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInList) {
             listener.exitInList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInList) {
            return visitor.visitInList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NULL, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNullPredicate) {
             listener.enterNullPredicate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNullPredicate) {
             listener.exitNullPredicate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNullPredicate) {
            return visitor.visitNullPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BetweenContext extends PredicateContext {
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_BETWEEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0)!;
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AND, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterBetween) {
             listener.enterBetween(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitBetween) {
             listener.exitBetween(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBetween) {
            return visitor.visitBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuantifiedComparisonContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public subqueryOperator(): SubqueryOperatorContext {
        return this.getRuleContext(0, SubqueryOperatorContext)!;
    }
    public subType(): SubTypeContext {
        return this.getRuleContext(0, SubTypeContext)!;
    }
    public selectWithParens(): SelectWithParensContext | null {
        return this.getRuleContext(0, SelectWithParensContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQuantifiedComparison) {
             listener.enterQuantifiedComparison(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQuantifiedComparison) {
             listener.exitQuantifiedComparison(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedComparison) {
            return visitor.visitQuantifiedComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterValueExpressionDefault) {
             listener.enterValueExpressionDefault(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitValueExpressionDefault) {
             listener.exitValueExpressionDefault(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConcatenationContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CARET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CARET, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConcatenation) {
             listener.enterConcatenation(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConcatenation) {
             listener.exitConcatenation(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConcatenation) {
            return visitor.visitConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArithmeticBinary) {
             listener.enterArithmeticBinary(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArithmeticBinary) {
             listener.exitArithmeticBinary(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArithmeticUnary) {
             listener.enterArithmeticUnary(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArithmeticUnary) {
             listener.exitArithmeticUnary(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AtTimeZoneContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public KW_AT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AT, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAtTimeZone) {
             listener.enterAtTimeZone(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAtTimeZone) {
             listener.exitAtTimeZone(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtTimeZone) {
            return visitor.visitAtTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public _a_expr_in_parens?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectWithParens(): SelectWithParensContext | null {
        return this.getRuleContext(0, SelectWithParensContext);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0);
    }
    public arrayExpr(): ArrayExprContext | null {
        return this.getRuleContext(0, ArrayExprContext);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public optIndirection(): OptIndirectionContext | null {
        return this.getRuleContext(0, OptIndirectionContext);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPING, 0);
    }
    public executeParamClause(): ExecuteParamClauseContext | null {
        return this.getRuleContext(0, ExecuteParamClauseContext);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public BinaryStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.BinaryStringConstant, 0);
    }
    public HexadecimalStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.HexadecimalStringConstant, 0);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public funcArgList(): FuncArgListContext | null {
        return this.getRuleContext(0, FuncArgListContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public constTypeName(): ConstTypeNameContext | null {
        return this.getRuleContext(0, ConstTypeNameContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public optFloat(): OptFloatContext | null {
        return this.getRuleContext(0, OptFloatContext);
    }
    public optInterval(): OptIntervalContext | null {
        return this.getRuleContext(0, OptIntervalContext);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public PLSQLVARIABLENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLSQLVARIABLENAME, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_END, 0);
    }
    public when_clause(): When_clauseContext[];
    public when_clause(i: number): When_clauseContext | null;
    public when_clause(i?: number): When_clauseContext[] | When_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(When_clauseContext);
        }

        return this.getRuleContext(i, When_clauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ELSE, 0);
    }
    public func_expr(): Func_exprContext | null {
        return this.getRuleContext(0, Func_exprContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public explicitRow(): ExplicitRowContext | null {
        return this.getRuleContext(0, ExplicitRowContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public row(): RowContext[];
    public row(i: number): RowContext | null;
    public row(i?: number): RowContext[] | RowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowContext);
        }

        return this.getRuleContext(i, RowContext);
    }
    public KW_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAPS, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public primaryExpression(): PrimaryExpressionContext[];
    public primaryExpression(i: number): PrimaryExpressionContext | null;
    public primaryExpression(i?: number): PrimaryExpressionContext[] | PrimaryExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryExpressionContext);
        }

        return this.getRuleContext(i, PrimaryExpressionContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public qualOp(): QualOpContext | null {
        return this.getRuleContext(0, QualOpContext);
    }
    public mathOp(): MathOpContext | null {
        return this.getRuleContext(0, MathOpContext);
    }
    public TYPECAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.TYPECAST, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public prepTypeClause(): PrepTypeClauseContext | null {
        return this.getRuleContext(0, PrepTypeClauseContext);
    }
    public KW_DOCUMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOCUMENT, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_primaryExpression;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrimaryExpression) {
             listener.enterPrimaryExpression(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrimaryExpression) {
             listener.exitPrimaryExpression(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryExpression) {
            return visitor.visitPrimaryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncApplicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public funcArgList(): FuncArgListContext | null {
        return this.getRuleContext(0, FuncArgListContext);
    }
    public KW_VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIADIC, 0);
    }
    public funcArgExpr(): FuncArgExprContext | null {
        return this.getRuleContext(0, FuncArgExprContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcApplication;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncApplication) {
             listener.enterFuncApplication(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncApplication) {
             listener.exitFuncApplication(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncApplication) {
            return visitor.visitFuncApplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public funcApplication(): FuncApplicationContext | null {
        return this.getRuleContext(0, FuncApplicationContext);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHIN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FILTER, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVER, 0);
    }
    public windowSpecification(): WindowSpecificationContext | null {
        return this.getRuleContext(0, WindowSpecificationContext);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public funcExprCommonSubExpr(): FuncExprCommonSubExprContext | null {
        return this.getRuleContext(0, FuncExprCommonSubExprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_expr) {
             listener.enterFunc_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_expr) {
             listener.exitFunc_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_expr) {
            return visitor.visitFunc_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncExprWindowlessContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public funcApplication(): FuncApplicationContext | null {
        return this.getRuleContext(0, FuncApplicationContext);
    }
    public funcExprCommonSubExpr(): FuncExprCommonSubExprContext | null {
        return this.getRuleContext(0, FuncExprCommonSubExprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcExprWindowless;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncExprWindowless) {
             listener.enterFuncExprWindowless(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncExprWindowless) {
             listener.exitFuncExprWindowless(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncExprWindowless) {
            return visitor.visitFuncExprWindowless(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncExprCommonSubExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIME, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIME, 0);
    }
    public KW_LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIMESTAMP, 0);
    }
    public optFloat(): OptFloatContext | null {
        return this.getRuleContext(0, OptFloatContext);
    }
    public KW_CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_ROLE, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION_USER, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_CATALOG, 0);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public KW_TREAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TREAT, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTRACT, 0);
    }
    public extractArg(): ExtractArgContext | null {
        return this.getRuleContext(0, ExtractArgContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_NORMALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NORMALIZE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public unicodeNormalForm(): UnicodeNormalFormContext | null {
        return this.getRuleContext(0, UnicodeNormalFormContext);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAY, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLACING, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POSITION, 0);
    }
    public primaryExpression(): PrimaryExpressionContext[];
    public primaryExpression(i: number): PrimaryExpressionContext | null;
    public primaryExpression(i?: number): PrimaryExpressionContext[] | PrimaryExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryExpressionContext);
        }

        return this.getRuleContext(i, PrimaryExpressionContext);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSTRING, 0);
    }
    public substrList(): SubstrListContext | null {
        return this.getRuleContext(0, SubstrListContext);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIM, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOTH, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRAILING, 0);
    }
    public KW_NULLIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLIF, 0);
    }
    public executeParamClause(): ExecuteParamClauseContext | null {
        return this.getRuleContext(0, ExecuteParamClauseContext);
    }
    public KW_COALESCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COALESCE, 0);
    }
    public KW_GREATEST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GREATEST, 0);
    }
    public KW_LEAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAST, 0);
    }
    public KW_XMLCONCAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLCONCAT, 0);
    }
    public KW_XMLELEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLELEMENT, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAME, 0);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public KW_XMLATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLATTRIBUTES, 0);
    }
    public xmlAttributeList(): XmlAttributeListContext | null {
        return this.getRuleContext(0, XmlAttributeListContext);
    }
    public KW_XMLEXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLEXISTS, 0);
    }
    public xmlExistsArgument(): XmlExistsArgumentContext | null {
        return this.getRuleContext(0, XmlExistsArgumentContext);
    }
    public KW_XMLFOREST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLFOREST, 0);
    }
    public KW_XMLPARSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPARSE, 0);
    }
    public documentOrContent(): DocumentOrContentContext | null {
        return this.getRuleContext(0, DocumentOrContentContext);
    }
    public KW_WHITESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHITESPACE, 0);
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRESERVE, 0);
    }
    public KW_STRIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRIP, 0);
    }
    public KW_XMLPI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPI, 0);
    }
    public KW_XMLROOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLROOT, 0);
    }
    public KW_XML(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XML, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0);
    }
    public KW_STANDALONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STANDALONE, 0);
    }
    public KW_NO(): antlr.TerminalNode[];
    public KW_NO(i: number): antlr.TerminalNode | null;
    public KW_NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NO);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NO, i);
    	}
    }
    public KW_VALUE(): antlr.TerminalNode[];
    public KW_VALUE(i: number): antlr.TerminalNode | null;
    public KW_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_VALUE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_VALUE, i);
    	}
    }
    public KW_YES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YES, 0);
    }
    public KW_XMLSERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLSERIALIZE, 0);
    }
    public simpleTypeName(): SimpleTypeNameContext | null {
        return this.getRuleContext(0, SimpleTypeNameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcExprCommonSubExpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncExprCommonSubExpr) {
             listener.enterFuncExprCommonSubExpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncExprCommonSubExpr) {
             listener.exitFuncExprCommonSubExpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncExprCommonSubExpr) {
            return visitor.visitFuncExprCommonSubExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmlAttributeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xmlAttributeEl(): XmlAttributeElContext[];
    public xmlAttributeEl(i: number): XmlAttributeElContext | null;
    public xmlAttributeEl(i?: number): XmlAttributeElContext[] | XmlAttributeElContext | null {
        if (i === undefined) {
            return this.getRuleContexts(XmlAttributeElContext);
        }

        return this.getRuleContext(i, XmlAttributeElContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmlAttributeList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmlAttributeList) {
             listener.enterXmlAttributeList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmlAttributeList) {
             listener.exitXmlAttributeList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmlAttributeList) {
            return visitor.visitXmlAttributeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmlAttributeElContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmlAttributeEl;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmlAttributeEl) {
             listener.enterXmlAttributeEl(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmlAttributeEl) {
             listener.exitXmlAttributeEl(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmlAttributeEl) {
            return visitor.visitXmlAttributeEl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DocumentOrContentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DOCUMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOCUMENT, 0);
    }
    public KW_CONTENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTENT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_documentOrContent;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDocumentOrContent) {
             listener.enterDocumentOrContent(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDocumentOrContent) {
             listener.exitDocumentOrContent(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDocumentOrContent) {
            return visitor.visitDocumentOrContent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmlExistsArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PASSING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PASSING, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public xmlPassingMech(): XmlPassingMechContext[];
    public xmlPassingMech(i: number): XmlPassingMechContext | null;
    public xmlPassingMech(i?: number): XmlPassingMechContext[] | XmlPassingMechContext | null {
        if (i === undefined) {
            return this.getRuleContexts(XmlPassingMechContext);
        }

        return this.getRuleContext(i, XmlPassingMechContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmlExistsArgument;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmlExistsArgument) {
             listener.enterXmlExistsArgument(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmlExistsArgument) {
             listener.exitXmlExistsArgument(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmlExistsArgument) {
            return visitor.visitXmlExistsArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmlPassingMechContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public KW_REF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REF, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmlPassingMech;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmlPassingMech) {
             listener.enterXmlPassingMech(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmlPassingMech) {
             listener.exitXmlPassingMech(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmlPassingMech) {
            return visitor.visitXmlPassingMech(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WINDOW, 0)!;
    }
    public windowDefinition(): WindowDefinitionContext[];
    public windowDefinition(i: number): WindowDefinitionContext | null;
    public windowDefinition(i?: number): WindowDefinitionContext[] | WindowDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowDefinitionContext);
        }

        return this.getRuleContext(i, WindowDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_windowClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWindowClause) {
             listener.enterWindowClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWindowClause) {
             listener.exitWindowClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public windowSpecification(): WindowSpecificationContext {
        return this.getRuleContext(0, WindowSpecificationContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_windowDefinition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWindowDefinition) {
             listener.enterWindowDefinition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWindowDefinition) {
             listener.exitWindowDefinition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowDefinition) {
            return visitor.visitWindowDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Over_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OVER, 0)!;
    }
    public windowSpecification(): WindowSpecificationContext | null {
        return this.getRuleContext(0, WindowSpecificationContext);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_over_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOver_clause) {
             listener.enterOver_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOver_clause) {
             listener.exitOver_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOver_clause) {
            return visitor.visitOver_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public sortClause(): SortClauseContext | null {
        return this.getRuleContext(0, SortClauseContext);
    }
    public optFrameClause(): OptFrameClauseContext | null {
        return this.getRuleContext(0, OptFrameClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_windowSpecification;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWindowSpecification) {
             listener.enterWindowSpecification(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWindowSpecification) {
             listener.exitWindowSpecification(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowSpecification) {
            return visitor.visitWindowSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptFrameClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RANGE, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_GROUPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPS, 0);
    }
    public frameBound(): FrameBoundContext[];
    public frameBound(i: number): FrameBoundContext | null;
    public frameBound(i?: number): FrameBoundContext[] | FrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundContext);
        }

        return this.getRuleContext(i, FrameBoundContext);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDE, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIES, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_OTHERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OTHERS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optFrameClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptFrameClause) {
             listener.enterOptFrameClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptFrameClause) {
             listener.exitOptFrameClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptFrameClause) {
            return visitor.visitOptFrameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOLLOWING, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNBOUNDED, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_frameBound;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFrameBound) {
             listener.enterFrameBound(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFrameBound) {
             listener.exitFrameBound(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBound) {
            return visitor.visitFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explicitRow(): ExplicitRowContext | null {
        return this.getRuleContext(0, ExplicitRowContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_row;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRow) {
             listener.enterRow(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRow) {
             listener.exitRow(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRow) {
            return visitor.visitRow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplicitRowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ROW, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explicitRow;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplicitRow) {
             listener.enterExplicitRow(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplicitRow) {
             listener.exitExplicitRow(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplicitRow) {
            return visitor.visitExplicitRow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANY, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SOME, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_subType;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSubType) {
             listener.enterSubType(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSubType) {
             listener.exitSubType(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubType) {
            return visitor.visitSubType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AllOpContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Operator(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Operator, 0);
    }
    public mathOp(): MathOpContext | null {
        return this.getRuleContext(0, MathOpContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_allOp;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAllOp) {
             listener.enterAllOp(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAllOp) {
             listener.exitAllOp(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAllOp) {
            return visitor.visitAllOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MathOpContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public CARET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CARET, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public LESS_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LESS_EQUALS, 0);
    }
    public GREATER_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GREATER_EQUALS, 0);
    }
    public NOT_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.NOT_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_mathOp;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMathOp) {
             listener.enterMathOp(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMathOp) {
             listener.exitMathOp(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMathOp) {
            return visitor.visitMathOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualOpContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Operator(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Operator, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public anyOperator(): AnyOperatorContext | null {
        return this.getRuleContext(0, AnyOperatorContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qualOp;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQualOp) {
             listener.enterQualOp(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQualOp) {
             listener.exitQualOp(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualOp) {
            return visitor.visitQualOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualAllOpContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public allOp(): AllOpContext | null {
        return this.getRuleContext(0, AllOpContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public anyOperator(): AnyOperatorContext | null {
        return this.getRuleContext(0, AnyOperatorContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qualAllOp;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQualAllOp) {
             listener.enterQualAllOp(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQualAllOp) {
             listener.exitQualAllOp(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualAllOp) {
            return visitor.visitQualAllOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubqueryOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualAllOp(): QualAllOpContext | null {
        return this.getRuleContext(0, QualAllOpContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ILIKE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_subqueryOperator;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSubqueryOperator) {
             listener.enterSubqueryOperator(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSubqueryOperator) {
             listener.exitSubqueryOperator(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryOperator) {
            return visitor.visitSubqueryOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exprList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExprList) {
             listener.enterExprList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExprList) {
             listener.exitExprList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExprList) {
            return visitor.visitExprList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_columnExpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnExpr) {
             listener.enterColumnExpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnExpr) {
             listener.exitColumnExpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpr) {
            return visitor.visitColumnExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnExprNoParenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_columnExprNoParen;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnExprNoParen) {
             listener.enterColumnExprNoParen(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnExprNoParen) {
             listener.exitColumnExprNoParen(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExprNoParen) {
            return visitor.visitColumnExprNoParen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncArgListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public funcArgExpr(): FuncArgExprContext[];
    public funcArgExpr(i: number): FuncArgExprContext | null;
    public funcArgExpr(i?: number): FuncArgExprContext[] | FuncArgExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FuncArgExprContext);
        }

        return this.getRuleContext(i, FuncArgExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcArgList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncArgList) {
             listener.enterFuncArgList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncArgList) {
             listener.exitFuncArgList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncArgList) {
            return visitor.visitFuncArgList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuncArgExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public typeFunctionName(): TypeFunctionNameContext | null {
        return this.getRuleContext(0, TypeFunctionNameContext);
    }
    public COLON_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON_EQUALS, 0);
    }
    public EQUALS_GREATER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUALS_GREATER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_funcArgExpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFuncArgExpr) {
             listener.enterFuncArgExpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFuncArgExpr) {
             listener.exitFuncArgExpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFuncArgExpr) {
            return visitor.visitFuncArgExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_BRACKET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_BRACKET, 0)!;
    }
    public CLOSE_BRACKET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_BRACKET, 0)!;
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public arrayExpr(): ArrayExprContext[];
    public arrayExpr(i: number): ArrayExprContext | null;
    public arrayExpr(i?: number): ArrayExprContext[] | ArrayExprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ArrayExprContext);
        }

        return this.getRuleContext(i, ArrayExprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_arrayExpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArrayExpr) {
             listener.enterArrayExpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArrayExpr) {
             listener.exitArrayExpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArrayExpr) {
            return visitor.visitArrayExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtractArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YEAR, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MONTH, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECOND, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_extractArg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExtractArg) {
             listener.enterExtractArg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExtractArg) {
             listener.exitExtractArg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExtractArg) {
            return visitor.visitExtractArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnicodeNormalFormContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NFC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFC, 0);
    }
    public KW_NFD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFD, 0);
    }
    public KW_NFKC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKC, 0);
    }
    public KW_NFKD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_unicodeNormalForm;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUnicodeNormalForm) {
             listener.enterUnicodeNormalForm(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUnicodeNormalForm) {
             listener.exitUnicodeNormalForm(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnicodeNormalForm) {
            return visitor.visitUnicodeNormalForm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubstrListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMILAR, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ESCAPE, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_substrList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSubstrList) {
             listener.enterSubstrList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSubstrList) {
             listener.exitSubstrList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubstrList) {
            return visitor.visitSubstrList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class When_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_THEN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_when_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWhen_clause) {
             listener.enterWhen_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWhen_clause) {
             listener.exitWhen_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhen_clause) {
            return visitor.visitWhen_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndirectionElContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT, 0);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_BRACKET, 0);
    }
    public CLOSE_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_BRACKET, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indirectionEl;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndirectionEl) {
             listener.enterIndirectionEl(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndirectionEl) {
             listener.exitIndirectionEl(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndirectionEl) {
            return visitor.visitIndirectionEl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indirectionEl(): IndirectionElContext[];
    public indirectionEl(i: number): IndirectionElContext | null;
    public indirectionEl(i?: number): IndirectionElContext[] | IndirectionElContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndirectionElContext);
        }

        return this.getRuleContext(i, IndirectionElContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indirection;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndirection) {
             listener.enterIndirection(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndirection) {
             listener.exitIndirection(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndirection) {
            return visitor.visitIndirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptIndirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indirectionEl(): IndirectionElContext[];
    public indirectionEl(i: number): IndirectionElContext | null;
    public indirectionEl(i?: number): IndirectionElContext[] | IndirectionElContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndirectionElContext);
        }

        return this.getRuleContext(i, IndirectionElContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optIndirection;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptIndirection) {
             listener.enterOptIndirection(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptIndirection) {
             listener.exitOptIndirection(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptIndirection) {
            return visitor.visitOptIndirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TargetListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public targetEl(): TargetElContext[];
    public targetEl(i: number): TargetElContext | null;
    public targetEl(i?: number): TargetElContext[] | TargetElContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TargetElContext);
        }

        return this.getRuleContext(i, TargetElContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_targetList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTargetList) {
             listener.enterTargetList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTargetList) {
             listener.exitTargetList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTargetList) {
            return visitor.visitTargetList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TargetElContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_targetEl;
    }
    public override copyFrom(ctx: TargetElContext): void {
        super.copyFrom(ctx);
    }
}
export class Target_labelContext extends TargetElContext {
    public constructor(ctx: TargetElContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExprNoParen(): ColumnExprNoParenContext {
        return this.getRuleContext(0, ColumnExprNoParenContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTarget_label) {
             listener.enterTarget_label(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTarget_label) {
             listener.exitTarget_label(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTarget_label) {
            return visitor.visitTarget_label(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class Target_starContext extends TargetElContext {
    public constructor(ctx: TargetElContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.STAR, 0)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTarget_star) {
             listener.enterTarget_star(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTarget_star) {
             listener.exitTarget_star(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTarget_star) {
            return visitor.visitTarget_star(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qualifiedNameList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQualifiedNameList) {
             listener.enterQualifiedNameList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQualifiedNameList) {
             listener.exitQualifiedNameList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedNameList) {
            return visitor.visitQualifiedNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext[];
    public tableName(i: number): TableNameContext | null;
    public tableName(i?: number): TableNameContext[] | TableNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableNameContext);
        }

        return this.getRuleContext(i, TableNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableNameList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableNameList) {
             listener.enterTableNameList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableNameList) {
             listener.exitTableNameList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNameList) {
            return visitor.visitTableNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaName(): SchemaNameContext[];
    public schemaName(i: number): SchemaNameContext | null;
    public schemaName(i?: number): SchemaNameContext[] | SchemaNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SchemaNameContext);
        }

        return this.getRuleContext(i, SchemaNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schemaNameList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchemaNameList) {
             listener.enterSchemaNameList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchemaNameList) {
             listener.exitSchemaNameList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaNameList) {
            return visitor.visitSchemaNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public databaseName(): DatabaseNameContext[];
    public databaseName(i: number): DatabaseNameContext | null;
    public databaseName(i?: number): DatabaseNameContext[] | DatabaseNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DatabaseNameContext);
        }

        return this.getRuleContext(i, DatabaseNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_databaseNameList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDatabaseNameList) {
             listener.enterDatabaseNameList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDatabaseNameList) {
             listener.exitDatabaseNameList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseNameList) {
            return visitor.visitDatabaseNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSpaceNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableSpaceNameCreate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableSpaceNameCreate) {
             listener.enterTableSpaceNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableSpaceNameCreate) {
             listener.exitTableSpaceNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSpaceNameCreate) {
            return visitor.visitTableSpaceNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSpaceNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableSpaceName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableSpaceName) {
             listener.enterTableSpaceName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableSpaceName) {
             listener.exitTableSpaceName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSpaceName) {
            return visitor.visitTableSpaceName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableNameCreate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableNameCreate) {
             listener.enterTableNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableNameCreate) {
             listener.exitTableNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNameCreate) {
            return visitor.visitTableNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_viewNameCreate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterViewNameCreate) {
             listener.enterViewNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitViewNameCreate) {
             listener.exitViewNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewNameCreate) {
            return visitor.visitViewNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_viewName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qualifiedName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSpaceNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableSpaceName(): TableSpaceNameContext[];
    public tableSpaceName(i: number): TableSpaceNameContext | null;
    public tableSpaceName(i?: number): TableSpaceNameContext[] | TableSpaceNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableSpaceNameContext);
        }

        return this.getRuleContext(i, TableSpaceNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableSpaceNameList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableSpaceNameList) {
             listener.enterTableSpaceNameList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableSpaceNameList) {
             listener.exitTableSpaceNameList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSpaceNameList) {
            return visitor.visitTableSpaceNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext[];
    public colId(i: number): ColIdContext | null;
    public colId(i?: number): ColIdContext[] | ColIdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColIdContext);
        }

        return this.getRuleContext(i, ColIdContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_nameList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNameList) {
             listener.enterNameList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNameList) {
             listener.exitNameList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNameList) {
            return visitor.visitNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_databaseNameCreate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDatabaseNameCreate) {
             listener.enterDatabaseNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDatabaseNameCreate) {
             listener.exitDatabaseNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseNameCreate) {
            return visitor.visitDatabaseNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_databaseName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDatabaseName) {
             listener.enterDatabaseName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDatabaseName) {
             listener.exitDatabaseName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseName) {
            return visitor.visitDatabaseName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyName(): AnyNameContext {
        return this.getRuleContext(0, AnyNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schemaName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchemaName) {
             listener.enterSchemaName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchemaName) {
             listener.exitSchemaName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaName) {
            return visitor.visitSchemaName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routineNameCreate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutineNameCreate) {
             listener.enterRoutineNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutineNameCreate) {
             listener.exitRoutineNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineNameCreate) {
            return visitor.visitRoutineNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routineName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutineName) {
             listener.enterRoutineName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutineName) {
             listener.exitRoutineName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineName) {
            return visitor.visitRoutineName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typeFunctionName(): TypeFunctionNameContext | null {
        return this.getRuleContext(0, TypeFunctionNameContext);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedureName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedureName) {
             listener.enterProcedureName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedureName) {
             listener.exitProcedureName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureName) {
            return visitor.visitProcedureName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typeFunctionName(): TypeFunctionNameContext | null {
        return this.getRuleContext(0, TypeFunctionNameContext);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedureNameCreate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedureNameCreate) {
             listener.enterProcedureNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedureNameCreate) {
             listener.exitProcedureNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureNameCreate) {
            return visitor.visitProcedureNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public optIndirection(): OptIndirectionContext | null {
        return this.getRuleContext(0, OptIndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_columnName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_columnNameCreate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnNameCreate) {
             listener.enterColumnNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnNameCreate) {
             listener.exitColumnNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typeFunctionName(): TypeFunctionNameContext | null {
        return this.getRuleContext(0, TypeFunctionNameContext);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_functionNameCreate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionNameCreate) {
             listener.enterFunctionNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionNameCreate) {
             listener.exitFunctionNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typeFunctionName(): TypeFunctionNameContext | null {
        return this.getRuleContext(0, TypeFunctionNameContext);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_functionName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringConstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anysconst(): AnysconstContext[];
    public anysconst(i: number): AnysconstContext | null;
    public anysconst(i?: number): AnysconstContext[] | AnysconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnysconstContext);
        }

        return this.getRuleContext(i, AnysconstContext);
    }
    public KW_UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UESCAPE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stringConst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStringConst) {
             listener.enterStringConst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStringConst) {
             listener.exitStringConst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStringConst) {
            return visitor.visitStringConst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnysconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.StringConstant, 0);
    }
    public UnicodeEscapeStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.UnicodeEscapeStringConstant, 0);
    }
    public BeginDollarStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.BeginDollarStringConstant, 0);
    }
    public EndDollarStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EndDollarStringConstant, 0);
    }
    public DollarText(): antlr.TerminalNode[];
    public DollarText(i: number): antlr.TerminalNode | null;
    public DollarText(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DollarText);
    	} else {
    		return this.getToken(PostgreSqlParser.DollarText, i);
    	}
    }
    public EscapeStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EscapeStringConstant, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_anysconst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnysconst) {
             listener.enterAnysconst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnysconst) {
             listener.exitAnysconst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnysconst) {
            return visitor.visitAnysconst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignedConstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Integral, 0)!;
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_signedConst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSignedConst) {
             listener.enterSignedConst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSignedConst) {
             listener.exitSignedConst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSignedConst) {
            return visitor.visitSignedConst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonReservedWord(): NonReservedWordContext | null {
        return this.getRuleContext(0, NonReservedWordContext);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_ROLE, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION_USER, 0);
    }
    public KW_PUBLIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLIC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_roleSpec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoleSpec) {
             listener.enterRoleSpec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoleSpec) {
             listener.exitRoleSpec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoleSpec) {
            return visitor.visitRoleSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleSpec(): RoleSpecContext[];
    public roleSpec(i: number): RoleSpecContext | null;
    public roleSpec(i?: number): RoleSpecContext[] | RoleSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleSpecContext);
        }

        return this.getRuleContext(i, RoleSpecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_roleList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoleList) {
             listener.enterRoleList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoleList) {
             listener.exitRoleList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoleList) {
            return visitor.visitRoleList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColIdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public colNameKeyword(): ColNameKeywordContext | null {
        return this.getRuleContext(0, ColNameKeywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colId;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColId) {
             listener.enterColId(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColId) {
             listener.exitColId(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColId) {
            return visitor.visitColId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public typeFuncNameKeyword(): TypeFuncNameKeywordContext | null {
        return this.getRuleContext(0, TypeFuncNameKeywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_typeFunctionName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTypeFunctionName) {
             listener.enterTypeFunctionName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTypeFunctionName) {
             listener.exitTypeFunctionName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTypeFunctionName) {
            return visitor.visitTypeFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedWordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public colNameKeyword(): ColNameKeywordContext | null {
        return this.getRuleContext(0, ColNameKeywordContext);
    }
    public typeFuncNameKeyword(): TypeFuncNameKeywordContext | null {
        return this.getRuleContext(0, TypeFuncNameKeywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_nonReservedWord;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNonReservedWord) {
             listener.enterNonReservedWord(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNonReservedWord) {
             listener.exitNonReservedWord(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonReservedWord) {
            return visitor.visitNonReservedWord(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColLabelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public colNameKeyword(): ColNameKeywordContext | null {
        return this.getRuleContext(0, ColNameKeywordContext);
    }
    public typeFuncNameKeyword(): TypeFuncNameKeywordContext | null {
        return this.getRuleContext(0, TypeFuncNameKeywordContext);
    }
    public reservedKeyword(): ReservedKeywordContext | null {
        return this.getRuleContext(0, ReservedKeywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colLabel;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColLabel) {
             listener.enterColLabel(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColLabel) {
             listener.exitColLabel(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColLabel) {
            return visitor.visitColLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Identifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Identifier, 0);
    }
    public KW_UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UESCAPE, 0);
    }
    public anysconst(): AnysconstContext | null {
        return this.getRuleContext(0, AnysconstContext);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public QuotedIdentifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.QuotedIdentifier, 0);
    }
    public UnicodeQuotedIdentifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.UnicodeQuotedIdentifier, 0);
    }
    public PLSQLVARIABLENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLSQLVARIABLENAME, 0);
    }
    public PLSQLIDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLSQLIDENTIFIER, 0);
    }
    public unreservedKeyword(): UnreservedKeywordContext | null {
        return this.getRuleContext(0, UnreservedKeywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_identifier;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnreservedKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABORT, 0);
    }
    public KW_ABSOLUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABSOLUTE, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACTION, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AFTER, 0);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public KW_ALSO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALSO, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public KW_ASSERTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSERTION, 0);
    }
    public KW_ASSIGNMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSIGNMENT, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AT, 0);
    }
    public KW_ATTACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ATTACH, 0);
    }
    public KW_ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ATTRIBUTE, 0);
    }
    public KW_BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BACKWARD, 0);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEFORE, 0);
    }
    public KW_BEGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEGIN, 0);
    }
    public KW_BUFFER_USAGE_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BUFFER_USAGE_LIMIT, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CACHE, 0);
    }
    public KW_CALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALL, 0);
    }
    public KW_CALLED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALLED, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADE, 0);
    }
    public KW_CASCADED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADED, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CATALOG, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAIN, 0);
    }
    public KW_CHARACTERISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHARACTERISTICS, 0);
    }
    public KW_CHECKPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECKPOINT, 0);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_CLOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLOSE, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLUSTER, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMENT, 0);
    }
    public KW_COMMENTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMENTS, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0);
    }
    public KW_COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMITTED, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFLICT, 0);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINTS, 0);
    }
    public KW_CONTENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTENT, 0);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTINUE, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_COPY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COPY, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COST, 0);
    }
    public KW_CSV(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CSV, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_CURSOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURSOR, 0);
    }
    public KW_CYCLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CYCLE, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DAY, 0);
    }
    public KW_DEALLOCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEALLOCATE, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULTS, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELIMITER, 0);
    }
    public KW_DELIMITERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELIMITERS, 0);
    }
    public KW_DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0);
    }
    public KW_DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DETACH, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_DISCARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISCARD, 0);
    }
    public KW_DOCUMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOCUMENT, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_EACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EACH, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCODING, 0);
    }
    public KW_ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCRYPTED, 0);
    }
    public KW_ENUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENUM, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ESCAPE, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDING, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUSIVE, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXPRESSION, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FILTER, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOLLOWING, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORCE, 0);
    }
    public KW_FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORWARD, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GLOBAL, 0);
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANTED, 0);
    }
    public KW_GROUPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPS, 0);
    }
    public KW_HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0);
    }
    public KW_HEADER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HEADER, 0);
    }
    public KW_HOLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOLD, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOUR, 0);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IF, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMUTABLE, 0);
    }
    public KW_IMPLICIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMPLICIT, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMPORT, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0);
    }
    public KW_INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCLUDING, 0);
    }
    public KW_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCREMENT, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEXES, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public KW_INHERITS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERITS, 0);
    }
    public KW_INLINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INLINE, 0);
    }
    public KW_INPUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INPUT, 0);
    }
    public KW_INSENSITIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSENSITIVE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSTEAD, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_KEY, 0);
    }
    public KW_LABEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LABEL, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public KW_LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAKPROOF, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_LISTEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LISTEN, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCKED, 0);
    }
    public KW_LOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOGGED, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0);
    }
    public KW_MATCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATCH, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAXVALUE, 0);
    }
    public KW_METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINUTE, 0);
    }
    public KW_MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINVALUE, 0);
    }
    public KW_MODE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MODE, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MONTH, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MOVE, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAME, 0);
    }
    public KW_NAMES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAMES, 0);
    }
    public KW_NEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEW, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_NFC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFC, 0);
    }
    public KW_NFD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFD, 0);
    }
    public KW_NFKC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKC, 0);
    }
    public KW_NFKD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKD, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_NORMALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NORMALIZED, 0);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public KW_NOTIFY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTIFY, 0);
    }
    public KW_NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOWAIT, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public KW_OFF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OFF, 0);
    }
    public KW_OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OIDS, 0);
    }
    public KW_OLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OLD, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDINALITY, 0);
    }
    public KW_OTHERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OTHERS, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVER, 0);
    }
    public KW_OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERRIDING, 0);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARALLEL, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTIAL, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public KW_PASSING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PASSING, 0);
    }
    public KW_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PASSWORD, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLANS, 0);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECEDING, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0);
    }
    public KW_PREPARED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARED, 0);
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRESERVE, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIOR, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIVILEGES, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public KW_PROCEDURES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURES, 0);
    }
    public KW_PROGRAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROGRAM, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_QUOTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_QUOTE, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RANGE, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_REASSIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REASSIGN, 0);
    }
    public KW_RECHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECHECK, 0);
    }
    public KW_RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECURSIVE, 0);
    }
    public KW_REF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REF, 0);
    }
    public KW_REFERENCING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCING, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0);
    }
    public KW_REINDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REINDEX, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELATIVE, 0);
    }
    public KW_RELEASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELEASE, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0);
    }
    public KW_REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICA, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTART, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNS, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLUP, 0);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public KW_ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINES, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SAVEPOINT, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SCROLL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCROLL, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECOND, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public KW_SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERIALIZABLE, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETS, 0);
    }
    public KW_SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SHARE, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SHOW, 0);
    }
    public KW_SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMPLE, 0);
    }
    public KW_SKIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP, 0);
    }
    public KW_SKIP_LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP_LOCKED, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SNAPSHOT, 0);
    }
    public KW_SQL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQL, 0);
    }
    public KW_STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STABLE, 0);
    }
    public KW_STANDALONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STANDALONE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_START, 0);
    }
    public KW_STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATEMENT, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_STDIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDIN, 0);
    }
    public KW_STDOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDOUT, 0);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORED, 0);
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public KW_STRIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRIP, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_SUPPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUPPORT, 0);
    }
    public KW_SYSID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSID, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIES, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRUSTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUSTED, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_TYPES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPES, 0);
    }
    public KW_UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UESCAPE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNCOMMITTED, 0);
    }
    public KW_UNENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNENCRYPTED, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNKNOWN, 0);
    }
    public KW_UNLISTEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLISTEN, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public KW_UNTIL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNTIL, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_VACUUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VACUUM, 0);
    }
    public KW_VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALID, 0);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATE, 0);
    }
    public KW_VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATOR, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public KW_VARYING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARYING, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEWS, 0);
    }
    public KW_VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VOLATILE, 0);
    }
    public KW_WHITESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHITESPACE, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHIN, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WORK, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRITE, 0);
    }
    public KW_XML(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XML, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YEAR, 0);
    }
    public KW_YES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YES, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_ALIAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALIAS, 0);
    }
    public KW_ASSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSERT, 0);
    }
    public KW_CONSTANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTANT, 0);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEBUG, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_DIAGNOSTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DIAGNOSTICS, 0);
    }
    public KW_DUMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DUMP, 0);
    }
    public KW_ELSIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ELSIF, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ERROR, 0);
    }
    public KW_EXCEPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPTION, 0);
    }
    public KW_EXIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXIT, 0);
    }
    public KW_GET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GET, 0);
    }
    public KW_INFO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INFO, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public KW_LOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOG, 0);
    }
    public KW_NOTICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTICE, 0);
    }
    public KW_OPEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPEN, 0);
    }
    public KW_PUBLIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLIC, 0);
    }
    public KW_PERFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PERFORM, 0);
    }
    public KW_PRINT_STRICT_PARAMS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRINT_STRICT_PARAMS, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_QUERY, 0);
    }
    public KW_RAISE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RAISE, 0);
    }
    public KW_RETURN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURN, 0);
    }
    public KW_REVERSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVERSE, 0);
    }
    public KW_ROWTYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWTYPE, 0);
    }
    public KW_SLICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SLICE, 0);
    }
    public KW_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQLSTATE, 0);
    }
    public KW_STACKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STACKED, 0);
    }
    public KW_USE_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USE_COLUMN, 0);
    }
    public KW_USE_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USE_VARIABLE, 0);
    }
    public KW_VARIABLE_CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIABLE_CONFLICT, 0);
    }
    public KW_WARNING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WARNING, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUTER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_unreservedKeyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUnreservedKeyword) {
             listener.enterUnreservedKeyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUnreservedKeyword) {
             listener.exitUnreservedKeyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnreservedKeyword) {
            return visitor.visitUnreservedKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColNameKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BIGINT, 0);
    }
    public bit(): BitContext | null {
        return this.getRuleContext(0, BitContext);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOOLEAN, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAR, 0);
    }
    public character(): CharacterContext | null {
        return this.getRuleContext(0, CharacterContext);
    }
    public KW_COALESCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COALESCE, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DECIMAL, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTRACT, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FLOAT, 0);
    }
    public KW_GREATEST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GREATEST, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPING, 0);
    }
    public KW_INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INOUT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public KW_LEAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAST, 0);
    }
    public KW_NATIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NATIONAL, 0);
    }
    public KW_NCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NCHAR, 0);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public KW_NORMALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NORMALIZE, 0);
    }
    public KW_NULLIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLIF, 0);
    }
    public numeric(): NumericContext | null {
        return this.getRuleContext(0, NumericContext);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUT, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAY, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POSITION, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECISION, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REAL, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETOF, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SMALLINT, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSTRING, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TREAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TREAT, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIM, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARCHAR, 0);
    }
    public KW_XMLATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLATTRIBUTES, 0);
    }
    public KW_XMLCONCAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLCONCAT, 0);
    }
    public KW_XMLELEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLELEMENT, 0);
    }
    public KW_XMLEXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLEXISTS, 0);
    }
    public KW_XMLFOREST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLFOREST, 0);
    }
    public KW_XMLNAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLNAMESPACES, 0);
    }
    public KW_XMLPARSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPARSE, 0);
    }
    public KW_XMLPI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPI, 0);
    }
    public KW_XMLROOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLROOT, 0);
    }
    public KW_XMLSERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLSERIALIZE, 0);
    }
    public KW_XMLTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLTABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colNameKeyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColNameKeyword) {
             listener.enterColNameKeyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColNameKeyword) {
             listener.exitColNameKeyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColNameKeyword) {
            return visitor.visitColNameKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeFuncNameKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BINARY, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CROSS, 0);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public KW_FREEZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FREEZE, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ILIKE, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INNER, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public KW_ISNULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISNULL, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_JOIN, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEFT, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NATURAL, 0);
    }
    public KW_NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTNULL, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUTER, 0);
    }
    public KW_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAPS, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RIGHT, 0);
    }
    public KW_SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMILAR, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_typeFuncNameKeyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTypeFuncNameKeyword) {
             listener.enterTypeFuncNameKeyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTypeFuncNameKeyword) {
             listener.exitTypeFuncNameKeyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTypeFuncNameKeyword) {
            return visitor.visitTypeFuncNameKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReservedKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_ANALYSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYSE, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYZE, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANY, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASC, 0);
    }
    public KW_ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASYMMETRIC, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOTH, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASE, 0);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public KW_COLLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATE, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public KW_CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_CATALOG, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_ROLE, 0);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIME, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DESC, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ELSE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_END, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPT, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public KW_HAVING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HAVING, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INITIALLY, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERSECT, 0);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LATERAL, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEADING, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public KW_LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIME, 0);
    }
    public KW_LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIMESTAMP, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OFFSET, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OR, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLACING, 0);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIMARY, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public KW_RETURNING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNING, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION_USER, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SOME, 0);
    }
    public KW_SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYMMETRIC, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public KW_THEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_THEN, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRAILING, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNION, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public KW_VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIADIC, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WINDOW, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reservedKeyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReservedKeyword) {
             listener.enterReservedKeyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReservedKeyword) {
             listener.exitReservedKeyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReservedKeyword) {
            return visitor.visitReservedKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PlBlockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BEGIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BEGIN, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public procStmt(): ProcStmtContext[];
    public procStmt(i: number): ProcStmtContext | null;
    public procStmt(i?: number): ProcStmtContext[] | ProcStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcStmtContext);
        }

        return this.getRuleContext(i, ProcStmtContext);
    }
    public exceptionSect(): ExceptionSectContext | null {
        return this.getRuleContext(0, ExceptionSectContext);
    }
    public anyIdentifier(): AnyIdentifierContext | null {
        return this.getRuleContext(0, AnyIdentifierContext);
    }
    public labelDecl(): LabelDeclContext[];
    public labelDecl(i: number): LabelDeclContext | null;
    public labelDecl(i?: number): LabelDeclContext[] | LabelDeclContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LabelDeclContext);
        }

        return this.getRuleContext(i, LabelDeclContext);
    }
    public KW_DECLARE(): antlr.TerminalNode[];
    public KW_DECLARE(i: number): antlr.TerminalNode | null;
    public KW_DECLARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_DECLARE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_DECLARE, i);
    	}
    }
    public declStatement(): DeclStatementContext[];
    public declStatement(i: number): DeclStatementContext | null;
    public declStatement(i?: number): DeclStatementContext[] | DeclStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DeclStatementContext);
        }

        return this.getRuleContext(i, DeclStatementContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_plBlock;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPlBlock) {
             listener.enterPlBlock(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPlBlock) {
             listener.exitPlBlock(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPlBlock) {
            return visitor.visitPlBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelDeclContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LESS_LESS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.LESS_LESS, 0)!;
    }
    public anyIdentifier(): AnyIdentifierContext {
        return this.getRuleContext(0, AnyIdentifierContext)!;
    }
    public GREATER_GREATER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.GREATER_GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_labelDecl;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLabelDecl) {
             listener.enterLabelDecl(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLabelDecl) {
             listener.exitLabelDecl(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLabelDecl) {
            return visitor.visitLabelDecl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeclStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyIdentifier(): AnyIdentifierContext {
        return this.getRuleContext(0, AnyIdentifierContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_ALIAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALIAS, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_CURSOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURSOR, 0);
    }
    public selectStmt(): SelectStmtContext | null {
        return this.getRuleContext(0, SelectStmtContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public KW_CONSTANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTANT, 0);
    }
    public collateClause(): CollateClauseContext | null {
        return this.getRuleContext(0, CollateClauseContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public sqlExpression(): SqlExpressionContext | null {
        return this.getRuleContext(0, SqlExpressionContext);
    }
    public KW_SCROLL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCROLL, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public declCursorArg(): DeclCursorArgContext[];
    public declCursorArg(i: number): DeclCursorArgContext | null;
    public declCursorArg(i?: number): DeclCursorArgContext[] | DeclCursorArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DeclCursorArgContext);
        }

        return this.getRuleContext(i, DeclCursorArgContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public assignOperator(): AssignOperatorContext | null {
        return this.getRuleContext(0, AssignOperatorContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_declStatement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeclStatement) {
             listener.enterDeclStatement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeclStatement) {
             listener.exitDeclStatement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclStatement) {
            return visitor.visitDeclStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeclCursorArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyIdentifier(): AnyIdentifierContext {
        return this.getRuleContext(0, AnyIdentifierContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_declCursorArg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeclCursorArg) {
             listener.enterDeclCursorArg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeclCursorArg) {
             listener.exitDeclCursorArg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclCursorArg) {
            return visitor.visitDeclCursorArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public COLON_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_assignOperator;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAssignOperator) {
             listener.enterAssignOperator(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAssignOperator) {
             listener.exitAssignOperator(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignOperator) {
            return visitor.visitAssignOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public plBlock(): PlBlockContext | null {
        return this.getRuleContext(0, PlBlockContext);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public stmtReturn(): StmtReturnContext | null {
        return this.getRuleContext(0, StmtReturnContext);
    }
    public stmtRaise(): StmtRaiseContext | null {
        return this.getRuleContext(0, StmtRaiseContext);
    }
    public stmtAssign(): StmtAssignContext | null {
        return this.getRuleContext(0, StmtAssignContext);
    }
    public stmtIf(): StmtIfContext | null {
        return this.getRuleContext(0, StmtIfContext);
    }
    public stmtCase(): StmtCaseContext | null {
        return this.getRuleContext(0, StmtCaseContext);
    }
    public stmtLoopWhileFor(): StmtLoopWhileForContext | null {
        return this.getRuleContext(0, StmtLoopWhileForContext);
    }
    public stmtForeach(): StmtForeachContext | null {
        return this.getRuleContext(0, StmtForeachContext);
    }
    public stmtExit(): StmtExitContext | null {
        return this.getRuleContext(0, StmtExitContext);
    }
    public stmtAssert(): StmtAssertContext | null {
        return this.getRuleContext(0, StmtAssertContext);
    }
    public stmtExecsql(): StmtExecsqlContext | null {
        return this.getRuleContext(0, StmtExecsqlContext);
    }
    public stmtDynexecute(): StmtDynexecuteContext | null {
        return this.getRuleContext(0, StmtDynexecuteContext);
    }
    public stmtPerform(): StmtPerformContext | null {
        return this.getRuleContext(0, StmtPerformContext);
    }
    public stmtCall(): StmtCallContext | null {
        return this.getRuleContext(0, StmtCallContext);
    }
    public stmtGetdiag(): StmtGetdiagContext | null {
        return this.getRuleContext(0, StmtGetdiagContext);
    }
    public stmtOpen(): StmtOpenContext | null {
        return this.getRuleContext(0, StmtOpenContext);
    }
    public stmtFetch(): StmtFetchContext | null {
        return this.getRuleContext(0, StmtFetchContext);
    }
    public stmtMove(): StmtMoveContext | null {
        return this.getRuleContext(0, StmtMoveContext);
    }
    public stmtClose(): StmtCloseContext | null {
        return this.getRuleContext(0, StmtCloseContext);
    }
    public stmtNull(): StmtNullContext | null {
        return this.getRuleContext(0, StmtNullContext);
    }
    public stmtCommitOrRollback(): StmtCommitOrRollbackContext | null {
        return this.getRuleContext(0, StmtCommitOrRollbackContext);
    }
    public stmtSet(): StmtSetContext | null {
        return this.getRuleContext(0, StmtSetContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcStmt) {
             listener.enterProcStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcStmt) {
             listener.exitProcStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcStmt) {
            return visitor.visitProcStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtPerformContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PERFORM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PERFORM, 0)!;
    }
    public sqlExpression(): SqlExpressionContext {
        return this.getRuleContext(0, SqlExpressionContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtPerform;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtPerform) {
             listener.enterStmtPerform(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtPerform) {
             listener.exitStmtPerform(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtPerform) {
            return visitor.visitStmtPerform(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALL, 0);
    }
    public anyIdentifier(): AnyIdentifierContext {
        return this.getRuleContext(0, AnyIdentifierContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtCall;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtCall) {
             listener.enterStmtCall(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtCall) {
             listener.exitStmtCall(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtCall) {
            return visitor.visitStmtCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtAssignContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignVar(): AssignVarContext {
        return this.getRuleContext(0, AssignVarContext)!;
    }
    public assignOperator(): AssignOperatorContext {
        return this.getRuleContext(0, AssignOperatorContext)!;
    }
    public sqlExpression(): SqlExpressionContext {
        return this.getRuleContext(0, SqlExpressionContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtAssign;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtAssign) {
             listener.enterStmtAssign(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtAssign) {
             listener.exitStmtAssign(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtAssign) {
            return visitor.visitStmtAssign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtGetdiagContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GET, 0)!;
    }
    public KW_DIAGNOSTICS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DIAGNOSTICS, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public getdiagListItem(): GetdiagListItemContext[];
    public getdiagListItem(i: number): GetdiagListItemContext | null;
    public getdiagListItem(i?: number): GetdiagListItemContext[] | GetdiagListItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GetdiagListItemContext);
        }

        return this.getRuleContext(i, GetdiagListItemContext);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_STACKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STACKED, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtGetdiag;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtGetdiag) {
             listener.enterStmtGetdiag(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtGetdiag) {
             listener.exitStmtGetdiag(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtGetdiag) {
            return visitor.visitStmtGetdiag(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetdiagListItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignVar(): AssignVarContext {
        return this.getRuleContext(0, AssignVarContext)!;
    }
    public assignOperator(): AssignOperatorContext {
        return this.getRuleContext(0, AssignOperatorContext)!;
    }
    public colId(): ColIdContext {
        return this.getRuleContext(0, ColIdContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_getdiagListItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGetdiagListItem) {
             listener.enterGetdiagListItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGetdiagListItem) {
             listener.exitGetdiagListItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGetdiagListItem) {
            return visitor.visitGetdiagListItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignVarContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode[];
    public OPEN_BRACKET(i: number): antlr.TerminalNode | null;
    public OPEN_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_BRACKET, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public CLOSE_BRACKET(): antlr.TerminalNode[];
    public CLOSE_BRACKET(i: number): antlr.TerminalNode | null;
    public CLOSE_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_BRACKET, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_assignVar;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAssignVar) {
             listener.enterAssignVar(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAssignVar) {
             listener.exitAssignVar(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignVar) {
            return visitor.visitAssignVar(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtIfContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode[];
    public KW_IF(i: number): antlr.TerminalNode | null;
    public KW_IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_IF);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_IF, i);
    	}
    }
    public sqlExpression(): SqlExpressionContext {
        return this.getRuleContext(0, SqlExpressionContext)!;
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_THEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_THEN, i);
    	}
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public procStmt(): ProcStmtContext[];
    public procStmt(i: number): ProcStmtContext | null;
    public procStmt(i?: number): ProcStmtContext[] | ProcStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcStmtContext);
        }

        return this.getRuleContext(i, ProcStmtContext);
    }
    public stmtElse(): StmtElseContext | null {
        return this.getRuleContext(0, StmtElseContext);
    }
    public KW_ELSIF(): antlr.TerminalNode[];
    public KW_ELSIF(i: number): antlr.TerminalNode | null;
    public KW_ELSIF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ELSIF);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ELSIF, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtIf;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtIf) {
             listener.enterStmtIf(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtIf) {
             listener.exitStmtIf(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtIf) {
            return visitor.visitStmtIf(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtElseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ELSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ELSE, 0)!;
    }
    public procStmt(): ProcStmtContext[];
    public procStmt(i: number): ProcStmtContext | null;
    public procStmt(i?: number): ProcStmtContext[] | ProcStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcStmtContext);
        }

        return this.getRuleContext(i, ProcStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtElse;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtElse) {
             listener.enterStmtElse(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtElse) {
             listener.exitStmtElse(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtElse) {
            return visitor.visitStmtElse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtCaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASE(): antlr.TerminalNode[];
    public KW_CASE(i: number): antlr.TerminalNode | null;
    public KW_CASE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_CASE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_CASE, i);
    	}
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public sqlExpression(): SqlExpressionContext | null {
        return this.getRuleContext(0, SqlExpressionContext);
    }
    public KW_WHEN(): antlr.TerminalNode[];
    public KW_WHEN(i: number): antlr.TerminalNode | null;
    public KW_WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_WHEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_WHEN, i);
    	}
    }
    public exprList(): ExprListContext[];
    public exprList(i: number): ExprListContext | null;
    public exprList(i?: number): ExprListContext[] | ExprListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprListContext);
        }

        return this.getRuleContext(i, ExprListContext);
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_THEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_THEN, i);
    	}
    }
    public stmtElse(): StmtElseContext | null {
        return this.getRuleContext(0, StmtElseContext);
    }
    public procStmt(): ProcStmtContext[];
    public procStmt(i: number): ProcStmtContext | null;
    public procStmt(i?: number): ProcStmtContext[] | ProcStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcStmtContext);
        }

        return this.getRuleContext(i, ProcStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtCase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtCase) {
             listener.enterStmtCase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtCase) {
             listener.exitStmtCase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtCase) {
            return visitor.visitStmtCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtLoopWhileForContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public loopBody(): LoopBodyContext {
        return this.getRuleContext(0, LoopBodyContext)!;
    }
    public labelDecl(): LabelDeclContext | null {
        return this.getRuleContext(0, LabelDeclContext);
    }
    public KW_WHILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHILE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public forControl(): ForControlContext | null {
        return this.getRuleContext(0, ForControlContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtLoopWhileFor;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtLoopWhileFor) {
             listener.enterStmtLoopWhileFor(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtLoopWhileFor) {
             listener.exitStmtLoopWhileFor(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtLoopWhileFor) {
            return visitor.visitStmtLoopWhileFor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForControlContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyNameList(): AnyNameListContext {
        return this.getRuleContext(0, AnyNameListContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public selectStmt(): SelectStmtContext | null {
        return this.getRuleContext(0, SelectStmtContext);
    }
    public explainStmt(): ExplainStmtContext | null {
        return this.getRuleContext(0, ExplainStmtContext);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public DOT_DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT_DOT, 0);
    }
    public executeParamClause(): ExecuteParamClauseContext | null {
        return this.getRuleContext(0, ExecuteParamClauseContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public KW_REVERSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVERSE, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_forControl;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterForControl) {
             listener.enterForControl(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitForControl) {
             listener.exitForControl(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitForControl) {
            return visitor.visitForControl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtForeachContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOREACH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREACH, 0)!;
    }
    public anyNameList(): AnyNameListContext {
        return this.getRuleContext(0, AnyNameListContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public KW_ARRAY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public loopBody(): LoopBodyContext {
        return this.getRuleContext(0, LoopBodyContext)!;
    }
    public labelDecl(): LabelDeclContext | null {
        return this.getRuleContext(0, LabelDeclContext);
    }
    public KW_SLICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SLICE, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtForeach;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtForeach) {
             listener.enterStmtForeach(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtForeach) {
             listener.exitStmtForeach(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtForeach) {
            return visitor.visitStmtForeach(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtExitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_EXIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXIT, 0);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTINUE, 0);
    }
    public anyIdentifier(): AnyIdentifierContext | null {
        return this.getRuleContext(0, AnyIdentifierContext);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0);
    }
    public sqlExpression(): SqlExpressionContext | null {
        return this.getRuleContext(0, SqlExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtExit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtExit) {
             listener.enterStmtExit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtExit) {
             listener.exitStmtExit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtExit) {
            return visitor.visitStmtExit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtReturnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RETURN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RETURN, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public sqlExpression(): SqlExpressionContext | null {
        return this.getRuleContext(0, SqlExpressionContext);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_QUERY, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public selectStmt(): SelectStmtContext | null {
        return this.getRuleContext(0, SelectStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtReturn;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtReturn) {
             listener.enterStmtReturn(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtReturn) {
             listener.exitStmtReturn(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtReturn) {
            return visitor.visitStmtReturn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtRaiseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RAISE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RAISE, 0)!;
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEBUG, 0);
    }
    public KW_LOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOG, 0);
    }
    public KW_INFO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INFO, 0);
    }
    public KW_NOTICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTICE, 0);
    }
    public KW_WARNING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WARNING, 0);
    }
    public KW_EXCEPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPTION, 0);
    }
    public KW_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQLSTATE, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public optRaiseUsingElem(): OptRaiseUsingElemContext[];
    public optRaiseUsingElem(i: number): OptRaiseUsingElemContext | null;
    public optRaiseUsingElem(i?: number): OptRaiseUsingElemContext[] | OptRaiseUsingElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OptRaiseUsingElemContext);
        }

        return this.getRuleContext(i, OptRaiseUsingElemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtRaise;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtRaise) {
             listener.enterStmtRaise(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtRaise) {
             listener.exitStmtRaise(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtRaise) {
            return visitor.visitStmtRaise(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptRaiseUsingElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optRaiseUsingElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptRaiseUsingElem) {
             listener.enterOptRaiseUsingElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptRaiseUsingElem) {
             listener.exitOptRaiseUsingElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptRaiseUsingElem) {
            return visitor.visitOptRaiseUsingElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtAssertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ASSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ASSERT, 0)!;
    }
    public sqlExpression(): SqlExpressionContext[];
    public sqlExpression(i: number): SqlExpressionContext | null;
    public sqlExpression(i?: number): SqlExpressionContext[] | SqlExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SqlExpressionContext);
        }

        return this.getRuleContext(i, SqlExpressionContext);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtAssert;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtAssert) {
             listener.enterStmtAssert(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtAssert) {
             listener.exitStmtAssert(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtAssert) {
            return visitor.visitStmtAssert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoopBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOOP(): antlr.TerminalNode[];
    public KW_LOOP(i: number): antlr.TerminalNode | null;
    public KW_LOOP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_LOOP);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_LOOP, i);
    	}
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public procStmt(): ProcStmtContext[];
    public procStmt(i: number): ProcStmtContext | null;
    public procStmt(i?: number): ProcStmtContext[] | ProcStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcStmtContext);
        }

        return this.getRuleContext(i, ProcStmtContext);
    }
    public anyIdentifier(): AnyIdentifierContext | null {
        return this.getRuleContext(0, AnyIdentifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_loopBody;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLoopBody) {
             listener.enterLoopBody(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLoopBody) {
             listener.exitLoopBody(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoopBody) {
            return visitor.visitLoopBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtExecsqlContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stmt(): StmtContext {
        return this.getRuleContext(0, StmtContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public optExecuteInto(): OptExecuteIntoContext | null {
        return this.getRuleContext(0, OptExecuteIntoContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtExecsql;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtExecsql) {
             listener.enterStmtExecsql(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtExecsql) {
             listener.exitStmtExecsql(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtExecsql) {
            return visitor.visitStmtExecsql(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtDynexecuteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public optExecuteInto(): OptExecuteIntoContext | null {
        return this.getRuleContext(0, OptExecuteIntoContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtDynexecute;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtDynexecute) {
             listener.enterStmtDynexecute(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtDynexecute) {
             listener.exitStmtDynexecute(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtDynexecute) {
            return visitor.visitStmtDynexecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptExecuteIntoContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(0, ExprListContext)!;
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optExecuteInto;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptExecuteInto) {
             listener.enterOptExecuteInto(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptExecuteInto) {
             listener.exitOptExecuteInto(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptExecuteInto) {
            return visitor.visitOptExecuteInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtOpenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPEN, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public cursorVariable(): CursorVariableContext | null {
        return this.getRuleContext(0, CursorVariableContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public selectStmt(): SelectStmtContext | null {
        return this.getRuleContext(0, SelectStmtContext);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public sqlExpression(): SqlExpressionContext | null {
        return this.getRuleContext(0, SqlExpressionContext);
    }
    public KW_SCROLL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCROLL, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(0, ExprListContext);
    }
    public optOpenBoundListItem(): OptOpenBoundListItemContext[];
    public optOpenBoundListItem(i: number): OptOpenBoundListItemContext | null;
    public optOpenBoundListItem(i?: number): OptOpenBoundListItemContext[] | OptOpenBoundListItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OptOpenBoundListItemContext);
        }

        return this.getRuleContext(i, OptOpenBoundListItemContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtOpen;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtOpen) {
             listener.enterStmtOpen(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtOpen) {
             listener.exitStmtOpen(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtOpen) {
            return visitor.visitStmtOpen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptOpenBoundListItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public COLON_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optOpenBoundListItem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptOpenBoundListItem) {
             listener.enterOptOpenBoundListItem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptOpenBoundListItem) {
             listener.exitOptOpenBoundListItem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptOpenBoundListItem) {
            return visitor.visitOptOpenBoundListItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtFetchContext extends antlr.ParserRuleContext {
    public _direction?: OptFetchFirectionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FETCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0)!;
    }
    public cursorVariable(): CursorVariableContext {
        return this.getRuleContext(0, CursorVariableContext)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(0, ExprListContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public fromIn(): FromInContext | null {
        return this.getRuleContext(0, FromInContext);
    }
    public optFetchFirection(): OptFetchFirectionContext | null {
        return this.getRuleContext(0, OptFetchFirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtFetch;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtFetch) {
             listener.enterStmtFetch(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtFetch) {
             listener.exitStmtFetch(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtFetch) {
            return visitor.visitStmtFetch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptFetchFirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIOR, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_ABSOLUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABSOLUTE, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELATIVE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORWARD, 0);
    }
    public KW_BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BACKWARD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optFetchFirection;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptFetchFirection) {
             listener.enterOptFetchFirection(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptFetchFirection) {
             listener.exitOptFetchFirection(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptFetchFirection) {
            return visitor.visitOptFetchFirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtMoveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MOVE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MOVE, 0)!;
    }
    public cursorVariable(): CursorVariableContext {
        return this.getRuleContext(0, CursorVariableContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public optFetchFirection(): OptFetchFirectionContext | null {
        return this.getRuleContext(0, OptFetchFirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtMove;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtMove) {
             listener.enterStmtMove(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtMove) {
             listener.exitStmtMove(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtMove) {
            return visitor.visitStmtMove(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MERGE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MERGE, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public dataSource(): DataSourceContext {
        return this.getRuleContext(0, DataSourceContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public mergeWhenClause(): MergeWhenClauseContext[];
    public mergeWhenClause(i: number): MergeWhenClauseContext | null;
    public mergeWhenClause(i?: number): MergeWhenClauseContext[] | MergeWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MergeWhenClauseContext);
        }

        return this.getRuleContext(i, MergeWhenClauseContext);
    }
    public returningClause(): ReturningClauseContext | null {
        return this.getRuleContext(0, ReturningClauseContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_mergeStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMergeStmt) {
             listener.enterMergeStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMergeStmt) {
             listener.exitMergeStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMergeStmt) {
            return visitor.visitMergeStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public selectNoParens(): SelectNoParensContext | null {
        return this.getRuleContext(0, SelectNoParensContext);
    }
    public valuesClause(): ValuesClauseContext | null {
        return this.getRuleContext(0, ValuesClauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_dataSource;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDataSource) {
             listener.enterDataSource(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDataSource) {
             listener.exitDataSource(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDataSource) {
            return visitor.visitDataSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeWhenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_THEN, 0)!;
    }
    public mergeUpdate(): MergeUpdateContext | null {
        return this.getRuleContext(0, MergeUpdateContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public mergeInsert(): MergeInsertContext | null {
        return this.getRuleContext(0, MergeInsertContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_mergeWhenClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMergeWhenClause) {
             listener.enterMergeWhenClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMergeWhenClause) {
             listener.exitMergeWhenClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMergeWhenClause) {
            return visitor.visitMergeWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeInsertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0)!;
    }
    public defaultValuesOrValues(): DefaultValuesOrValuesContext {
        return this.getRuleContext(0, DefaultValuesOrValuesContext)!;
    }
    public optColumnList(): OptColumnListContext | null {
        return this.getRuleContext(0, OptColumnListContext);
    }
    public KW_OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERRIDING, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_mergeInsert;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMergeInsert) {
             listener.enterMergeInsert(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMergeInsert) {
             listener.exitMergeInsert(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMergeInsert) {
            return visitor.visitMergeInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeUpdateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public EQUAL(): antlr.TerminalNode[];
    public EQUAL(i: number): antlr.TerminalNode | null;
    public EQUAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.EQUAL);
    	} else {
    		return this.getToken(PostgreSqlParser.EQUAL, i);
    	}
    }
    public exprofdefault(): ExprofdefaultContext[];
    public exprofdefault(i: number): ExprofdefaultContext | null;
    public exprofdefault(i?: number): ExprofdefaultContext[] | ExprofdefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprofdefaultContext);
        }

        return this.getRuleContext(i, ExprofdefaultContext);
    }
    public optColumnList(): OptColumnListContext[];
    public optColumnList(i: number): OptColumnListContext | null;
    public optColumnList(i?: number): OptColumnListContext[] | OptColumnListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OptColumnListContext);
        }

        return this.getRuleContext(i, OptColumnListContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_mergeUpdate;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMergeUpdate) {
             listener.enterMergeUpdate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMergeUpdate) {
             listener.exitMergeUpdate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMergeUpdate) {
            return visitor.visitMergeUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultValuesOrValuesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public exprofdefault(): ExprofdefaultContext[];
    public exprofdefault(i: number): ExprofdefaultContext | null;
    public exprofdefault(i?: number): ExprofdefaultContext[] | ExprofdefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprofdefaultContext);
        }

        return this.getRuleContext(i, ExprofdefaultContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defaultValuesOrValues;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefaultValuesOrValues) {
             listener.enterDefaultValuesOrValues(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefaultValuesOrValues) {
             listener.exitDefaultValuesOrValues(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultValuesOrValues) {
            return visitor.visitDefaultValuesOrValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprofdefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sortBy(): SortByContext | null {
        return this.getRuleContext(0, SortByContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exprofdefault;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExprofdefault) {
             listener.enterExprofdefault(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExprofdefault) {
             listener.exitExprofdefault(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExprofdefault) {
            return visitor.visitExprofdefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtCloseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLOSE, 0)!;
    }
    public cursorVariable(): CursorVariableContext {
        return this.getRuleContext(0, CursorVariableContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtClose;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtClose) {
             listener.enterStmtClose(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtClose) {
             listener.exitStmtClose(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtClose) {
            return visitor.visitStmtClose(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtNullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NULL, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtNull;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtNull) {
             listener.enterStmtNull(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtNull) {
             listener.exitStmtNull(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtNull) {
            return visitor.visitStmtNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtCommitOrRollbackContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLBACK, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAIN, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtCommitOrRollback;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtCommitOrRollback) {
             listener.enterStmtCommitOrRollback(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtCommitOrRollback) {
             listener.exitStmtCommitOrRollback(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtCommitOrRollback) {
            return visitor.visitStmtCommitOrRollback(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public anyName(): AnyNameContext | null {
        return this.getRuleContext(0, AnyNameContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmtSet;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmtSet) {
             listener.enterStmtSet(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmtSet) {
             listener.exitStmtSet(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmtSet) {
            return visitor.visitStmtSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CursorVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_cursorVariable;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCursorVariable) {
             listener.enterCursorVariable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCursorVariable) {
             listener.exitCursorVariable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCursorVariable) {
            return visitor.visitCursorVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExceptionSectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXCEPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXCEPTION, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode[];
    public KW_WHEN(i: number): antlr.TerminalNode | null;
    public KW_WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_WHEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_WHEN, i);
    	}
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_THEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_THEN, i);
    	}
    }
    public procCondition(): ProcConditionContext[];
    public procCondition(i: number): ProcConditionContext | null;
    public procCondition(i?: number): ProcConditionContext[] | ProcConditionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcConditionContext);
        }

        return this.getRuleContext(i, ProcConditionContext);
    }
    public procStmt(): ProcStmtContext[];
    public procStmt(i: number): ProcStmtContext | null;
    public procStmt(i?: number): ProcStmtContext[] | ProcStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProcStmtContext);
        }

        return this.getRuleContext(i, ProcStmtContext);
    }
    public KW_OR(): antlr.TerminalNode[];
    public KW_OR(i: number): antlr.TerminalNode | null;
    public KW_OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_OR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exceptionSect;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExceptionSect) {
             listener.enterExceptionSect(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExceptionSect) {
             listener.exitExceptionSect(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExceptionSect) {
            return visitor.visitExceptionSect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyIdentifier(): AnyIdentifierContext | null {
        return this.getRuleContext(0, AnyIdentifierContext);
    }
    public KW_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQLSTATE, 0);
    }
    public stringConst(): StringConstContext | null {
        return this.getRuleContext(0, StringConstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procCondition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcCondition) {
             listener.enterProcCondition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcCondition) {
             listener.exitProcCondition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcCondition) {
            return visitor.visitProcCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnyIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colId(): ColIdContext | null {
        return this.getRuleContext(0, ColIdContext);
    }
    public unreservedKeyword(): UnreservedKeywordContext | null {
        return this.getRuleContext(0, UnreservedKeywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_anyIdentifier;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnyIdentifier) {
             listener.enterAnyIdentifier(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnyIdentifier) {
             listener.exitAnyIdentifier(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnyIdentifier) {
            return visitor.visitAnyIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public targetList(): TargetListContext | null {
        return this.getRuleContext(0, TargetListContext);
    }
    public intoClause(): IntoClauseContext | null {
        return this.getRuleContext(0, IntoClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupClause(): GroupClauseContext | null {
        return this.getRuleContext(0, GroupClauseContext);
    }
    public KW_HAVING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HAVING, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sqlExpression;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSqlExpression) {
             listener.enterSqlExpression(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSqlExpression) {
             listener.exitSqlExpression(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSqlExpression) {
            return visitor.visitSqlExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
