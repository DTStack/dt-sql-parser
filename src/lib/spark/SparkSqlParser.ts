// Generated from dt-sql-parser/src/grammar/spark/SparkSqlParser.g4 by ANTLR 4.13.1

// @ts-nocheck

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { SparkSqlParserListener } from "./SparkSqlParserListener.js";
import { SparkSqlParserVisitor } from "./SparkSqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


import { SQLParserBase } from '../SQLParserBase';


export class SparkSqlParser extends SQLParserBase {
    public static readonly SEMICOLON = 1;
    public static readonly LEFT_PAREN = 2;
    public static readonly RIGHT_PAREN = 3;
    public static readonly COMMA = 4;
    public static readonly DOT = 5;
    public static readonly LEFT_BRACKET = 6;
    public static readonly RIGHT_BRACKET = 7;
    public static readonly KW_ADD = 8;
    public static readonly KW_AFTER = 9;
    public static readonly KW_ALL = 10;
    public static readonly KW_ALTER = 11;
    public static readonly KW_ALWAYS = 12;
    public static readonly KW_ANALYZE = 13;
    public static readonly KW_AND = 14;
    public static readonly KW_ANTI = 15;
    public static readonly KW_ANY = 16;
    public static readonly KW_ANY_VALUE = 17;
    public static readonly KW_ARCHIVE = 18;
    public static readonly KW_ARRAY = 19;
    public static readonly KW_AS = 20;
    public static readonly KW_ASC = 21;
    public static readonly KW_AT = 22;
    public static readonly KW_AUTHORIZATION = 23;
    public static readonly KW_BETWEEN = 24;
    public static readonly KW_BIGINT = 25;
    public static readonly KW_BINARY = 26;
    public static readonly KW_BOOLEAN = 27;
    public static readonly KW_BOTH = 28;
    public static readonly KW_BUCKET = 29;
    public static readonly KW_BUCKETS = 30;
    public static readonly KW_BY = 31;
    public static readonly KW_BYTE = 32;
    public static readonly KW_CACHE = 33;
    public static readonly KW_CASCADE = 34;
    public static readonly KW_CASE = 35;
    public static readonly KW_CAST = 36;
    public static readonly KW_CATALOG = 37;
    public static readonly KW_CATALOGS = 38;
    public static readonly KW_CHANGE = 39;
    public static readonly KW_CHAR = 40;
    public static readonly KW_CHARACTER = 41;
    public static readonly KW_CHECK = 42;
    public static readonly KW_CLEAR = 43;
    public static readonly KW_CLUSTER = 44;
    public static readonly KW_CLUSTERED = 45;
    public static readonly KW_CODEGEN = 46;
    public static readonly KW_COLLATE = 47;
    public static readonly KW_COLLECTION = 48;
    public static readonly KW_COLUMN = 49;
    public static readonly KW_COLUMNS = 50;
    public static readonly KW_COMMENT = 51;
    public static readonly KW_COMMIT = 52;
    public static readonly KW_COMPACT = 53;
    public static readonly KW_COMPACTIONS = 54;
    public static readonly KW_COMPUTE = 55;
    public static readonly KW_CONCATENATE = 56;
    public static readonly KW_CONSTRAINT = 57;
    public static readonly KW_COST = 58;
    public static readonly KW_CREATE = 59;
    public static readonly KW_CROSS = 60;
    public static readonly KW_CUBE = 61;
    public static readonly KW_CURRENT = 62;
    public static readonly KW_CURRENT_DATE = 63;
    public static readonly KW_CURRENT_TIME = 64;
    public static readonly KW_CURRENT_TIMESTAMP = 65;
    public static readonly KW_CURRENT_USER = 66;
    public static readonly KW_DAY = 67;
    public static readonly KW_DAYS = 68;
    public static readonly KW_DAYOFYEAR = 69;
    public static readonly KW_DATA = 70;
    public static readonly KW_DATE = 71;
    public static readonly KW_DATABASE = 72;
    public static readonly KW_DATABASES = 73;
    public static readonly KW_DATEADD = 74;
    public static readonly KW_DATE_ADD = 75;
    public static readonly KW_DATEDIFF = 76;
    public static readonly KW_DATE_DIFF = 77;
    public static readonly KW_DBPROPERTIES = 78;
    public static readonly KW_DEC = 79;
    public static readonly KW_DECIMAL = 80;
    public static readonly KW_DECLARE = 81;
    public static readonly KW_DEFAULT = 82;
    public static readonly KW_DEFINED = 83;
    public static readonly KW_DELETE = 84;
    public static readonly KW_DELIMITED = 85;
    public static readonly KW_DESC = 86;
    public static readonly KW_DESCRIBE = 87;
    public static readonly KW_DFS = 88;
    public static readonly KW_DIRECTORIES = 89;
    public static readonly KW_DIRECTORY = 90;
    public static readonly KW_DISABLE = 91;
    public static readonly KW_DISTINCT = 92;
    public static readonly KW_DISTRIBUTE = 93;
    public static readonly KW_DIV = 94;
    public static readonly KW_DOUBLE = 95;
    public static readonly KW_DROP = 96;
    public static readonly KW_ELSE = 97;
    public static readonly KW_ENABLE = 98;
    public static readonly KW_END = 99;
    public static readonly KW_ESCAPE = 100;
    public static readonly KW_ESCAPED = 101;
    public static readonly KW_EXCEPT = 102;
    public static readonly KW_EXCHANGE = 103;
    public static readonly KW_EXCLUDE = 104;
    public static readonly KW_EXISTS = 105;
    public static readonly KW_EXPLAIN = 106;
    public static readonly KW_EXPORT = 107;
    public static readonly KW_EXTENDED = 108;
    public static readonly KW_EXTERNAL = 109;
    public static readonly KW_EXTRACT = 110;
    public static readonly KW_FALSE = 111;
    public static readonly KW_FETCH = 112;
    public static readonly KW_FIELDS = 113;
    public static readonly KW_FILTER = 114;
    public static readonly KW_FILEFORMAT = 115;
    public static readonly KW_FIRST = 116;
    public static readonly KW_FLOAT = 117;
    public static readonly KW_FOLLOWING = 118;
    public static readonly KW_FOR = 119;
    public static readonly KW_FOREIGN = 120;
    public static readonly KW_FORMAT = 121;
    public static readonly KW_FORMATTED = 122;
    public static readonly KW_FROM = 123;
    public static readonly KW_FULL = 124;
    public static readonly KW_FUNCTION = 125;
    public static readonly KW_FUNCTIONS = 126;
    public static readonly KW_GENERATED = 127;
    public static readonly KW_GLOBAL = 128;
    public static readonly KW_GRANT = 129;
    public static readonly KW_GROUP = 130;
    public static readonly KW_GROUPING = 131;
    public static readonly KW_HAVING = 132;
    public static readonly KW_BINARY_HEX = 133;
    public static readonly KW_HOUR = 134;
    public static readonly KW_HOURS = 135;
    public static readonly KW_IDENTIFIER = 136;
    public static readonly KW_IF = 137;
    public static readonly KW_IGNORE = 138;
    public static readonly KW_IMPORT = 139;
    public static readonly KW_IN = 140;
    public static readonly KW_INCLUDE = 141;
    public static readonly KW_INDEX = 142;
    public static readonly KW_INDEXES = 143;
    public static readonly KW_INNER = 144;
    public static readonly KW_INPATH = 145;
    public static readonly KW_INPUTFORMAT = 146;
    public static readonly KW_INSERT = 147;
    public static readonly KW_INTERSECT = 148;
    public static readonly KW_INTERVAL = 149;
    public static readonly KW_INT = 150;
    public static readonly KW_INTEGER = 151;
    public static readonly KW_INTO = 152;
    public static readonly KW_IS = 153;
    public static readonly KW_ITEMS = 154;
    public static readonly KW_JOIN = 155;
    public static readonly KW_KEYS = 156;
    public static readonly KW_LAST = 157;
    public static readonly KW_LATERAL = 158;
    public static readonly KW_LAZY = 159;
    public static readonly KW_LEADING = 160;
    public static readonly KW_LEFT = 161;
    public static readonly KW_LIFECYCLE = 162;
    public static readonly KW_LIKE = 163;
    public static readonly KW_ILIKE = 164;
    public static readonly KW_LIMIT = 165;
    public static readonly KW_LINES = 166;
    public static readonly KW_LIST = 167;
    public static readonly KW_LOAD = 168;
    public static readonly KW_LOCAL = 169;
    public static readonly KW_LOCATION = 170;
    public static readonly KW_LOCK = 171;
    public static readonly KW_LOCKS = 172;
    public static readonly KW_LOGICAL = 173;
    public static readonly KW_LONG = 174;
    public static readonly KW_MACRO = 175;
    public static readonly KW_MATERIALIZED = 176;
    public static readonly KW_MAP = 177;
    public static readonly KW_MATCHED = 178;
    public static readonly KW_MERGE = 179;
    public static readonly KW_MICROSECOND = 180;
    public static readonly KW_MICROSECONDS = 181;
    public static readonly KW_MILLISECOND = 182;
    public static readonly KW_MILLISECONDS = 183;
    public static readonly KW_MINUTE = 184;
    public static readonly KW_MINUTES = 185;
    public static readonly KW_MONTH = 186;
    public static readonly KW_MONTHS = 187;
    public static readonly KW_MSCK = 188;
    public static readonly KW_NAME = 189;
    public static readonly KW_NAMESPACE = 190;
    public static readonly KW_NAMESPACES = 191;
    public static readonly KW_NANOSECOND = 192;
    public static readonly KW_NANOSECONDS = 193;
    public static readonly KW_NATURAL = 194;
    public static readonly KW_NO = 195;
    public static readonly KW_NOSCAN = 196;
    public static readonly KW_NOT = 197;
    public static readonly KW_NULL = 198;
    public static readonly KW_NULLS = 199;
    public static readonly KW_NUMERIC = 200;
    public static readonly KW_OF = 201;
    public static readonly KW_OFFSET = 202;
    public static readonly KW_ON = 203;
    public static readonly KW_ONLY = 204;
    public static readonly KW_OPTIMIZE = 205;
    public static readonly KW_OPTION = 206;
    public static readonly KW_OPTIONS = 207;
    public static readonly KW_OR = 208;
    public static readonly KW_ORDER = 209;
    public static readonly KW_OUT = 210;
    public static readonly KW_OUTER = 211;
    public static readonly KW_OUTPUTFORMAT = 212;
    public static readonly KW_OVER = 213;
    public static readonly KW_OVERLAPS = 214;
    public static readonly KW_OVERLAY = 215;
    public static readonly KW_OVERWRITE = 216;
    public static readonly KW_PARTITION = 217;
    public static readonly KW_PARTITIONED = 218;
    public static readonly KW_PARTITIONS = 219;
    public static readonly KW_PERCENTILE_CONT = 220;
    public static readonly KW_PERCENTILE_DISC = 221;
    public static readonly KW_PERCENTLIT = 222;
    public static readonly KW_PIVOT = 223;
    public static readonly KW_PLACING = 224;
    public static readonly KW_POSITION = 225;
    public static readonly KW_PRECEDING = 226;
    public static readonly KW_PRIMARY = 227;
    public static readonly KW_PRINCIPALS = 228;
    public static readonly KW_PROPERTIES = 229;
    public static readonly KW_PURGE = 230;
    public static readonly KW_QUARTER = 231;
    public static readonly KW_QUERY = 232;
    public static readonly KW_RANGE = 233;
    public static readonly KW_REAL = 234;
    public static readonly KW_RECORDREADER = 235;
    public static readonly KW_RECORDWRITER = 236;
    public static readonly KW_RECOVER = 237;
    public static readonly KW_REDUCE = 238;
    public static readonly KW_REFERENCES = 239;
    public static readonly KW_REFRESH = 240;
    public static readonly KW_RENAME = 241;
    public static readonly KW_REPAIR = 242;
    public static readonly KW_REPEATABLE = 243;
    public static readonly KW_REPLACE = 244;
    public static readonly KW_RESET = 245;
    public static readonly KW_RESPECT = 246;
    public static readonly KW_RESTRICT = 247;
    public static readonly KW_REWRITE = 248;
    public static readonly KW_REVOKE = 249;
    public static readonly KW_RIGHT = 250;
    public static readonly KW_RLIKE = 251;
    public static readonly KW_REGEXP = 252;
    public static readonly KW_ROLE = 253;
    public static readonly KW_ROLES = 254;
    public static readonly KW_ROLLBACK = 255;
    public static readonly KW_ROLLUP = 256;
    public static readonly KW_ROW = 257;
    public static readonly KW_ROWS = 258;
    public static readonly KW_SECOND = 259;
    public static readonly KW_SECONDS = 260;
    public static readonly KW_SCHEMA = 261;
    public static readonly KW_SCHEMAS = 262;
    public static readonly KW_SELECT = 263;
    public static readonly KW_SEMI = 264;
    public static readonly KW_SEPARATED = 265;
    public static readonly KW_SERDE = 266;
    public static readonly KW_SERDEPROPERTIES = 267;
    public static readonly KW_SESSION_USER = 268;
    public static readonly KW_SET = 269;
    public static readonly KW_MINUS = 270;
    public static readonly KW_SETS = 271;
    public static readonly KW_SHORT = 272;
    public static readonly KW_SHOW = 273;
    public static readonly KW_SINGLE = 274;
    public static readonly KW_SKEWED = 275;
    public static readonly KW_SMALLINT = 276;
    public static readonly KW_SOME = 277;
    public static readonly KW_SORT = 278;
    public static readonly KW_SORTED = 279;
    public static readonly KW_SOURCE = 280;
    public static readonly KW_START = 281;
    public static readonly KW_STATISTICS = 282;
    public static readonly KW_STORED = 283;
    public static readonly KW_STRATIFY = 284;
    public static readonly KW_STRING = 285;
    public static readonly KW_STRUCT = 286;
    public static readonly KW_SUBSTR = 287;
    public static readonly KW_SUBSTRING = 288;
    public static readonly KW_SYNC = 289;
    public static readonly KW_SYSTEM = 290;
    public static readonly KW_SYSTEM_TIME = 291;
    public static readonly KW_SYSTEM_VERSION = 292;
    public static readonly KW_TABLE = 293;
    public static readonly KW_TABLES = 294;
    public static readonly KW_TABLESAMPLE = 295;
    public static readonly KW_TARGET = 296;
    public static readonly KW_TBLPROPERTIES = 297;
    public static readonly KW_TEMPORARY = 298;
    public static readonly KW_TERMINATED = 299;
    public static readonly KW_THEN = 300;
    public static readonly KW_TIME = 301;
    public static readonly KW_TIMEDIFF = 302;
    public static readonly KW_TIMESTAMP = 303;
    public static readonly KW_TIMESTAMP_LTZ = 304;
    public static readonly KW_TIMESTAMP_NTZ = 305;
    public static readonly KW_TIMESTAMPADD = 306;
    public static readonly KW_TIMESTAMPDIFF = 307;
    public static readonly KW_TINYINT = 308;
    public static readonly KW_TO = 309;
    public static readonly KW_TOUCH = 310;
    public static readonly KW_TRAILING = 311;
    public static readonly KW_TRANSACTION = 312;
    public static readonly KW_TRANSACTIONS = 313;
    public static readonly KW_TRANSFORM = 314;
    public static readonly KW_TRIM = 315;
    public static readonly KW_TRUE = 316;
    public static readonly KW_TRUNCATE = 317;
    public static readonly KW_TRY_CAST = 318;
    public static readonly KW_TYPE = 319;
    public static readonly KW_UNARCHIVE = 320;
    public static readonly KW_UNBOUNDED = 321;
    public static readonly KW_UNCACHE = 322;
    public static readonly KW_UNION = 323;
    public static readonly KW_UNIQUE = 324;
    public static readonly KW_UNKNOWN = 325;
    public static readonly KW_UNLOCK = 326;
    public static readonly KW_UNPIVOT = 327;
    public static readonly KW_UNSET = 328;
    public static readonly KW_UPDATE = 329;
    public static readonly KW_USE = 330;
    public static readonly KW_USER = 331;
    public static readonly KW_USING = 332;
    public static readonly KW_VALUES = 333;
    public static readonly KW_VARCHAR = 334;
    public static readonly KW_VAR = 335;
    public static readonly KW_VARIABLE = 336;
    public static readonly KW_VERSION = 337;
    public static readonly KW_VIEW = 338;
    public static readonly KW_VIEWS = 339;
    public static readonly KW_VOID = 340;
    public static readonly KW_WEEK = 341;
    public static readonly KW_WEEKS = 342;
    public static readonly KW_WHEN = 343;
    public static readonly KW_WHERE = 344;
    public static readonly KW_WINDOW = 345;
    public static readonly KW_WITH = 346;
    public static readonly KW_WITHIN = 347;
    public static readonly KW_YEAR = 348;
    public static readonly KW_YEARS = 349;
    public static readonly KW_ZONE = 350;
    public static readonly KW_ZORDER = 351;
    public static readonly EQ = 352;
    public static readonly NSEQ = 353;
    public static readonly NEQ = 354;
    public static readonly NEQJ = 355;
    public static readonly LT = 356;
    public static readonly LTE = 357;
    public static readonly GT = 358;
    public static readonly GTE = 359;
    public static readonly NOT = 360;
    public static readonly PLUS = 361;
    public static readonly MINUS = 362;
    public static readonly ASTERISK = 363;
    public static readonly SLASH = 364;
    public static readonly PERCENT = 365;
    public static readonly TILDE = 366;
    public static readonly AMPERSAND = 367;
    public static readonly PIPE = 368;
    public static readonly CONCAT_PIPE = 369;
    public static readonly HAT = 370;
    public static readonly COLON = 371;
    public static readonly ARROW = 372;
    public static readonly FAT_ARROW = 373;
    public static readonly HENT_START = 374;
    public static readonly HENT_END = 375;
    public static readonly QUESTION = 376;
    public static readonly STRING_LITERAL = 377;
    public static readonly DOUBLEQUOTED_STRING = 378;
    public static readonly BIGINT_LITERAL = 379;
    public static readonly SMALLINT_LITERAL = 380;
    public static readonly TINYINT_LITERAL = 381;
    public static readonly INTEGER_VALUE = 382;
    public static readonly EXPONENT_VALUE = 383;
    public static readonly DECIMAL_VALUE = 384;
    public static readonly FLOAT_LITERAL = 385;
    public static readonly DOUBLE_LITERAL = 386;
    public static readonly BIGDECIMAL_LITERAL = 387;
    public static readonly IDENTIFIER = 388;
    public static readonly BACKQUOTED_IDENTIFIER = 389;
    public static readonly LINE_COMMENT = 390;
    public static readonly BRACKETED_COMMENT = 391;
    public static readonly WHITE_SPACE = 392;
    public static readonly UNRECOGNIZED = 393;
    public static readonly RULE_program = 0;
    public static readonly RULE_singleStatement = 1;
    public static readonly RULE_statement = 2;
    public static readonly RULE_unsupportedHiveNativeCommands = 3;
    public static readonly RULE_bucketSpec = 4;
    public static readonly RULE_skewSpec = 5;
    public static readonly RULE_locationSpec = 6;
    public static readonly RULE_commentSpec = 7;
    public static readonly RULE_query = 8;
    public static readonly RULE_insertInto = 9;
    public static readonly RULE_partitionSpecLocation = 10;
    public static readonly RULE_partitionSpec = 11;
    public static readonly RULE_partitionVal = 12;
    public static readonly RULE_namespace = 13;
    public static readonly RULE_describeFuncName = 14;
    public static readonly RULE_describeColName = 15;
    public static readonly RULE_ctes = 16;
    public static readonly RULE_namedQuery = 17;
    public static readonly RULE_tableProvider = 18;
    public static readonly RULE_createTableClauses = 19;
    public static readonly RULE_tableLifecycle = 20;
    public static readonly RULE_propertyList = 21;
    public static readonly RULE_property = 22;
    public static readonly RULE_propertyKey = 23;
    public static readonly RULE_propertyValue = 24;
    public static readonly RULE_expressionPropertyList = 25;
    public static readonly RULE_expressionProperty = 26;
    public static readonly RULE_constantList = 27;
    public static readonly RULE_nestedConstantList = 28;
    public static readonly RULE_createFileFormat = 29;
    public static readonly RULE_fileFormat = 30;
    public static readonly RULE_storageHandler = 31;
    public static readonly RULE_dmlStatementNoWith = 32;
    public static readonly RULE_namespaceName = 33;
    public static readonly RULE_namespaceNameCreate = 34;
    public static readonly RULE_tableNameCreate = 35;
    public static readonly RULE_tableName = 36;
    public static readonly RULE_viewNameCreate = 37;
    public static readonly RULE_viewName = 38;
    public static readonly RULE_columnName = 39;
    public static readonly RULE_columnNamePath = 40;
    public static readonly RULE_columnNameSeq = 41;
    public static readonly RULE_columnNameCreate = 42;
    public static readonly RULE_identifierReference = 43;
    public static readonly RULE_queryOrganization = 44;
    public static readonly RULE_limitClause = 45;
    public static readonly RULE_orderOrSortByClause = 46;
    public static readonly RULE_clusterOrDistributeBy = 47;
    public static readonly RULE_queryTerm = 48;
    public static readonly RULE_queryPrimary = 49;
    public static readonly RULE_sortItem = 50;
    public static readonly RULE_fromStatementBody = 51;
    public static readonly RULE_querySpecification = 52;
    public static readonly RULE_transformClause = 53;
    public static readonly RULE_selectClause = 54;
    public static readonly RULE_setClause = 55;
    public static readonly RULE_matchedClause = 56;
    public static readonly RULE_notMatchedClause = 57;
    public static readonly RULE_notMatchedBySourceClause = 58;
    public static readonly RULE_notMatchedAction = 59;
    public static readonly RULE_assignmentList = 60;
    public static readonly RULE_assignment = 61;
    public static readonly RULE_whereClause = 62;
    public static readonly RULE_havingClause = 63;
    public static readonly RULE_hint = 64;
    public static readonly RULE_hintStatement = 65;
    public static readonly RULE_fromClause = 66;
    public static readonly RULE_temporalClause = 67;
    public static readonly RULE_aggregationClause = 68;
    public static readonly RULE_groupByClause = 69;
    public static readonly RULE_groupingAnalytics = 70;
    public static readonly RULE_groupingSet = 71;
    public static readonly RULE_pivotClause = 72;
    public static readonly RULE_pivotColumn = 73;
    public static readonly RULE_pivotValue = 74;
    public static readonly RULE_unPivotClause = 75;
    public static readonly RULE_unPivotSingleValueColumnClause = 76;
    public static readonly RULE_unPivotMultiValueColumnClause = 77;
    public static readonly RULE_unPivotColumnSet = 78;
    public static readonly RULE_unPivotColumnAndAlias = 79;
    public static readonly RULE_ifNotExists = 80;
    public static readonly RULE_ifExists = 81;
    public static readonly RULE_lateralView = 82;
    public static readonly RULE_setQuantifier = 83;
    public static readonly RULE_relation = 84;
    public static readonly RULE_joinRelation = 85;
    public static readonly RULE_joinType = 86;
    public static readonly RULE_joinCriteria = 87;
    public static readonly RULE_sample = 88;
    public static readonly RULE_sampleMethod = 89;
    public static readonly RULE_identifierList = 90;
    public static readonly RULE_identifierSeq = 91;
    public static readonly RULE_orderedIdentifierList = 92;
    public static readonly RULE_orderedIdentifier = 93;
    public static readonly RULE_identifierCommentList = 94;
    public static readonly RULE_identifierComment = 95;
    public static readonly RULE_relationPrimary = 96;
    public static readonly RULE_functionTableSubqueryArgument = 97;
    public static readonly RULE_tableArgumentPartitioning = 98;
    public static readonly RULE_functionTableNamedArgumentExpression = 99;
    public static readonly RULE_functionTableReferenceArgument = 100;
    public static readonly RULE_functionTableArgument = 101;
    public static readonly RULE_tableAlias = 102;
    public static readonly RULE_rowFormat = 103;
    public static readonly RULE_multipartIdentifierList = 104;
    public static readonly RULE_multipartIdentifier = 105;
    public static readonly RULE_multipartIdentifierPropertyList = 106;
    public static readonly RULE_multipartIdentifierProperty = 107;
    public static readonly RULE_tableIdentifier = 108;
    public static readonly RULE_viewIdentifier = 109;
    public static readonly RULE_namedExpression = 110;
    public static readonly RULE_namedExpressionSeq = 111;
    public static readonly RULE_partitionFieldList = 112;
    public static readonly RULE_partitionField = 113;
    public static readonly RULE_transform = 114;
    public static readonly RULE_transformArgument = 115;
    public static readonly RULE_expression = 116;
    public static readonly RULE_namedArgumentExpression = 117;
    public static readonly RULE_functionArgument = 118;
    public static readonly RULE_expressionSeq = 119;
    public static readonly RULE_booleanExpression = 120;
    public static readonly RULE_predicate = 121;
    public static readonly RULE_valueExpression = 122;
    public static readonly RULE_datetimeUnit = 123;
    public static readonly RULE_primaryExpression = 124;
    public static readonly RULE_literalType = 125;
    public static readonly RULE_constant = 126;
    public static readonly RULE_comparisonOperator = 127;
    public static readonly RULE_arithmeticOperator = 128;
    public static readonly RULE_predicateOperator = 129;
    public static readonly RULE_booleanValue = 130;
    public static readonly RULE_interval = 131;
    public static readonly RULE_errorCapturingMultiUnitsInterval = 132;
    public static readonly RULE_multiUnitsInterval = 133;
    public static readonly RULE_errorCapturingUnitToUnitInterval = 134;
    public static readonly RULE_unitToUnitInterval = 135;
    public static readonly RULE_intervalValue = 136;
    public static readonly RULE_unitInMultiUnits = 137;
    public static readonly RULE_unitInUnitToUnit = 138;
    public static readonly RULE_colPosition = 139;
    public static readonly RULE_type = 140;
    public static readonly RULE_dataType = 141;
    public static readonly RULE_qualifiedColTypeWithPositionSeqForAdd = 142;
    public static readonly RULE_qualifiedColTypeWithPositionForAdd = 143;
    public static readonly RULE_qualifiedColTypeWithPositionSeqForReplace = 144;
    public static readonly RULE_qualifiedColTypeWithPositionForReplace = 145;
    public static readonly RULE_colDefinitionDescriptorWithPosition = 146;
    public static readonly RULE_variableDefaultExpression = 147;
    public static readonly RULE_colTypeList = 148;
    public static readonly RULE_columnType = 149;
    public static readonly RULE_createOrReplaceTableColTypeList = 150;
    public static readonly RULE_createOrReplaceTableColType = 151;
    public static readonly RULE_colDefinitionOption = 152;
    public static readonly RULE_complexColType = 153;
    public static readonly RULE_whenClause = 154;
    public static readonly RULE_windowClause = 155;
    public static readonly RULE_zOrderClause = 156;
    public static readonly RULE_windowSpec = 157;
    public static readonly RULE_windowFrame = 158;
    public static readonly RULE_frameBound = 159;
    public static readonly RULE_qualifiedNameList = 160;
    public static readonly RULE_functionName = 161;
    public static readonly RULE_functionNameCreate = 162;
    public static readonly RULE_qualifiedName = 163;
    public static readonly RULE_errorCapturingIdentifier = 164;
    public static readonly RULE_errorCapturingIdentifierExtra = 165;
    public static readonly RULE_identifier = 166;
    public static readonly RULE_strictIdentifier = 167;
    public static readonly RULE_quotedIdentifier = 168;
    public static readonly RULE_number = 169;
    public static readonly RULE_alterColumnAction = 170;
    public static readonly RULE_stringLit = 171;
    public static readonly RULE_ansiNonReserved = 172;
    public static readonly RULE_strictNonReserved = 173;
    public static readonly RULE_nonReserved = 174;

    public static readonly literalNames = [
        null, "';'", "'('", "')'", "','", "'.'", "'['", "']'", "'ADD'", 
        "'AFTER'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", 
        "'ANTI'", "'ANY'", "'ANY_VALUE'", "'ARCHIVE'", "'ARRAY'", "'AS'", 
        "'ASC'", "'AT'", "'AUTHORIZATION'", "'BETWEEN'", "'BIGINT'", "'BINARY'", 
        "'BOOLEAN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", "'BYTE'", 
        "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", 
        "'CHANGE'", "'CHAR'", "'CHARACTER'", "'CHECK'", "'CLEAR'", "'CLUSTER'", 
        "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", "'COLLECTION'", "'COLUMN'", 
        "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
        "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", "'CREATE'", 
        "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DAY'", "'DAYS'", "'DAYOFYEAR'", 
        "'DATA'", "'DATE'", "'DATABASE'", "'DATABASES'", "'DATEADD'", "'DATE_ADD'", 
        "'DATEDIFF'", "'DATE_DIFF'", "'DBPROPERTIES'", "'DEC'", "'DECIMAL'", 
        "'DECLARE'", "'DEFAULT'", "'DEFINED'", "'DELETE'", "'DELIMITED'", 
        "'DESC'", "'DESCRIBE'", "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", 
        "'DISABLE'", "'DISTINCT'", "'DISTRIBUTE'", "'DIV'", "'DOUBLE'", 
        "'DROP'", "'ELSE'", "'ENABLE'", "'END'", "'ESCAPE'", "'ESCAPED'", 
        "'EXCEPT'", "'EXCHANGE'", "'EXCLUDE'", "'EXISTS'", "'EXPLAIN'", 
        "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", 
        "'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", 
        "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", 
        "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'", 
        "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", "'X'", 
        "'HOUR'", "'HOURS'", "'IDENTIFIER'", "'IF'", "'IGNORE'", "'IMPORT'", 
        "'IN'", "'INCLUDE'", "'INDEX'", "'INDEXES'", "'INNER'", "'INPATH'", 
        "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INT'", 
        "'INTEGER'", "'INTO'", "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", 
        "'LATERAL'", "'LAZY'", "'LEADING'", "'LEFT'", "'LIFECYCLE'", "'LIKE'", 
        "'ILIKE'", "'LIMIT'", "'LINES'", "'LIST'", "'LOAD'", "'LOCAL'", 
        "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'", "'LONG'", "'MACRO'", 
        "'MATERIALIZED'", "'MAP'", "'MATCHED'", "'MERGE'", "'MICROSECOND'", 
        "'MICROSECONDS'", "'MILLISECOND'", "'MILLISECONDS'", "'MINUTE'", 
        "'MINUTES'", "'MONTH'", "'MONTHS'", "'MSCK'", "'NAME'", "'NAMESPACE'", 
        "'NAMESPACES'", "'NANOSECOND'", "'NANOSECONDS'", "'NATURAL'", "'NO'", 
        "'NOSCAN'", "'NOT'", "'NULL'", "'NULLS'", "'NUMERIC'", "'OF'", "'OFFSET'", 
        "'ON'", "'ONLY'", "'OPTIMIZE'", "'OPTION'", "'OPTIONS'", "'OR'", 
        "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", 
        "'OVERLAY'", "'OVERWRITE'", "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", 
        "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERCENT'", "'PIVOT'", 
        "'PLACING'", "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", 
        "'PROPERTIES'", "'PURGE'", "'QUARTER'", "'QUERY'", "'RANGE'", "'REAL'", 
        "'RECORDREADER'", "'RECORDWRITER'", "'RECOVER'", "'REDUCE'", "'REFERENCES'", 
        "'REFRESH'", "'RENAME'", "'REPAIR'", "'REPEATABLE'", "'REPLACE'", 
        "'RESET'", "'RESPECT'", "'RESTRICT'", "'REWRITE'", "'REVOKE'", "'RIGHT'", 
        "'RLIKE'", "'REGEXP'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", 
        "'ROW'", "'ROWS'", "'SECOND'", "'SECONDS'", "'SCHEMA'", "'SCHEMAS'", 
        "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", "'SERDEPROPERTIES'", 
        "'SESSION_USER'", "'SET'", "'MINUS'", "'SETS'", "'SHORT'", "'SHOW'", 
        "'SINGLE'", "'SKEWED'", "'SMALLINT'", "'SOME'", "'SORT'", "'SORTED'", 
        "'SOURCE'", "'START'", "'STATISTICS'", "'STORED'", "'STRATIFY'", 
        "'STRING'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", "'SYNC'", "'SYSTEM'", 
        "'SYSTEM_TIME'", "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", 
        "'TARGET'", "'TBLPROPERTIES'", "'TEMPORARY'", "'TERMINATED'", "'THEN'", 
        "'TIME'", "'TIMEDIFF'", "'TIMESTAMP'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_NTZ'", 
        "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TINYINT'", "'TO'", "'TOUCH'", 
        "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
        "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UNARCHIVE'", 
        "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", 
        "'UNLOCK'", "'UNPIVOT'", "'UNSET'", "'UPDATE'", "'USE'", "'USER'", 
        "'USING'", "'VALUES'", "'VARCHAR'", "'VAR'", "'VARIABLE'", "'VERSION'", 
        "'VIEW'", "'VIEWS'", "'VOID'", "'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", 
        "'WINDOW'", "'WITH'", "'WITHIN'", "'YEAR'", "'YEARS'", "'ZONE'", 
        "'ZORDER'", null, "'<=>'", "'<>'", "'!='", "'<'", null, "'>'", null, 
        "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'", "'||'", 
        "'^'", "':'", "'->'", "'=>'", "'/*+'", "'*/'", "'?'"
    ];

    public static readonly symbolicNames = [
        null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", 
        "LEFT_BRACKET", "RIGHT_BRACKET", "KW_ADD", "KW_AFTER", "KW_ALL", 
        "KW_ALTER", "KW_ALWAYS", "KW_ANALYZE", "KW_AND", "KW_ANTI", "KW_ANY", 
        "KW_ANY_VALUE", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", "KW_ASC", "KW_AT", 
        "KW_AUTHORIZATION", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", 
        "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_BYTE", "KW_CACHE", 
        "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CATALOG", "KW_CATALOGS", 
        "KW_CHANGE", "KW_CHAR", "KW_CHARACTER", "KW_CHECK", "KW_CLEAR", 
        "KW_CLUSTER", "KW_CLUSTERED", "KW_CODEGEN", "KW_COLLATE", "KW_COLLECTION", 
        "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPACT", 
        "KW_COMPACTIONS", "KW_COMPUTE", "KW_CONCATENATE", "KW_CONSTRAINT", 
        "KW_COST", "KW_CREATE", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", 
        "KW_CURRENT_TIME", "KW_CURRENT_TIMESTAMP", "KW_CURRENT_USER", "KW_DAY", 
        "KW_DAYS", "KW_DAYOFYEAR", "KW_DATA", "KW_DATE", "KW_DATABASE", 
        "KW_DATABASES", "KW_DATEADD", "KW_DATE_ADD", "KW_DATEDIFF", "KW_DATE_DIFF", 
        "KW_DBPROPERTIES", "KW_DEC", "KW_DECIMAL", "KW_DECLARE", "KW_DEFAULT", 
        "KW_DEFINED", "KW_DELETE", "KW_DELIMITED", "KW_DESC", "KW_DESCRIBE", 
        "KW_DFS", "KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", 
        "KW_DISTRIBUTE", "KW_DIV", "KW_DOUBLE", "KW_DROP", "KW_ELSE", "KW_ENABLE", 
        "KW_END", "KW_ESCAPE", "KW_ESCAPED", "KW_EXCEPT", "KW_EXCHANGE", 
        "KW_EXCLUDE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXTENDED", 
        "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", "KW_FETCH", "KW_FIELDS", 
        "KW_FILTER", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", "KW_FOLLOWING", 
        "KW_FOR", "KW_FOREIGN", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", 
        "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", "KW_GENERATED", "KW_GLOBAL", 
        "KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_BINARY_HEX", 
        "KW_HOUR", "KW_HOURS", "KW_IDENTIFIER", "KW_IF", "KW_IGNORE", "KW_IMPORT", 
        "KW_IN", "KW_INCLUDE", "KW_INDEX", "KW_INDEXES", "KW_INNER", "KW_INPATH", 
        "KW_INPUTFORMAT", "KW_INSERT", "KW_INTERSECT", "KW_INTERVAL", "KW_INT", 
        "KW_INTEGER", "KW_INTO", "KW_IS", "KW_ITEMS", "KW_JOIN", "KW_KEYS", 
        "KW_LAST", "KW_LATERAL", "KW_LAZY", "KW_LEADING", "KW_LEFT", "KW_LIFECYCLE", 
        "KW_LIKE", "KW_ILIKE", "KW_LIMIT", "KW_LINES", "KW_LIST", "KW_LOAD", 
        "KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", 
        "KW_LONG", "KW_MACRO", "KW_MATERIALIZED", "KW_MAP", "KW_MATCHED", 
        "KW_MERGE", "KW_MICROSECOND", "KW_MICROSECONDS", "KW_MILLISECOND", 
        "KW_MILLISECONDS", "KW_MINUTE", "KW_MINUTES", "KW_MONTH", "KW_MONTHS", 
        "KW_MSCK", "KW_NAME", "KW_NAMESPACE", "KW_NAMESPACES", "KW_NANOSECOND", 
        "KW_NANOSECONDS", "KW_NATURAL", "KW_NO", "KW_NOSCAN", "KW_NOT", 
        "KW_NULL", "KW_NULLS", "KW_NUMERIC", "KW_OF", "KW_OFFSET", "KW_ON", 
        "KW_ONLY", "KW_OPTIMIZE", "KW_OPTION", "KW_OPTIONS", "KW_OR", "KW_ORDER", 
        "KW_OUT", "KW_OUTER", "KW_OUTPUTFORMAT", "KW_OVER", "KW_OVERLAPS", 
        "KW_OVERLAY", "KW_OVERWRITE", "KW_PARTITION", "KW_PARTITIONED", 
        "KW_PARTITIONS", "KW_PERCENTILE_CONT", "KW_PERCENTILE_DISC", "KW_PERCENTLIT", 
        "KW_PIVOT", "KW_PLACING", "KW_POSITION", "KW_PRECEDING", "KW_PRIMARY", 
        "KW_PRINCIPALS", "KW_PROPERTIES", "KW_PURGE", "KW_QUARTER", "KW_QUERY", 
        "KW_RANGE", "KW_REAL", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_RECOVER", 
        "KW_REDUCE", "KW_REFERENCES", "KW_REFRESH", "KW_RENAME", "KW_REPAIR", 
        "KW_REPEATABLE", "KW_REPLACE", "KW_RESET", "KW_RESPECT", "KW_RESTRICT", 
        "KW_REWRITE", "KW_REVOKE", "KW_RIGHT", "KW_RLIKE", "KW_REGEXP", 
        "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", "KW_ROW", "KW_ROWS", 
        "KW_SECOND", "KW_SECONDS", "KW_SCHEMA", "KW_SCHEMAS", "KW_SELECT", 
        "KW_SEMI", "KW_SEPARATED", "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SESSION_USER", 
        "KW_SET", "KW_MINUS", "KW_SETS", "KW_SHORT", "KW_SHOW", "KW_SINGLE", 
        "KW_SKEWED", "KW_SMALLINT", "KW_SOME", "KW_SORT", "KW_SORTED", "KW_SOURCE", 
        "KW_START", "KW_STATISTICS", "KW_STORED", "KW_STRATIFY", "KW_STRING", 
        "KW_STRUCT", "KW_SUBSTR", "KW_SUBSTRING", "KW_SYNC", "KW_SYSTEM", 
        "KW_SYSTEM_TIME", "KW_SYSTEM_VERSION", "KW_TABLE", "KW_TABLES", 
        "KW_TABLESAMPLE", "KW_TARGET", "KW_TBLPROPERTIES", "KW_TEMPORARY", 
        "KW_TERMINATED", "KW_THEN", "KW_TIME", "KW_TIMEDIFF", "KW_TIMESTAMP", 
        "KW_TIMESTAMP_LTZ", "KW_TIMESTAMP_NTZ", "KW_TIMESTAMPADD", "KW_TIMESTAMPDIFF", 
        "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRAILING", "KW_TRANSACTION", 
        "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIM", "KW_TRUE", "KW_TRUNCATE", 
        "KW_TRY_CAST", "KW_TYPE", "KW_UNARCHIVE", "KW_UNBOUNDED", "KW_UNCACHE", 
        "KW_UNION", "KW_UNIQUE", "KW_UNKNOWN", "KW_UNLOCK", "KW_UNPIVOT", 
        "KW_UNSET", "KW_UPDATE", "KW_USE", "KW_USER", "KW_USING", "KW_VALUES", 
        "KW_VARCHAR", "KW_VAR", "KW_VARIABLE", "KW_VERSION", "KW_VIEW", 
        "KW_VIEWS", "KW_VOID", "KW_WEEK", "KW_WEEKS", "KW_WHEN", "KW_WHERE", 
        "KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_YEAR", "KW_YEARS", "KW_ZONE", 
        "KW_ZORDER", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", "GT", "GTE", 
        "NOT", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "TILDE", 
        "AMPERSAND", "PIPE", "CONCAT_PIPE", "HAT", "COLON", "ARROW", "FAT_ARROW", 
        "HENT_START", "HENT_END", "QUESTION", "STRING_LITERAL", "DOUBLEQUOTED_STRING", 
        "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL", "INTEGER_VALUE", 
        "EXPONENT_VALUE", "DECIMAL_VALUE", "FLOAT_LITERAL", "DOUBLE_LITERAL", 
        "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "LINE_COMMENT", 
        "BRACKETED_COMMENT", "WHITE_SPACE", "UNRECOGNIZED"
    ];
    public static readonly ruleNames = [
        "program", "singleStatement", "statement", "unsupportedHiveNativeCommands", 
        "bucketSpec", "skewSpec", "locationSpec", "commentSpec", "query", 
        "insertInto", "partitionSpecLocation", "partitionSpec", "partitionVal", 
        "namespace", "describeFuncName", "describeColName", "ctes", "namedQuery", 
        "tableProvider", "createTableClauses", "tableLifecycle", "propertyList", 
        "property", "propertyKey", "propertyValue", "expressionPropertyList", 
        "expressionProperty", "constantList", "nestedConstantList", "createFileFormat", 
        "fileFormat", "storageHandler", "dmlStatementNoWith", "namespaceName", 
        "namespaceNameCreate", "tableNameCreate", "tableName", "viewNameCreate", 
        "viewName", "columnName", "columnNamePath", "columnNameSeq", "columnNameCreate", 
        "identifierReference", "queryOrganization", "limitClause", "orderOrSortByClause", 
        "clusterOrDistributeBy", "queryTerm", "queryPrimary", "sortItem", 
        "fromStatementBody", "querySpecification", "transformClause", "selectClause", 
        "setClause", "matchedClause", "notMatchedClause", "notMatchedBySourceClause", 
        "notMatchedAction", "assignmentList", "assignment", "whereClause", 
        "havingClause", "hint", "hintStatement", "fromClause", "temporalClause", 
        "aggregationClause", "groupByClause", "groupingAnalytics", "groupingSet", 
        "pivotClause", "pivotColumn", "pivotValue", "unPivotClause", "unPivotSingleValueColumnClause", 
        "unPivotMultiValueColumnClause", "unPivotColumnSet", "unPivotColumnAndAlias", 
        "ifNotExists", "ifExists", "lateralView", "setQuantifier", "relation", 
        "joinRelation", "joinType", "joinCriteria", "sample", "sampleMethod", 
        "identifierList", "identifierSeq", "orderedIdentifierList", "orderedIdentifier", 
        "identifierCommentList", "identifierComment", "relationPrimary", 
        "functionTableSubqueryArgument", "tableArgumentPartitioning", "functionTableNamedArgumentExpression", 
        "functionTableReferenceArgument", "functionTableArgument", "tableAlias", 
        "rowFormat", "multipartIdentifierList", "multipartIdentifier", "multipartIdentifierPropertyList", 
        "multipartIdentifierProperty", "tableIdentifier", "viewIdentifier", 
        "namedExpression", "namedExpressionSeq", "partitionFieldList", "partitionField", 
        "transform", "transformArgument", "expression", "namedArgumentExpression", 
        "functionArgument", "expressionSeq", "booleanExpression", "predicate", 
        "valueExpression", "datetimeUnit", "primaryExpression", "literalType", 
        "constant", "comparisonOperator", "arithmeticOperator", "predicateOperator", 
        "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
        "multiUnitsInterval", "errorCapturingUnitToUnitInterval", "unitToUnitInterval", 
        "intervalValue", "unitInMultiUnits", "unitInUnitToUnit", "colPosition", 
        "type", "dataType", "qualifiedColTypeWithPositionSeqForAdd", "qualifiedColTypeWithPositionForAdd", 
        "qualifiedColTypeWithPositionSeqForReplace", "qualifiedColTypeWithPositionForReplace", 
        "colDefinitionDescriptorWithPosition", "variableDefaultExpression", 
        "colTypeList", "columnType", "createOrReplaceTableColTypeList", 
        "createOrReplaceTableColType", "colDefinitionOption", "complexColType", 
        "whenClause", "windowClause", "zOrderClause", "windowSpec", "windowFrame", 
        "frameBound", "qualifiedNameList", "functionName", "functionNameCreate", 
        "qualifiedName", "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
        "identifier", "strictIdentifier", "quotedIdentifier", "number", 
        "alterColumnAction", "stringLit", "ansiNonReserved", "strictNonReserved", 
        "nonReserved",
    ];

    public get grammarFileName(): string { return "SparkSqlParser.g4"; }
    public get literalNames(): (string | null)[] { return SparkSqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return SparkSqlParser.symbolicNames; }
    public get ruleNames(): string[] { return SparkSqlParser.ruleNames; }
    public get serializedATN(): number[] { return SparkSqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, SparkSqlParser._ATN, SparkSqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, SparkSqlParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 353;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 10500) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 67896321) !== 0) || ((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & 100696297) !== 0) || ((((_la - 123)) & ~0x1F) === 0 && ((1 << (_la - 123)) & 16842817) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 2102291) !== 0) || _la === 205 || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 2181171413) !== 0) || ((((_la - 273)) & ~0x1F) === 0 && ((1 << (_la - 273)) & 1048833) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & 536949281) !== 0)) {
                {
                {
                this.state = 350;
                this.singleStatement();
                }
                }
                this.state = 355;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 356;
            this.match(SparkSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleStatement(): SingleStatementContext {
        let localContext = new SingleStatementContext(this.context, this.state);
        this.enterRule(localContext, 2, SparkSqlParser.RULE_singleStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 358;
            this.statement();
            this.state = 360;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1) {
                {
                this.state = 359;
                this.match(SparkSqlParser.SEMICOLON);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 4, SparkSqlParser.RULE_statement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1319;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 151, this.context) ) {
            case 1:
                localContext = new StatementDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 362;
                this.query();
                }
                break;
            case 2:
                localContext = new DmlStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 364;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 346) {
                    {
                    this.state = 363;
                    this.ctes();
                    }
                }

                this.state = 366;
                this.dmlStatementNoWith();
                }
                break;
            case 3:
                localContext = new UseNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 367;
                this.match(SparkSqlParser.KW_USE);
                this.state = 369;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
                case 1:
                    {
                    this.state = 368;
                    this.namespace();
                    }
                    break;
                }
                this.state = 371;
                this.namespaceName();
                }
                break;
            case 4:
                localContext = new SetCatalogContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 372;
                this.match(SparkSqlParser.KW_SET);
                this.state = 373;
                this.match(SparkSqlParser.KW_CATALOG);
                this.state = 376;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {
                case 1:
                    {
                    this.state = 374;
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 375;
                    this.stringLit();
                    }
                    break;
                }
                }
                break;
            case 5:
                localContext = new CreateNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 378;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 379;
                this.namespace();
                this.state = 381;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 5, this.context) ) {
                case 1:
                    {
                    this.state = 380;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 383;
                this.namespaceNameCreate();
                this.state = 393;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 7, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        this.state = 391;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case SparkSqlParser.KW_COMMENT:
                            {
                            {
                            this.state = 384;
                            this.match(SparkSqlParser.KW_COMMENT);
                            this.state = 385;
                            (localContext as CreateNamespaceContext)._comment = this.stringLit();
                            }
                            }
                            break;
                        case SparkSqlParser.KW_LOCATION:
                            {
                            {
                            this.state = 386;
                            this.match(SparkSqlParser.KW_LOCATION);
                            this.state = 387;
                            this.stringLit();
                            }
                            }
                            break;
                        case SparkSqlParser.KW_WITH:
                            {
                            {
                            this.state = 388;
                            this.match(SparkSqlParser.KW_WITH);
                            this.state = 389;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 78 || _la === 229)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 390;
                            this.propertyList();
                            }
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                    }
                    this.state = 395;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 7, this.context);
                }
                }
                break;
            case 6:
                localContext = new SetNamespacePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 396;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 397;
                this.namespace();
                this.state = 398;
                this.namespaceName();
                this.state = 399;
                this.match(SparkSqlParser.KW_SET);
                this.state = 400;
                _la = this.tokenStream.LA(1);
                if(!(_la === 78 || _la === 229)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 401;
                this.propertyList();
                }
                break;
            case 7:
                localContext = new SetNamespaceLocationContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 403;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 404;
                this.namespace();
                this.state = 405;
                this.namespaceName();
                this.state = 406;
                this.match(SparkSqlParser.KW_SET);
                this.state = 407;
                this.match(SparkSqlParser.KW_LOCATION);
                this.state = 408;
                this.stringLit();
                }
                break;
            case 8:
                localContext = new DropNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 410;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 411;
                this.namespace();
                this.state = 413;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 8, this.context) ) {
                case 1:
                    {
                    this.state = 412;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 415;
                this.namespaceName();
                this.state = 417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 247) {
                    {
                    this.state = 416;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 34 || _la === 247)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 9:
                localContext = new ShowNamespacesContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 419;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 420;
                _la = this.tokenStream.LA(1);
                if(!(_la === 73 || _la === 191 || _la === 262)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 423;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 10, this.context) ) {
                case 1:
                    {
                    this.state = 421;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 422;
                    this.multipartIdentifier();
                    }
                    break;
                }
                this.state = 429;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 377 || _la === 378) {
                    {
                    this.state = 426;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 425;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 428;
                    (localContext as ShowNamespacesContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 10:
                localContext = new CreateTableContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 431;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 433;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 298) {
                    {
                    this.state = 432;
                    this.match(SparkSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 436;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 435;
                    this.match(SparkSqlParser.KW_EXTERNAL);
                    }
                }

                this.state = 438;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 440;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
                case 1:
                    {
                    this.state = 439;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 442;
                this.tableNameCreate();
                this.state = 447;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context) ) {
                case 1:
                    {
                    this.state = 443;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 444;
                    this.createOrReplaceTableColTypeList();
                    this.state = 445;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 450;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 332) {
                    {
                    this.state = 449;
                    this.tableProvider();
                    }
                }

                this.state = 452;
                this.createTableClauses();
                this.state = 457;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 19, this.context) ) {
                case 1:
                    {
                    this.state = 454;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 453;
                        this.match(SparkSqlParser.KW_AS);
                        }
                    }

                    this.state = 456;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 11:
                localContext = new CreateTableLikeContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 459;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 460;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 462;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 20, this.context) ) {
                case 1:
                    {
                    this.state = 461;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 464;
                (localContext as CreateTableLikeContext)._target = this.tableNameCreate();
                this.state = 465;
                this.match(SparkSqlParser.KW_LIKE);
                this.state = 466;
                (localContext as CreateTableLikeContext)._source = this.tableName();
                this.state = 477;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 162 || _la === 170 || _la === 257 || _la === 283 || _la === 297 || _la === 332) {
                    {
                    this.state = 475;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_USING:
                        {
                        this.state = 467;
                        this.tableProvider();
                        }
                        break;
                    case SparkSqlParser.KW_ROW:
                        {
                        this.state = 468;
                        this.rowFormat();
                        }
                        break;
                    case SparkSqlParser.KW_STORED:
                        {
                        this.state = 469;
                        this.createFileFormat();
                        }
                        break;
                    case SparkSqlParser.KW_LOCATION:
                        {
                        {
                        this.state = 470;
                        this.match(SparkSqlParser.KW_LOCATION);
                        this.state = 471;
                        this.stringLit();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 472;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 473;
                        (localContext as CreateTableLikeContext)._tableProps = this.propertyList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_LIFECYCLE:
                        {
                        this.state = 474;
                        this.tableLifecycle();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 479;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 12:
                localContext = new ReplaceTableContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 482;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 59) {
                    {
                    this.state = 480;
                    this.match(SparkSqlParser.KW_CREATE);
                    this.state = 481;
                    this.match(SparkSqlParser.KW_OR);
                    }
                }

                this.state = 484;
                this.match(SparkSqlParser.KW_REPLACE);
                this.state = 485;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 486;
                this.tableNameCreate();
                this.state = 491;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
                case 1:
                    {
                    this.state = 487;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 488;
                    this.createOrReplaceTableColTypeList();
                    this.state = 489;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 494;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 332) {
                    {
                    this.state = 493;
                    this.tableProvider();
                    }
                }

                this.state = 496;
                this.createTableClauses();
                this.state = 501;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
                case 1:
                    {
                    this.state = 498;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 497;
                        this.match(SparkSqlParser.KW_AS);
                        }
                    }

                    this.state = 500;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 13:
                localContext = new AnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 503;
                this.match(SparkSqlParser.KW_ANALYZE);
                this.state = 504;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 505;
                this.tableName();
                this.state = 507;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 506;
                    this.partitionSpec();
                    }
                }

                this.state = 509;
                this.match(SparkSqlParser.KW_COMPUTE);
                this.state = 510;
                this.match(SparkSqlParser.KW_STATISTICS);
                this.state = 518;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 29, this.context) ) {
                case 1:
                    {
                    this.state = 511;
                    this.match(SparkSqlParser.KW_NOSCAN);
                    }
                    break;
                case 2:
                    {
                    this.state = 512;
                    this.match(SparkSqlParser.KW_FOR);
                    this.state = 513;
                    this.match(SparkSqlParser.KW_COLUMNS);
                    this.state = 514;
                    this.columnNameSeq();
                    }
                    break;
                case 3:
                    {
                    this.state = 515;
                    this.match(SparkSqlParser.KW_FOR);
                    this.state = 516;
                    this.match(SparkSqlParser.KW_ALL);
                    this.state = 517;
                    this.match(SparkSqlParser.KW_COLUMNS);
                    }
                    break;
                }
                }
                break;
            case 14:
                localContext = new AnalyzeTablesContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 520;
                this.match(SparkSqlParser.KW_ANALYZE);
                this.state = 521;
                this.match(SparkSqlParser.KW_TABLES);
                this.state = 524;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123 || _la === 140) {
                    {
                    this.state = 522;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 523;
                    this.namespaceName();
                    }
                }

                this.state = 526;
                this.match(SparkSqlParser.KW_COMPUTE);
                this.state = 527;
                this.match(SparkSqlParser.KW_STATISTICS);
                this.state = 529;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 528;
                    this.match(SparkSqlParser.KW_NOSCAN);
                    }
                }

                }
                break;
            case 15:
                localContext = new AlterTableAddColumnContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 531;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 532;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 533;
                this.tableName();
                this.state = 534;
                this.match(SparkSqlParser.KW_ADD);
                this.state = 535;
                this.match(SparkSqlParser.KW_COLUMN);
                this.state = 536;
                this.qualifiedColTypeWithPositionForAdd();
                }
                break;
            case 16:
                localContext = new AlterTableAddColumnsContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 538;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 539;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 540;
                this.tableName();
                this.state = 541;
                this.match(SparkSqlParser.KW_ADD);
                this.state = 542;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 543;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 544;
                this.qualifiedColTypeWithPositionSeqForAdd();
                this.state = 545;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 17:
                localContext = new RenameTableColumnContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 547;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 548;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 549;
                (localContext as RenameTableColumnContext)._table = this.tableName();
                this.state = 550;
                this.match(SparkSqlParser.KW_RENAME);
                this.state = 551;
                this.match(SparkSqlParser.KW_COLUMN);
                this.state = 552;
                this.columnName();
                this.state = 553;
                this.match(SparkSqlParser.KW_TO);
                this.state = 554;
                this.columnNameCreate();
                }
                break;
            case 18:
                localContext = new AlterTableDropColumnContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 556;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 557;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 558;
                this.tableName();
                this.state = 559;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 560;
                this.match(SparkSqlParser.KW_COLUMN);
                this.state = 562;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
                case 1:
                    {
                    this.state = 561;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 564;
                this.columnName();
                }
                break;
            case 19:
                localContext = new DropTableColumnsContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 566;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 567;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 568;
                this.tableName();
                this.state = 569;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 570;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 572;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 571;
                    this.ifExists();
                    }
                }

                this.state = 574;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 575;
                this.columnNameSeq();
                this.state = 576;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 20:
                localContext = new RenameTableContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 578;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 583;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 579;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 580;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 581;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 582;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 585;
                this.match(SparkSqlParser.KW_RENAME);
                this.state = 586;
                this.match(SparkSqlParser.KW_TO);
                this.state = 587;
                this.multipartIdentifier();
                }
                break;
            case 21:
                localContext = new SetTablePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 589;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 594;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 590;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 591;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 592;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 593;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 596;
                this.match(SparkSqlParser.KW_SET);
                this.state = 597;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 598;
                this.propertyList();
                }
                break;
            case 22:
                localContext = new UnsetTablePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 600;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 605;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 601;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 602;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 603;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 604;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 607;
                this.match(SparkSqlParser.KW_UNSET);
                this.state = 608;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 610;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 609;
                    this.ifExists();
                    }
                }

                this.state = 612;
                this.propertyList();
                }
                break;
            case 23:
                localContext = new AlterTableAlterColumnContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 614;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 615;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 616;
                (localContext as AlterTableAlterColumnContext)._table = this.tableName();
                this.state = 617;
                _la = this.tokenStream.LA(1);
                if(!(_la === 11 || _la === 39)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 619;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 38, this.context) ) {
                case 1:
                    {
                    this.state = 618;
                    this.match(SparkSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 621;
                (localContext as AlterTableAlterColumnContext)._column = this.columnName();
                this.state = 623;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
                case 1:
                    {
                    this.state = 622;
                    this.alterColumnAction();
                    }
                    break;
                }
                }
                break;
            case 24:
                localContext = new HiveChangeColumnContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 625;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 626;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 627;
                (localContext as HiveChangeColumnContext)._table = this.tableName();
                this.state = 629;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 628;
                    this.partitionSpec();
                    }
                }

                this.state = 631;
                this.match(SparkSqlParser.KW_CHANGE);
                this.state = 633;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 41, this.context) ) {
                case 1:
                    {
                    this.state = 632;
                    this.match(SparkSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 635;
                (localContext as HiveChangeColumnContext)._colName = this.columnName();
                this.state = 636;
                this.columnType();
                this.state = 638;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 9 || _la === 116) {
                    {
                    this.state = 637;
                    this.colPosition();
                    }
                }

                }
                break;
            case 25:
                localContext = new HiveReplaceColumnsContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 640;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 641;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 642;
                (localContext as HiveReplaceColumnsContext)._table = this.tableName();
                this.state = 644;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 643;
                    this.partitionSpec();
                    }
                }

                this.state = 646;
                this.match(SparkSqlParser.KW_REPLACE);
                this.state = 647;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 648;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 649;
                this.qualifiedColTypeWithPositionSeqForReplace();
                this.state = 650;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 26:
                localContext = new SetTableSerDeContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 652;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 653;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 654;
                this.tableName();
                this.state = 656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 655;
                    this.partitionSpec();
                    }
                }

                this.state = 658;
                this.match(SparkSqlParser.KW_SET);
                this.state = 659;
                this.match(SparkSqlParser.KW_SERDE);
                this.state = 660;
                this.stringLit();
                this.state = 664;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 45, this.context) ) {
                case 1:
                    {
                    this.state = 661;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 662;
                    this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                    this.state = 663;
                    this.propertyList();
                    }
                    break;
                }
                }
                break;
            case 27:
                localContext = new SetTableSerDePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 666;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 667;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 668;
                this.tableName();
                this.state = 670;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 669;
                    this.partitionSpec();
                    }
                }

                this.state = 672;
                this.match(SparkSqlParser.KW_SET);
                this.state = 673;
                this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                this.state = 674;
                this.propertyList();
                }
                break;
            case 28:
                localContext = new AddTablePartitionContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 676;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 681;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 677;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 678;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 679;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 680;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 683;
                this.match(SparkSqlParser.KW_ADD);
                this.state = 685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 684;
                    this.ifNotExists();
                    }
                }

                this.state = 688;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 687;
                    this.partitionSpecLocation();
                    }
                    }
                    this.state = 690;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 217);
                }
                break;
            case 29:
                localContext = new RenameTablePartitionContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 692;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 693;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 694;
                this.tableName();
                this.state = 695;
                this.partitionSpec();
                this.state = 696;
                this.match(SparkSqlParser.KW_RENAME);
                this.state = 697;
                this.match(SparkSqlParser.KW_TO);
                this.state = 698;
                this.partitionSpec();
                }
                break;
            case 30:
                localContext = new DropTablePartitionsContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 700;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 705;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 701;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 702;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 703;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 704;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 707;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 709;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 708;
                    this.ifExists();
                    }
                }

                this.state = 711;
                this.partitionSpec();
                this.state = 716;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 712;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 713;
                    this.partitionSpec();
                    }
                    }
                    this.state = 718;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 720;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 230) {
                    {
                    this.state = 719;
                    this.match(SparkSqlParser.KW_PURGE);
                    }
                }

                }
                break;
            case 31:
                localContext = new SetTableLocationContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 722;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 723;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 724;
                this.tableName();
                this.state = 726;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 725;
                    this.partitionSpec();
                    }
                }

                this.state = 728;
                this.match(SparkSqlParser.KW_SET);
                this.state = 729;
                this.match(SparkSqlParser.KW_LOCATION);
                this.state = 730;
                this.stringLit();
                }
                break;
            case 32:
                localContext = new RecoverPartitionsContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 732;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 733;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 734;
                this.tableName();
                this.state = 735;
                this.match(SparkSqlParser.KW_RECOVER);
                this.state = 736;
                this.match(SparkSqlParser.KW_PARTITIONS);
                }
                break;
            case 33:
                localContext = new AlterMaterializedViewRewriteContext(localContext);
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 738;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 739;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 740;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 741;
                this.viewName();
                this.state = 742;
                _la = this.tokenStream.LA(1);
                if(!(_la === 91 || _la === 98)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 743;
                this.match(SparkSqlParser.KW_REWRITE);
                }
                break;
            case 34:
                localContext = new AlterMaterializedViewPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 745;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 746;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 747;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 748;
                this.viewName();
                this.state = 749;
                this.match(SparkSqlParser.KW_SET);
                this.state = 750;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 751;
                this.propertyList();
                }
                break;
            case 35:
                localContext = new DropTableContext(localContext);
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 753;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 754;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 756;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
                case 1:
                    {
                    this.state = 755;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 758;
                this.tableName();
                this.state = 760;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 230) {
                    {
                    this.state = 759;
                    this.match(SparkSqlParser.KW_PURGE);
                    }
                }

                }
                break;
            case 36:
                localContext = new DropViewContext(localContext);
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 762;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 763;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 765;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 57, this.context) ) {
                case 1:
                    {
                    this.state = 764;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 767;
                this.viewName();
                }
                break;
            case 37:
                localContext = new DropMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 768;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 769;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 770;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 772;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
                case 1:
                    {
                    this.state = 771;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 774;
                this.viewName();
                }
                break;
            case 38:
                localContext = new CreateViewContext(localContext);
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 775;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 778;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 208) {
                    {
                    this.state = 776;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 777;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                }

                this.state = 784;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128 || _la === 298) {
                    {
                    this.state = 781;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 128) {
                        {
                        this.state = 780;
                        this.match(SparkSqlParser.KW_GLOBAL);
                        }
                    }

                    this.state = 783;
                    this.match(SparkSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 786;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 788;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 62, this.context) ) {
                case 1:
                    {
                    this.state = 787;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 790;
                this.viewNameCreate();
                this.state = 792;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 791;
                    this.identifierCommentList();
                    }
                }

                this.state = 803;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 51 || _la === 218 || _la === 297) {
                    {
                    this.state = 801;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_COMMENT:
                        {
                        {
                        this.state = 794;
                        this.match(SparkSqlParser.KW_COMMENT);
                        this.state = 795;
                        (localContext as CreateViewContext)._comment = this.stringLit();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 796;
                        this.match(SparkSqlParser.KW_PARTITIONED);
                        this.state = 797;
                        this.match(SparkSqlParser.KW_ON);
                        this.state = 798;
                        this.identifierList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 799;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 800;
                        this.propertyList();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 805;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 806;
                this.match(SparkSqlParser.KW_AS);
                this.state = 807;
                this.query();
                }
                break;
            case 39:
                localContext = new CreateTempViewUsingContext(localContext);
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 809;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 812;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 208) {
                    {
                    this.state = 810;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 811;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                }

                this.state = 815;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 814;
                    this.match(SparkSqlParser.KW_GLOBAL);
                    }
                }

                this.state = 817;
                this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 818;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 819;
                this.viewNameCreate();
                this.state = 824;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 820;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 821;
                    this.colTypeList();
                    this.state = 822;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                }

                this.state = 826;
                this.tableProvider();
                this.state = 829;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 827;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 828;
                    this.propertyList();
                    }
                }

                }
                break;
            case 40:
                localContext = new AlterViewQueryContext(localContext);
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 831;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 832;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 833;
                this.viewName();
                this.state = 835;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 834;
                    this.match(SparkSqlParser.KW_AS);
                    }
                }

                this.state = 837;
                this.query();
                }
                break;
            case 41:
                localContext = new CreateFunctionContext(localContext);
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 839;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 842;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 208) {
                    {
                    this.state = 840;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 841;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                }

                this.state = 845;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 298) {
                    {
                    this.state = 844;
                    this.match(SparkSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 847;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 849;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 73, this.context) ) {
                case 1:
                    {
                    this.state = 848;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 851;
                this.functionNameCreate();
                this.state = 852;
                this.match(SparkSqlParser.KW_AS);
                this.state = 853;
                (localContext as CreateFunctionContext)._className = this.stringLit();
                this.state = 867;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 332) {
                    {
                    this.state = 854;
                    this.match(SparkSqlParser.KW_USING);
                    {
                    this.state = 855;
                    this.identifier();
                    this.state = 856;
                    this.stringLit();
                    }
                    this.state = 864;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 858;
                        this.match(SparkSqlParser.COMMA);
                        {
                        this.state = 859;
                        this.identifier();
                        this.state = 860;
                        this.stringLit();
                        }
                        }
                        }
                        this.state = 866;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 42:
                localContext = new CreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 869;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 870;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 871;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 873;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 76, this.context) ) {
                case 1:
                    {
                    this.state = 872;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 875;
                this.viewNameCreate();
                this.state = 877;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 332) {
                    {
                    this.state = 876;
                    this.tableProvider();
                    }
                }

                this.state = 896;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 45 || _la === 51 || _la === 170 || _la === 207 || _la === 218 || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 67371009) !== 0) || _la === 297) {
                    {
                    this.state = 894;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_OPTIONS:
                        {
                        {
                        this.state = 879;
                        this.match(SparkSqlParser.KW_OPTIONS);
                        this.state = 880;
                        (localContext as CreateMaterializedViewContext)._options = this.propertyList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 881;
                        this.match(SparkSqlParser.KW_PARTITIONED);
                        this.state = 882;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 883;
                        (localContext as CreateMaterializedViewContext)._partitioning = this.partitionFieldList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_SKEWED:
                        {
                        this.state = 884;
                        this.skewSpec();
                        }
                        break;
                    case SparkSqlParser.KW_CLUSTERED:
                        {
                        this.state = 885;
                        this.bucketSpec();
                        }
                        break;
                    case SparkSqlParser.KW_ROW:
                        {
                        this.state = 886;
                        this.rowFormat();
                        }
                        break;
                    case SparkSqlParser.KW_STORED:
                        {
                        this.state = 887;
                        this.createFileFormat();
                        }
                        break;
                    case SparkSqlParser.KW_LOCATION:
                        {
                        {
                        this.state = 888;
                        this.match(SparkSqlParser.KW_LOCATION);
                        this.state = 889;
                        this.stringLit();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_COMMENT:
                        {
                        {
                        this.state = 890;
                        this.match(SparkSqlParser.KW_COMMENT);
                        this.state = 891;
                        (localContext as CreateMaterializedViewContext)._comment = this.stringLit();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 892;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 893;
                        (localContext as CreateMaterializedViewContext)._tableProps = this.propertyList();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 898;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 899;
                this.match(SparkSqlParser.KW_AS);
                this.state = 900;
                this.query();
                }
                break;
            case 43:
                localContext = new DropFunctionContext(localContext);
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 902;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 904;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 298) {
                    {
                    this.state = 903;
                    this.match(SparkSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 906;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 908;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 81, this.context) ) {
                case 1:
                    {
                    this.state = 907;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 910;
                this.functionName();
                }
                break;
            case 44:
                localContext = new DeclareVariableContext(localContext);
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 911;
                this.match(SparkSqlParser.KW_DECLARE);
                this.state = 914;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
                case 1:
                    {
                    this.state = 912;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 913;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                    break;
                }
                this.state = 917;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 83, this.context) ) {
                case 1:
                    {
                    this.state = 916;
                    this.match(SparkSqlParser.KW_VARIABLE);
                    }
                    break;
                }
                this.state = 919;
                this.functionName();
                this.state = 921;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
                case 1:
                    {
                    this.state = 920;
                    this.dataType();
                    }
                    break;
                }
                this.state = 924;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82 || _la === 352) {
                    {
                    this.state = 923;
                    this.variableDefaultExpression();
                    }
                }

                }
                break;
            case 45:
                localContext = new DropVariableContext(localContext);
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 926;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 927;
                this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 928;
                this.match(SparkSqlParser.KW_VARIABLE);
                this.state = 930;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 86, this.context) ) {
                case 1:
                    {
                    this.state = 929;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 935;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 87, this.context) ) {
                case 1:
                    {
                    this.state = 932;
                    this.tableName();
                    }
                    break;
                case 2:
                    {
                    this.state = 933;
                    this.viewName();
                    }
                    break;
                case 3:
                    {
                    this.state = 934;
                    this.functionName();
                    }
                    break;
                }
                }
                break;
            case 46:
                localContext = new ExplainStatementContext(localContext);
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 937;
                this.match(SparkSqlParser.KW_EXPLAIN);
                this.state = 939;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46 || _la === 58 || _la === 108 || _la === 122 || _la === 173) {
                    {
                    this.state = 938;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 46 || _la === 58 || _la === 108 || _la === 122 || _la === 173)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 941;
                this.statement();
                }
                break;
            case 47:
                localContext = new ShowTablesContext(localContext);
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 942;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 943;
                this.match(SparkSqlParser.KW_TABLES);
                this.state = 946;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                case 1:
                    {
                    this.state = 944;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 945;
                    this.namespaceName();
                    }
                    break;
                }
                this.state = 952;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 377 || _la === 378) {
                    {
                    this.state = 949;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 948;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 951;
                    (localContext as ShowTablesContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 48:
                localContext = new ShowTableExtendedContext(localContext);
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 954;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 955;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 956;
                this.match(SparkSqlParser.KW_EXTENDED);
                this.state = 959;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123 || _la === 140) {
                    {
                    this.state = 957;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 958;
                    (localContext as ShowTableExtendedContext)._ns = this.namespaceName();
                    }
                }

                this.state = 961;
                this.match(SparkSqlParser.KW_LIKE);
                this.state = 962;
                (localContext as ShowTableExtendedContext)._pattern = this.stringLit();
                this.state = 964;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 963;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 49:
                localContext = new ShowTblPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 966;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 967;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 968;
                (localContext as ShowTblPropertiesContext)._table = this.tableName();
                this.state = 973;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 94, this.context) ) {
                case 1:
                    {
                    this.state = 969;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 970;
                    (localContext as ShowTblPropertiesContext)._key = this.propertyKey();
                    this.state = 971;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            case 50:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 975;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 976;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 977;
                _la = this.tokenStream.LA(1);
                if(!(_la === 123 || _la === 140)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 978;
                (localContext as ShowColumnsContext)._table = this.tableName();
                this.state = 981;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 95, this.context) ) {
                case 1:
                    {
                    this.state = 979;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 980;
                    this.namespaceName();
                    }
                    break;
                }
                }
                break;
            case 51:
                localContext = new ShowViewsContext(localContext);
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 983;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 984;
                this.match(SparkSqlParser.KW_VIEWS);
                this.state = 987;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 96, this.context) ) {
                case 1:
                    {
                    this.state = 985;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 986;
                    this.namespaceName();
                    }
                    break;
                }
                this.state = 993;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 377 || _la === 378) {
                    {
                    this.state = 990;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 989;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 992;
                    (localContext as ShowViewsContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 52:
                localContext = new ShowPartitionsContext(localContext);
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 995;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 996;
                this.match(SparkSqlParser.KW_PARTITIONS);
                this.state = 997;
                this.tableName();
                this.state = 999;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 998;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 53:
                localContext = new ShowFunctionsContext(localContext);
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 1001;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1003;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10 || _la === 290 || _la === 331) {
                    {
                    this.state = 1002;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 10 || _la === 290 || _la === 331)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1005;
                this.match(SparkSqlParser.KW_FUNCTIONS);
                this.state = 1008;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 101, this.context) ) {
                case 1:
                    {
                    this.state = 1006;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1007;
                    (localContext as ShowFunctionsContext)._ns = this.namespaceName();
                    }
                    break;
                }
                this.state = 1017;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 104, this.context) ) {
                case 1:
                    {
                    this.state = 1011;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 102, this.context) ) {
                    case 1:
                        {
                        this.state = 1010;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                        break;
                    }
                    this.state = 1015;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 103, this.context) ) {
                    case 1:
                        {
                        this.state = 1013;
                        (localContext as ShowFunctionsContext)._legacy = this.multipartIdentifier();
                        }
                        break;
                    case 2:
                        {
                        this.state = 1014;
                        (localContext as ShowFunctionsContext)._pattern = this.stringLit();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 54:
                localContext = new ShowCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 1019;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1020;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1021;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1022;
                this.tableName();
                this.state = 1025;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 1023;
                    this.match(SparkSqlParser.KW_AS);
                    this.state = 1024;
                    this.match(SparkSqlParser.KW_SERDE);
                    }
                }

                }
                break;
            case 55:
                localContext = new ShowCurrentNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 1027;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1028;
                this.match(SparkSqlParser.KW_CURRENT);
                this.state = 1029;
                this.namespace();
                }
                break;
            case 56:
                localContext = new ShowCatalogsContext(localContext);
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 1030;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1031;
                this.match(SparkSqlParser.KW_CATALOGS);
                this.state = 1036;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 377 || _la === 378) {
                    {
                    this.state = 1033;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 1032;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1035;
                    (localContext as ShowCatalogsContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 57:
                localContext = new ShowMaterializedViewsContext(localContext);
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 1038;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1039;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 1040;
                this.match(SparkSqlParser.KW_VIEWS);
                this.state = 1043;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 108, this.context) ) {
                case 1:
                    {
                    this.state = 1041;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1042;
                    (localContext as ShowMaterializedViewsContext)._db_name = this.namespaceName();
                    }
                    break;
                }
                this.state = 1049;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 377 || _la === 378) {
                    {
                    this.state = 1046;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 1045;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1048;
                    (localContext as ShowMaterializedViewsContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 58:
                localContext = new ShowCreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 1051;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1052;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1053;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 1054;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 1055;
                this.viewName();
                this.state = 1058;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 1056;
                    this.match(SparkSqlParser.KW_AS);
                    this.state = 1057;
                    this.match(SparkSqlParser.KW_SERDE);
                    }
                }

                }
                break;
            case 59:
                localContext = new DescribeFunctionContext(localContext);
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 1060;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1061;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 1063;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 112, this.context) ) {
                case 1:
                    {
                    this.state = 1062;
                    this.match(SparkSqlParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 1065;
                this.describeFuncName();
                }
                break;
            case 60:
                localContext = new DescribeNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 1066;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1067;
                this.match(SparkSqlParser.KW_DATABASE);
                this.state = 1069;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 113, this.context) ) {
                case 1:
                    {
                    this.state = 1068;
                    this.match(SparkSqlParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 1071;
                this.namespaceName();
                }
                break;
            case 61:
                localContext = new DescribeRelationContext(localContext);
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 1072;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1074;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1073;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1077;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
                case 1:
                    {
                    this.state = 1076;
                    (localContext as DescribeRelationContext)._option = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 108 || _la === 122)) {
                        (localContext as DescribeRelationContext)._option = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 1079;
                this.tableName();
                this.state = 1081;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 116, this.context) ) {
                case 1:
                    {
                    this.state = 1080;
                    this.partitionSpec();
                    }
                    break;
                }
                this.state = 1084;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 117, this.context) ) {
                case 1:
                    {
                    this.state = 1083;
                    this.describeColName();
                    }
                    break;
                }
                }
                break;
            case 62:
                localContext = new DescribeQueryContext(localContext);
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1086;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 1087;
                    this.match(SparkSqlParser.KW_QUERY);
                    }
                }

                this.state = 1090;
                this.query();
                }
                break;
            case 63:
                localContext = new CommentTableContext(localContext);
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1091;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 1092;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1098;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_DATABASE:
                case SparkSqlParser.KW_NAMESPACE:
                case SparkSqlParser.KW_SCHEMA:
                    {
                    {
                    this.state = 1093;
                    this.namespace();
                    this.state = 1094;
                    this.namespaceName();
                    }
                    }
                    break;
                case SparkSqlParser.KW_TABLE:
                    {
                    {
                    this.state = 1096;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 1097;
                    this.tableName();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1100;
                this.match(SparkSqlParser.KW_IS);
                this.state = 1103;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.STRING_LITERAL:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 1101;
                    this.stringLit();
                    }
                    break;
                case SparkSqlParser.KW_NULL:
                    {
                    this.state = 1102;
                    this.match(SparkSqlParser.KW_NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 64:
                localContext = new RefreshTableContext(localContext);
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1105;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1106;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1107;
                this.tableName();
                }
                break;
            case 65:
                localContext = new RefreshFunctionContext(localContext);
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1108;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1109;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 1110;
                this.functionName();
                }
                break;
            case 66:
                localContext = new RefreshResourceContext(localContext);
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1111;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1119;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 122, this.context) ) {
                case 1:
                    {
                    this.state = 1112;
                    this.stringLit();
                    }
                    break;
                case 2:
                    {
                    this.state = 1116;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 121, this.context);
                    while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1 + 1) {
                            {
                            {
                            this.state = 1113;
                            this.matchWildcard();
                            }
                            }
                        }
                        this.state = 1118;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 121, this.context);
                    }
                    }
                    break;
                }
                }
                break;
            case 67:
                localContext = new RefreshMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1121;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1122;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 1123;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 1124;
                this.viewName();
                }
                break;
            case 68:
                localContext = new CacheTableContext(localContext);
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1125;
                this.match(SparkSqlParser.KW_CACHE);
                this.state = 1127;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 159) {
                    {
                    this.state = 1126;
                    this.match(SparkSqlParser.KW_LAZY);
                    }
                }

                this.state = 1129;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1130;
                this.tableName();
                this.state = 1133;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 1131;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 1132;
                    (localContext as CacheTableContext)._options = this.propertyList();
                    }
                }

                this.state = 1139;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 126, this.context) ) {
                case 1:
                    {
                    this.state = 1136;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 1135;
                        this.match(SparkSqlParser.KW_AS);
                        }
                    }

                    this.state = 1138;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 69:
                localContext = new UnCacheTableContext(localContext);
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1141;
                this.match(SparkSqlParser.KW_UNCACHE);
                this.state = 1142;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1144;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
                case 1:
                    {
                    this.state = 1143;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1146;
                this.tableName();
                }
                break;
            case 70:
                localContext = new ClearCacheContext(localContext);
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1147;
                this.match(SparkSqlParser.KW_CLEAR);
                this.state = 1148;
                this.match(SparkSqlParser.KW_CACHE);
                }
                break;
            case 71:
                localContext = new LoadDataContext(localContext);
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1149;
                this.match(SparkSqlParser.KW_LOAD);
                this.state = 1150;
                this.match(SparkSqlParser.KW_DATA);
                this.state = 1152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 169) {
                    {
                    this.state = 1151;
                    this.match(SparkSqlParser.KW_LOCAL);
                    }
                }

                this.state = 1154;
                this.match(SparkSqlParser.KW_INPATH);
                this.state = 1155;
                (localContext as LoadDataContext)._path = this.stringLit();
                this.state = 1157;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1156;
                    this.match(SparkSqlParser.KW_OVERWRITE);
                    }
                }

                this.state = 1159;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1160;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1161;
                this.tableName();
                this.state = 1163;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1162;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 72:
                localContext = new TruncateTableContext(localContext);
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1165;
                this.match(SparkSqlParser.KW_TRUNCATE);
                this.state = 1166;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1167;
                this.tableName();
                this.state = 1169;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1168;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 73:
                localContext = new RepairTableContext(localContext);
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1172;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188) {
                    {
                    this.state = 1171;
                    this.match(SparkSqlParser.KW_MSCK);
                    }
                }

                this.state = 1174;
                this.match(SparkSqlParser.KW_REPAIR);
                this.state = 1175;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1176;
                this.tableName();
                this.state = 1179;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 133, this.context) ) {
                case 1:
                    {
                    this.state = 1177;
                    (localContext as RepairTableContext)._option = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 8 || _la === 96 || _la === 289)) {
                        (localContext as RepairTableContext)._option = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1178;
                    this.match(SparkSqlParser.KW_PARTITIONS);
                    }
                    break;
                }
                }
                break;
            case 74:
                localContext = new ManageResourceContext(localContext);
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1181;
                (localContext as ManageResourceContext)._op = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 8 || _la === 167)) {
                    (localContext as ManageResourceContext)._op = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1182;
                this.identifier();
                this.state = 1186;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 134, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1183;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1188;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 134, this.context);
                }
                }
                break;
            case 75:
                localContext = new FailNativeCommandContext(localContext);
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1189;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1190;
                this.match(SparkSqlParser.KW_ROLE);
                this.state = 1194;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 135, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1191;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1196;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 135, this.context);
                }
                }
                break;
            case 76:
                localContext = new SetTimeZoneIntervalContext(localContext);
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1197;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1198;
                this.match(SparkSqlParser.KW_TIME);
                this.state = 1199;
                this.match(SparkSqlParser.KW_ZONE);
                this.state = 1200;
                this.interval();
                }
                break;
            case 77:
                localContext = new SetTimeZoneContext(localContext);
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1201;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1202;
                this.match(SparkSqlParser.KW_TIME);
                this.state = 1203;
                this.match(SparkSqlParser.KW_ZONE);
                this.state = 1206;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.STRING_LITERAL:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 1204;
                    this.stringLit();
                    }
                    break;
                case SparkSqlParser.KW_LOCAL:
                    {
                    this.state = 1205;
                    this.match(SparkSqlParser.KW_LOCAL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 78:
                localContext = new SetTimeZoneAnyContext(localContext);
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1208;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1209;
                this.match(SparkSqlParser.KW_TIME);
                this.state = 1210;
                this.match(SparkSqlParser.KW_ZONE);
                this.state = 1214;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 137, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1211;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1216;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 137, this.context);
                }
                }
                break;
            case 79:
                localContext = new SetVariableAssignmentContext(localContext);
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1217;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1218;
                _la = this.tokenStream.LA(1);
                if(!(_la === 335 || _la === 336)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1219;
                this.assignmentList();
                }
                break;
            case 80:
                localContext = new SetVariableMultiAssignmentContext(localContext);
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1220;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1221;
                _la = this.tokenStream.LA(1);
                if(!(_la === 335 || _la === 336)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1222;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1223;
                this.multipartIdentifierList();
                this.state = 1224;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 1225;
                this.match(SparkSqlParser.EQ);
                this.state = 1226;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1227;
                this.query();
                this.state = 1228;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 81:
                localContext = new SetConfigContext(localContext);
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1230;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1231;
                this.quotedIdentifier();
                this.state = 1232;
                this.match(SparkSqlParser.EQ);
                this.state = 1233;
                this.match(SparkSqlParser.BACKQUOTED_IDENTIFIER);
                }
                break;
            case 82:
                localContext = new SetConfigAndValueContext(localContext);
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1235;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1236;
                this.quotedIdentifier();
                this.state = 1244;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352) {
                    {
                    this.state = 1237;
                    this.match(SparkSqlParser.EQ);
                    this.state = 1241;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 138, this.context);
                    while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1 + 1) {
                            {
                            {
                            this.state = 1238;
                            this.matchWildcard();
                            }
                            }
                        }
                        this.state = 1243;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 138, this.context);
                    }
                    }
                }

                }
                break;
            case 83:
                localContext = new SetConfigAnyKeyContext(localContext);
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1246;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1250;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 140, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1247;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1252;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 140, this.context);
                }
                this.state = 1253;
                this.match(SparkSqlParser.EQ);
                this.state = 1254;
                this.match(SparkSqlParser.BACKQUOTED_IDENTIFIER);
                }
                break;
            case 84:
                localContext = new SetAnyContext(localContext);
                this.enterOuterAlt(localContext, 84);
                {
                this.state = 1255;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1259;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 141, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1256;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1261;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 141, this.context);
                }
                }
                break;
            case 85:
                localContext = new ResetConfigContext(localContext);
                this.enterOuterAlt(localContext, 85);
                {
                this.state = 1262;
                this.match(SparkSqlParser.KW_RESET);
                this.state = 1263;
                this.quotedIdentifier();
                }
                break;
            case 86:
                localContext = new ResetAnyContext(localContext);
                this.enterOuterAlt(localContext, 86);
                {
                this.state = 1264;
                this.match(SparkSqlParser.KW_RESET);
                this.state = 1268;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 142, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1265;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1270;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 142, this.context);
                }
                }
                break;
            case 87:
                localContext = new CreateIndexContext(localContext);
                this.enterOuterAlt(localContext, 87);
                {
                this.state = 1271;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1272;
                this.match(SparkSqlParser.KW_INDEX);
                this.state = 1274;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 143, this.context) ) {
                case 1:
                    {
                    this.state = 1273;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 1276;
                this.identifier();
                this.state = 1277;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1279;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1278;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1281;
                this.tableName();
                this.state = 1284;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 332) {
                    {
                    this.state = 1282;
                    this.match(SparkSqlParser.KW_USING);
                    this.state = 1283;
                    (localContext as CreateIndexContext)._indexType = this.identifier();
                    }
                }

                this.state = 1286;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1287;
                this.multipartIdentifierPropertyList();
                this.state = 1288;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 1291;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 1289;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 1290;
                    (localContext as CreateIndexContext)._options = this.propertyList();
                    }
                }

                }
                break;
            case 88:
                localContext = new DropIndexContext(localContext);
                this.enterOuterAlt(localContext, 88);
                {
                this.state = 1293;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 1294;
                this.match(SparkSqlParser.KW_INDEX);
                this.state = 1296;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 147, this.context) ) {
                case 1:
                    {
                    this.state = 1295;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1298;
                this.identifier();
                this.state = 1299;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1301;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1300;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1303;
                this.tableName();
                }
                break;
            case 89:
                localContext = new OptimizeTableContext(localContext);
                this.enterOuterAlt(localContext, 89);
                {
                this.state = 1305;
                this.match(SparkSqlParser.KW_OPTIMIZE);
                this.state = 1306;
                this.tableName();
                this.state = 1308;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 344) {
                    {
                    this.state = 1307;
                    this.whereClause();
                    }
                }

                this.state = 1310;
                this.zOrderClause();
                }
                break;
            case 90:
                localContext = new UnsupportHiveCommandsContext(localContext);
                this.enterOuterAlt(localContext, 90);
                {
                this.state = 1312;
                this.unsupportedHiveNativeCommands();
                this.state = 1316;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 150, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1313;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1318;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 150, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedHiveNativeCommands(): UnsupportedHiveNativeCommandsContext {
        let localContext = new UnsupportedHiveNativeCommandsContext(this.context, this.state);
        this.enterRule(localContext, 6, SparkSqlParser.RULE_unsupportedHiveNativeCommands);
        let _la: number;
        try {
            this.state = 1414;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 157, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1321;
                localContext._kw1 = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 59 || _la === 96)) {
                    localContext._kw1 = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1322;
                localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1323;
                localContext._kw1 = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 129 || _la === 249)) {
                    localContext._kw1 = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1325;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 152, this.context) ) {
                case 1:
                    {
                    this.state = 1324;
                    localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1327;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1328;
                localContext._kw2 = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 54 || _la === 129 || _la === 143 || _la === 172 || _la === 228 || _la === 313)) {
                    localContext._kw2 = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1329;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1330;
                localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                this.state = 1332;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 153, this.context) ) {
                case 1:
                    {
                    this.state = 1331;
                    localContext._kw3 = this.match(SparkSqlParser.KW_GRANT);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1334;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1336;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 1335;
                    this.match(SparkSqlParser.KW_CURRENT);
                    }
                }

                this.state = 1338;
                this.match(SparkSqlParser.KW_ROLES);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1339;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1340;
                localContext._kw2 = this.match(SparkSqlParser.KW_CREATE);
                this.state = 1341;
                localContext._kw3 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1342;
                localContext._kw1 = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 11 || _la === 59 || _la === 96)) {
                    localContext._kw1 = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1343;
                localContext._kw2 = this.match(SparkSqlParser.KW_INDEX);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1344;
                localContext._kw1 = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 107 || _la === 139 || _la === 171 || _la === 326)) {
                    localContext._kw1 = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1345;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1346;
                localContext._kw1 = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 171 || _la === 326)) {
                    localContext._kw1 = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1347;
                localContext._kw2 = this.match(SparkSqlParser.KW_DATABASE);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1348;
                localContext._kw1 = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 59 || _la === 96)) {
                    localContext._kw1 = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1349;
                localContext._kw2 = this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 1350;
                localContext._kw3 = this.match(SparkSqlParser.KW_MACRO);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1351;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1352;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1353;
                this.tableName();
                this.state = 1354;
                localContext._kw3 = this.match(SparkSqlParser.KW_NOT);
                this.state = 1355;
                localContext._kw4 = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 45 || _la === 275 || _la === 279)) {
                    localContext._kw4 = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1357;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1358;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1359;
                this.tableName();
                this.state = 1360;
                localContext._kw3 = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 45 || _la === 275)) {
                    localContext._kw3 = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1361;
                localContext._kw4 = this.match(SparkSqlParser.KW_BY);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1363;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1364;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1365;
                this.tableName();
                this.state = 1366;
                localContext._kw3 = this.match(SparkSqlParser.KW_SKEWED);
                this.state = 1367;
                localContext._kw4 = this.match(SparkSqlParser.KW_BY);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1369;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1370;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1371;
                this.tableName();
                this.state = 1372;
                localContext._kw3 = this.match(SparkSqlParser.KW_NOT);
                this.state = 1373;
                localContext._kw4 = this.match(SparkSqlParser.KW_STORED);
                this.state = 1374;
                localContext._kw5 = this.match(SparkSqlParser.KW_AS);
                this.state = 1375;
                localContext._kw6 = this.match(SparkSqlParser.KW_DIRECTORIES);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1377;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1378;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1379;
                this.tableName();
                this.state = 1380;
                localContext._kw3 = this.match(SparkSqlParser.KW_SET);
                this.state = 1381;
                localContext._kw4 = this.match(SparkSqlParser.KW_SKEWED);
                this.state = 1382;
                localContext._kw5 = this.match(SparkSqlParser.KW_LOCATION);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1384;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1385;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1386;
                this.tableName();
                this.state = 1387;
                localContext._kw3 = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 18 || _la === 103 || _la === 320)) {
                    localContext._kw3 = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1388;
                localContext._kw4 = this.match(SparkSqlParser.KW_PARTITION);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1390;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1391;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1392;
                this.tableName();
                this.state = 1393;
                localContext._kw3 = this.match(SparkSqlParser.KW_TOUCH);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1395;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1396;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1397;
                this.tableName();
                this.state = 1399;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1398;
                    this.partitionSpec();
                    }
                }

                this.state = 1407;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_COMPACT:
                    {
                    this.state = 1401;
                    this.match(SparkSqlParser.KW_COMPACT);
                    }
                    break;
                case SparkSqlParser.KW_CONCATENATE:
                    {
                    this.state = 1402;
                    this.match(SparkSqlParser.KW_CONCATENATE);
                    }
                    break;
                case SparkSqlParser.KW_SET:
                    {
                    {
                    this.state = 1403;
                    this.match(SparkSqlParser.KW_SET);
                    this.state = 1404;
                    this.match(SparkSqlParser.KW_FILEFORMAT);
                    }
                    }
                    break;
                case SparkSqlParser.KW_REPLACE:
                    {
                    {
                    this.state = 1405;
                    this.match(SparkSqlParser.KW_REPLACE);
                    this.state = 1406;
                    this.match(SparkSqlParser.KW_COLUMNS);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1409;
                localContext._kw1 = this.match(SparkSqlParser.KW_START);
                this.state = 1410;
                localContext._kw2 = this.match(SparkSqlParser.KW_TRANSACTION);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1411;
                localContext._kw1 = this.match(SparkSqlParser.KW_COMMIT);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1412;
                localContext._kw1 = this.match(SparkSqlParser.KW_ROLLBACK);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1413;
                localContext._kw1 = this.match(SparkSqlParser.KW_DFS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bucketSpec(): BucketSpecContext {
        let localContext = new BucketSpecContext(this.context, this.state);
        this.enterRule(localContext, 8, SparkSqlParser.RULE_bucketSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1416;
            this.match(SparkSqlParser.KW_CLUSTERED);
            this.state = 1417;
            this.match(SparkSqlParser.KW_BY);
            this.state = 1418;
            this.identifierList();
            this.state = 1422;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 279) {
                {
                this.state = 1419;
                this.match(SparkSqlParser.KW_SORTED);
                this.state = 1420;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1421;
                this.orderedIdentifierList();
                }
            }

            this.state = 1424;
            this.match(SparkSqlParser.KW_INTO);
            this.state = 1425;
            this.match(SparkSqlParser.INTEGER_VALUE);
            this.state = 1426;
            this.match(SparkSqlParser.KW_BUCKETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewSpec(): SkewSpecContext {
        let localContext = new SkewSpecContext(this.context, this.state);
        this.enterRule(localContext, 10, SparkSqlParser.RULE_skewSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1428;
            this.match(SparkSqlParser.KW_SKEWED);
            this.state = 1429;
            this.match(SparkSqlParser.KW_BY);
            this.state = 1430;
            this.identifierList();
            this.state = 1431;
            this.match(SparkSqlParser.KW_ON);
            this.state = 1434;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 159, this.context) ) {
            case 1:
                {
                this.state = 1432;
                this.constantList();
                }
                break;
            case 2:
                {
                this.state = 1433;
                this.nestedConstantList();
                }
                break;
            }
            this.state = 1439;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 160, this.context) ) {
            case 1:
                {
                this.state = 1436;
                this.match(SparkSqlParser.KW_STORED);
                this.state = 1437;
                this.match(SparkSqlParser.KW_AS);
                this.state = 1438;
                this.match(SparkSqlParser.KW_DIRECTORIES);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public locationSpec(): LocationSpecContext {
        let localContext = new LocationSpecContext(this.context, this.state);
        this.enterRule(localContext, 12, SparkSqlParser.RULE_locationSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1441;
            this.match(SparkSqlParser.KW_LOCATION);
            this.state = 1442;
            this.stringLit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commentSpec(): CommentSpecContext {
        let localContext = new CommentSpecContext(this.context, this.state);
        this.enterRule(localContext, 14, SparkSqlParser.RULE_commentSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1444;
            this.match(SparkSqlParser.KW_COMMENT);
            this.state = 1445;
            localContext._comment = this.stringLit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 16, SparkSqlParser.RULE_query);
        let _la: number;
        try {
            localContext = new QueryStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1448;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 346) {
                {
                this.state = 1447;
                this.ctes();
                }
            }

            this.state = 1450;
            this.queryTerm(0);
            this.state = 1451;
            this.queryOrganization();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertInto(): InsertIntoContext {
        let localContext = new InsertIntoContext(this.context, this.state);
        this.enterRule(localContext, 18, SparkSqlParser.RULE_insertInto);
        let _la: number;
        try {
            this.state = 1529;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1453;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1454;
                this.match(SparkSqlParser.KW_OVERWRITE);
                this.state = 1456;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1455;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1458;
                this.tableName();
                this.state = 1463;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1459;
                    this.partitionSpec();
                    this.state = 1461;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 137) {
                        {
                        this.state = 1460;
                        this.ifNotExists();
                        }
                    }

                    }
                }

                this.state = 1471;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 165, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 1465;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 1466;
                    this.match(SparkSqlParser.KW_NAME);
                    }
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 1467;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 1468;
                    this.columnNameSeq();
                    this.state = 1469;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1473;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1474;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1476;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1475;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1478;
                this.tableName();
                this.state = 1480;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1479;
                    this.partitionSpec();
                    }
                }

                this.state = 1483;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 1482;
                    this.ifNotExists();
                    }
                }

                this.state = 1491;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 169, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 1485;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 1486;
                    this.match(SparkSqlParser.KW_NAME);
                    }
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 1487;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 1488;
                    this.columnNameSeq();
                    this.state = 1489;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1493;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1494;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1496;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1495;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1498;
                this.tableName();
                this.state = 1499;
                this.match(SparkSqlParser.KW_REPLACE);
                this.state = 1500;
                this.whereClause();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1502;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1503;
                this.match(SparkSqlParser.KW_OVERWRITE);
                this.state = 1505;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 169) {
                    {
                    this.state = 1504;
                    this.match(SparkSqlParser.KW_LOCAL);
                    }
                }

                this.state = 1507;
                this.match(SparkSqlParser.KW_DIRECTORY);
                this.state = 1508;
                localContext._path = this.stringLit();
                this.state = 1510;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 257) {
                    {
                    this.state = 1509;
                    this.rowFormat();
                    }
                }

                this.state = 1513;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 283) {
                    {
                    this.state = 1512;
                    this.createFileFormat();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1515;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1516;
                this.match(SparkSqlParser.KW_OVERWRITE);
                this.state = 1518;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 169) {
                    {
                    this.state = 1517;
                    this.match(SparkSqlParser.KW_LOCAL);
                    }
                }

                this.state = 1520;
                this.match(SparkSqlParser.KW_DIRECTORY);
                this.state = 1522;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 377 || _la === 378) {
                    {
                    this.state = 1521;
                    localContext._path = this.stringLit();
                    }
                }

                this.state = 1524;
                this.tableProvider();
                this.state = 1527;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 1525;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 1526;
                    localContext._options = this.propertyList();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpecLocation(): PartitionSpecLocationContext {
        let localContext = new PartitionSpecLocationContext(this.context, this.state);
        this.enterRule(localContext, 20, SparkSqlParser.RULE_partitionSpecLocation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1531;
            this.partitionSpec();
            this.state = 1534;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 1532;
                this.match(SparkSqlParser.KW_LOCATION);
                this.state = 1533;
                this.stringLit();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpec(): PartitionSpecContext {
        let localContext = new PartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 22, SparkSqlParser.RULE_partitionSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1536;
            this.match(SparkSqlParser.KW_PARTITION);
            this.state = 1537;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1538;
            this.partitionVal();
            this.state = 1543;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1539;
                this.match(SparkSqlParser.COMMA);
                this.state = 1540;
                this.partitionVal();
                }
                }
                this.state = 1545;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1546;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionVal(): PartitionValContext {
        let localContext = new PartitionValContext(this.context, this.state);
        this.enterRule(localContext, 24, SparkSqlParser.RULE_partitionVal);
        let _la: number;
        try {
            this.state = 1557;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 181, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1548;
                this.identifier();
                this.state = 1551;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352) {
                    {
                    this.state = 1549;
                    this.match(SparkSqlParser.EQ);
                    this.state = 1550;
                    this.constant();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1553;
                this.identifier();
                this.state = 1554;
                this.match(SparkSqlParser.EQ);
                this.state = 1555;
                this.match(SparkSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namespace(): NamespaceContext {
        let localContext = new NamespaceContext(this.context, this.state);
        this.enterRule(localContext, 26, SparkSqlParser.RULE_namespace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1559;
            _la = this.tokenStream.LA(1);
            if(!(_la === 72 || _la === 190 || _la === 261)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeFuncName(): DescribeFuncNameContext {
        let localContext = new DescribeFuncNameContext(this.context, this.state);
        this.enterRule(localContext, 28, SparkSqlParser.RULE_describeFuncName);
        try {
            this.state = 1566;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 182, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1561;
                this.identifierReference();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1562;
                this.stringLit();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1563;
                this.comparisonOperator();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1564;
                this.arithmeticOperator();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1565;
                this.predicateOperator();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeColName(): DescribeColNameContext {
        let localContext = new DescribeColNameContext(this.context, this.state);
        this.enterRule(localContext, 30, SparkSqlParser.RULE_describeColName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1568;
            localContext._identifier = this.identifier();
            localContext._nameParts.push(localContext._identifier);
            this.state = 1573;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 5) {
                {
                {
                this.state = 1569;
                this.match(SparkSqlParser.DOT);
                this.state = 1570;
                localContext._identifier = this.identifier();
                localContext._nameParts.push(localContext._identifier);
                }
                }
                this.state = 1575;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ctes(): CtesContext {
        let localContext = new CtesContext(this.context, this.state);
        this.enterRule(localContext, 32, SparkSqlParser.RULE_ctes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1576;
            this.match(SparkSqlParser.KW_WITH);
            this.state = 1577;
            this.namedQuery();
            this.state = 1582;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1578;
                this.match(SparkSqlParser.COMMA);
                this.state = 1579;
                this.namedQuery();
                }
                }
                this.state = 1584;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 34, SparkSqlParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1585;
            localContext._name = this.errorCapturingIdentifier();
            this.state = 1587;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
            case 1:
                {
                this.state = 1586;
                localContext._columnAliases = this.identifierList();
                }
                break;
            }
            this.state = 1590;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 20) {
                {
                this.state = 1589;
                this.match(SparkSqlParser.KW_AS);
                }
            }

            this.state = 1592;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1593;
            this.query();
            this.state = 1594;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProvider(): TableProviderContext {
        let localContext = new TableProviderContext(this.context, this.state);
        this.enterRule(localContext, 36, SparkSqlParser.RULE_tableProvider);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1596;
            this.match(SparkSqlParser.KW_USING);
            this.state = 1597;
            this.multipartIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableClauses(): CreateTableClausesContext {
        let localContext = new CreateTableClausesContext(this.context, this.state);
        this.enterRule(localContext, 38, SparkSqlParser.RULE_createTableClauses);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1617;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 188, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1615;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_OPTIONS:
                        {
                        {
                        this.state = 1599;
                        this.match(SparkSqlParser.KW_OPTIONS);
                        this.state = 1600;
                        localContext._options = this.expressionPropertyList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 1601;
                        this.match(SparkSqlParser.KW_PARTITIONED);
                        this.state = 1602;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 1603;
                        localContext._partitioning = this.partitionFieldList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_SKEWED:
                        {
                        this.state = 1604;
                        this.skewSpec();
                        }
                        break;
                    case SparkSqlParser.KW_CLUSTERED:
                        {
                        this.state = 1605;
                        this.bucketSpec();
                        }
                        break;
                    case SparkSqlParser.KW_ROW:
                        {
                        this.state = 1606;
                        this.rowFormat();
                        }
                        break;
                    case SparkSqlParser.KW_STORED:
                        {
                        this.state = 1607;
                        this.createFileFormat();
                        }
                        break;
                    case SparkSqlParser.KW_LOCATION:
                        {
                        this.state = 1608;
                        this.match(SparkSqlParser.KW_LOCATION);
                        this.state = 1609;
                        this.stringLit();
                        }
                        break;
                    case SparkSqlParser.KW_COMMENT:
                        {
                        this.state = 1610;
                        this.match(SparkSqlParser.KW_COMMENT);
                        this.state = 1611;
                        localContext._comment = this.stringLit();
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 1612;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 1613;
                        localContext._tableProps = this.propertyList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_LIFECYCLE:
                        {
                        this.state = 1614;
                        this.tableLifecycle();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }
                this.state = 1619;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 188, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableLifecycle(): TableLifecycleContext {
        let localContext = new TableLifecycleContext(this.context, this.state);
        this.enterRule(localContext, 40, SparkSqlParser.RULE_tableLifecycle);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1620;
            this.match(SparkSqlParser.KW_LIFECYCLE);
            this.state = 1621;
            this.match(SparkSqlParser.INTEGER_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyList(): PropertyListContext {
        let localContext = new PropertyListContext(this.context, this.state);
        this.enterRule(localContext, 42, SparkSqlParser.RULE_propertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1623;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1624;
            this.property();
            this.state = 1629;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1625;
                this.match(SparkSqlParser.COMMA);
                this.state = 1626;
                this.property();
                }
                }
                this.state = 1631;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1632;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public property(): PropertyContext {
        let localContext = new PropertyContext(this.context, this.state);
        this.enterRule(localContext, 44, SparkSqlParser.RULE_property);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1634;
            localContext._key = this.propertyKey();
            this.state = 1639;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 111 || _la === 316 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 1174405121) !== 0) || _la === 384) {
                {
                this.state = 1636;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352) {
                    {
                    this.state = 1635;
                    this.match(SparkSqlParser.EQ);
                    }
                }

                this.state = 1638;
                localContext._value = this.propertyValue();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyKey(): PropertyKeyContext {
        let localContext = new PropertyKeyContext(this.context, this.state);
        this.enterRule(localContext, 46, SparkSqlParser.RULE_propertyKey);
        let _la: number;
        try {
            this.state = 1650;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 193, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1641;
                this.identifier();
                this.state = 1646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 5) {
                    {
                    {
                    this.state = 1642;
                    this.match(SparkSqlParser.DOT);
                    this.state = 1643;
                    this.identifier();
                    }
                    }
                    this.state = 1648;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1649;
                this.stringLit();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValue(): PropertyValueContext {
        let localContext = new PropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 48, SparkSqlParser.RULE_propertyValue);
        try {
            this.state = 1656;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1652;
                this.match(SparkSqlParser.INTEGER_VALUE);
                }
                break;
            case SparkSqlParser.DECIMAL_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1653;
                this.match(SparkSqlParser.DECIMAL_VALUE);
                }
                break;
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_TRUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1654;
                this.booleanValue();
                }
                break;
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1655;
                this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionPropertyList(): ExpressionPropertyListContext {
        let localContext = new ExpressionPropertyListContext(this.context, this.state);
        this.enterRule(localContext, 50, SparkSqlParser.RULE_expressionPropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1658;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1659;
            this.expressionProperty();
            this.state = 1664;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1660;
                this.match(SparkSqlParser.COMMA);
                this.state = 1661;
                this.expressionProperty();
                }
                }
                this.state = 1666;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1667;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionProperty(): ExpressionPropertyContext {
        let localContext = new ExpressionPropertyContext(this.context, this.state);
        this.enterRule(localContext, 52, SparkSqlParser.RULE_expressionProperty);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1669;
            localContext._key = this.propertyKey();
            this.state = 1674;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 2)) & ~0x1F) === 0 && ((1 << (_la - 2)) & 4294967233) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 4294967295) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 4294967295) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 4261412863) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 4294967295) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967295) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967291) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967263) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967287) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 2147483647) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1073678415) !== 0)) {
                {
                this.state = 1671;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352) {
                    {
                    this.state = 1670;
                    this.match(SparkSqlParser.EQ);
                    }
                }

                this.state = 1673;
                localContext._value = this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constantList(): ConstantListContext {
        let localContext = new ConstantListContext(this.context, this.state);
        this.enterRule(localContext, 54, SparkSqlParser.RULE_constantList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1676;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1677;
            this.constant();
            this.state = 1682;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1678;
                this.match(SparkSqlParser.COMMA);
                this.state = 1679;
                this.constant();
                }
                }
                this.state = 1684;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1685;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nestedConstantList(): NestedConstantListContext {
        let localContext = new NestedConstantListContext(this.context, this.state);
        this.enterRule(localContext, 56, SparkSqlParser.RULE_nestedConstantList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1687;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1688;
            this.constantList();
            this.state = 1693;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1689;
                this.match(SparkSqlParser.COMMA);
                this.state = 1690;
                this.constantList();
                }
                }
                this.state = 1695;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1696;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFileFormat(): CreateFileFormatContext {
        let localContext = new CreateFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 58, SparkSqlParser.RULE_createFileFormat);
        try {
            this.state = 1704;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 200, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1698;
                this.match(SparkSqlParser.KW_STORED);
                this.state = 1699;
                this.match(SparkSqlParser.KW_AS);
                this.state = 1700;
                this.fileFormat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1701;
                this.match(SparkSqlParser.KW_STORED);
                this.state = 1702;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1703;
                this.storageHandler();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fileFormat(): FileFormatContext {
        let localContext = new FileFormatContext(this.context, this.state);
        this.enterRule(localContext, 60, SparkSqlParser.RULE_fileFormat);
        try {
            this.state = 1712;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1706;
                this.match(SparkSqlParser.KW_INPUTFORMAT);
                this.state = 1707;
                localContext._inFmt = this.stringLit();
                this.state = 1708;
                this.match(SparkSqlParser.KW_OUTPUTFORMAT);
                this.state = 1709;
                localContext._outFmt = this.stringLit();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1711;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storageHandler(): StorageHandlerContext {
        let localContext = new StorageHandlerContext(this.context, this.state);
        this.enterRule(localContext, 62, SparkSqlParser.RULE_storageHandler);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1714;
            this.stringLit();
            this.state = 1718;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 202, this.context) ) {
            case 1:
                {
                this.state = 1715;
                this.match(SparkSqlParser.KW_WITH);
                this.state = 1716;
                this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                this.state = 1717;
                this.propertyList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dmlStatementNoWith(): DmlStatementNoWithContext {
        let localContext = new DmlStatementNoWithContext(this.context, this.state);
        this.enterRule(localContext, 64, SparkSqlParser.RULE_dmlStatementNoWith);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1778;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_INSERT:
                localContext = new InsertFromQueryContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1720;
                this.insertInto();
                this.state = 1721;
                this.query();
                }
                break;
            case SparkSqlParser.KW_FROM:
                localContext = new MultipleInsertContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1723;
                this.fromClause();
                this.state = 1727;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1724;
                        this.insertInto();
                        this.state = 1725;
                        this.fromStatementBody();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1729;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 203, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case SparkSqlParser.KW_DELETE:
                localContext = new DeleteFromTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1731;
                this.match(SparkSqlParser.KW_DELETE);
                this.state = 1732;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 1733;
                this.tableName();
                this.state = 1734;
                this.tableAlias();
                this.state = 1736;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 344) {
                    {
                    this.state = 1735;
                    this.whereClause();
                    }
                }

                }
                break;
            case SparkSqlParser.KW_UPDATE:
                localContext = new UpdateTableContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1738;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 1739;
                this.tableName();
                this.state = 1740;
                this.tableAlias();
                this.state = 1741;
                this.setClause();
                this.state = 1743;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 344) {
                    {
                    this.state = 1742;
                    this.whereClause();
                    }
                }

                }
                break;
            case SparkSqlParser.KW_MERGE:
                localContext = new MergeIntoTableContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1745;
                this.match(SparkSqlParser.KW_MERGE);
                this.state = 1746;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1747;
                (localContext as MergeIntoTableContext)._target = this.tableName();
                this.state = 1748;
                (localContext as MergeIntoTableContext)._targetAlias = this.tableAlias();
                this.state = 1749;
                this.match(SparkSqlParser.KW_USING);
                this.state = 1755;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_ADD:
                case SparkSqlParser.KW_AFTER:
                case SparkSqlParser.KW_ALL:
                case SparkSqlParser.KW_ALTER:
                case SparkSqlParser.KW_ALWAYS:
                case SparkSqlParser.KW_ANALYZE:
                case SparkSqlParser.KW_AND:
                case SparkSqlParser.KW_ANTI:
                case SparkSqlParser.KW_ANY:
                case SparkSqlParser.KW_ANY_VALUE:
                case SparkSqlParser.KW_ARCHIVE:
                case SparkSqlParser.KW_ARRAY:
                case SparkSqlParser.KW_AS:
                case SparkSqlParser.KW_ASC:
                case SparkSqlParser.KW_AT:
                case SparkSqlParser.KW_AUTHORIZATION:
                case SparkSqlParser.KW_BETWEEN:
                case SparkSqlParser.KW_BIGINT:
                case SparkSqlParser.KW_BINARY:
                case SparkSqlParser.KW_BOOLEAN:
                case SparkSqlParser.KW_BOTH:
                case SparkSqlParser.KW_BUCKET:
                case SparkSqlParser.KW_BUCKETS:
                case SparkSqlParser.KW_BY:
                case SparkSqlParser.KW_BYTE:
                case SparkSqlParser.KW_CACHE:
                case SparkSqlParser.KW_CASCADE:
                case SparkSqlParser.KW_CASE:
                case SparkSqlParser.KW_CAST:
                case SparkSqlParser.KW_CATALOG:
                case SparkSqlParser.KW_CATALOGS:
                case SparkSqlParser.KW_CHANGE:
                case SparkSqlParser.KW_CHAR:
                case SparkSqlParser.KW_CHARACTER:
                case SparkSqlParser.KW_CHECK:
                case SparkSqlParser.KW_CLEAR:
                case SparkSqlParser.KW_CLUSTER:
                case SparkSqlParser.KW_CLUSTERED:
                case SparkSqlParser.KW_CODEGEN:
                case SparkSqlParser.KW_COLLATE:
                case SparkSqlParser.KW_COLLECTION:
                case SparkSqlParser.KW_COLUMN:
                case SparkSqlParser.KW_COLUMNS:
                case SparkSqlParser.KW_COMMENT:
                case SparkSqlParser.KW_COMMIT:
                case SparkSqlParser.KW_COMPACT:
                case SparkSqlParser.KW_COMPACTIONS:
                case SparkSqlParser.KW_COMPUTE:
                case SparkSqlParser.KW_CONCATENATE:
                case SparkSqlParser.KW_CONSTRAINT:
                case SparkSqlParser.KW_COST:
                case SparkSqlParser.KW_CREATE:
                case SparkSqlParser.KW_CROSS:
                case SparkSqlParser.KW_CUBE:
                case SparkSqlParser.KW_CURRENT:
                case SparkSqlParser.KW_CURRENT_DATE:
                case SparkSqlParser.KW_CURRENT_TIME:
                case SparkSqlParser.KW_CURRENT_TIMESTAMP:
                case SparkSqlParser.KW_CURRENT_USER:
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYS:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_DATA:
                case SparkSqlParser.KW_DATE:
                case SparkSqlParser.KW_DATABASE:
                case SparkSqlParser.KW_DATABASES:
                case SparkSqlParser.KW_DATEADD:
                case SparkSqlParser.KW_DATE_ADD:
                case SparkSqlParser.KW_DATEDIFF:
                case SparkSqlParser.KW_DATE_DIFF:
                case SparkSqlParser.KW_DBPROPERTIES:
                case SparkSqlParser.KW_DEC:
                case SparkSqlParser.KW_DECIMAL:
                case SparkSqlParser.KW_DECLARE:
                case SparkSqlParser.KW_DEFAULT:
                case SparkSqlParser.KW_DEFINED:
                case SparkSqlParser.KW_DELETE:
                case SparkSqlParser.KW_DELIMITED:
                case SparkSqlParser.KW_DESC:
                case SparkSqlParser.KW_DESCRIBE:
                case SparkSqlParser.KW_DFS:
                case SparkSqlParser.KW_DIRECTORIES:
                case SparkSqlParser.KW_DIRECTORY:
                case SparkSqlParser.KW_DISABLE:
                case SparkSqlParser.KW_DISTINCT:
                case SparkSqlParser.KW_DISTRIBUTE:
                case SparkSqlParser.KW_DIV:
                case SparkSqlParser.KW_DOUBLE:
                case SparkSqlParser.KW_DROP:
                case SparkSqlParser.KW_ELSE:
                case SparkSqlParser.KW_ENABLE:
                case SparkSqlParser.KW_END:
                case SparkSqlParser.KW_ESCAPE:
                case SparkSqlParser.KW_ESCAPED:
                case SparkSqlParser.KW_EXCEPT:
                case SparkSqlParser.KW_EXCHANGE:
                case SparkSqlParser.KW_EXCLUDE:
                case SparkSqlParser.KW_EXISTS:
                case SparkSqlParser.KW_EXPLAIN:
                case SparkSqlParser.KW_EXPORT:
                case SparkSqlParser.KW_EXTENDED:
                case SparkSqlParser.KW_EXTERNAL:
                case SparkSqlParser.KW_EXTRACT:
                case SparkSqlParser.KW_FALSE:
                case SparkSqlParser.KW_FETCH:
                case SparkSqlParser.KW_FIELDS:
                case SparkSqlParser.KW_FILTER:
                case SparkSqlParser.KW_FILEFORMAT:
                case SparkSqlParser.KW_FIRST:
                case SparkSqlParser.KW_FLOAT:
                case SparkSqlParser.KW_FOLLOWING:
                case SparkSqlParser.KW_FOR:
                case SparkSqlParser.KW_FOREIGN:
                case SparkSqlParser.KW_FORMAT:
                case SparkSqlParser.KW_FORMATTED:
                case SparkSqlParser.KW_FULL:
                case SparkSqlParser.KW_FUNCTION:
                case SparkSqlParser.KW_FUNCTIONS:
                case SparkSqlParser.KW_GENERATED:
                case SparkSqlParser.KW_GLOBAL:
                case SparkSqlParser.KW_GRANT:
                case SparkSqlParser.KW_GROUP:
                case SparkSqlParser.KW_GROUPING:
                case SparkSqlParser.KW_HAVING:
                case SparkSqlParser.KW_BINARY_HEX:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_HOURS:
                case SparkSqlParser.KW_IDENTIFIER:
                case SparkSqlParser.KW_IF:
                case SparkSqlParser.KW_IGNORE:
                case SparkSqlParser.KW_IMPORT:
                case SparkSqlParser.KW_IN:
                case SparkSqlParser.KW_INCLUDE:
                case SparkSqlParser.KW_INDEX:
                case SparkSqlParser.KW_INDEXES:
                case SparkSqlParser.KW_INNER:
                case SparkSqlParser.KW_INPATH:
                case SparkSqlParser.KW_INPUTFORMAT:
                case SparkSqlParser.KW_INSERT:
                case SparkSqlParser.KW_INTERSECT:
                case SparkSqlParser.KW_INTERVAL:
                case SparkSqlParser.KW_INT:
                case SparkSqlParser.KW_INTEGER:
                case SparkSqlParser.KW_INTO:
                case SparkSqlParser.KW_IS:
                case SparkSqlParser.KW_ITEMS:
                case SparkSqlParser.KW_JOIN:
                case SparkSqlParser.KW_KEYS:
                case SparkSqlParser.KW_LAST:
                case SparkSqlParser.KW_LATERAL:
                case SparkSqlParser.KW_LAZY:
                case SparkSqlParser.KW_LEADING:
                case SparkSqlParser.KW_LEFT:
                case SparkSqlParser.KW_LIFECYCLE:
                case SparkSqlParser.KW_LIKE:
                case SparkSqlParser.KW_ILIKE:
                case SparkSqlParser.KW_LIMIT:
                case SparkSqlParser.KW_LINES:
                case SparkSqlParser.KW_LIST:
                case SparkSqlParser.KW_LOAD:
                case SparkSqlParser.KW_LOCAL:
                case SparkSqlParser.KW_LOCATION:
                case SparkSqlParser.KW_LOCK:
                case SparkSqlParser.KW_LOCKS:
                case SparkSqlParser.KW_LOGICAL:
                case SparkSqlParser.KW_LONG:
                case SparkSqlParser.KW_MACRO:
                case SparkSqlParser.KW_MATERIALIZED:
                case SparkSqlParser.KW_MAP:
                case SparkSqlParser.KW_MATCHED:
                case SparkSqlParser.KW_MERGE:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MICROSECONDS:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MILLISECONDS:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MINUTES:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_MONTHS:
                case SparkSqlParser.KW_MSCK:
                case SparkSqlParser.KW_NAME:
                case SparkSqlParser.KW_NAMESPACE:
                case SparkSqlParser.KW_NAMESPACES:
                case SparkSqlParser.KW_NANOSECOND:
                case SparkSqlParser.KW_NANOSECONDS:
                case SparkSqlParser.KW_NATURAL:
                case SparkSqlParser.KW_NO:
                case SparkSqlParser.KW_NOT:
                case SparkSqlParser.KW_NULL:
                case SparkSqlParser.KW_NULLS:
                case SparkSqlParser.KW_NUMERIC:
                case SparkSqlParser.KW_OF:
                case SparkSqlParser.KW_OFFSET:
                case SparkSqlParser.KW_ON:
                case SparkSqlParser.KW_ONLY:
                case SparkSqlParser.KW_OPTIMIZE:
                case SparkSqlParser.KW_OPTION:
                case SparkSqlParser.KW_OPTIONS:
                case SparkSqlParser.KW_OR:
                case SparkSqlParser.KW_ORDER:
                case SparkSqlParser.KW_OUT:
                case SparkSqlParser.KW_OUTER:
                case SparkSqlParser.KW_OUTPUTFORMAT:
                case SparkSqlParser.KW_OVER:
                case SparkSqlParser.KW_OVERLAPS:
                case SparkSqlParser.KW_OVERLAY:
                case SparkSqlParser.KW_OVERWRITE:
                case SparkSqlParser.KW_PARTITION:
                case SparkSqlParser.KW_PARTITIONED:
                case SparkSqlParser.KW_PARTITIONS:
                case SparkSqlParser.KW_PERCENTILE_CONT:
                case SparkSqlParser.KW_PERCENTILE_DISC:
                case SparkSqlParser.KW_PERCENTLIT:
                case SparkSqlParser.KW_PIVOT:
                case SparkSqlParser.KW_PLACING:
                case SparkSqlParser.KW_POSITION:
                case SparkSqlParser.KW_PRECEDING:
                case SparkSqlParser.KW_PRIMARY:
                case SparkSqlParser.KW_PRINCIPALS:
                case SparkSqlParser.KW_PROPERTIES:
                case SparkSqlParser.KW_PURGE:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_QUERY:
                case SparkSqlParser.KW_RANGE:
                case SparkSqlParser.KW_REAL:
                case SparkSqlParser.KW_RECORDREADER:
                case SparkSqlParser.KW_RECORDWRITER:
                case SparkSqlParser.KW_RECOVER:
                case SparkSqlParser.KW_REDUCE:
                case SparkSqlParser.KW_REFERENCES:
                case SparkSqlParser.KW_REFRESH:
                case SparkSqlParser.KW_RENAME:
                case SparkSqlParser.KW_REPAIR:
                case SparkSqlParser.KW_REPEATABLE:
                case SparkSqlParser.KW_REPLACE:
                case SparkSqlParser.KW_RESET:
                case SparkSqlParser.KW_RESPECT:
                case SparkSqlParser.KW_RESTRICT:
                case SparkSqlParser.KW_REWRITE:
                case SparkSqlParser.KW_REVOKE:
                case SparkSqlParser.KW_RIGHT:
                case SparkSqlParser.KW_RLIKE:
                case SparkSqlParser.KW_REGEXP:
                case SparkSqlParser.KW_ROLE:
                case SparkSqlParser.KW_ROLES:
                case SparkSqlParser.KW_ROLLBACK:
                case SparkSqlParser.KW_ROLLUP:
                case SparkSqlParser.KW_ROW:
                case SparkSqlParser.KW_ROWS:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_SECONDS:
                case SparkSqlParser.KW_SCHEMA:
                case SparkSqlParser.KW_SCHEMAS:
                case SparkSqlParser.KW_SEMI:
                case SparkSqlParser.KW_SEPARATED:
                case SparkSqlParser.KW_SERDE:
                case SparkSqlParser.KW_SERDEPROPERTIES:
                case SparkSqlParser.KW_SESSION_USER:
                case SparkSqlParser.KW_SET:
                case SparkSqlParser.KW_MINUS:
                case SparkSqlParser.KW_SETS:
                case SparkSqlParser.KW_SHORT:
                case SparkSqlParser.KW_SHOW:
                case SparkSqlParser.KW_SINGLE:
                case SparkSqlParser.KW_SKEWED:
                case SparkSqlParser.KW_SMALLINT:
                case SparkSqlParser.KW_SOME:
                case SparkSqlParser.KW_SORT:
                case SparkSqlParser.KW_SORTED:
                case SparkSqlParser.KW_SOURCE:
                case SparkSqlParser.KW_START:
                case SparkSqlParser.KW_STATISTICS:
                case SparkSqlParser.KW_STORED:
                case SparkSqlParser.KW_STRATIFY:
                case SparkSqlParser.KW_STRING:
                case SparkSqlParser.KW_STRUCT:
                case SparkSqlParser.KW_SUBSTR:
                case SparkSqlParser.KW_SUBSTRING:
                case SparkSqlParser.KW_SYNC:
                case SparkSqlParser.KW_SYSTEM:
                case SparkSqlParser.KW_SYSTEM_TIME:
                case SparkSqlParser.KW_SYSTEM_VERSION:
                case SparkSqlParser.KW_TABLES:
                case SparkSqlParser.KW_TABLESAMPLE:
                case SparkSqlParser.KW_TARGET:
                case SparkSqlParser.KW_TBLPROPERTIES:
                case SparkSqlParser.KW_TEMPORARY:
                case SparkSqlParser.KW_TERMINATED:
                case SparkSqlParser.KW_THEN:
                case SparkSqlParser.KW_TIME:
                case SparkSqlParser.KW_TIMEDIFF:
                case SparkSqlParser.KW_TIMESTAMP:
                case SparkSqlParser.KW_TIMESTAMP_LTZ:
                case SparkSqlParser.KW_TIMESTAMP_NTZ:
                case SparkSqlParser.KW_TIMESTAMPADD:
                case SparkSqlParser.KW_TIMESTAMPDIFF:
                case SparkSqlParser.KW_TINYINT:
                case SparkSqlParser.KW_TO:
                case SparkSqlParser.KW_TOUCH:
                case SparkSqlParser.KW_TRAILING:
                case SparkSqlParser.KW_TRANSACTION:
                case SparkSqlParser.KW_TRANSACTIONS:
                case SparkSqlParser.KW_TRANSFORM:
                case SparkSqlParser.KW_TRIM:
                case SparkSqlParser.KW_TRUE:
                case SparkSqlParser.KW_TRUNCATE:
                case SparkSqlParser.KW_TRY_CAST:
                case SparkSqlParser.KW_TYPE:
                case SparkSqlParser.KW_UNARCHIVE:
                case SparkSqlParser.KW_UNBOUNDED:
                case SparkSqlParser.KW_UNCACHE:
                case SparkSqlParser.KW_UNION:
                case SparkSqlParser.KW_UNIQUE:
                case SparkSqlParser.KW_UNKNOWN:
                case SparkSqlParser.KW_UNLOCK:
                case SparkSqlParser.KW_UNPIVOT:
                case SparkSqlParser.KW_UNSET:
                case SparkSqlParser.KW_UPDATE:
                case SparkSqlParser.KW_USE:
                case SparkSqlParser.KW_USER:
                case SparkSqlParser.KW_USING:
                case SparkSqlParser.KW_VALUES:
                case SparkSqlParser.KW_VARCHAR:
                case SparkSqlParser.KW_VAR:
                case SparkSqlParser.KW_VARIABLE:
                case SparkSqlParser.KW_VERSION:
                case SparkSqlParser.KW_VIEW:
                case SparkSqlParser.KW_VIEWS:
                case SparkSqlParser.KW_VOID:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_WEEKS:
                case SparkSqlParser.KW_WHEN:
                case SparkSqlParser.KW_WHERE:
                case SparkSqlParser.KW_WINDOW:
                case SparkSqlParser.KW_WITH:
                case SparkSqlParser.KW_WITHIN:
                case SparkSqlParser.KW_YEAR:
                case SparkSqlParser.KW_YEARS:
                case SparkSqlParser.KW_ZONE:
                case SparkSqlParser.KW_ZORDER:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                case SparkSqlParser.IDENTIFIER:
                case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 1750;
                    (localContext as MergeIntoTableContext)._source = this.identifierReference();
                    }
                    break;
                case SparkSqlParser.LEFT_PAREN:
                    {
                    this.state = 1751;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 1752;
                    (localContext as MergeIntoTableContext)._sourceQuery = this.query();
                    this.state = 1753;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1757;
                (localContext as MergeIntoTableContext)._sourceAlias = this.tableAlias();
                this.state = 1758;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1759;
                (localContext as MergeIntoTableContext)._mergeCondition = this.booleanExpression(0);
                this.state = 1763;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 207, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1760;
                        this.matchedClause();
                        }
                        }
                    }
                    this.state = 1765;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 207, this.context);
                }
                this.state = 1769;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 208, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1766;
                        this.notMatchedClause();
                        }
                        }
                    }
                    this.state = 1771;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 208, this.context);
                }
                this.state = 1775;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 343) {
                    {
                    {
                    this.state = 1772;
                    this.notMatchedBySourceClause();
                    }
                    }
                    this.state = 1777;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namespaceName(): NamespaceNameContext {
        let localContext = new NamespaceNameContext(this.context, this.state);
        this.enterRule(localContext, 66, SparkSqlParser.RULE_namespaceName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1780;
            this.identifierReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namespaceNameCreate(): NamespaceNameCreateContext {
        let localContext = new NamespaceNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 68, SparkSqlParser.RULE_namespaceNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1782;
            this.identifierReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableNameCreate(): TableNameCreateContext {
        let localContext = new TableNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 70, SparkSqlParser.RULE_tableNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1784;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 72, SparkSqlParser.RULE_tableName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1786;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewNameCreate(): ViewNameCreateContext {
        let localContext = new ViewNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 74, SparkSqlParser.RULE_viewNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1788;
            this.viewIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewName(): ViewNameContext {
        let localContext = new ViewNameContext(this.context, this.state);
        this.enterRule(localContext, 76, SparkSqlParser.RULE_viewName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1790;
            this.viewIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 78, SparkSqlParser.RULE_columnName);
        try {
            this.state = 1794;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 211, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1792;
                this.multipartIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1793;
                if (!(this.shouldMatchEmpty())) {
                    throw this.createFailedPredicateException("this.shouldMatchEmpty()");
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNamePath(): ColumnNamePathContext {
        let localContext = new ColumnNamePathContext(this.context, this.state);
        this.enterRule(localContext, 80, SparkSqlParser.RULE_columnNamePath);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1796;
            this.multipartIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameSeq(): ColumnNameSeqContext {
        let localContext = new ColumnNameSeqContext(this.context, this.state);
        this.enterRule(localContext, 82, SparkSqlParser.RULE_columnNameSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1798;
            this.columnName();
            this.state = 1803;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1799;
                this.match(SparkSqlParser.COMMA);
                this.state = 1800;
                this.columnName();
                }
                }
                this.state = 1805;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        let localContext = new ColumnNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 84, SparkSqlParser.RULE_columnNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1806;
            this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierReference(): IdentifierReferenceContext {
        let localContext = new IdentifierReferenceContext(this.context, this.state);
        this.enterRule(localContext, 86, SparkSqlParser.RULE_identifierReference);
        try {
            this.state = 1814;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1808;
                this.match(SparkSqlParser.KW_IDENTIFIER);
                this.state = 1809;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1810;
                this.expression();
                this.state = 1811;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1813;
                this.multipartIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryOrganization(): QueryOrganizationContext {
        let localContext = new QueryOrganizationContext(this.context, this.state);
        this.enterRule(localContext, 88, SparkSqlParser.RULE_queryOrganization);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1819;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 214, this.context) ) {
            case 1:
                {
                this.state = 1816;
                this.match(SparkSqlParser.KW_ORDER);
                this.state = 1817;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1818;
                this.orderOrSortByClause();
                }
                break;
            }
            this.state = 1824;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
            case 1:
                {
                this.state = 1821;
                this.match(SparkSqlParser.KW_CLUSTER);
                this.state = 1822;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1823;
                this.clusterOrDistributeBy();
                }
                break;
            }
            this.state = 1829;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 216, this.context) ) {
            case 1:
                {
                this.state = 1826;
                this.match(SparkSqlParser.KW_DISTRIBUTE);
                this.state = 1827;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1828;
                this.clusterOrDistributeBy();
                }
                break;
            }
            this.state = 1834;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 217, this.context) ) {
            case 1:
                {
                this.state = 1831;
                this.match(SparkSqlParser.KW_SORT);
                this.state = 1832;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1833;
                this.orderOrSortByClause();
                }
                break;
            }
            this.state = 1837;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 218, this.context) ) {
            case 1:
                {
                this.state = 1836;
                this.windowClause();
                }
                break;
            }
            this.state = 1840;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
            case 1:
                {
                this.state = 1839;
                this.limitClause();
                }
                break;
            }
            this.state = 1844;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 220, this.context) ) {
            case 1:
                {
                this.state = 1842;
                this.match(SparkSqlParser.KW_OFFSET);
                this.state = 1843;
                localContext._offset = this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 90, SparkSqlParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1846;
            this.match(SparkSqlParser.KW_LIMIT);
            this.state = 1849;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 221, this.context) ) {
            case 1:
                {
                this.state = 1847;
                this.match(SparkSqlParser.KW_ALL);
                }
                break;
            case 2:
                {
                this.state = 1848;
                localContext._limit = this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderOrSortByClause(): OrderOrSortByClauseContext {
        let localContext = new OrderOrSortByClauseContext(this.context, this.state);
        this.enterRule(localContext, 92, SparkSqlParser.RULE_orderOrSortByClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1851;
            this.sortItem();
            this.state = 1856;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 222, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1852;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 1853;
                    this.sortItem();
                    }
                    }
                }
                this.state = 1858;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 222, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterOrDistributeBy(): ClusterOrDistributeByContext {
        let localContext = new ClusterOrDistributeByContext(this.context, this.state);
        this.enterRule(localContext, 94, SparkSqlParser.RULE_clusterOrDistributeBy);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1859;
            this.expression();
            this.state = 1864;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 223, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1860;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 1861;
                    this.expression();
                    }
                    }
                }
                this.state = 1866;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 223, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryTerm(): QueryTermContext;
    public queryTerm(_p: number): QueryTermContext;
    public queryTerm(_p?: number): QueryTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 96;
        this.enterRecursionRule(localContext, 96, SparkSqlParser.RULE_queryTerm, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 1868;
            this.queryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1890;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 228, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1888;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 227, this.context) ) {
                    case 1:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_queryTerm);
                        this.state = 1870;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 1871;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 102 || _la === 148 || _la === 270 || _la === 323)) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1873;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 1872;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1875;
                        localContext._right = this.queryTerm(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_queryTerm);
                        this.state = 1876;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1877;
                        localContext._operator = this.match(SparkSqlParser.KW_INTERSECT);
                        this.state = 1879;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 1878;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1881;
                        localContext._right = this.queryTerm(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_queryTerm);
                        this.state = 1882;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 1883;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 102 || _la === 270 || _la === 323)) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1885;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 1884;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1887;
                        localContext._right = this.queryTerm(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 1892;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 228, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 98, SparkSqlParser.RULE_queryPrimary);
        try {
            let alternative: number;
            this.state = 1917;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1893;
                this.querySpecification();
                }
                break;
            case SparkSqlParser.KW_FROM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1894;
                this.fromClause();
                this.state = 1896;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1895;
                        this.fromStatementBody();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1898;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 229, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case SparkSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1900;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1901;
                this.tableName();
                }
                break;
            case SparkSqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1902;
                this.match(SparkSqlParser.KW_VALUES);
                this.state = 1903;
                this.expression();
                this.state = 1908;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 230, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1904;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 1905;
                        this.expression();
                        }
                        }
                    }
                    this.state = 1910;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 230, this.context);
                }
                this.state = 1911;
                this.tableAlias();
                }
                break;
            case SparkSqlParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1913;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1914;
                this.query();
                this.state = 1915;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortItem(): SortItemContext {
        let localContext = new SortItemContext(this.context, this.state);
        this.enterRule(localContext, 100, SparkSqlParser.RULE_sortItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1921;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 232, this.context) ) {
            case 1:
                {
                this.state = 1919;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 1920;
                this.expression();
                }
                break;
            }
            this.state = 1924;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 233, this.context) ) {
            case 1:
                {
                this.state = 1923;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 86)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1928;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 234, this.context) ) {
            case 1:
                {
                this.state = 1926;
                this.match(SparkSqlParser.KW_NULLS);
                this.state = 1927;
                localContext._nullOrder = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 116 || _la === 157)) {
                    localContext._nullOrder = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromStatementBody(): FromStatementBodyContext {
        let localContext = new FromStatementBodyContext(this.context, this.state);
        this.enterRule(localContext, 102, SparkSqlParser.RULE_fromStatementBody);
        try {
            let alternative: number;
            this.state = 1957;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1930;
                this.transformClause();
                this.state = 1932;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
                case 1:
                    {
                    this.state = 1931;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 1934;
                this.queryOrganization();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1936;
                this.selectClause();
                this.state = 1940;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 236, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1937;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 1942;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 236, this.context);
                }
                this.state = 1944;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 237, this.context) ) {
                case 1:
                    {
                    this.state = 1943;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 1947;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
                case 1:
                    {
                    this.state = 1946;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 1950;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 239, this.context) ) {
                case 1:
                    {
                    this.state = 1949;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 1953;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
                case 1:
                    {
                    this.state = 1952;
                    this.windowClause();
                    }
                    break;
                }
                this.state = 1955;
                this.queryOrganization();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 104, SparkSqlParser.RULE_querySpecification);
        try {
            let alternative: number;
            this.state = 2003;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1959;
                this.transformClause();
                this.state = 1961;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 242, this.context) ) {
                case 1:
                    {
                    this.state = 1960;
                    this.fromClause();
                    }
                    break;
                }
                this.state = 1966;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 243, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1963;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 1968;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 243, this.context);
                }
                this.state = 1970;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
                case 1:
                    {
                    this.state = 1969;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 1973;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
                case 1:
                    {
                    this.state = 1972;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 1976;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 246, this.context) ) {
                case 1:
                    {
                    this.state = 1975;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 1979;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
                case 1:
                    {
                    this.state = 1978;
                    this.windowClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1981;
                this.selectClause();
                this.state = 1983;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 248, this.context) ) {
                case 1:
                    {
                    this.state = 1982;
                    this.fromClause();
                    }
                    break;
                }
                this.state = 1988;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 249, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1985;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 1990;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 249, this.context);
                }
                this.state = 1992;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 250, this.context) ) {
                case 1:
                    {
                    this.state = 1991;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 1995;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 251, this.context) ) {
                case 1:
                    {
                    this.state = 1994;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 1998;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 252, this.context) ) {
                case 1:
                    {
                    this.state = 1997;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 2001;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 253, this.context) ) {
                case 1:
                    {
                    this.state = 2000;
                    this.windowClause();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformClause(): TransformClauseContext {
        let localContext = new TransformClauseContext(this.context, this.state);
        this.enterRule(localContext, 106, SparkSqlParser.RULE_transformClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2024;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_SELECT:
                {
                this.state = 2005;
                this.match(SparkSqlParser.KW_SELECT);
                this.state = 2006;
                localContext._kind = this.match(SparkSqlParser.KW_TRANSFORM);
                this.state = 2007;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2009;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
                case 1:
                    {
                    this.state = 2008;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2011;
                this.expressionSeq();
                this.state = 2012;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case SparkSqlParser.KW_MAP:
                {
                this.state = 2014;
                localContext._kind = this.match(SparkSqlParser.KW_MAP);
                this.state = 2016;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
                case 1:
                    {
                    this.state = 2015;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2018;
                this.expressionSeq();
                }
                break;
            case SparkSqlParser.KW_REDUCE:
                {
                this.state = 2019;
                localContext._kind = this.match(SparkSqlParser.KW_REDUCE);
                this.state = 2021;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 257, this.context) ) {
                case 1:
                    {
                    this.state = 2020;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2023;
                this.expressionSeq();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2027;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 257) {
                {
                this.state = 2026;
                localContext._inRowFormat = this.rowFormat();
                }
            }

            this.state = 2031;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 236) {
                {
                this.state = 2029;
                this.match(SparkSqlParser.KW_RECORDWRITER);
                this.state = 2030;
                localContext._recordWriter = this.stringLit();
                }
            }

            this.state = 2033;
            this.match(SparkSqlParser.KW_USING);
            this.state = 2034;
            localContext._script = this.stringLit();
            this.state = 2047;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
            case 1:
                {
                this.state = 2035;
                this.match(SparkSqlParser.KW_AS);
                this.state = 2045;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 262, this.context) ) {
                case 1:
                    {
                    this.state = 2036;
                    this.identifierSeq();
                    }
                    break;
                case 2:
                    {
                    this.state = 2037;
                    this.colTypeList();
                    }
                    break;
                case 3:
                    {
                    {
                    this.state = 2038;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2041;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
                    case 1:
                        {
                        this.state = 2039;
                        this.identifierSeq();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2040;
                        this.colTypeList();
                        }
                        break;
                    }
                    this.state = 2043;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            }
            this.state = 2050;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
            case 1:
                {
                this.state = 2049;
                localContext._outRowFormat = this.rowFormat();
                }
                break;
            }
            this.state = 2054;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
            case 1:
                {
                this.state = 2052;
                this.match(SparkSqlParser.KW_RECORDREADER);
                this.state = 2053;
                localContext._recordReader = this.stringLit();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectClause(): SelectClauseContext {
        let localContext = new SelectClauseContext(this.context, this.state);
        this.enterRule(localContext, 108, SparkSqlParser.RULE_selectClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2056;
            this.match(SparkSqlParser.KW_SELECT);
            this.state = 2060;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 266, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2057;
                    localContext._hint = this.hint();
                    localContext._hints.push(localContext._hint);
                    }
                    }
                }
                this.state = 2062;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 266, this.context);
            }
            this.state = 2064;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 267, this.context) ) {
            case 1:
                {
                this.state = 2063;
                this.setQuantifier();
                }
                break;
            }
            this.state = 2066;
            this.namedExpressionSeq();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setClause(): SetClauseContext {
        let localContext = new SetClauseContext(this.context, this.state);
        this.enterRule(localContext, 110, SparkSqlParser.RULE_setClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2068;
            this.match(SparkSqlParser.KW_SET);
            this.state = 2069;
            this.assignmentList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchedClause(): MatchedClauseContext {
        let localContext = new MatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 112, SparkSqlParser.RULE_matchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2071;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 2072;
            this.match(SparkSqlParser.KW_MATCHED);
            this.state = 2075;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2073;
                this.match(SparkSqlParser.KW_AND);
                this.state = 2074;
                localContext._matchedCond = this.booleanExpression(0);
                }
            }

            this.state = 2077;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 2085;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_DELETE:
                {
                this.state = 2078;
                this.match(SparkSqlParser.KW_DELETE);
                }
                break;
            case SparkSqlParser.KW_UPDATE:
                {
                this.state = 2079;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 2080;
                this.match(SparkSqlParser.KW_SET);
                this.state = 2083;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.ASTERISK:
                    {
                    this.state = 2081;
                    this.match(SparkSqlParser.ASTERISK);
                    }
                    break;
                case SparkSqlParser.KW_ADD:
                case SparkSqlParser.KW_AFTER:
                case SparkSqlParser.KW_ALL:
                case SparkSqlParser.KW_ALTER:
                case SparkSqlParser.KW_ALWAYS:
                case SparkSqlParser.KW_ANALYZE:
                case SparkSqlParser.KW_AND:
                case SparkSqlParser.KW_ANTI:
                case SparkSqlParser.KW_ANY:
                case SparkSqlParser.KW_ANY_VALUE:
                case SparkSqlParser.KW_ARCHIVE:
                case SparkSqlParser.KW_ARRAY:
                case SparkSqlParser.KW_AS:
                case SparkSqlParser.KW_ASC:
                case SparkSqlParser.KW_AT:
                case SparkSqlParser.KW_AUTHORIZATION:
                case SparkSqlParser.KW_BETWEEN:
                case SparkSqlParser.KW_BIGINT:
                case SparkSqlParser.KW_BINARY:
                case SparkSqlParser.KW_BOOLEAN:
                case SparkSqlParser.KW_BOTH:
                case SparkSqlParser.KW_BUCKET:
                case SparkSqlParser.KW_BUCKETS:
                case SparkSqlParser.KW_BY:
                case SparkSqlParser.KW_BYTE:
                case SparkSqlParser.KW_CACHE:
                case SparkSqlParser.KW_CASCADE:
                case SparkSqlParser.KW_CASE:
                case SparkSqlParser.KW_CAST:
                case SparkSqlParser.KW_CATALOG:
                case SparkSqlParser.KW_CATALOGS:
                case SparkSqlParser.KW_CHANGE:
                case SparkSqlParser.KW_CHAR:
                case SparkSqlParser.KW_CHARACTER:
                case SparkSqlParser.KW_CHECK:
                case SparkSqlParser.KW_CLEAR:
                case SparkSqlParser.KW_CLUSTER:
                case SparkSqlParser.KW_CLUSTERED:
                case SparkSqlParser.KW_CODEGEN:
                case SparkSqlParser.KW_COLLATE:
                case SparkSqlParser.KW_COLLECTION:
                case SparkSqlParser.KW_COLUMN:
                case SparkSqlParser.KW_COLUMNS:
                case SparkSqlParser.KW_COMMENT:
                case SparkSqlParser.KW_COMMIT:
                case SparkSqlParser.KW_COMPACT:
                case SparkSqlParser.KW_COMPACTIONS:
                case SparkSqlParser.KW_COMPUTE:
                case SparkSqlParser.KW_CONCATENATE:
                case SparkSqlParser.KW_CONSTRAINT:
                case SparkSqlParser.KW_COST:
                case SparkSqlParser.KW_CREATE:
                case SparkSqlParser.KW_CROSS:
                case SparkSqlParser.KW_CUBE:
                case SparkSqlParser.KW_CURRENT:
                case SparkSqlParser.KW_CURRENT_DATE:
                case SparkSqlParser.KW_CURRENT_TIME:
                case SparkSqlParser.KW_CURRENT_TIMESTAMP:
                case SparkSqlParser.KW_CURRENT_USER:
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYS:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_DATA:
                case SparkSqlParser.KW_DATE:
                case SparkSqlParser.KW_DATABASE:
                case SparkSqlParser.KW_DATABASES:
                case SparkSqlParser.KW_DATEADD:
                case SparkSqlParser.KW_DATE_ADD:
                case SparkSqlParser.KW_DATEDIFF:
                case SparkSqlParser.KW_DATE_DIFF:
                case SparkSqlParser.KW_DBPROPERTIES:
                case SparkSqlParser.KW_DEC:
                case SparkSqlParser.KW_DECIMAL:
                case SparkSqlParser.KW_DECLARE:
                case SparkSqlParser.KW_DEFAULT:
                case SparkSqlParser.KW_DEFINED:
                case SparkSqlParser.KW_DELETE:
                case SparkSqlParser.KW_DELIMITED:
                case SparkSqlParser.KW_DESC:
                case SparkSqlParser.KW_DESCRIBE:
                case SparkSqlParser.KW_DFS:
                case SparkSqlParser.KW_DIRECTORIES:
                case SparkSqlParser.KW_DIRECTORY:
                case SparkSqlParser.KW_DISABLE:
                case SparkSqlParser.KW_DISTINCT:
                case SparkSqlParser.KW_DISTRIBUTE:
                case SparkSqlParser.KW_DIV:
                case SparkSqlParser.KW_DOUBLE:
                case SparkSqlParser.KW_DROP:
                case SparkSqlParser.KW_ELSE:
                case SparkSqlParser.KW_ENABLE:
                case SparkSqlParser.KW_END:
                case SparkSqlParser.KW_ESCAPE:
                case SparkSqlParser.KW_ESCAPED:
                case SparkSqlParser.KW_EXCEPT:
                case SparkSqlParser.KW_EXCHANGE:
                case SparkSqlParser.KW_EXCLUDE:
                case SparkSqlParser.KW_EXISTS:
                case SparkSqlParser.KW_EXPLAIN:
                case SparkSqlParser.KW_EXPORT:
                case SparkSqlParser.KW_EXTENDED:
                case SparkSqlParser.KW_EXTERNAL:
                case SparkSqlParser.KW_EXTRACT:
                case SparkSqlParser.KW_FALSE:
                case SparkSqlParser.KW_FETCH:
                case SparkSqlParser.KW_FIELDS:
                case SparkSqlParser.KW_FILTER:
                case SparkSqlParser.KW_FILEFORMAT:
                case SparkSqlParser.KW_FIRST:
                case SparkSqlParser.KW_FLOAT:
                case SparkSqlParser.KW_FOLLOWING:
                case SparkSqlParser.KW_FOR:
                case SparkSqlParser.KW_FOREIGN:
                case SparkSqlParser.KW_FORMAT:
                case SparkSqlParser.KW_FORMATTED:
                case SparkSqlParser.KW_FULL:
                case SparkSqlParser.KW_FUNCTION:
                case SparkSqlParser.KW_FUNCTIONS:
                case SparkSqlParser.KW_GENERATED:
                case SparkSqlParser.KW_GLOBAL:
                case SparkSqlParser.KW_GRANT:
                case SparkSqlParser.KW_GROUP:
                case SparkSqlParser.KW_GROUPING:
                case SparkSqlParser.KW_HAVING:
                case SparkSqlParser.KW_BINARY_HEX:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_HOURS:
                case SparkSqlParser.KW_IDENTIFIER:
                case SparkSqlParser.KW_IF:
                case SparkSqlParser.KW_IGNORE:
                case SparkSqlParser.KW_IMPORT:
                case SparkSqlParser.KW_IN:
                case SparkSqlParser.KW_INCLUDE:
                case SparkSqlParser.KW_INDEX:
                case SparkSqlParser.KW_INDEXES:
                case SparkSqlParser.KW_INNER:
                case SparkSqlParser.KW_INPATH:
                case SparkSqlParser.KW_INPUTFORMAT:
                case SparkSqlParser.KW_INSERT:
                case SparkSqlParser.KW_INTERSECT:
                case SparkSqlParser.KW_INTERVAL:
                case SparkSqlParser.KW_INT:
                case SparkSqlParser.KW_INTEGER:
                case SparkSqlParser.KW_INTO:
                case SparkSqlParser.KW_IS:
                case SparkSqlParser.KW_ITEMS:
                case SparkSqlParser.KW_JOIN:
                case SparkSqlParser.KW_KEYS:
                case SparkSqlParser.KW_LAST:
                case SparkSqlParser.KW_LATERAL:
                case SparkSqlParser.KW_LAZY:
                case SparkSqlParser.KW_LEADING:
                case SparkSqlParser.KW_LEFT:
                case SparkSqlParser.KW_LIFECYCLE:
                case SparkSqlParser.KW_LIKE:
                case SparkSqlParser.KW_ILIKE:
                case SparkSqlParser.KW_LIMIT:
                case SparkSqlParser.KW_LINES:
                case SparkSqlParser.KW_LIST:
                case SparkSqlParser.KW_LOAD:
                case SparkSqlParser.KW_LOCAL:
                case SparkSqlParser.KW_LOCATION:
                case SparkSqlParser.KW_LOCK:
                case SparkSqlParser.KW_LOCKS:
                case SparkSqlParser.KW_LOGICAL:
                case SparkSqlParser.KW_LONG:
                case SparkSqlParser.KW_MACRO:
                case SparkSqlParser.KW_MATERIALIZED:
                case SparkSqlParser.KW_MAP:
                case SparkSqlParser.KW_MATCHED:
                case SparkSqlParser.KW_MERGE:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MICROSECONDS:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MILLISECONDS:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MINUTES:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_MONTHS:
                case SparkSqlParser.KW_MSCK:
                case SparkSqlParser.KW_NAME:
                case SparkSqlParser.KW_NAMESPACE:
                case SparkSqlParser.KW_NAMESPACES:
                case SparkSqlParser.KW_NANOSECOND:
                case SparkSqlParser.KW_NANOSECONDS:
                case SparkSqlParser.KW_NATURAL:
                case SparkSqlParser.KW_NO:
                case SparkSqlParser.KW_NOT:
                case SparkSqlParser.KW_NULL:
                case SparkSqlParser.KW_NULLS:
                case SparkSqlParser.KW_NUMERIC:
                case SparkSqlParser.KW_OF:
                case SparkSqlParser.KW_OFFSET:
                case SparkSqlParser.KW_ON:
                case SparkSqlParser.KW_ONLY:
                case SparkSqlParser.KW_OPTIMIZE:
                case SparkSqlParser.KW_OPTION:
                case SparkSqlParser.KW_OPTIONS:
                case SparkSqlParser.KW_OR:
                case SparkSqlParser.KW_ORDER:
                case SparkSqlParser.KW_OUT:
                case SparkSqlParser.KW_OUTER:
                case SparkSqlParser.KW_OUTPUTFORMAT:
                case SparkSqlParser.KW_OVER:
                case SparkSqlParser.KW_OVERLAPS:
                case SparkSqlParser.KW_OVERLAY:
                case SparkSqlParser.KW_OVERWRITE:
                case SparkSqlParser.KW_PARTITION:
                case SparkSqlParser.KW_PARTITIONED:
                case SparkSqlParser.KW_PARTITIONS:
                case SparkSqlParser.KW_PERCENTILE_CONT:
                case SparkSqlParser.KW_PERCENTILE_DISC:
                case SparkSqlParser.KW_PERCENTLIT:
                case SparkSqlParser.KW_PIVOT:
                case SparkSqlParser.KW_PLACING:
                case SparkSqlParser.KW_POSITION:
                case SparkSqlParser.KW_PRECEDING:
                case SparkSqlParser.KW_PRIMARY:
                case SparkSqlParser.KW_PRINCIPALS:
                case SparkSqlParser.KW_PROPERTIES:
                case SparkSqlParser.KW_PURGE:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_QUERY:
                case SparkSqlParser.KW_RANGE:
                case SparkSqlParser.KW_REAL:
                case SparkSqlParser.KW_RECORDREADER:
                case SparkSqlParser.KW_RECORDWRITER:
                case SparkSqlParser.KW_RECOVER:
                case SparkSqlParser.KW_REDUCE:
                case SparkSqlParser.KW_REFERENCES:
                case SparkSqlParser.KW_REFRESH:
                case SparkSqlParser.KW_RENAME:
                case SparkSqlParser.KW_REPAIR:
                case SparkSqlParser.KW_REPEATABLE:
                case SparkSqlParser.KW_REPLACE:
                case SparkSqlParser.KW_RESET:
                case SparkSqlParser.KW_RESPECT:
                case SparkSqlParser.KW_RESTRICT:
                case SparkSqlParser.KW_REWRITE:
                case SparkSqlParser.KW_REVOKE:
                case SparkSqlParser.KW_RIGHT:
                case SparkSqlParser.KW_RLIKE:
                case SparkSqlParser.KW_REGEXP:
                case SparkSqlParser.KW_ROLE:
                case SparkSqlParser.KW_ROLES:
                case SparkSqlParser.KW_ROLLBACK:
                case SparkSqlParser.KW_ROLLUP:
                case SparkSqlParser.KW_ROW:
                case SparkSqlParser.KW_ROWS:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_SECONDS:
                case SparkSqlParser.KW_SCHEMA:
                case SparkSqlParser.KW_SCHEMAS:
                case SparkSqlParser.KW_SEMI:
                case SparkSqlParser.KW_SEPARATED:
                case SparkSqlParser.KW_SERDE:
                case SparkSqlParser.KW_SERDEPROPERTIES:
                case SparkSqlParser.KW_SESSION_USER:
                case SparkSqlParser.KW_SET:
                case SparkSqlParser.KW_MINUS:
                case SparkSqlParser.KW_SETS:
                case SparkSqlParser.KW_SHORT:
                case SparkSqlParser.KW_SHOW:
                case SparkSqlParser.KW_SINGLE:
                case SparkSqlParser.KW_SKEWED:
                case SparkSqlParser.KW_SMALLINT:
                case SparkSqlParser.KW_SOME:
                case SparkSqlParser.KW_SORT:
                case SparkSqlParser.KW_SORTED:
                case SparkSqlParser.KW_SOURCE:
                case SparkSqlParser.KW_START:
                case SparkSqlParser.KW_STATISTICS:
                case SparkSqlParser.KW_STORED:
                case SparkSqlParser.KW_STRATIFY:
                case SparkSqlParser.KW_STRING:
                case SparkSqlParser.KW_STRUCT:
                case SparkSqlParser.KW_SUBSTR:
                case SparkSqlParser.KW_SUBSTRING:
                case SparkSqlParser.KW_SYNC:
                case SparkSqlParser.KW_SYSTEM:
                case SparkSqlParser.KW_SYSTEM_TIME:
                case SparkSqlParser.KW_SYSTEM_VERSION:
                case SparkSqlParser.KW_TABLES:
                case SparkSqlParser.KW_TABLESAMPLE:
                case SparkSqlParser.KW_TARGET:
                case SparkSqlParser.KW_TBLPROPERTIES:
                case SparkSqlParser.KW_TEMPORARY:
                case SparkSqlParser.KW_TERMINATED:
                case SparkSqlParser.KW_THEN:
                case SparkSqlParser.KW_TIME:
                case SparkSqlParser.KW_TIMEDIFF:
                case SparkSqlParser.KW_TIMESTAMP:
                case SparkSqlParser.KW_TIMESTAMP_LTZ:
                case SparkSqlParser.KW_TIMESTAMP_NTZ:
                case SparkSqlParser.KW_TIMESTAMPADD:
                case SparkSqlParser.KW_TIMESTAMPDIFF:
                case SparkSqlParser.KW_TINYINT:
                case SparkSqlParser.KW_TO:
                case SparkSqlParser.KW_TOUCH:
                case SparkSqlParser.KW_TRAILING:
                case SparkSqlParser.KW_TRANSACTION:
                case SparkSqlParser.KW_TRANSACTIONS:
                case SparkSqlParser.KW_TRANSFORM:
                case SparkSqlParser.KW_TRIM:
                case SparkSqlParser.KW_TRUE:
                case SparkSqlParser.KW_TRUNCATE:
                case SparkSqlParser.KW_TRY_CAST:
                case SparkSqlParser.KW_TYPE:
                case SparkSqlParser.KW_UNARCHIVE:
                case SparkSqlParser.KW_UNBOUNDED:
                case SparkSqlParser.KW_UNCACHE:
                case SparkSqlParser.KW_UNION:
                case SparkSqlParser.KW_UNIQUE:
                case SparkSqlParser.KW_UNKNOWN:
                case SparkSqlParser.KW_UNLOCK:
                case SparkSqlParser.KW_UNPIVOT:
                case SparkSqlParser.KW_UNSET:
                case SparkSqlParser.KW_UPDATE:
                case SparkSqlParser.KW_USE:
                case SparkSqlParser.KW_USER:
                case SparkSqlParser.KW_USING:
                case SparkSqlParser.KW_VALUES:
                case SparkSqlParser.KW_VARCHAR:
                case SparkSqlParser.KW_VAR:
                case SparkSqlParser.KW_VARIABLE:
                case SparkSqlParser.KW_VERSION:
                case SparkSqlParser.KW_VIEW:
                case SparkSqlParser.KW_VIEWS:
                case SparkSqlParser.KW_VOID:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_WEEKS:
                case SparkSqlParser.KW_WHEN:
                case SparkSqlParser.KW_WHERE:
                case SparkSqlParser.KW_WINDOW:
                case SparkSqlParser.KW_WITH:
                case SparkSqlParser.KW_WITHIN:
                case SparkSqlParser.KW_YEAR:
                case SparkSqlParser.KW_YEARS:
                case SparkSqlParser.KW_ZONE:
                case SparkSqlParser.KW_ZORDER:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                case SparkSqlParser.IDENTIFIER:
                case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 2082;
                    this.assignmentList();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedClause(): NotMatchedClauseContext {
        let localContext = new NotMatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 114, SparkSqlParser.RULE_notMatchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2087;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 2088;
            this.match(SparkSqlParser.KW_NOT);
            this.state = 2089;
            this.match(SparkSqlParser.KW_MATCHED);
            this.state = 2092;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 31) {
                {
                this.state = 2090;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2091;
                this.match(SparkSqlParser.KW_TARGET);
                }
            }

            this.state = 2096;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2094;
                this.match(SparkSqlParser.KW_AND);
                this.state = 2095;
                localContext._notMatchedCond = this.booleanExpression(0);
                }
            }

            this.state = 2098;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 2099;
            this.notMatchedAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedBySourceClause(): NotMatchedBySourceClauseContext {
        let localContext = new NotMatchedBySourceClauseContext(this.context, this.state);
        this.enterRule(localContext, 116, SparkSqlParser.RULE_notMatchedBySourceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2101;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 2102;
            this.match(SparkSqlParser.KW_NOT);
            this.state = 2103;
            this.match(SparkSqlParser.KW_MATCHED);
            this.state = 2104;
            this.match(SparkSqlParser.KW_BY);
            this.state = 2105;
            this.match(SparkSqlParser.KW_SOURCE);
            this.state = 2108;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2106;
                this.match(SparkSqlParser.KW_AND);
                this.state = 2107;
                localContext._notMatchedBySourceCond = this.booleanExpression(0);
                }
            }

            this.state = 2110;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 2115;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_DELETE:
                {
                this.state = 2111;
                this.match(SparkSqlParser.KW_DELETE);
                }
                break;
            case SparkSqlParser.KW_UPDATE:
                {
                this.state = 2112;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 2113;
                this.match(SparkSqlParser.KW_SET);
                this.state = 2114;
                this.assignmentList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedAction(): NotMatchedActionContext {
        let localContext = new NotMatchedActionContext(this.context, this.state);
        this.enterRule(localContext, 118, SparkSqlParser.RULE_notMatchedAction);
        let _la: number;
        try {
            this.state = 2135;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 276, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2117;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 2118;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2119;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 2120;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2121;
                this.multipartIdentifierList();
                this.state = 2122;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2123;
                this.match(SparkSqlParser.KW_VALUES);
                this.state = 2124;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2125;
                this.expression();
                this.state = 2130;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2126;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2127;
                    this.expression();
                    }
                    }
                    this.state = 2132;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2133;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentList(): AssignmentListContext {
        let localContext = new AssignmentListContext(this.context, this.state);
        this.enterRule(localContext, 120, SparkSqlParser.RULE_assignmentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2137;
            this.assignment();
            this.state = 2142;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2138;
                this.match(SparkSqlParser.COMMA);
                this.state = 2139;
                this.assignment();
                }
                }
                this.state = 2144;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignment(): AssignmentContext {
        let localContext = new AssignmentContext(this.context, this.state);
        this.enterRule(localContext, 122, SparkSqlParser.RULE_assignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2145;
            localContext._key = this.multipartIdentifier();
            this.state = 2146;
            this.match(SparkSqlParser.EQ);
            this.state = 2147;
            localContext._value = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 124, SparkSqlParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2149;
            this.match(SparkSqlParser.KW_WHERE);
            this.state = 2150;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 126, SparkSqlParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2152;
            this.match(SparkSqlParser.KW_HAVING);
            this.state = 2153;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hint(): HintContext {
        let localContext = new HintContext(this.context, this.state);
        this.enterRule(localContext, 128, SparkSqlParser.RULE_hint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2155;
            this.match(SparkSqlParser.HENT_START);
            this.state = 2156;
            localContext._hintStatement = this.hintStatement();
            localContext._hintStatements.push(localContext._hintStatement);
            this.state = 2163;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967056) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                {
                {
                this.state = 2158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 2157;
                    this.match(SparkSqlParser.COMMA);
                    }
                }

                this.state = 2160;
                localContext._hintStatement = this.hintStatement();
                localContext._hintStatements.push(localContext._hintStatement);
                }
                }
                this.state = 2165;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2166;
            this.match(SparkSqlParser.HENT_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintStatement(): HintStatementContext {
        let localContext = new HintStatementContext(this.context, this.state);
        this.enterRule(localContext, 130, SparkSqlParser.RULE_hintStatement);
        let _la: number;
        try {
            this.state = 2181;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 281, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2168;
                localContext._hintName = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2169;
                localContext._hintName = this.identifier();
                this.state = 2170;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2171;
                localContext._primaryExpression = this.primaryExpression(0);
                localContext._parameters.push(localContext._primaryExpression);
                this.state = 2176;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2172;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2173;
                    localContext._primaryExpression = this.primaryExpression(0);
                    localContext._parameters.push(localContext._primaryExpression);
                    }
                    }
                    this.state = 2178;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2179;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 132, SparkSqlParser.RULE_fromClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2183;
            this.match(SparkSqlParser.KW_FROM);
            this.state = 2184;
            this.relation();
            this.state = 2189;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 282, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2185;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2186;
                    this.relation();
                    }
                    }
                }
                this.state = 2191;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 282, this.context);
            }
            this.state = 2195;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 283, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2192;
                    this.lateralView();
                    }
                    }
                }
                this.state = 2197;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 283, this.context);
            }
            this.state = 2199;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 284, this.context) ) {
            case 1:
                {
                this.state = 2198;
                this.pivotClause();
                }
                break;
            }
            this.state = 2202;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 285, this.context) ) {
            case 1:
                {
                this.state = 2201;
                this.unPivotClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public temporalClause(): TemporalClauseContext {
        let localContext = new TemporalClauseContext(this.context, this.state);
        this.enterRule(localContext, 134, SparkSqlParser.RULE_temporalClause);
        let _la: number;
        try {
            this.state = 2221;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 289, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2205;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 2204;
                    this.match(SparkSqlParser.KW_FOR);
                    }
                }

                this.state = 2207;
                _la = this.tokenStream.LA(1);
                if(!(_la === 292 || _la === 337)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2208;
                this.match(SparkSqlParser.KW_AS);
                this.state = 2209;
                this.match(SparkSqlParser.KW_OF);
                this.state = 2212;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.INTEGER_VALUE:
                    {
                    this.state = 2210;
                    this.match(SparkSqlParser.INTEGER_VALUE);
                    }
                    break;
                case SparkSqlParser.STRING_LITERAL:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 2211;
                    this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2215;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 2214;
                    this.match(SparkSqlParser.KW_FOR);
                    }
                }

                this.state = 2217;
                _la = this.tokenStream.LA(1);
                if(!(_la === 291 || _la === 303)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2218;
                this.match(SparkSqlParser.KW_AS);
                this.state = 2219;
                this.match(SparkSqlParser.KW_OF);
                this.state = 2220;
                localContext._timestamp = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregationClause(): AggregationClauseContext {
        let localContext = new AggregationClauseContext(this.context, this.state);
        this.enterRule(localContext, 136, SparkSqlParser.RULE_aggregationClause);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2262;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 294, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2223;
                this.match(SparkSqlParser.KW_GROUP);
                this.state = 2224;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2225;
                localContext._groupByClause = this.groupByClause();
                localContext._groupingExpressionsWithGroupingAnalytics.push(localContext._groupByClause);
                this.state = 2230;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 290, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2226;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2227;
                        localContext._groupByClause = this.groupByClause();
                        localContext._groupingExpressionsWithGroupingAnalytics.push(localContext._groupByClause);
                        }
                        }
                    }
                    this.state = 2232;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 290, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2233;
                this.match(SparkSqlParser.KW_GROUP);
                this.state = 2234;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2235;
                localContext._expression = this.expression();
                localContext._groupingExpressions.push(localContext._expression);
                this.state = 2240;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 291, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2236;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2237;
                        localContext._expression = this.expression();
                        localContext._groupingExpressions.push(localContext._expression);
                        }
                        }
                    }
                    this.state = 2242;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 291, this.context);
                }
                this.state = 2260;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
                case 1:
                    {
                    this.state = 2243;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 2244;
                    localContext._kind = this.match(SparkSqlParser.KW_ROLLUP);
                    }
                    break;
                case 2:
                    {
                    this.state = 2245;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 2246;
                    localContext._kind = this.match(SparkSqlParser.KW_CUBE);
                    }
                    break;
                case 3:
                    {
                    this.state = 2247;
                    localContext._kind = this.match(SparkSqlParser.KW_GROUPING);
                    this.state = 2248;
                    this.match(SparkSqlParser.KW_SETS);
                    this.state = 2249;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2250;
                    this.groupingSet();
                    this.state = 2255;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2251;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2252;
                        this.groupingSet();
                        }
                        }
                        this.state = 2257;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2258;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 138, SparkSqlParser.RULE_groupByClause);
        try {
            this.state = 2267;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2264;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2265;
                this.groupingAnalytics();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2266;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingAnalytics(): GroupingAnalyticsContext {
        let localContext = new GroupingAnalyticsContext(this.context, this.state);
        this.enterRule(localContext, 140, SparkSqlParser.RULE_groupingAnalytics);
        let _la: number;
        try {
            this.state = 2300;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_ROLLUP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2269;
                _la = this.tokenStream.LA(1);
                if(!(_la === 61 || _la === 256)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2270;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2271;
                this.groupingSet();
                this.state = 2276;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2272;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2273;
                    this.groupingSet();
                    }
                    }
                    this.state = 2278;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2279;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case SparkSqlParser.KW_GROUPING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2281;
                this.match(SparkSqlParser.KW_GROUPING);
                this.state = 2282;
                this.match(SparkSqlParser.KW_SETS);
                this.state = 2283;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2286;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 297, this.context) ) {
                case 1:
                    {
                    this.state = 2284;
                    this.groupingAnalytics();
                    }
                    break;
                case 2:
                    {
                    this.state = 2285;
                    this.groupingSet();
                    }
                    break;
                }
                this.state = 2295;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2288;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2291;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 298, this.context) ) {
                    case 1:
                        {
                        this.state = 2289;
                        this.groupingAnalytics();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2290;
                        this.groupingSet();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 2297;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2298;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 142, SparkSqlParser.RULE_groupingSet);
        let _la: number;
        try {
            this.state = 2322;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 305, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2302;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2303;
                this.expression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2304;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2319;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 304, this.context) ) {
                case 1:
                    {
                    this.state = 2307;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 301, this.context) ) {
                    case 1:
                        {
                        this.state = 2305;
                        this.columnName();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2306;
                        this.expression();
                        }
                        break;
                    }
                    this.state = 2316;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2309;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2312;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
                        case 1:
                            {
                            this.state = 2310;
                            this.columnName();
                            }
                            break;
                        case 2:
                            {
                            this.state = 2311;
                            this.expression();
                            }
                            break;
                        }
                        }
                        }
                        this.state = 2318;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                this.state = 2321;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotClause(): PivotClauseContext {
        let localContext = new PivotClauseContext(this.context, this.state);
        this.enterRule(localContext, 144, SparkSqlParser.RULE_pivotClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2324;
            this.match(SparkSqlParser.KW_PIVOT);
            this.state = 2325;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2326;
            localContext._aggregates = this.namedExpressionSeq();
            this.state = 2327;
            this.match(SparkSqlParser.KW_FOR);
            this.state = 2328;
            this.pivotColumn();
            this.state = 2329;
            this.match(SparkSqlParser.KW_IN);
            this.state = 2330;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2331;
            localContext._pivotValue = this.pivotValue();
            localContext._pivotValues.push(localContext._pivotValue);
            this.state = 2336;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2332;
                this.match(SparkSqlParser.COMMA);
                this.state = 2333;
                localContext._pivotValue = this.pivotValue();
                localContext._pivotValues.push(localContext._pivotValue);
                }
                }
                this.state = 2338;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2339;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2340;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotColumn(): PivotColumnContext {
        let localContext = new PivotColumnContext(this.context, this.state);
        this.enterRule(localContext, 146, SparkSqlParser.RULE_pivotColumn);
        let _la: number;
        try {
            this.state = 2354;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ADD:
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_ALL:
            case SparkSqlParser.KW_ALTER:
            case SparkSqlParser.KW_ALWAYS:
            case SparkSqlParser.KW_ANALYZE:
            case SparkSqlParser.KW_AND:
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_ANY:
            case SparkSqlParser.KW_ANY_VALUE:
            case SparkSqlParser.KW_ARCHIVE:
            case SparkSqlParser.KW_ARRAY:
            case SparkSqlParser.KW_AS:
            case SparkSqlParser.KW_ASC:
            case SparkSqlParser.KW_AT:
            case SparkSqlParser.KW_AUTHORIZATION:
            case SparkSqlParser.KW_BETWEEN:
            case SparkSqlParser.KW_BIGINT:
            case SparkSqlParser.KW_BINARY:
            case SparkSqlParser.KW_BOOLEAN:
            case SparkSqlParser.KW_BOTH:
            case SparkSqlParser.KW_BUCKET:
            case SparkSqlParser.KW_BUCKETS:
            case SparkSqlParser.KW_BY:
            case SparkSqlParser.KW_BYTE:
            case SparkSqlParser.KW_CACHE:
            case SparkSqlParser.KW_CASCADE:
            case SparkSqlParser.KW_CASE:
            case SparkSqlParser.KW_CAST:
            case SparkSqlParser.KW_CATALOG:
            case SparkSqlParser.KW_CATALOGS:
            case SparkSqlParser.KW_CHANGE:
            case SparkSqlParser.KW_CHAR:
            case SparkSqlParser.KW_CHARACTER:
            case SparkSqlParser.KW_CHECK:
            case SparkSqlParser.KW_CLEAR:
            case SparkSqlParser.KW_CLUSTER:
            case SparkSqlParser.KW_CLUSTERED:
            case SparkSqlParser.KW_CODEGEN:
            case SparkSqlParser.KW_COLLATE:
            case SparkSqlParser.KW_COLLECTION:
            case SparkSqlParser.KW_COLUMN:
            case SparkSqlParser.KW_COLUMNS:
            case SparkSqlParser.KW_COMMENT:
            case SparkSqlParser.KW_COMMIT:
            case SparkSqlParser.KW_COMPACT:
            case SparkSqlParser.KW_COMPACTIONS:
            case SparkSqlParser.KW_COMPUTE:
            case SparkSqlParser.KW_CONCATENATE:
            case SparkSqlParser.KW_CONSTRAINT:
            case SparkSqlParser.KW_COST:
            case SparkSqlParser.KW_CREATE:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_CURRENT:
            case SparkSqlParser.KW_CURRENT_DATE:
            case SparkSqlParser.KW_CURRENT_TIME:
            case SparkSqlParser.KW_CURRENT_TIMESTAMP:
            case SparkSqlParser.KW_CURRENT_USER:
            case SparkSqlParser.KW_DAY:
            case SparkSqlParser.KW_DAYS:
            case SparkSqlParser.KW_DAYOFYEAR:
            case SparkSqlParser.KW_DATA:
            case SparkSqlParser.KW_DATE:
            case SparkSqlParser.KW_DATABASE:
            case SparkSqlParser.KW_DATABASES:
            case SparkSqlParser.KW_DATEADD:
            case SparkSqlParser.KW_DATE_ADD:
            case SparkSqlParser.KW_DATEDIFF:
            case SparkSqlParser.KW_DATE_DIFF:
            case SparkSqlParser.KW_DBPROPERTIES:
            case SparkSqlParser.KW_DEC:
            case SparkSqlParser.KW_DECIMAL:
            case SparkSqlParser.KW_DECLARE:
            case SparkSqlParser.KW_DEFAULT:
            case SparkSqlParser.KW_DEFINED:
            case SparkSqlParser.KW_DELETE:
            case SparkSqlParser.KW_DELIMITED:
            case SparkSqlParser.KW_DESC:
            case SparkSqlParser.KW_DESCRIBE:
            case SparkSqlParser.KW_DFS:
            case SparkSqlParser.KW_DIRECTORIES:
            case SparkSqlParser.KW_DIRECTORY:
            case SparkSqlParser.KW_DISABLE:
            case SparkSqlParser.KW_DISTINCT:
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_DIV:
            case SparkSqlParser.KW_DOUBLE:
            case SparkSqlParser.KW_DROP:
            case SparkSqlParser.KW_ELSE:
            case SparkSqlParser.KW_ENABLE:
            case SparkSqlParser.KW_END:
            case SparkSqlParser.KW_ESCAPE:
            case SparkSqlParser.KW_ESCAPED:
            case SparkSqlParser.KW_EXCEPT:
            case SparkSqlParser.KW_EXCHANGE:
            case SparkSqlParser.KW_EXCLUDE:
            case SparkSqlParser.KW_EXISTS:
            case SparkSqlParser.KW_EXPLAIN:
            case SparkSqlParser.KW_EXPORT:
            case SparkSqlParser.KW_EXTENDED:
            case SparkSqlParser.KW_EXTERNAL:
            case SparkSqlParser.KW_EXTRACT:
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_FETCH:
            case SparkSqlParser.KW_FIELDS:
            case SparkSqlParser.KW_FILTER:
            case SparkSqlParser.KW_FILEFORMAT:
            case SparkSqlParser.KW_FIRST:
            case SparkSqlParser.KW_FLOAT:
            case SparkSqlParser.KW_FOLLOWING:
            case SparkSqlParser.KW_FOR:
            case SparkSqlParser.KW_FOREIGN:
            case SparkSqlParser.KW_FORMAT:
            case SparkSqlParser.KW_FORMATTED:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_FUNCTION:
            case SparkSqlParser.KW_FUNCTIONS:
            case SparkSqlParser.KW_GENERATED:
            case SparkSqlParser.KW_GLOBAL:
            case SparkSqlParser.KW_GRANT:
            case SparkSqlParser.KW_GROUP:
            case SparkSqlParser.KW_GROUPING:
            case SparkSqlParser.KW_HAVING:
            case SparkSqlParser.KW_BINARY_HEX:
            case SparkSqlParser.KW_HOUR:
            case SparkSqlParser.KW_HOURS:
            case SparkSqlParser.KW_IDENTIFIER:
            case SparkSqlParser.KW_IF:
            case SparkSqlParser.KW_IGNORE:
            case SparkSqlParser.KW_IMPORT:
            case SparkSqlParser.KW_IN:
            case SparkSqlParser.KW_INCLUDE:
            case SparkSqlParser.KW_INDEX:
            case SparkSqlParser.KW_INDEXES:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_INPATH:
            case SparkSqlParser.KW_INPUTFORMAT:
            case SparkSqlParser.KW_INSERT:
            case SparkSqlParser.KW_INTERSECT:
            case SparkSqlParser.KW_INTERVAL:
            case SparkSqlParser.KW_INT:
            case SparkSqlParser.KW_INTEGER:
            case SparkSqlParser.KW_INTO:
            case SparkSqlParser.KW_IS:
            case SparkSqlParser.KW_ITEMS:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_KEYS:
            case SparkSqlParser.KW_LAST:
            case SparkSqlParser.KW_LATERAL:
            case SparkSqlParser.KW_LAZY:
            case SparkSqlParser.KW_LEADING:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_LIFECYCLE:
            case SparkSqlParser.KW_LIKE:
            case SparkSqlParser.KW_ILIKE:
            case SparkSqlParser.KW_LIMIT:
            case SparkSqlParser.KW_LINES:
            case SparkSqlParser.KW_LIST:
            case SparkSqlParser.KW_LOAD:
            case SparkSqlParser.KW_LOCAL:
            case SparkSqlParser.KW_LOCATION:
            case SparkSqlParser.KW_LOCK:
            case SparkSqlParser.KW_LOCKS:
            case SparkSqlParser.KW_LOGICAL:
            case SparkSqlParser.KW_LONG:
            case SparkSqlParser.KW_MACRO:
            case SparkSqlParser.KW_MATERIALIZED:
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_MATCHED:
            case SparkSqlParser.KW_MERGE:
            case SparkSqlParser.KW_MICROSECOND:
            case SparkSqlParser.KW_MICROSECONDS:
            case SparkSqlParser.KW_MILLISECOND:
            case SparkSqlParser.KW_MILLISECONDS:
            case SparkSqlParser.KW_MINUTE:
            case SparkSqlParser.KW_MINUTES:
            case SparkSqlParser.KW_MONTH:
            case SparkSqlParser.KW_MONTHS:
            case SparkSqlParser.KW_MSCK:
            case SparkSqlParser.KW_NAME:
            case SparkSqlParser.KW_NAMESPACE:
            case SparkSqlParser.KW_NAMESPACES:
            case SparkSqlParser.KW_NANOSECOND:
            case SparkSqlParser.KW_NANOSECONDS:
            case SparkSqlParser.KW_NATURAL:
            case SparkSqlParser.KW_NO:
            case SparkSqlParser.KW_NOT:
            case SparkSqlParser.KW_NULL:
            case SparkSqlParser.KW_NULLS:
            case SparkSqlParser.KW_NUMERIC:
            case SparkSqlParser.KW_OF:
            case SparkSqlParser.KW_OFFSET:
            case SparkSqlParser.KW_ON:
            case SparkSqlParser.KW_ONLY:
            case SparkSqlParser.KW_OPTIMIZE:
            case SparkSqlParser.KW_OPTION:
            case SparkSqlParser.KW_OPTIONS:
            case SparkSqlParser.KW_OR:
            case SparkSqlParser.KW_ORDER:
            case SparkSqlParser.KW_OUT:
            case SparkSqlParser.KW_OUTER:
            case SparkSqlParser.KW_OUTPUTFORMAT:
            case SparkSqlParser.KW_OVER:
            case SparkSqlParser.KW_OVERLAPS:
            case SparkSqlParser.KW_OVERLAY:
            case SparkSqlParser.KW_OVERWRITE:
            case SparkSqlParser.KW_PARTITION:
            case SparkSqlParser.KW_PARTITIONED:
            case SparkSqlParser.KW_PARTITIONS:
            case SparkSqlParser.KW_PERCENTILE_CONT:
            case SparkSqlParser.KW_PERCENTILE_DISC:
            case SparkSqlParser.KW_PERCENTLIT:
            case SparkSqlParser.KW_PIVOT:
            case SparkSqlParser.KW_PLACING:
            case SparkSqlParser.KW_POSITION:
            case SparkSqlParser.KW_PRECEDING:
            case SparkSqlParser.KW_PRIMARY:
            case SparkSqlParser.KW_PRINCIPALS:
            case SparkSqlParser.KW_PROPERTIES:
            case SparkSqlParser.KW_PURGE:
            case SparkSqlParser.KW_QUARTER:
            case SparkSqlParser.KW_QUERY:
            case SparkSqlParser.KW_RANGE:
            case SparkSqlParser.KW_REAL:
            case SparkSqlParser.KW_RECORDREADER:
            case SparkSqlParser.KW_RECORDWRITER:
            case SparkSqlParser.KW_RECOVER:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_REFERENCES:
            case SparkSqlParser.KW_REFRESH:
            case SparkSqlParser.KW_RENAME:
            case SparkSqlParser.KW_REPAIR:
            case SparkSqlParser.KW_REPEATABLE:
            case SparkSqlParser.KW_REPLACE:
            case SparkSqlParser.KW_RESET:
            case SparkSqlParser.KW_RESPECT:
            case SparkSqlParser.KW_RESTRICT:
            case SparkSqlParser.KW_REWRITE:
            case SparkSqlParser.KW_REVOKE:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_RLIKE:
            case SparkSqlParser.KW_REGEXP:
            case SparkSqlParser.KW_ROLE:
            case SparkSqlParser.KW_ROLES:
            case SparkSqlParser.KW_ROLLBACK:
            case SparkSqlParser.KW_ROLLUP:
            case SparkSqlParser.KW_ROW:
            case SparkSqlParser.KW_ROWS:
            case SparkSqlParser.KW_SECOND:
            case SparkSqlParser.KW_SECONDS:
            case SparkSqlParser.KW_SCHEMA:
            case SparkSqlParser.KW_SCHEMAS:
            case SparkSqlParser.KW_SEMI:
            case SparkSqlParser.KW_SEPARATED:
            case SparkSqlParser.KW_SERDE:
            case SparkSqlParser.KW_SERDEPROPERTIES:
            case SparkSqlParser.KW_SESSION_USER:
            case SparkSqlParser.KW_SET:
            case SparkSqlParser.KW_MINUS:
            case SparkSqlParser.KW_SETS:
            case SparkSqlParser.KW_SHORT:
            case SparkSqlParser.KW_SHOW:
            case SparkSqlParser.KW_SINGLE:
            case SparkSqlParser.KW_SKEWED:
            case SparkSqlParser.KW_SMALLINT:
            case SparkSqlParser.KW_SOME:
            case SparkSqlParser.KW_SORT:
            case SparkSqlParser.KW_SORTED:
            case SparkSqlParser.KW_SOURCE:
            case SparkSqlParser.KW_START:
            case SparkSqlParser.KW_STATISTICS:
            case SparkSqlParser.KW_STORED:
            case SparkSqlParser.KW_STRATIFY:
            case SparkSqlParser.KW_STRING:
            case SparkSqlParser.KW_STRUCT:
            case SparkSqlParser.KW_SUBSTR:
            case SparkSqlParser.KW_SUBSTRING:
            case SparkSqlParser.KW_SYNC:
            case SparkSqlParser.KW_SYSTEM:
            case SparkSqlParser.KW_SYSTEM_TIME:
            case SparkSqlParser.KW_SYSTEM_VERSION:
            case SparkSqlParser.KW_TABLES:
            case SparkSqlParser.KW_TABLESAMPLE:
            case SparkSqlParser.KW_TARGET:
            case SparkSqlParser.KW_TBLPROPERTIES:
            case SparkSqlParser.KW_TEMPORARY:
            case SparkSqlParser.KW_TERMINATED:
            case SparkSqlParser.KW_THEN:
            case SparkSqlParser.KW_TIME:
            case SparkSqlParser.KW_TIMEDIFF:
            case SparkSqlParser.KW_TIMESTAMP:
            case SparkSqlParser.KW_TIMESTAMP_LTZ:
            case SparkSqlParser.KW_TIMESTAMP_NTZ:
            case SparkSqlParser.KW_TIMESTAMPADD:
            case SparkSqlParser.KW_TIMESTAMPDIFF:
            case SparkSqlParser.KW_TINYINT:
            case SparkSqlParser.KW_TO:
            case SparkSqlParser.KW_TOUCH:
            case SparkSqlParser.KW_TRAILING:
            case SparkSqlParser.KW_TRANSACTION:
            case SparkSqlParser.KW_TRANSACTIONS:
            case SparkSqlParser.KW_TRANSFORM:
            case SparkSqlParser.KW_TRIM:
            case SparkSqlParser.KW_TRUE:
            case SparkSqlParser.KW_TRUNCATE:
            case SparkSqlParser.KW_TRY_CAST:
            case SparkSqlParser.KW_TYPE:
            case SparkSqlParser.KW_UNARCHIVE:
            case SparkSqlParser.KW_UNBOUNDED:
            case SparkSqlParser.KW_UNCACHE:
            case SparkSqlParser.KW_UNION:
            case SparkSqlParser.KW_UNIQUE:
            case SparkSqlParser.KW_UNKNOWN:
            case SparkSqlParser.KW_UNLOCK:
            case SparkSqlParser.KW_UNPIVOT:
            case SparkSqlParser.KW_UNSET:
            case SparkSqlParser.KW_UPDATE:
            case SparkSqlParser.KW_USE:
            case SparkSqlParser.KW_USER:
            case SparkSqlParser.KW_USING:
            case SparkSqlParser.KW_VALUES:
            case SparkSqlParser.KW_VARCHAR:
            case SparkSqlParser.KW_VAR:
            case SparkSqlParser.KW_VARIABLE:
            case SparkSqlParser.KW_VERSION:
            case SparkSqlParser.KW_VIEW:
            case SparkSqlParser.KW_VIEWS:
            case SparkSqlParser.KW_VOID:
            case SparkSqlParser.KW_WEEK:
            case SparkSqlParser.KW_WEEKS:
            case SparkSqlParser.KW_WHEN:
            case SparkSqlParser.KW_WHERE:
            case SparkSqlParser.KW_WINDOW:
            case SparkSqlParser.KW_WITH:
            case SparkSqlParser.KW_WITHIN:
            case SparkSqlParser.KW_YEAR:
            case SparkSqlParser.KW_YEARS:
            case SparkSqlParser.KW_ZONE:
            case SparkSqlParser.KW_ZORDER:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
            case SparkSqlParser.IDENTIFIER:
            case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2342;
                localContext._identifier = this.identifier();
                localContext._identifiers.push(localContext._identifier);
                }
                break;
            case SparkSqlParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2343;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2344;
                localContext._identifier = this.identifier();
                localContext._identifiers.push(localContext._identifier);
                this.state = 2349;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2345;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2346;
                    localContext._identifier = this.identifier();
                    localContext._identifiers.push(localContext._identifier);
                    }
                    }
                    this.state = 2351;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2352;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotValue(): PivotValueContext {
        let localContext = new PivotValueContext(this.context, this.state);
        this.enterRule(localContext, 148, SparkSqlParser.RULE_pivotValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2356;
            this.expression();
            this.state = 2361;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                {
                this.state = 2358;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 309, this.context) ) {
                case 1:
                    {
                    this.state = 2357;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2360;
                this.identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unPivotClause(): UnPivotClauseContext {
        let localContext = new UnPivotClauseContext(this.context, this.state);
        this.enterRule(localContext, 150, SparkSqlParser.RULE_unPivotClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2363;
            this.match(SparkSqlParser.KW_UNPIVOT);
            this.state = 2366;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 104 || _la === 141) {
                {
                this.state = 2364;
                _la = this.tokenStream.LA(1);
                if(!(_la === 104 || _la === 141)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2365;
                this.match(SparkSqlParser.KW_NULLS);
                }
            }

            this.state = 2368;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2371;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ADD:
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_ALL:
            case SparkSqlParser.KW_ALTER:
            case SparkSqlParser.KW_ALWAYS:
            case SparkSqlParser.KW_ANALYZE:
            case SparkSqlParser.KW_AND:
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_ANY:
            case SparkSqlParser.KW_ANY_VALUE:
            case SparkSqlParser.KW_ARCHIVE:
            case SparkSqlParser.KW_ARRAY:
            case SparkSqlParser.KW_AS:
            case SparkSqlParser.KW_ASC:
            case SparkSqlParser.KW_AT:
            case SparkSqlParser.KW_AUTHORIZATION:
            case SparkSqlParser.KW_BETWEEN:
            case SparkSqlParser.KW_BIGINT:
            case SparkSqlParser.KW_BINARY:
            case SparkSqlParser.KW_BOOLEAN:
            case SparkSqlParser.KW_BOTH:
            case SparkSqlParser.KW_BUCKET:
            case SparkSqlParser.KW_BUCKETS:
            case SparkSqlParser.KW_BY:
            case SparkSqlParser.KW_BYTE:
            case SparkSqlParser.KW_CACHE:
            case SparkSqlParser.KW_CASCADE:
            case SparkSqlParser.KW_CASE:
            case SparkSqlParser.KW_CAST:
            case SparkSqlParser.KW_CATALOG:
            case SparkSqlParser.KW_CATALOGS:
            case SparkSqlParser.KW_CHANGE:
            case SparkSqlParser.KW_CHAR:
            case SparkSqlParser.KW_CHARACTER:
            case SparkSqlParser.KW_CHECK:
            case SparkSqlParser.KW_CLEAR:
            case SparkSqlParser.KW_CLUSTER:
            case SparkSqlParser.KW_CLUSTERED:
            case SparkSqlParser.KW_CODEGEN:
            case SparkSqlParser.KW_COLLATE:
            case SparkSqlParser.KW_COLLECTION:
            case SparkSqlParser.KW_COLUMN:
            case SparkSqlParser.KW_COLUMNS:
            case SparkSqlParser.KW_COMMENT:
            case SparkSqlParser.KW_COMMIT:
            case SparkSqlParser.KW_COMPACT:
            case SparkSqlParser.KW_COMPACTIONS:
            case SparkSqlParser.KW_COMPUTE:
            case SparkSqlParser.KW_CONCATENATE:
            case SparkSqlParser.KW_CONSTRAINT:
            case SparkSqlParser.KW_COST:
            case SparkSqlParser.KW_CREATE:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_CURRENT:
            case SparkSqlParser.KW_CURRENT_DATE:
            case SparkSqlParser.KW_CURRENT_TIME:
            case SparkSqlParser.KW_CURRENT_TIMESTAMP:
            case SparkSqlParser.KW_CURRENT_USER:
            case SparkSqlParser.KW_DAY:
            case SparkSqlParser.KW_DAYS:
            case SparkSqlParser.KW_DAYOFYEAR:
            case SparkSqlParser.KW_DATA:
            case SparkSqlParser.KW_DATE:
            case SparkSqlParser.KW_DATABASE:
            case SparkSqlParser.KW_DATABASES:
            case SparkSqlParser.KW_DATEADD:
            case SparkSqlParser.KW_DATE_ADD:
            case SparkSqlParser.KW_DATEDIFF:
            case SparkSqlParser.KW_DATE_DIFF:
            case SparkSqlParser.KW_DBPROPERTIES:
            case SparkSqlParser.KW_DEC:
            case SparkSqlParser.KW_DECIMAL:
            case SparkSqlParser.KW_DECLARE:
            case SparkSqlParser.KW_DEFAULT:
            case SparkSqlParser.KW_DEFINED:
            case SparkSqlParser.KW_DELETE:
            case SparkSqlParser.KW_DELIMITED:
            case SparkSqlParser.KW_DESC:
            case SparkSqlParser.KW_DESCRIBE:
            case SparkSqlParser.KW_DFS:
            case SparkSqlParser.KW_DIRECTORIES:
            case SparkSqlParser.KW_DIRECTORY:
            case SparkSqlParser.KW_DISABLE:
            case SparkSqlParser.KW_DISTINCT:
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_DIV:
            case SparkSqlParser.KW_DOUBLE:
            case SparkSqlParser.KW_DROP:
            case SparkSqlParser.KW_ELSE:
            case SparkSqlParser.KW_ENABLE:
            case SparkSqlParser.KW_END:
            case SparkSqlParser.KW_ESCAPE:
            case SparkSqlParser.KW_ESCAPED:
            case SparkSqlParser.KW_EXCEPT:
            case SparkSqlParser.KW_EXCHANGE:
            case SparkSqlParser.KW_EXCLUDE:
            case SparkSqlParser.KW_EXISTS:
            case SparkSqlParser.KW_EXPLAIN:
            case SparkSqlParser.KW_EXPORT:
            case SparkSqlParser.KW_EXTENDED:
            case SparkSqlParser.KW_EXTERNAL:
            case SparkSqlParser.KW_EXTRACT:
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_FETCH:
            case SparkSqlParser.KW_FIELDS:
            case SparkSqlParser.KW_FILTER:
            case SparkSqlParser.KW_FILEFORMAT:
            case SparkSqlParser.KW_FIRST:
            case SparkSqlParser.KW_FLOAT:
            case SparkSqlParser.KW_FOLLOWING:
            case SparkSqlParser.KW_FOR:
            case SparkSqlParser.KW_FOREIGN:
            case SparkSqlParser.KW_FORMAT:
            case SparkSqlParser.KW_FORMATTED:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_FUNCTION:
            case SparkSqlParser.KW_FUNCTIONS:
            case SparkSqlParser.KW_GENERATED:
            case SparkSqlParser.KW_GLOBAL:
            case SparkSqlParser.KW_GRANT:
            case SparkSqlParser.KW_GROUP:
            case SparkSqlParser.KW_GROUPING:
            case SparkSqlParser.KW_HAVING:
            case SparkSqlParser.KW_BINARY_HEX:
            case SparkSqlParser.KW_HOUR:
            case SparkSqlParser.KW_HOURS:
            case SparkSqlParser.KW_IDENTIFIER:
            case SparkSqlParser.KW_IF:
            case SparkSqlParser.KW_IGNORE:
            case SparkSqlParser.KW_IMPORT:
            case SparkSqlParser.KW_IN:
            case SparkSqlParser.KW_INCLUDE:
            case SparkSqlParser.KW_INDEX:
            case SparkSqlParser.KW_INDEXES:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_INPATH:
            case SparkSqlParser.KW_INPUTFORMAT:
            case SparkSqlParser.KW_INSERT:
            case SparkSqlParser.KW_INTERSECT:
            case SparkSqlParser.KW_INTERVAL:
            case SparkSqlParser.KW_INT:
            case SparkSqlParser.KW_INTEGER:
            case SparkSqlParser.KW_INTO:
            case SparkSqlParser.KW_IS:
            case SparkSqlParser.KW_ITEMS:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_KEYS:
            case SparkSqlParser.KW_LAST:
            case SparkSqlParser.KW_LATERAL:
            case SparkSqlParser.KW_LAZY:
            case SparkSqlParser.KW_LEADING:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_LIFECYCLE:
            case SparkSqlParser.KW_LIKE:
            case SparkSqlParser.KW_ILIKE:
            case SparkSqlParser.KW_LIMIT:
            case SparkSqlParser.KW_LINES:
            case SparkSqlParser.KW_LIST:
            case SparkSqlParser.KW_LOAD:
            case SparkSqlParser.KW_LOCAL:
            case SparkSqlParser.KW_LOCATION:
            case SparkSqlParser.KW_LOCK:
            case SparkSqlParser.KW_LOCKS:
            case SparkSqlParser.KW_LOGICAL:
            case SparkSqlParser.KW_LONG:
            case SparkSqlParser.KW_MACRO:
            case SparkSqlParser.KW_MATERIALIZED:
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_MATCHED:
            case SparkSqlParser.KW_MERGE:
            case SparkSqlParser.KW_MICROSECOND:
            case SparkSqlParser.KW_MICROSECONDS:
            case SparkSqlParser.KW_MILLISECOND:
            case SparkSqlParser.KW_MILLISECONDS:
            case SparkSqlParser.KW_MINUTE:
            case SparkSqlParser.KW_MINUTES:
            case SparkSqlParser.KW_MONTH:
            case SparkSqlParser.KW_MONTHS:
            case SparkSqlParser.KW_MSCK:
            case SparkSqlParser.KW_NAME:
            case SparkSqlParser.KW_NAMESPACE:
            case SparkSqlParser.KW_NAMESPACES:
            case SparkSqlParser.KW_NANOSECOND:
            case SparkSqlParser.KW_NANOSECONDS:
            case SparkSqlParser.KW_NATURAL:
            case SparkSqlParser.KW_NO:
            case SparkSqlParser.KW_NOT:
            case SparkSqlParser.KW_NULL:
            case SparkSqlParser.KW_NULLS:
            case SparkSqlParser.KW_NUMERIC:
            case SparkSqlParser.KW_OF:
            case SparkSqlParser.KW_OFFSET:
            case SparkSqlParser.KW_ON:
            case SparkSqlParser.KW_ONLY:
            case SparkSqlParser.KW_OPTIMIZE:
            case SparkSqlParser.KW_OPTION:
            case SparkSqlParser.KW_OPTIONS:
            case SparkSqlParser.KW_OR:
            case SparkSqlParser.KW_ORDER:
            case SparkSqlParser.KW_OUT:
            case SparkSqlParser.KW_OUTER:
            case SparkSqlParser.KW_OUTPUTFORMAT:
            case SparkSqlParser.KW_OVER:
            case SparkSqlParser.KW_OVERLAPS:
            case SparkSqlParser.KW_OVERLAY:
            case SparkSqlParser.KW_OVERWRITE:
            case SparkSqlParser.KW_PARTITION:
            case SparkSqlParser.KW_PARTITIONED:
            case SparkSqlParser.KW_PARTITIONS:
            case SparkSqlParser.KW_PERCENTILE_CONT:
            case SparkSqlParser.KW_PERCENTILE_DISC:
            case SparkSqlParser.KW_PERCENTLIT:
            case SparkSqlParser.KW_PIVOT:
            case SparkSqlParser.KW_PLACING:
            case SparkSqlParser.KW_POSITION:
            case SparkSqlParser.KW_PRECEDING:
            case SparkSqlParser.KW_PRIMARY:
            case SparkSqlParser.KW_PRINCIPALS:
            case SparkSqlParser.KW_PROPERTIES:
            case SparkSqlParser.KW_PURGE:
            case SparkSqlParser.KW_QUARTER:
            case SparkSqlParser.KW_QUERY:
            case SparkSqlParser.KW_RANGE:
            case SparkSqlParser.KW_REAL:
            case SparkSqlParser.KW_RECORDREADER:
            case SparkSqlParser.KW_RECORDWRITER:
            case SparkSqlParser.KW_RECOVER:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_REFERENCES:
            case SparkSqlParser.KW_REFRESH:
            case SparkSqlParser.KW_RENAME:
            case SparkSqlParser.KW_REPAIR:
            case SparkSqlParser.KW_REPEATABLE:
            case SparkSqlParser.KW_REPLACE:
            case SparkSqlParser.KW_RESET:
            case SparkSqlParser.KW_RESPECT:
            case SparkSqlParser.KW_RESTRICT:
            case SparkSqlParser.KW_REWRITE:
            case SparkSqlParser.KW_REVOKE:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_RLIKE:
            case SparkSqlParser.KW_REGEXP:
            case SparkSqlParser.KW_ROLE:
            case SparkSqlParser.KW_ROLES:
            case SparkSqlParser.KW_ROLLBACK:
            case SparkSqlParser.KW_ROLLUP:
            case SparkSqlParser.KW_ROW:
            case SparkSqlParser.KW_ROWS:
            case SparkSqlParser.KW_SECOND:
            case SparkSqlParser.KW_SECONDS:
            case SparkSqlParser.KW_SCHEMA:
            case SparkSqlParser.KW_SCHEMAS:
            case SparkSqlParser.KW_SEMI:
            case SparkSqlParser.KW_SEPARATED:
            case SparkSqlParser.KW_SERDE:
            case SparkSqlParser.KW_SERDEPROPERTIES:
            case SparkSqlParser.KW_SESSION_USER:
            case SparkSqlParser.KW_SET:
            case SparkSqlParser.KW_MINUS:
            case SparkSqlParser.KW_SETS:
            case SparkSqlParser.KW_SHORT:
            case SparkSqlParser.KW_SHOW:
            case SparkSqlParser.KW_SINGLE:
            case SparkSqlParser.KW_SKEWED:
            case SparkSqlParser.KW_SMALLINT:
            case SparkSqlParser.KW_SOME:
            case SparkSqlParser.KW_SORT:
            case SparkSqlParser.KW_SORTED:
            case SparkSqlParser.KW_SOURCE:
            case SparkSqlParser.KW_START:
            case SparkSqlParser.KW_STATISTICS:
            case SparkSqlParser.KW_STORED:
            case SparkSqlParser.KW_STRATIFY:
            case SparkSqlParser.KW_STRING:
            case SparkSqlParser.KW_STRUCT:
            case SparkSqlParser.KW_SUBSTR:
            case SparkSqlParser.KW_SUBSTRING:
            case SparkSqlParser.KW_SYNC:
            case SparkSqlParser.KW_SYSTEM:
            case SparkSqlParser.KW_SYSTEM_TIME:
            case SparkSqlParser.KW_SYSTEM_VERSION:
            case SparkSqlParser.KW_TABLES:
            case SparkSqlParser.KW_TABLESAMPLE:
            case SparkSqlParser.KW_TARGET:
            case SparkSqlParser.KW_TBLPROPERTIES:
            case SparkSqlParser.KW_TEMPORARY:
            case SparkSqlParser.KW_TERMINATED:
            case SparkSqlParser.KW_THEN:
            case SparkSqlParser.KW_TIME:
            case SparkSqlParser.KW_TIMEDIFF:
            case SparkSqlParser.KW_TIMESTAMP:
            case SparkSqlParser.KW_TIMESTAMP_LTZ:
            case SparkSqlParser.KW_TIMESTAMP_NTZ:
            case SparkSqlParser.KW_TIMESTAMPADD:
            case SparkSqlParser.KW_TIMESTAMPDIFF:
            case SparkSqlParser.KW_TINYINT:
            case SparkSqlParser.KW_TO:
            case SparkSqlParser.KW_TOUCH:
            case SparkSqlParser.KW_TRAILING:
            case SparkSqlParser.KW_TRANSACTION:
            case SparkSqlParser.KW_TRANSACTIONS:
            case SparkSqlParser.KW_TRANSFORM:
            case SparkSqlParser.KW_TRIM:
            case SparkSqlParser.KW_TRUE:
            case SparkSqlParser.KW_TRUNCATE:
            case SparkSqlParser.KW_TRY_CAST:
            case SparkSqlParser.KW_TYPE:
            case SparkSqlParser.KW_UNARCHIVE:
            case SparkSqlParser.KW_UNBOUNDED:
            case SparkSqlParser.KW_UNCACHE:
            case SparkSqlParser.KW_UNION:
            case SparkSqlParser.KW_UNIQUE:
            case SparkSqlParser.KW_UNKNOWN:
            case SparkSqlParser.KW_UNLOCK:
            case SparkSqlParser.KW_UNPIVOT:
            case SparkSqlParser.KW_UNSET:
            case SparkSqlParser.KW_UPDATE:
            case SparkSqlParser.KW_USE:
            case SparkSqlParser.KW_USER:
            case SparkSqlParser.KW_USING:
            case SparkSqlParser.KW_VALUES:
            case SparkSqlParser.KW_VARCHAR:
            case SparkSqlParser.KW_VAR:
            case SparkSqlParser.KW_VARIABLE:
            case SparkSqlParser.KW_VERSION:
            case SparkSqlParser.KW_VIEW:
            case SparkSqlParser.KW_VIEWS:
            case SparkSqlParser.KW_VOID:
            case SparkSqlParser.KW_WEEK:
            case SparkSqlParser.KW_WEEKS:
            case SparkSqlParser.KW_WHEN:
            case SparkSqlParser.KW_WHERE:
            case SparkSqlParser.KW_WINDOW:
            case SparkSqlParser.KW_WITH:
            case SparkSqlParser.KW_WITHIN:
            case SparkSqlParser.KW_YEAR:
            case SparkSqlParser.KW_YEARS:
            case SparkSqlParser.KW_ZONE:
            case SparkSqlParser.KW_ZORDER:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
            case SparkSqlParser.IDENTIFIER:
            case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                {
                this.state = 2369;
                this.unPivotSingleValueColumnClause();
                }
                break;
            case SparkSqlParser.LEFT_PAREN:
                {
                this.state = 2370;
                this.unPivotMultiValueColumnClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2373;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2378;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
            case 1:
                {
                this.state = 2375;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
                case 1:
                    {
                    this.state = 2374;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2377;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unPivotSingleValueColumnClause(): UnPivotSingleValueColumnClauseContext {
        let localContext = new UnPivotSingleValueColumnClauseContext(this.context, this.state);
        this.enterRule(localContext, 152, SparkSqlParser.RULE_unPivotSingleValueColumnClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2380;
            this.identifier();
            this.state = 2381;
            this.match(SparkSqlParser.KW_FOR);
            this.state = 2382;
            this.identifier();
            this.state = 2383;
            this.match(SparkSqlParser.KW_IN);
            this.state = 2384;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2385;
            localContext._unPivotColumnAndAlias = this.unPivotColumnAndAlias();
            localContext._unPivotColumns.push(localContext._unPivotColumnAndAlias);
            this.state = 2390;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2386;
                this.match(SparkSqlParser.COMMA);
                this.state = 2387;
                localContext._unPivotColumnAndAlias = this.unPivotColumnAndAlias();
                localContext._unPivotColumns.push(localContext._unPivotColumnAndAlias);
                }
                }
                this.state = 2392;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2393;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unPivotMultiValueColumnClause(): UnPivotMultiValueColumnClauseContext {
        let localContext = new UnPivotMultiValueColumnClauseContext(this.context, this.state);
        this.enterRule(localContext, 154, SparkSqlParser.RULE_unPivotMultiValueColumnClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2395;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2396;
            localContext._identifier = this.identifier();
            localContext._unPivotValueColumns.push(localContext._identifier);
            this.state = 2401;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2397;
                this.match(SparkSqlParser.COMMA);
                this.state = 2398;
                localContext._identifier = this.identifier();
                localContext._unPivotValueColumns.push(localContext._identifier);
                }
                }
                this.state = 2403;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2404;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2405;
            this.match(SparkSqlParser.KW_FOR);
            this.state = 2406;
            this.identifier();
            this.state = 2407;
            this.match(SparkSqlParser.KW_IN);
            this.state = 2408;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2409;
            localContext._unPivotColumnSet = this.unPivotColumnSet();
            localContext._unPivotColumnSets.push(localContext._unPivotColumnSet);
            this.state = 2414;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2410;
                this.match(SparkSqlParser.COMMA);
                this.state = 2411;
                localContext._unPivotColumnSet = this.unPivotColumnSet();
                localContext._unPivotColumnSets.push(localContext._unPivotColumnSet);
                }
                }
                this.state = 2416;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2417;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unPivotColumnSet(): UnPivotColumnSetContext {
        let localContext = new UnPivotColumnSetContext(this.context, this.state);
        this.enterRule(localContext, 156, SparkSqlParser.RULE_unPivotColumnSet);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2419;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2420;
            localContext._multipartIdentifier = this.multipartIdentifier();
            localContext._unPivotColumns.push(localContext._multipartIdentifier);
            this.state = 2425;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2421;
                this.match(SparkSqlParser.COMMA);
                this.state = 2422;
                localContext._multipartIdentifier = this.multipartIdentifier();
                localContext._unPivotColumns.push(localContext._multipartIdentifier);
                }
                }
                this.state = 2427;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2428;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2433;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                {
                this.state = 2430;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 319, this.context) ) {
                case 1:
                    {
                    this.state = 2429;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2432;
                this.identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unPivotColumnAndAlias(): UnPivotColumnAndAliasContext {
        let localContext = new UnPivotColumnAndAliasContext(this.context, this.state);
        this.enterRule(localContext, 158, SparkSqlParser.RULE_unPivotColumnAndAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2435;
            this.multipartIdentifier();
            this.state = 2440;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                {
                this.state = 2437;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 321, this.context) ) {
                case 1:
                    {
                    this.state = 2436;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2439;
                this.identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 160, SparkSqlParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2442;
            this.match(SparkSqlParser.KW_IF);
            this.state = 2443;
            this.match(SparkSqlParser.KW_NOT);
            this.state = 2444;
            this.match(SparkSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 162, SparkSqlParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2446;
            this.match(SparkSqlParser.KW_IF);
            this.state = 2447;
            this.match(SparkSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lateralView(): LateralViewContext {
        let localContext = new LateralViewContext(this.context, this.state);
        this.enterRule(localContext, 164, SparkSqlParser.RULE_lateralView);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2449;
            this.match(SparkSqlParser.KW_LATERAL);
            this.state = 2450;
            this.match(SparkSqlParser.KW_VIEW);
            this.state = 2452;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 323, this.context) ) {
            case 1:
                {
                this.state = 2451;
                this.match(SparkSqlParser.KW_OUTER);
                }
                break;
            }
            this.state = 2454;
            this.viewName();
            this.state = 2455;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2464;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1073678415) !== 0)) {
                {
                this.state = 2456;
                this.expression();
                this.state = 2461;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2457;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2458;
                    this.expression();
                    }
                    }
                    this.state = 2463;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2466;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2467;
            this.tableAlias();
            this.state = 2479;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 328, this.context) ) {
            case 1:
                {
                this.state = 2469;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 326, this.context) ) {
                case 1:
                    {
                    this.state = 2468;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2471;
                localContext._identifier = this.identifier();
                localContext._colName.push(localContext._identifier);
                this.state = 2476;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 327, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2472;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2473;
                        localContext._identifier = this.identifier();
                        localContext._colName.push(localContext._identifier);
                        }
                        }
                    }
                    this.state = 2478;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 327, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 166, SparkSqlParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2481;
            _la = this.tokenStream.LA(1);
            if(!(_la === 10 || _la === 92)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation(): RelationContext {
        let localContext = new RelationContext(this.context, this.state);
        this.enterRule(localContext, 168, SparkSqlParser.RULE_relation);
        try {
            let alternative: number;
            this.state = 2496;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 332, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2483;
                this.tableName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2485;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
                case 1:
                    {
                    this.state = 2484;
                    this.match(SparkSqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2487;
                this.relationPrimary();
                this.state = 2493;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 331, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        this.state = 2491;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case SparkSqlParser.KW_ANTI:
                        case SparkSqlParser.KW_CROSS:
                        case SparkSqlParser.KW_FULL:
                        case SparkSqlParser.KW_INNER:
                        case SparkSqlParser.KW_JOIN:
                        case SparkSqlParser.KW_LEFT:
                        case SparkSqlParser.KW_NATURAL:
                        case SparkSqlParser.KW_RIGHT:
                        case SparkSqlParser.KW_SEMI:
                            {
                            this.state = 2488;
                            this.joinRelation();
                            }
                            break;
                        case SparkSqlParser.KW_PIVOT:
                            {
                            this.state = 2489;
                            this.pivotClause();
                            }
                            break;
                        case SparkSqlParser.KW_UNPIVOT:
                            {
                            this.state = 2490;
                            this.unPivotClause();
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                    }
                    this.state = 2495;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 331, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinRelation(): JoinRelationContext {
        let localContext = new JoinRelationContext(this.context, this.state);
        this.enterRule(localContext, 170, SparkSqlParser.RULE_joinRelation);
        try {
            this.state = 2515;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_SEMI:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 2498;
                this.joinType();
                }
                this.state = 2499;
                this.match(SparkSqlParser.KW_JOIN);
                this.state = 2501;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 333, this.context) ) {
                case 1:
                    {
                    this.state = 2500;
                    this.match(SparkSqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2503;
                localContext._right = this.relationPrimary();
                this.state = 2505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 334, this.context) ) {
                case 1:
                    {
                    this.state = 2504;
                    this.joinCriteria();
                    }
                    break;
                }
                }
                break;
            case SparkSqlParser.KW_NATURAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2507;
                this.match(SparkSqlParser.KW_NATURAL);
                this.state = 2508;
                this.joinType();
                this.state = 2509;
                this.match(SparkSqlParser.KW_JOIN);
                this.state = 2511;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 335, this.context) ) {
                case 1:
                    {
                    this.state = 2510;
                    this.match(SparkSqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2513;
                localContext._right = this.relationPrimary();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 172, SparkSqlParser.RULE_joinType);
        let _la: number;
        try {
            this.state = 2533;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 341, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2518;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2517;
                    this.match(SparkSqlParser.KW_INNER);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2520;
                this.match(SparkSqlParser.KW_CROSS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2521;
                this.match(SparkSqlParser.KW_LEFT);
                this.state = 2523;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 211) {
                    {
                    this.state = 2522;
                    this.match(SparkSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2526;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 161) {
                    {
                    this.state = 2525;
                    this.match(SparkSqlParser.KW_LEFT);
                    }
                }

                this.state = 2528;
                _la = this.tokenStream.LA(1);
                if(!(_la === 15 || _la === 264)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2529;
                _la = this.tokenStream.LA(1);
                if(!(_la === 124 || _la === 250)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2531;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 211) {
                    {
                    this.state = 2530;
                    this.match(SparkSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 174, SparkSqlParser.RULE_joinCriteria);
        try {
            this.state = 2539;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2535;
                this.match(SparkSqlParser.KW_ON);
                this.state = 2536;
                this.booleanExpression(0);
                }
                break;
            case SparkSqlParser.KW_USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2537;
                this.match(SparkSqlParser.KW_USING);
                this.state = 2538;
                this.identifierList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sample(): SampleContext {
        let localContext = new SampleContext(this.context, this.state);
        this.enterRule(localContext, 176, SparkSqlParser.RULE_sample);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2541;
            this.match(SparkSqlParser.KW_TABLESAMPLE);
            this.state = 2542;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2544;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1073678415) !== 0)) {
                {
                this.state = 2543;
                this.sampleMethod();
                }
            }

            this.state = 2546;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2551;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
            case 1:
                {
                this.state = 2547;
                this.match(SparkSqlParser.KW_REPEATABLE);
                this.state = 2548;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2549;
                localContext._seed = this.match(SparkSqlParser.INTEGER_VALUE);
                this.state = 2550;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleMethod(): SampleMethodContext {
        let localContext = new SampleMethodContext(this.context, this.state);
        this.enterRule(localContext, 178, SparkSqlParser.RULE_sampleMethod);
        let _la: number;
        try {
            this.state = 2577;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 348, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2554;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 2553;
                    localContext._negativeSign = this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 2556;
                localContext._percentage = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 382 || _la === 384)) {
                    localContext._percentage = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2557;
                this.match(SparkSqlParser.KW_PERCENTLIT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2558;
                this.expression();
                this.state = 2559;
                this.match(SparkSqlParser.KW_ROWS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2561;
                localContext._sampleType = this.match(SparkSqlParser.KW_BUCKET);
                this.state = 2562;
                localContext._numerator = this.match(SparkSqlParser.INTEGER_VALUE);
                this.state = 2563;
                this.match(SparkSqlParser.KW_OUT);
                this.state = 2564;
                this.match(SparkSqlParser.KW_OF);
                this.state = 2565;
                localContext._denominator = this.match(SparkSqlParser.INTEGER_VALUE);
                this.state = 2574;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 203) {
                    {
                    this.state = 2566;
                    this.match(SparkSqlParser.KW_ON);
                    this.state = 2572;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 346, this.context) ) {
                    case 1:
                        {
                        this.state = 2567;
                        this.identifier();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2568;
                        this.qualifiedName();
                        this.state = 2569;
                        this.match(SparkSqlParser.LEFT_PAREN);
                        this.state = 2570;
                        this.match(SparkSqlParser.RIGHT_PAREN);
                        }
                        break;
                    }
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2576;
                localContext._bytes = this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierList(): IdentifierListContext {
        let localContext = new IdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 180, SparkSqlParser.RULE_identifierList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2579;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2580;
            this.identifierSeq();
            this.state = 2581;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierSeq(): IdentifierSeqContext {
        let localContext = new IdentifierSeqContext(this.context, this.state);
        this.enterRule(localContext, 182, SparkSqlParser.RULE_identifierSeq);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2583;
            localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
            localContext._ident.push(localContext._errorCapturingIdentifier);
            this.state = 2588;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 349, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2584;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2585;
                    localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                    localContext._ident.push(localContext._errorCapturingIdentifier);
                    }
                    }
                }
                this.state = 2590;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 349, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderedIdentifierList(): OrderedIdentifierListContext {
        let localContext = new OrderedIdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 184, SparkSqlParser.RULE_orderedIdentifierList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2591;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2592;
            this.orderedIdentifier();
            this.state = 2597;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2593;
                this.match(SparkSqlParser.COMMA);
                this.state = 2594;
                this.orderedIdentifier();
                }
                }
                this.state = 2599;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2600;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderedIdentifier(): OrderedIdentifierContext {
        let localContext = new OrderedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 186, SparkSqlParser.RULE_orderedIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2602;
            localContext._ident = this.errorCapturingIdentifier();
            this.state = 2604;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21 || _la === 86) {
                {
                this.state = 2603;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 86)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierCommentList(): IdentifierCommentListContext {
        let localContext = new IdentifierCommentListContext(this.context, this.state);
        this.enterRule(localContext, 188, SparkSqlParser.RULE_identifierCommentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2606;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2607;
            this.identifierComment();
            this.state = 2612;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2608;
                this.match(SparkSqlParser.COMMA);
                this.state = 2609;
                this.identifierComment();
                }
                }
                this.state = 2614;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2615;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierComment(): IdentifierCommentContext {
        let localContext = new IdentifierCommentContext(this.context, this.state);
        this.enterRule(localContext, 190, SparkSqlParser.RULE_identifierComment);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2617;
            this.columnNameCreate();
            this.state = 2620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 2618;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 2619;
                localContext._comment = this.stringLit();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationPrimary(): RelationPrimaryContext {
        let localContext = new RelationPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 192, SparkSqlParser.RULE_relationPrimary);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2677;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2625;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
                case 1:
                    {
                    this.state = 2622;
                    this.tableName();
                    }
                    break;
                case 2:
                    {
                    this.state = 2623;
                    this.viewName();
                    }
                    break;
                case 3:
                    {
                    this.state = 2624;
                    this.identifierReference();
                    }
                    break;
                }
                this.state = 2628;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 355, this.context) ) {
                case 1:
                    {
                    this.state = 2627;
                    this.temporalClause();
                    }
                    break;
                }
                this.state = 2631;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 356, this.context) ) {
                case 1:
                    {
                    this.state = 2630;
                    this.sample();
                    }
                    break;
                }
                this.state = 2633;
                this.tableAlias();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2635;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2636;
                this.query();
                this.state = 2637;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2639;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
                case 1:
                    {
                    this.state = 2638;
                    this.sample();
                    }
                    break;
                }
                this.state = 2641;
                this.tableAlias();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2643;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2644;
                this.relation();
                this.state = 2645;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2647;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 358, this.context) ) {
                case 1:
                    {
                    this.state = 2646;
                    this.sample();
                    }
                    break;
                }
                this.state = 2649;
                this.tableAlias();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2651;
                this.match(SparkSqlParser.KW_VALUES);
                this.state = 2652;
                this.expression();
                this.state = 2657;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 359, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2653;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2654;
                        this.expression();
                        }
                        }
                    }
                    this.state = 2659;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 359, this.context);
                }
                this.state = 2660;
                this.tableAlias();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2662;
                this.functionName();
                this.state = 2663;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2672;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1073678415) !== 0)) {
                    {
                    this.state = 2664;
                    this.functionTableArgument();
                    this.state = 2669;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2665;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2666;
                        this.functionTableArgument();
                        }
                        }
                        this.state = 2671;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2674;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2675;
                this.tableAlias();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext {
        let localContext = new FunctionTableSubqueryArgumentContext(this.context, this.state);
        this.enterRule(localContext, 194, SparkSqlParser.RULE_functionTableSubqueryArgument);
        let _la: number;
        try {
            this.state = 2698;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 366, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2679;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2680;
                this.tableName();
                this.state = 2682;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 217 || _la === 346) {
                    {
                    this.state = 2681;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2684;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2685;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2686;
                this.tableName();
                this.state = 2687;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2689;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 217 || _la === 346) {
                    {
                    this.state = 2688;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2691;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2692;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2693;
                this.query();
                this.state = 2694;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2696;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 217 || _la === 346) {
                    {
                    this.state = 2695;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgumentPartitioning(): TableArgumentPartitioningContext {
        let localContext = new TableArgumentPartitioningContext(this.context, this.state);
        this.enterRule(localContext, 196, SparkSqlParser.RULE_tableArgumentPartitioning);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2719;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_WITH:
                {
                {
                this.state = 2700;
                this.match(SparkSqlParser.KW_WITH);
                this.state = 2701;
                this.match(SparkSqlParser.KW_SINGLE);
                this.state = 2702;
                this.match(SparkSqlParser.KW_PARTITION);
                }
                }
                break;
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_PARTITION:
                {
                {
                this.state = 2703;
                _la = this.tokenStream.LA(1);
                if(!(_la === 93 || _la === 217)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2704;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2717;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
                case 1:
                    {
                    {
                    {
                    this.state = 2705;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2706;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    this.state = 2711;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2707;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2708;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        }
                        }
                        this.state = 2713;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2714;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 2716;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    }
                    break;
                }
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2730;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 209 || _la === 278) {
                {
                this.state = 2721;
                _la = this.tokenStream.LA(1);
                if(!(_la === 209 || _la === 278)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2722;
                this.match(SparkSqlParser.KW_BY);
                {
                this.state = 2728;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 370, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 2723;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2724;
                    this.orderOrSortByClause();
                    this.state = 2725;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 2727;
                    this.sortItem();
                    }
                    break;
                }
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableNamedArgumentExpression(): FunctionTableNamedArgumentExpressionContext {
        let localContext = new FunctionTableNamedArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 198, SparkSqlParser.RULE_functionTableNamedArgumentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2732;
            localContext._key = this.identifier();
            this.state = 2733;
            this.match(SparkSqlParser.FAT_ARROW);
            this.state = 2734;
            localContext._table = this.functionTableSubqueryArgument();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableReferenceArgument(): FunctionTableReferenceArgumentContext {
        let localContext = new FunctionTableReferenceArgumentContext(this.context, this.state);
        this.enterRule(localContext, 200, SparkSqlParser.RULE_functionTableReferenceArgument);
        try {
            this.state = 2738;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2736;
                this.functionTableSubqueryArgument();
                }
                break;
            case SparkSqlParser.KW_ADD:
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_ALL:
            case SparkSqlParser.KW_ALTER:
            case SparkSqlParser.KW_ALWAYS:
            case SparkSqlParser.KW_ANALYZE:
            case SparkSqlParser.KW_AND:
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_ANY:
            case SparkSqlParser.KW_ANY_VALUE:
            case SparkSqlParser.KW_ARCHIVE:
            case SparkSqlParser.KW_ARRAY:
            case SparkSqlParser.KW_AS:
            case SparkSqlParser.KW_ASC:
            case SparkSqlParser.KW_AT:
            case SparkSqlParser.KW_AUTHORIZATION:
            case SparkSqlParser.KW_BETWEEN:
            case SparkSqlParser.KW_BIGINT:
            case SparkSqlParser.KW_BINARY:
            case SparkSqlParser.KW_BOOLEAN:
            case SparkSqlParser.KW_BOTH:
            case SparkSqlParser.KW_BUCKET:
            case SparkSqlParser.KW_BUCKETS:
            case SparkSqlParser.KW_BY:
            case SparkSqlParser.KW_BYTE:
            case SparkSqlParser.KW_CACHE:
            case SparkSqlParser.KW_CASCADE:
            case SparkSqlParser.KW_CASE:
            case SparkSqlParser.KW_CAST:
            case SparkSqlParser.KW_CATALOG:
            case SparkSqlParser.KW_CATALOGS:
            case SparkSqlParser.KW_CHANGE:
            case SparkSqlParser.KW_CHAR:
            case SparkSqlParser.KW_CHARACTER:
            case SparkSqlParser.KW_CHECK:
            case SparkSqlParser.KW_CLEAR:
            case SparkSqlParser.KW_CLUSTER:
            case SparkSqlParser.KW_CLUSTERED:
            case SparkSqlParser.KW_CODEGEN:
            case SparkSqlParser.KW_COLLATE:
            case SparkSqlParser.KW_COLLECTION:
            case SparkSqlParser.KW_COLUMN:
            case SparkSqlParser.KW_COLUMNS:
            case SparkSqlParser.KW_COMMENT:
            case SparkSqlParser.KW_COMMIT:
            case SparkSqlParser.KW_COMPACT:
            case SparkSqlParser.KW_COMPACTIONS:
            case SparkSqlParser.KW_COMPUTE:
            case SparkSqlParser.KW_CONCATENATE:
            case SparkSqlParser.KW_CONSTRAINT:
            case SparkSqlParser.KW_COST:
            case SparkSqlParser.KW_CREATE:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_CURRENT:
            case SparkSqlParser.KW_CURRENT_DATE:
            case SparkSqlParser.KW_CURRENT_TIME:
            case SparkSqlParser.KW_CURRENT_TIMESTAMP:
            case SparkSqlParser.KW_CURRENT_USER:
            case SparkSqlParser.KW_DAY:
            case SparkSqlParser.KW_DAYS:
            case SparkSqlParser.KW_DAYOFYEAR:
            case SparkSqlParser.KW_DATA:
            case SparkSqlParser.KW_DATE:
            case SparkSqlParser.KW_DATABASE:
            case SparkSqlParser.KW_DATABASES:
            case SparkSqlParser.KW_DATEADD:
            case SparkSqlParser.KW_DATE_ADD:
            case SparkSqlParser.KW_DATEDIFF:
            case SparkSqlParser.KW_DATE_DIFF:
            case SparkSqlParser.KW_DBPROPERTIES:
            case SparkSqlParser.KW_DEC:
            case SparkSqlParser.KW_DECIMAL:
            case SparkSqlParser.KW_DECLARE:
            case SparkSqlParser.KW_DEFAULT:
            case SparkSqlParser.KW_DEFINED:
            case SparkSqlParser.KW_DELETE:
            case SparkSqlParser.KW_DELIMITED:
            case SparkSqlParser.KW_DESC:
            case SparkSqlParser.KW_DESCRIBE:
            case SparkSqlParser.KW_DFS:
            case SparkSqlParser.KW_DIRECTORIES:
            case SparkSqlParser.KW_DIRECTORY:
            case SparkSqlParser.KW_DISABLE:
            case SparkSqlParser.KW_DISTINCT:
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_DIV:
            case SparkSqlParser.KW_DOUBLE:
            case SparkSqlParser.KW_DROP:
            case SparkSqlParser.KW_ELSE:
            case SparkSqlParser.KW_ENABLE:
            case SparkSqlParser.KW_END:
            case SparkSqlParser.KW_ESCAPE:
            case SparkSqlParser.KW_ESCAPED:
            case SparkSqlParser.KW_EXCEPT:
            case SparkSqlParser.KW_EXCHANGE:
            case SparkSqlParser.KW_EXCLUDE:
            case SparkSqlParser.KW_EXISTS:
            case SparkSqlParser.KW_EXPLAIN:
            case SparkSqlParser.KW_EXPORT:
            case SparkSqlParser.KW_EXTENDED:
            case SparkSqlParser.KW_EXTERNAL:
            case SparkSqlParser.KW_EXTRACT:
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_FETCH:
            case SparkSqlParser.KW_FIELDS:
            case SparkSqlParser.KW_FILTER:
            case SparkSqlParser.KW_FILEFORMAT:
            case SparkSqlParser.KW_FIRST:
            case SparkSqlParser.KW_FLOAT:
            case SparkSqlParser.KW_FOLLOWING:
            case SparkSqlParser.KW_FOR:
            case SparkSqlParser.KW_FOREIGN:
            case SparkSqlParser.KW_FORMAT:
            case SparkSqlParser.KW_FORMATTED:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_FUNCTION:
            case SparkSqlParser.KW_FUNCTIONS:
            case SparkSqlParser.KW_GENERATED:
            case SparkSqlParser.KW_GLOBAL:
            case SparkSqlParser.KW_GRANT:
            case SparkSqlParser.KW_GROUP:
            case SparkSqlParser.KW_GROUPING:
            case SparkSqlParser.KW_HAVING:
            case SparkSqlParser.KW_BINARY_HEX:
            case SparkSqlParser.KW_HOUR:
            case SparkSqlParser.KW_HOURS:
            case SparkSqlParser.KW_IDENTIFIER:
            case SparkSqlParser.KW_IF:
            case SparkSqlParser.KW_IGNORE:
            case SparkSqlParser.KW_IMPORT:
            case SparkSqlParser.KW_IN:
            case SparkSqlParser.KW_INCLUDE:
            case SparkSqlParser.KW_INDEX:
            case SparkSqlParser.KW_INDEXES:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_INPATH:
            case SparkSqlParser.KW_INPUTFORMAT:
            case SparkSqlParser.KW_INSERT:
            case SparkSqlParser.KW_INTERSECT:
            case SparkSqlParser.KW_INTERVAL:
            case SparkSqlParser.KW_INT:
            case SparkSqlParser.KW_INTEGER:
            case SparkSqlParser.KW_INTO:
            case SparkSqlParser.KW_IS:
            case SparkSqlParser.KW_ITEMS:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_KEYS:
            case SparkSqlParser.KW_LAST:
            case SparkSqlParser.KW_LATERAL:
            case SparkSqlParser.KW_LAZY:
            case SparkSqlParser.KW_LEADING:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_LIFECYCLE:
            case SparkSqlParser.KW_LIKE:
            case SparkSqlParser.KW_ILIKE:
            case SparkSqlParser.KW_LIMIT:
            case SparkSqlParser.KW_LINES:
            case SparkSqlParser.KW_LIST:
            case SparkSqlParser.KW_LOAD:
            case SparkSqlParser.KW_LOCAL:
            case SparkSqlParser.KW_LOCATION:
            case SparkSqlParser.KW_LOCK:
            case SparkSqlParser.KW_LOCKS:
            case SparkSqlParser.KW_LOGICAL:
            case SparkSqlParser.KW_LONG:
            case SparkSqlParser.KW_MACRO:
            case SparkSqlParser.KW_MATERIALIZED:
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_MATCHED:
            case SparkSqlParser.KW_MERGE:
            case SparkSqlParser.KW_MICROSECOND:
            case SparkSqlParser.KW_MICROSECONDS:
            case SparkSqlParser.KW_MILLISECOND:
            case SparkSqlParser.KW_MILLISECONDS:
            case SparkSqlParser.KW_MINUTE:
            case SparkSqlParser.KW_MINUTES:
            case SparkSqlParser.KW_MONTH:
            case SparkSqlParser.KW_MONTHS:
            case SparkSqlParser.KW_MSCK:
            case SparkSqlParser.KW_NAME:
            case SparkSqlParser.KW_NAMESPACE:
            case SparkSqlParser.KW_NAMESPACES:
            case SparkSqlParser.KW_NANOSECOND:
            case SparkSqlParser.KW_NANOSECONDS:
            case SparkSqlParser.KW_NATURAL:
            case SparkSqlParser.KW_NO:
            case SparkSqlParser.KW_NOT:
            case SparkSqlParser.KW_NULL:
            case SparkSqlParser.KW_NULLS:
            case SparkSqlParser.KW_NUMERIC:
            case SparkSqlParser.KW_OF:
            case SparkSqlParser.KW_OFFSET:
            case SparkSqlParser.KW_ON:
            case SparkSqlParser.KW_ONLY:
            case SparkSqlParser.KW_OPTIMIZE:
            case SparkSqlParser.KW_OPTION:
            case SparkSqlParser.KW_OPTIONS:
            case SparkSqlParser.KW_OR:
            case SparkSqlParser.KW_ORDER:
            case SparkSqlParser.KW_OUT:
            case SparkSqlParser.KW_OUTER:
            case SparkSqlParser.KW_OUTPUTFORMAT:
            case SparkSqlParser.KW_OVER:
            case SparkSqlParser.KW_OVERLAPS:
            case SparkSqlParser.KW_OVERLAY:
            case SparkSqlParser.KW_OVERWRITE:
            case SparkSqlParser.KW_PARTITION:
            case SparkSqlParser.KW_PARTITIONED:
            case SparkSqlParser.KW_PARTITIONS:
            case SparkSqlParser.KW_PERCENTILE_CONT:
            case SparkSqlParser.KW_PERCENTILE_DISC:
            case SparkSqlParser.KW_PERCENTLIT:
            case SparkSqlParser.KW_PIVOT:
            case SparkSqlParser.KW_PLACING:
            case SparkSqlParser.KW_POSITION:
            case SparkSqlParser.KW_PRECEDING:
            case SparkSqlParser.KW_PRIMARY:
            case SparkSqlParser.KW_PRINCIPALS:
            case SparkSqlParser.KW_PROPERTIES:
            case SparkSqlParser.KW_PURGE:
            case SparkSqlParser.KW_QUARTER:
            case SparkSqlParser.KW_QUERY:
            case SparkSqlParser.KW_RANGE:
            case SparkSqlParser.KW_REAL:
            case SparkSqlParser.KW_RECORDREADER:
            case SparkSqlParser.KW_RECORDWRITER:
            case SparkSqlParser.KW_RECOVER:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_REFERENCES:
            case SparkSqlParser.KW_REFRESH:
            case SparkSqlParser.KW_RENAME:
            case SparkSqlParser.KW_REPAIR:
            case SparkSqlParser.KW_REPEATABLE:
            case SparkSqlParser.KW_REPLACE:
            case SparkSqlParser.KW_RESET:
            case SparkSqlParser.KW_RESPECT:
            case SparkSqlParser.KW_RESTRICT:
            case SparkSqlParser.KW_REWRITE:
            case SparkSqlParser.KW_REVOKE:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_RLIKE:
            case SparkSqlParser.KW_REGEXP:
            case SparkSqlParser.KW_ROLE:
            case SparkSqlParser.KW_ROLES:
            case SparkSqlParser.KW_ROLLBACK:
            case SparkSqlParser.KW_ROLLUP:
            case SparkSqlParser.KW_ROW:
            case SparkSqlParser.KW_ROWS:
            case SparkSqlParser.KW_SECOND:
            case SparkSqlParser.KW_SECONDS:
            case SparkSqlParser.KW_SCHEMA:
            case SparkSqlParser.KW_SCHEMAS:
            case SparkSqlParser.KW_SEMI:
            case SparkSqlParser.KW_SEPARATED:
            case SparkSqlParser.KW_SERDE:
            case SparkSqlParser.KW_SERDEPROPERTIES:
            case SparkSqlParser.KW_SESSION_USER:
            case SparkSqlParser.KW_SET:
            case SparkSqlParser.KW_MINUS:
            case SparkSqlParser.KW_SETS:
            case SparkSqlParser.KW_SHORT:
            case SparkSqlParser.KW_SHOW:
            case SparkSqlParser.KW_SINGLE:
            case SparkSqlParser.KW_SKEWED:
            case SparkSqlParser.KW_SMALLINT:
            case SparkSqlParser.KW_SOME:
            case SparkSqlParser.KW_SORT:
            case SparkSqlParser.KW_SORTED:
            case SparkSqlParser.KW_SOURCE:
            case SparkSqlParser.KW_START:
            case SparkSqlParser.KW_STATISTICS:
            case SparkSqlParser.KW_STORED:
            case SparkSqlParser.KW_STRATIFY:
            case SparkSqlParser.KW_STRING:
            case SparkSqlParser.KW_STRUCT:
            case SparkSqlParser.KW_SUBSTR:
            case SparkSqlParser.KW_SUBSTRING:
            case SparkSqlParser.KW_SYNC:
            case SparkSqlParser.KW_SYSTEM:
            case SparkSqlParser.KW_SYSTEM_TIME:
            case SparkSqlParser.KW_SYSTEM_VERSION:
            case SparkSqlParser.KW_TABLES:
            case SparkSqlParser.KW_TABLESAMPLE:
            case SparkSqlParser.KW_TARGET:
            case SparkSqlParser.KW_TBLPROPERTIES:
            case SparkSqlParser.KW_TEMPORARY:
            case SparkSqlParser.KW_TERMINATED:
            case SparkSqlParser.KW_THEN:
            case SparkSqlParser.KW_TIME:
            case SparkSqlParser.KW_TIMEDIFF:
            case SparkSqlParser.KW_TIMESTAMP:
            case SparkSqlParser.KW_TIMESTAMP_LTZ:
            case SparkSqlParser.KW_TIMESTAMP_NTZ:
            case SparkSqlParser.KW_TIMESTAMPADD:
            case SparkSqlParser.KW_TIMESTAMPDIFF:
            case SparkSqlParser.KW_TINYINT:
            case SparkSqlParser.KW_TO:
            case SparkSqlParser.KW_TOUCH:
            case SparkSqlParser.KW_TRAILING:
            case SparkSqlParser.KW_TRANSACTION:
            case SparkSqlParser.KW_TRANSACTIONS:
            case SparkSqlParser.KW_TRANSFORM:
            case SparkSqlParser.KW_TRIM:
            case SparkSqlParser.KW_TRUE:
            case SparkSqlParser.KW_TRUNCATE:
            case SparkSqlParser.KW_TRY_CAST:
            case SparkSqlParser.KW_TYPE:
            case SparkSqlParser.KW_UNARCHIVE:
            case SparkSqlParser.KW_UNBOUNDED:
            case SparkSqlParser.KW_UNCACHE:
            case SparkSqlParser.KW_UNION:
            case SparkSqlParser.KW_UNIQUE:
            case SparkSqlParser.KW_UNKNOWN:
            case SparkSqlParser.KW_UNLOCK:
            case SparkSqlParser.KW_UNPIVOT:
            case SparkSqlParser.KW_UNSET:
            case SparkSqlParser.KW_UPDATE:
            case SparkSqlParser.KW_USE:
            case SparkSqlParser.KW_USER:
            case SparkSqlParser.KW_USING:
            case SparkSqlParser.KW_VALUES:
            case SparkSqlParser.KW_VARCHAR:
            case SparkSqlParser.KW_VAR:
            case SparkSqlParser.KW_VARIABLE:
            case SparkSqlParser.KW_VERSION:
            case SparkSqlParser.KW_VIEW:
            case SparkSqlParser.KW_VIEWS:
            case SparkSqlParser.KW_VOID:
            case SparkSqlParser.KW_WEEK:
            case SparkSqlParser.KW_WEEKS:
            case SparkSqlParser.KW_WHEN:
            case SparkSqlParser.KW_WHERE:
            case SparkSqlParser.KW_WINDOW:
            case SparkSqlParser.KW_WITH:
            case SparkSqlParser.KW_WITHIN:
            case SparkSqlParser.KW_YEAR:
            case SparkSqlParser.KW_YEARS:
            case SparkSqlParser.KW_ZONE:
            case SparkSqlParser.KW_ZORDER:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
            case SparkSqlParser.IDENTIFIER:
            case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2737;
                this.functionTableNamedArgumentExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableArgument(): FunctionTableArgumentContext {
        let localContext = new FunctionTableArgumentContext(this.context, this.state);
        this.enterRule(localContext, 202, SparkSqlParser.RULE_functionTableArgument);
        try {
            this.state = 2742;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 373, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2740;
                this.functionTableReferenceArgument();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2741;
                this.functionArgument();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAlias(): TableAliasContext {
        let localContext = new TableAliasContext(this.context, this.state);
        this.enterRule(localContext, 204, SparkSqlParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2751;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 376, this.context) ) {
            case 1:
                {
                this.state = 2745;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 374, this.context) ) {
                case 1:
                    {
                    this.state = 2744;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2747;
                localContext._alias = this.strictIdentifier();
                this.state = 2749;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 375, this.context) ) {
                case 1:
                    {
                    this.state = 2748;
                    this.identifierList();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormat(): RowFormatContext {
        let localContext = new RowFormatContext(this.context, this.state);
        this.enterRule(localContext, 206, SparkSqlParser.RULE_rowFormat);
        try {
            this.state = 2802;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 384, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2753;
                this.match(SparkSqlParser.KW_ROW);
                this.state = 2754;
                this.match(SparkSqlParser.KW_FORMAT);
                this.state = 2755;
                this.match(SparkSqlParser.KW_SERDE);
                this.state = 2756;
                localContext._name = this.stringLit();
                this.state = 2760;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
                case 1:
                    {
                    this.state = 2757;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 2758;
                    this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                    this.state = 2759;
                    localContext._props = this.propertyList();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2762;
                this.match(SparkSqlParser.KW_ROW);
                this.state = 2763;
                this.match(SparkSqlParser.KW_FORMAT);
                this.state = 2764;
                this.match(SparkSqlParser.KW_DELIMITED);
                this.state = 2774;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
                case 1:
                    {
                    this.state = 2765;
                    this.match(SparkSqlParser.KW_FIELDS);
                    this.state = 2766;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2767;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2768;
                    localContext._fieldsTerminatedBy = this.stringLit();
                    this.state = 2772;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
                    case 1:
                        {
                        this.state = 2769;
                        this.match(SparkSqlParser.KW_ESCAPED);
                        this.state = 2770;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 2771;
                        localContext._escapedBy = this.stringLit();
                        }
                        break;
                    }
                    }
                    break;
                }
                this.state = 2781;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
                case 1:
                    {
                    this.state = 2776;
                    this.match(SparkSqlParser.KW_COLLECTION);
                    this.state = 2777;
                    this.match(SparkSqlParser.KW_ITEMS);
                    this.state = 2778;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2779;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2780;
                    localContext._collectionItemsTerminatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2788;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
                case 1:
                    {
                    this.state = 2783;
                    this.match(SparkSqlParser.KW_MAP);
                    this.state = 2784;
                    this.match(SparkSqlParser.KW_KEYS);
                    this.state = 2785;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2786;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2787;
                    localContext._keysTerminatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2794;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 382, this.context) ) {
                case 1:
                    {
                    this.state = 2790;
                    this.match(SparkSqlParser.KW_LINES);
                    this.state = 2791;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2792;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2793;
                    localContext._linesSeparatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2800;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
                case 1:
                    {
                    this.state = 2796;
                    this.match(SparkSqlParser.KW_NULL);
                    this.state = 2797;
                    this.match(SparkSqlParser.KW_DEFINED);
                    this.state = 2798;
                    this.match(SparkSqlParser.KW_AS);
                    this.state = 2799;
                    localContext._nullDefinedAs = this.stringLit();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierList(): MultipartIdentifierListContext {
        let localContext = new MultipartIdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 208, SparkSqlParser.RULE_multipartIdentifierList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2804;
            this.multipartIdentifier();
            this.state = 2809;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2805;
                this.match(SparkSqlParser.COMMA);
                this.state = 2806;
                this.multipartIdentifier();
                }
                }
                this.state = 2811;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        let localContext = new MultipartIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 210, SparkSqlParser.RULE_multipartIdentifier);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2812;
            localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
            localContext._parts.push(localContext._errorCapturingIdentifier);
            this.state = 2817;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 386, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2813;
                    this.match(SparkSqlParser.DOT);
                    this.state = 2814;
                    localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                    localContext._parts.push(localContext._errorCapturingIdentifier);
                    }
                    }
                }
                this.state = 2819;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 386, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierPropertyList(): MultipartIdentifierPropertyListContext {
        let localContext = new MultipartIdentifierPropertyListContext(this.context, this.state);
        this.enterRule(localContext, 212, SparkSqlParser.RULE_multipartIdentifierPropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2820;
            this.multipartIdentifierProperty();
            this.state = 2825;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2821;
                this.match(SparkSqlParser.COMMA);
                this.state = 2822;
                this.multipartIdentifierProperty();
                }
                }
                this.state = 2827;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierProperty(): MultipartIdentifierPropertyContext {
        let localContext = new MultipartIdentifierPropertyContext(this.context, this.state);
        this.enterRule(localContext, 214, SparkSqlParser.RULE_multipartIdentifierProperty);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2828;
            this.multipartIdentifier();
            this.state = 2831;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 207) {
                {
                this.state = 2829;
                this.match(SparkSqlParser.KW_OPTIONS);
                this.state = 2830;
                localContext._options = this.propertyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdentifier(): TableIdentifierContext {
        let localContext = new TableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 216, SparkSqlParser.RULE_tableIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2836;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 389, this.context) ) {
            case 1:
                {
                this.state = 2833;
                localContext._db = this.errorCapturingIdentifier();
                this.state = 2834;
                this.match(SparkSqlParser.DOT);
                }
                break;
            }
            this.state = 2838;
            localContext._table = this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewIdentifier(): ViewIdentifierContext {
        let localContext = new ViewIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 218, SparkSqlParser.RULE_viewIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2843;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 390, this.context) ) {
            case 1:
                {
                this.state = 2840;
                localContext._db = this.errorCapturingIdentifier();
                this.state = 2841;
                this.match(SparkSqlParser.DOT);
                }
                break;
            }
            this.state = 2845;
            localContext._view = this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedExpression(): NamedExpressionContext {
        let localContext = new NamedExpressionContext(this.context, this.state);
        this.enterRule(localContext, 220, SparkSqlParser.RULE_namedExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2849;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 391, this.context) ) {
            case 1:
                {
                this.state = 2847;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 2848;
                this.expression();
                }
                break;
            }
            this.state = 2858;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 394, this.context) ) {
            case 1:
                {
                this.state = 2852;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 392, this.context) ) {
                case 1:
                    {
                    this.state = 2851;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2856;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_ADD:
                case SparkSqlParser.KW_AFTER:
                case SparkSqlParser.KW_ALL:
                case SparkSqlParser.KW_ALTER:
                case SparkSqlParser.KW_ALWAYS:
                case SparkSqlParser.KW_ANALYZE:
                case SparkSqlParser.KW_AND:
                case SparkSqlParser.KW_ANTI:
                case SparkSqlParser.KW_ANY:
                case SparkSqlParser.KW_ANY_VALUE:
                case SparkSqlParser.KW_ARCHIVE:
                case SparkSqlParser.KW_ARRAY:
                case SparkSqlParser.KW_AS:
                case SparkSqlParser.KW_ASC:
                case SparkSqlParser.KW_AT:
                case SparkSqlParser.KW_AUTHORIZATION:
                case SparkSqlParser.KW_BETWEEN:
                case SparkSqlParser.KW_BIGINT:
                case SparkSqlParser.KW_BINARY:
                case SparkSqlParser.KW_BOOLEAN:
                case SparkSqlParser.KW_BOTH:
                case SparkSqlParser.KW_BUCKET:
                case SparkSqlParser.KW_BUCKETS:
                case SparkSqlParser.KW_BY:
                case SparkSqlParser.KW_BYTE:
                case SparkSqlParser.KW_CACHE:
                case SparkSqlParser.KW_CASCADE:
                case SparkSqlParser.KW_CASE:
                case SparkSqlParser.KW_CAST:
                case SparkSqlParser.KW_CATALOG:
                case SparkSqlParser.KW_CATALOGS:
                case SparkSqlParser.KW_CHANGE:
                case SparkSqlParser.KW_CHAR:
                case SparkSqlParser.KW_CHARACTER:
                case SparkSqlParser.KW_CHECK:
                case SparkSqlParser.KW_CLEAR:
                case SparkSqlParser.KW_CLUSTER:
                case SparkSqlParser.KW_CLUSTERED:
                case SparkSqlParser.KW_CODEGEN:
                case SparkSqlParser.KW_COLLATE:
                case SparkSqlParser.KW_COLLECTION:
                case SparkSqlParser.KW_COLUMN:
                case SparkSqlParser.KW_COLUMNS:
                case SparkSqlParser.KW_COMMENT:
                case SparkSqlParser.KW_COMMIT:
                case SparkSqlParser.KW_COMPACT:
                case SparkSqlParser.KW_COMPACTIONS:
                case SparkSqlParser.KW_COMPUTE:
                case SparkSqlParser.KW_CONCATENATE:
                case SparkSqlParser.KW_CONSTRAINT:
                case SparkSqlParser.KW_COST:
                case SparkSqlParser.KW_CREATE:
                case SparkSqlParser.KW_CROSS:
                case SparkSqlParser.KW_CUBE:
                case SparkSqlParser.KW_CURRENT:
                case SparkSqlParser.KW_CURRENT_DATE:
                case SparkSqlParser.KW_CURRENT_TIME:
                case SparkSqlParser.KW_CURRENT_TIMESTAMP:
                case SparkSqlParser.KW_CURRENT_USER:
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYS:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_DATA:
                case SparkSqlParser.KW_DATE:
                case SparkSqlParser.KW_DATABASE:
                case SparkSqlParser.KW_DATABASES:
                case SparkSqlParser.KW_DATEADD:
                case SparkSqlParser.KW_DATE_ADD:
                case SparkSqlParser.KW_DATEDIFF:
                case SparkSqlParser.KW_DATE_DIFF:
                case SparkSqlParser.KW_DBPROPERTIES:
                case SparkSqlParser.KW_DEC:
                case SparkSqlParser.KW_DECIMAL:
                case SparkSqlParser.KW_DECLARE:
                case SparkSqlParser.KW_DEFAULT:
                case SparkSqlParser.KW_DEFINED:
                case SparkSqlParser.KW_DELETE:
                case SparkSqlParser.KW_DELIMITED:
                case SparkSqlParser.KW_DESC:
                case SparkSqlParser.KW_DESCRIBE:
                case SparkSqlParser.KW_DFS:
                case SparkSqlParser.KW_DIRECTORIES:
                case SparkSqlParser.KW_DIRECTORY:
                case SparkSqlParser.KW_DISABLE:
                case SparkSqlParser.KW_DISTINCT:
                case SparkSqlParser.KW_DISTRIBUTE:
                case SparkSqlParser.KW_DIV:
                case SparkSqlParser.KW_DOUBLE:
                case SparkSqlParser.KW_DROP:
                case SparkSqlParser.KW_ELSE:
                case SparkSqlParser.KW_ENABLE:
                case SparkSqlParser.KW_END:
                case SparkSqlParser.KW_ESCAPE:
                case SparkSqlParser.KW_ESCAPED:
                case SparkSqlParser.KW_EXCEPT:
                case SparkSqlParser.KW_EXCHANGE:
                case SparkSqlParser.KW_EXCLUDE:
                case SparkSqlParser.KW_EXISTS:
                case SparkSqlParser.KW_EXPLAIN:
                case SparkSqlParser.KW_EXPORT:
                case SparkSqlParser.KW_EXTENDED:
                case SparkSqlParser.KW_EXTERNAL:
                case SparkSqlParser.KW_EXTRACT:
                case SparkSqlParser.KW_FALSE:
                case SparkSqlParser.KW_FETCH:
                case SparkSqlParser.KW_FIELDS:
                case SparkSqlParser.KW_FILTER:
                case SparkSqlParser.KW_FILEFORMAT:
                case SparkSqlParser.KW_FIRST:
                case SparkSqlParser.KW_FLOAT:
                case SparkSqlParser.KW_FOLLOWING:
                case SparkSqlParser.KW_FOR:
                case SparkSqlParser.KW_FOREIGN:
                case SparkSqlParser.KW_FORMAT:
                case SparkSqlParser.KW_FORMATTED:
                case SparkSqlParser.KW_FULL:
                case SparkSqlParser.KW_FUNCTION:
                case SparkSqlParser.KW_FUNCTIONS:
                case SparkSqlParser.KW_GENERATED:
                case SparkSqlParser.KW_GLOBAL:
                case SparkSqlParser.KW_GRANT:
                case SparkSqlParser.KW_GROUP:
                case SparkSqlParser.KW_GROUPING:
                case SparkSqlParser.KW_HAVING:
                case SparkSqlParser.KW_BINARY_HEX:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_HOURS:
                case SparkSqlParser.KW_IDENTIFIER:
                case SparkSqlParser.KW_IF:
                case SparkSqlParser.KW_IGNORE:
                case SparkSqlParser.KW_IMPORT:
                case SparkSqlParser.KW_IN:
                case SparkSqlParser.KW_INCLUDE:
                case SparkSqlParser.KW_INDEX:
                case SparkSqlParser.KW_INDEXES:
                case SparkSqlParser.KW_INNER:
                case SparkSqlParser.KW_INPATH:
                case SparkSqlParser.KW_INPUTFORMAT:
                case SparkSqlParser.KW_INSERT:
                case SparkSqlParser.KW_INTERSECT:
                case SparkSqlParser.KW_INTERVAL:
                case SparkSqlParser.KW_INT:
                case SparkSqlParser.KW_INTEGER:
                case SparkSqlParser.KW_INTO:
                case SparkSqlParser.KW_IS:
                case SparkSqlParser.KW_ITEMS:
                case SparkSqlParser.KW_JOIN:
                case SparkSqlParser.KW_KEYS:
                case SparkSqlParser.KW_LAST:
                case SparkSqlParser.KW_LATERAL:
                case SparkSqlParser.KW_LAZY:
                case SparkSqlParser.KW_LEADING:
                case SparkSqlParser.KW_LEFT:
                case SparkSqlParser.KW_LIFECYCLE:
                case SparkSqlParser.KW_LIKE:
                case SparkSqlParser.KW_ILIKE:
                case SparkSqlParser.KW_LIMIT:
                case SparkSqlParser.KW_LINES:
                case SparkSqlParser.KW_LIST:
                case SparkSqlParser.KW_LOAD:
                case SparkSqlParser.KW_LOCAL:
                case SparkSqlParser.KW_LOCATION:
                case SparkSqlParser.KW_LOCK:
                case SparkSqlParser.KW_LOCKS:
                case SparkSqlParser.KW_LOGICAL:
                case SparkSqlParser.KW_LONG:
                case SparkSqlParser.KW_MACRO:
                case SparkSqlParser.KW_MATERIALIZED:
                case SparkSqlParser.KW_MAP:
                case SparkSqlParser.KW_MATCHED:
                case SparkSqlParser.KW_MERGE:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MICROSECONDS:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MILLISECONDS:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MINUTES:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_MONTHS:
                case SparkSqlParser.KW_MSCK:
                case SparkSqlParser.KW_NAME:
                case SparkSqlParser.KW_NAMESPACE:
                case SparkSqlParser.KW_NAMESPACES:
                case SparkSqlParser.KW_NANOSECOND:
                case SparkSqlParser.KW_NANOSECONDS:
                case SparkSqlParser.KW_NATURAL:
                case SparkSqlParser.KW_NO:
                case SparkSqlParser.KW_NOT:
                case SparkSqlParser.KW_NULL:
                case SparkSqlParser.KW_NULLS:
                case SparkSqlParser.KW_NUMERIC:
                case SparkSqlParser.KW_OF:
                case SparkSqlParser.KW_OFFSET:
                case SparkSqlParser.KW_ON:
                case SparkSqlParser.KW_ONLY:
                case SparkSqlParser.KW_OPTIMIZE:
                case SparkSqlParser.KW_OPTION:
                case SparkSqlParser.KW_OPTIONS:
                case SparkSqlParser.KW_OR:
                case SparkSqlParser.KW_ORDER:
                case SparkSqlParser.KW_OUT:
                case SparkSqlParser.KW_OUTER:
                case SparkSqlParser.KW_OUTPUTFORMAT:
                case SparkSqlParser.KW_OVER:
                case SparkSqlParser.KW_OVERLAPS:
                case SparkSqlParser.KW_OVERLAY:
                case SparkSqlParser.KW_OVERWRITE:
                case SparkSqlParser.KW_PARTITION:
                case SparkSqlParser.KW_PARTITIONED:
                case SparkSqlParser.KW_PARTITIONS:
                case SparkSqlParser.KW_PERCENTILE_CONT:
                case SparkSqlParser.KW_PERCENTILE_DISC:
                case SparkSqlParser.KW_PERCENTLIT:
                case SparkSqlParser.KW_PIVOT:
                case SparkSqlParser.KW_PLACING:
                case SparkSqlParser.KW_POSITION:
                case SparkSqlParser.KW_PRECEDING:
                case SparkSqlParser.KW_PRIMARY:
                case SparkSqlParser.KW_PRINCIPALS:
                case SparkSqlParser.KW_PROPERTIES:
                case SparkSqlParser.KW_PURGE:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_QUERY:
                case SparkSqlParser.KW_RANGE:
                case SparkSqlParser.KW_REAL:
                case SparkSqlParser.KW_RECORDREADER:
                case SparkSqlParser.KW_RECORDWRITER:
                case SparkSqlParser.KW_RECOVER:
                case SparkSqlParser.KW_REDUCE:
                case SparkSqlParser.KW_REFERENCES:
                case SparkSqlParser.KW_REFRESH:
                case SparkSqlParser.KW_RENAME:
                case SparkSqlParser.KW_REPAIR:
                case SparkSqlParser.KW_REPEATABLE:
                case SparkSqlParser.KW_REPLACE:
                case SparkSqlParser.KW_RESET:
                case SparkSqlParser.KW_RESPECT:
                case SparkSqlParser.KW_RESTRICT:
                case SparkSqlParser.KW_REWRITE:
                case SparkSqlParser.KW_REVOKE:
                case SparkSqlParser.KW_RIGHT:
                case SparkSqlParser.KW_RLIKE:
                case SparkSqlParser.KW_REGEXP:
                case SparkSqlParser.KW_ROLE:
                case SparkSqlParser.KW_ROLES:
                case SparkSqlParser.KW_ROLLBACK:
                case SparkSqlParser.KW_ROLLUP:
                case SparkSqlParser.KW_ROW:
                case SparkSqlParser.KW_ROWS:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_SECONDS:
                case SparkSqlParser.KW_SCHEMA:
                case SparkSqlParser.KW_SCHEMAS:
                case SparkSqlParser.KW_SEMI:
                case SparkSqlParser.KW_SEPARATED:
                case SparkSqlParser.KW_SERDE:
                case SparkSqlParser.KW_SERDEPROPERTIES:
                case SparkSqlParser.KW_SESSION_USER:
                case SparkSqlParser.KW_SET:
                case SparkSqlParser.KW_MINUS:
                case SparkSqlParser.KW_SETS:
                case SparkSqlParser.KW_SHORT:
                case SparkSqlParser.KW_SHOW:
                case SparkSqlParser.KW_SINGLE:
                case SparkSqlParser.KW_SKEWED:
                case SparkSqlParser.KW_SMALLINT:
                case SparkSqlParser.KW_SOME:
                case SparkSqlParser.KW_SORT:
                case SparkSqlParser.KW_SORTED:
                case SparkSqlParser.KW_SOURCE:
                case SparkSqlParser.KW_START:
                case SparkSqlParser.KW_STATISTICS:
                case SparkSqlParser.KW_STORED:
                case SparkSqlParser.KW_STRATIFY:
                case SparkSqlParser.KW_STRING:
                case SparkSqlParser.KW_STRUCT:
                case SparkSqlParser.KW_SUBSTR:
                case SparkSqlParser.KW_SUBSTRING:
                case SparkSqlParser.KW_SYNC:
                case SparkSqlParser.KW_SYSTEM:
                case SparkSqlParser.KW_SYSTEM_TIME:
                case SparkSqlParser.KW_SYSTEM_VERSION:
                case SparkSqlParser.KW_TABLES:
                case SparkSqlParser.KW_TABLESAMPLE:
                case SparkSqlParser.KW_TARGET:
                case SparkSqlParser.KW_TBLPROPERTIES:
                case SparkSqlParser.KW_TEMPORARY:
                case SparkSqlParser.KW_TERMINATED:
                case SparkSqlParser.KW_THEN:
                case SparkSqlParser.KW_TIME:
                case SparkSqlParser.KW_TIMEDIFF:
                case SparkSqlParser.KW_TIMESTAMP:
                case SparkSqlParser.KW_TIMESTAMP_LTZ:
                case SparkSqlParser.KW_TIMESTAMP_NTZ:
                case SparkSqlParser.KW_TIMESTAMPADD:
                case SparkSqlParser.KW_TIMESTAMPDIFF:
                case SparkSqlParser.KW_TINYINT:
                case SparkSqlParser.KW_TO:
                case SparkSqlParser.KW_TOUCH:
                case SparkSqlParser.KW_TRAILING:
                case SparkSqlParser.KW_TRANSACTION:
                case SparkSqlParser.KW_TRANSACTIONS:
                case SparkSqlParser.KW_TRANSFORM:
                case SparkSqlParser.KW_TRIM:
                case SparkSqlParser.KW_TRUE:
                case SparkSqlParser.KW_TRUNCATE:
                case SparkSqlParser.KW_TRY_CAST:
                case SparkSqlParser.KW_TYPE:
                case SparkSqlParser.KW_UNARCHIVE:
                case SparkSqlParser.KW_UNBOUNDED:
                case SparkSqlParser.KW_UNCACHE:
                case SparkSqlParser.KW_UNION:
                case SparkSqlParser.KW_UNIQUE:
                case SparkSqlParser.KW_UNKNOWN:
                case SparkSqlParser.KW_UNLOCK:
                case SparkSqlParser.KW_UNPIVOT:
                case SparkSqlParser.KW_UNSET:
                case SparkSqlParser.KW_UPDATE:
                case SparkSqlParser.KW_USE:
                case SparkSqlParser.KW_USER:
                case SparkSqlParser.KW_USING:
                case SparkSqlParser.KW_VALUES:
                case SparkSqlParser.KW_VARCHAR:
                case SparkSqlParser.KW_VAR:
                case SparkSqlParser.KW_VARIABLE:
                case SparkSqlParser.KW_VERSION:
                case SparkSqlParser.KW_VIEW:
                case SparkSqlParser.KW_VIEWS:
                case SparkSqlParser.KW_VOID:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_WEEKS:
                case SparkSqlParser.KW_WHEN:
                case SparkSqlParser.KW_WHERE:
                case SparkSqlParser.KW_WINDOW:
                case SparkSqlParser.KW_WITH:
                case SparkSqlParser.KW_WITHIN:
                case SparkSqlParser.KW_YEAR:
                case SparkSqlParser.KW_YEARS:
                case SparkSqlParser.KW_ZONE:
                case SparkSqlParser.KW_ZORDER:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                case SparkSqlParser.IDENTIFIER:
                case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 2854;
                    localContext._name = this.errorCapturingIdentifier();
                    }
                    break;
                case SparkSqlParser.LEFT_PAREN:
                    {
                    this.state = 2855;
                    this.identifierList();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        let localContext = new NamedExpressionSeqContext(this.context, this.state);
        this.enterRule(localContext, 222, SparkSqlParser.RULE_namedExpressionSeq);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2860;
            this.namedExpression();
            this.state = 2865;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 395, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2861;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2862;
                    this.namedExpression();
                    }
                    }
                }
                this.state = 2867;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 395, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionFieldList(): PartitionFieldListContext {
        let localContext = new PartitionFieldListContext(this.context, this.state);
        this.enterRule(localContext, 224, SparkSqlParser.RULE_partitionFieldList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2868;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2869;
            localContext._partitionField = this.partitionField();
            localContext._fields.push(localContext._partitionField);
            this.state = 2874;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2870;
                this.match(SparkSqlParser.COMMA);
                this.state = 2871;
                localContext._partitionField = this.partitionField();
                localContext._fields.push(localContext._partitionField);
                }
                }
                this.state = 2876;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2877;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionField(): PartitionFieldContext {
        let localContext = new PartitionFieldContext(this.context, this.state);
        this.enterRule(localContext, 226, SparkSqlParser.RULE_partitionField);
        try {
            this.state = 2881;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 397, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2879;
                this.transform();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2880;
                this.columnType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transform(): TransformContext {
        let localContext = new TransformContext(this.context, this.state);
        this.enterRule(localContext, 228, SparkSqlParser.RULE_transform);
        let _la: number;
        try {
            this.state = 2896;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2883;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2884;
                localContext._transformName = this.identifier();
                this.state = 2885;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2886;
                this.transformArgument();
                this.state = 2891;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2887;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2888;
                    this.transformArgument();
                    }
                    }
                    this.state = 2893;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2894;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformArgument(): TransformArgumentContext {
        let localContext = new TransformArgumentContext(this.context, this.state);
        this.enterRule(localContext, 230, SparkSqlParser.RULE_transformArgument);
        try {
            this.state = 2900;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 400, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2898;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2899;
                this.constant();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 232, SparkSqlParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2902;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedArgumentExpression(): NamedArgumentExpressionContext {
        let localContext = new NamedArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 234, SparkSqlParser.RULE_namedArgumentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2904;
            localContext._key = this.identifier();
            this.state = 2905;
            this.match(SparkSqlParser.FAT_ARROW);
            this.state = 2906;
            localContext._value = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArgument(): FunctionArgumentContext {
        let localContext = new FunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 236, SparkSqlParser.RULE_functionArgument);
        try {
            this.state = 2910;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2908;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2909;
                this.namedArgumentExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionSeq(): ExpressionSeqContext {
        let localContext = new ExpressionSeqContext(this.context, this.state);
        this.enterRule(localContext, 238, SparkSqlParser.RULE_expressionSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2912;
            this.expression();
            this.state = 2917;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2913;
                this.match(SparkSqlParser.COMMA);
                this.state = 2914;
                this.expression();
                }
                }
                this.state = 2919;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 240;
        this.enterRecursionRule(localContext, 240, SparkSqlParser.RULE_booleanExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2932;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 404, this.context) ) {
            case 1:
                {
                this.state = 2921;
                _la = this.tokenStream.LA(1);
                if(!(_la === 197 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2922;
                this.booleanExpression(5);
                }
                break;
            case 2:
                {
                this.state = 2923;
                this.match(SparkSqlParser.KW_EXISTS);
                this.state = 2924;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2925;
                this.query();
                this.state = 2926;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                this.state = 2928;
                this.valueExpression(0);
                this.state = 2930;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 403, this.context) ) {
                case 1:
                    {
                    this.state = 2929;
                    this.predicate();
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2942;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 406, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2940;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 405, this.context) ) {
                    case 1:
                        {
                        localContext = new BooleanExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_booleanExpression);
                        this.state = 2934;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2935;
                        localContext._operator = this.match(SparkSqlParser.KW_AND);
                        this.state = 2936;
                        localContext._right = this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new BooleanExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_booleanExpression);
                        this.state = 2937;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2938;
                        localContext._operator = this.match(SparkSqlParser.KW_OR);
                        this.state = 2939;
                        localContext._right = this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2944;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 406, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state);
        this.enterRule(localContext, 242, SparkSqlParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 3027;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 420, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2946;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 2945;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 2948;
                localContext._kind = this.match(SparkSqlParser.KW_BETWEEN);
                this.state = 2949;
                localContext._lower = this.valueExpression(0);
                this.state = 2950;
                this.match(SparkSqlParser.KW_AND);
                this.state = 2951;
                localContext._upper = this.valueExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2954;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 2953;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 2956;
                localContext._kind = this.match(SparkSqlParser.KW_IN);
                this.state = 2957;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2958;
                this.expression();
                this.state = 2963;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2959;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2960;
                    this.expression();
                    }
                    }
                    this.state = 2965;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2966;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2969;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 2968;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 2971;
                localContext._kind = this.match(SparkSqlParser.KW_IN);
                this.state = 2972;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2973;
                this.query();
                this.state = 2974;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2977;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 2976;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 2979;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 251 || _la === 252)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2980;
                localContext._pattern = this.valueExpression(0);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2982;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 2981;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 2984;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 164)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2985;
                localContext._quantifier = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 16 || _la === 277)) {
                    localContext._quantifier = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2999;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 414, this.context) ) {
                case 1:
                    {
                    this.state = 2986;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2987;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 2988;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2989;
                    this.expression();
                    this.state = 2994;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2990;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2991;
                        this.expression();
                        }
                        }
                        this.state = 2996;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2997;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3002;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3001;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3004;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 164)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3005;
                localContext._pattern = this.valueExpression(0);
                this.state = 3008;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
                case 1:
                    {
                    this.state = 3006;
                    this.match(SparkSqlParser.KW_ESCAPE);
                    this.state = 3007;
                    localContext._escapeChar = this.stringLit();
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3010;
                this.match(SparkSqlParser.KW_IS);
                this.state = 3012;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3011;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3014;
                localContext._kind = this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3015;
                this.match(SparkSqlParser.KW_IS);
                this.state = 3017;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3016;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3019;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 111 || _la === 316 || _la === 325)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3020;
                this.match(SparkSqlParser.KW_IS);
                this.state = 3022;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3021;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3024;
                localContext._kind = this.match(SparkSqlParser.KW_DISTINCT);
                this.state = 3025;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3026;
                localContext._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 244;
        this.enterRecursionRule(localContext, 244, SparkSqlParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3033;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 421, this.context) ) {
            case 1:
                {
                this.state = 3030;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                this.state = 3031;
                localContext._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 35) !== 0))) {
                    localContext._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3032;
                this.valueExpression(7);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3056;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 423, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3054;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 422, this.context) ) {
                    case 1:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3035;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 3036;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 94 || ((((_la - 363)) & ~0x1F) === 0 && ((1 << (_la - 363)) & 7) !== 0))) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3037;
                        localContext._right = this.valueExpression(7);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3038;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 3039;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 259) !== 0))) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3040;
                        localContext._right = this.valueExpression(6);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3041;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 3042;
                        localContext._operator = this.match(SparkSqlParser.AMPERSAND);
                        this.state = 3043;
                        localContext._right = this.valueExpression(5);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3044;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 3045;
                        localContext._operator = this.match(SparkSqlParser.HAT);
                        this.state = 3046;
                        localContext._right = this.valueExpression(4);
                        }
                        break;
                    case 5:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3047;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 3048;
                        localContext._operator = this.match(SparkSqlParser.PIPE);
                        this.state = 3049;
                        localContext._right = this.valueExpression(3);
                        }
                        break;
                    case 6:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3050;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 3051;
                        this.comparisonOperator();
                        this.state = 3052;
                        localContext._right = this.valueExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 3058;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 423, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public datetimeUnit(): DatetimeUnitContext {
        let localContext = new DatetimeUnitContext(this.context, this.state);
        this.enterRule(localContext, 246, SparkSqlParser.RULE_datetimeUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3059;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 69 || _la === 134 || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 85) !== 0) || _la === 231 || _la === 259 || _la === 341 || _la === 348)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 248;
        this.enterRecursionRule(localContext, 248, SparkSqlParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3310;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 449, this.context) ) {
            case 1:
                {
                this.state = 3062;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 63)) & ~0x1F) === 0 && ((1 << (_la - 63)) & 13) !== 0) || _la === 268 || _la === 331)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                {
                this.state = 3063;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 74 || _la === 75 || _la === 306)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3064;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3067;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_YEAR:
                    {
                    this.state = 3065;
                    localContext._unit = this.datetimeUnit();
                    }
                    break;
                case SparkSqlParser.STRING_LITERAL:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 3066;
                    localContext._invalidUnit = this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3069;
                this.match(SparkSqlParser.COMMA);
                this.state = 3070;
                localContext._unitsAmount = this.valueExpression(0);
                this.state = 3071;
                this.match(SparkSqlParser.COMMA);
                this.state = 3072;
                localContext._timestamp = this.valueExpression(0);
                this.state = 3073;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                this.state = 3075;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 76 || _la === 77 || _la === 302 || _la === 307)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3076;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3079;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_YEAR:
                    {
                    this.state = 3077;
                    localContext._unit = this.datetimeUnit();
                    }
                    break;
                case SparkSqlParser.STRING_LITERAL:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 3078;
                    localContext._invalidUnit = this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3081;
                this.match(SparkSqlParser.COMMA);
                this.state = 3082;
                localContext._startTimestamp = this.valueExpression(0);
                this.state = 3083;
                this.match(SparkSqlParser.COMMA);
                this.state = 3084;
                localContext._endTimestamp = this.valueExpression(0);
                this.state = 3085;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 4:
                {
                this.state = 3087;
                this.match(SparkSqlParser.KW_CASE);
                this.state = 3089;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3088;
                    this.whenClause();
                    }
                    }
                    this.state = 3091;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 343);
                this.state = 3095;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 3093;
                    this.match(SparkSqlParser.KW_ELSE);
                    this.state = 3094;
                    localContext._elseExpression = this.expression();
                    }
                }

                this.state = 3097;
                this.match(SparkSqlParser.KW_END);
                }
                break;
            case 5:
                {
                this.state = 3099;
                this.match(SparkSqlParser.KW_CASE);
                this.state = 3100;
                this.expression();
                this.state = 3102;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3101;
                    this.whenClause();
                    }
                    }
                    this.state = 3104;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 343);
                this.state = 3108;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 3106;
                    this.match(SparkSqlParser.KW_ELSE);
                    this.state = 3107;
                    localContext._elseExpression = this.expression();
                    }
                }

                this.state = 3110;
                this.match(SparkSqlParser.KW_END);
                }
                break;
            case 6:
                {
                this.state = 3112;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 36 || _la === 318)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3113;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3114;
                this.expression();
                this.state = 3115;
                this.match(SparkSqlParser.KW_AS);
                this.state = 3116;
                this.dataType();
                this.state = 3117;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 7:
                {
                this.state = 3119;
                this.match(SparkSqlParser.KW_STRUCT);
                this.state = 3120;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3129;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 431, this.context) ) {
                case 1:
                    {
                    this.state = 3121;
                    this.namedExpression();
                    this.state = 3126;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3122;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3123;
                        this.namedExpression();
                        }
                        }
                        this.state = 3128;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                this.state = 3131;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 8:
                {
                this.state = 3132;
                this.match(SparkSqlParser.KW_FIRST);
                this.state = 3133;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3134;
                this.expression();
                this.state = 3137;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3135;
                    this.match(SparkSqlParser.KW_IGNORE);
                    this.state = 3136;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                }

                this.state = 3139;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 9:
                {
                this.state = 3141;
                this.match(SparkSqlParser.KW_ANY_VALUE);
                this.state = 3142;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3143;
                this.expression();
                this.state = 3146;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3144;
                    this.match(SparkSqlParser.KW_IGNORE);
                    this.state = 3145;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                }

                this.state = 3148;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 10:
                {
                this.state = 3150;
                this.match(SparkSqlParser.KW_LAST);
                this.state = 3151;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3152;
                this.expression();
                this.state = 3155;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3153;
                    this.match(SparkSqlParser.KW_IGNORE);
                    this.state = 3154;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                }

                this.state = 3157;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 11:
                {
                this.state = 3159;
                this.match(SparkSqlParser.KW_POSITION);
                this.state = 3160;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3161;
                localContext._substr = this.valueExpression(0);
                this.state = 3162;
                this.match(SparkSqlParser.KW_IN);
                this.state = 3163;
                localContext._str = this.valueExpression(0);
                this.state = 3164;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 12:
                {
                this.state = 3166;
                this.constant();
                }
                break;
            case 13:
                {
                this.state = 3167;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 14:
                {
                this.state = 3168;
                this.qualifiedName();
                this.state = 3169;
                this.match(SparkSqlParser.DOT);
                this.state = 3170;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 15:
                {
                this.state = 3172;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3173;
                this.namedExpression();
                this.state = 3176;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3174;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3175;
                    this.namedExpression();
                    }
                    }
                    this.state = 3178;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 3180;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 16:
                {
                this.state = 3182;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3183;
                this.query();
                this.state = 3184;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 17:
                {
                this.state = 3186;
                this.match(SparkSqlParser.KW_IDENTIFIER);
                this.state = 3187;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3188;
                this.expression();
                this.state = 3189;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 18:
                {
                this.state = 3191;
                this.functionName();
                this.state = 3192;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3204;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1073678415) !== 0)) {
                    {
                    this.state = 3194;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 436, this.context) ) {
                    case 1:
                        {
                        this.state = 3193;
                        this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 3196;
                    this.functionArgument();
                    this.state = 3201;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3197;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3198;
                        this.functionArgument();
                        }
                        }
                        this.state = 3203;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 3206;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3213;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 439, this.context) ) {
                case 1:
                    {
                    this.state = 3207;
                    this.match(SparkSqlParser.KW_FILTER);
                    this.state = 3208;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3209;
                    this.match(SparkSqlParser.KW_WHERE);
                    this.state = 3210;
                    localContext._where = this.booleanExpression(0);
                    this.state = 3211;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3217;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 440, this.context) ) {
                case 1:
                    {
                    this.state = 3215;
                    localContext._nullsOption = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 138 || _la === 246)) {
                        localContext._nullsOption = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3216;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                    break;
                }
                this.state = 3221;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
                case 1:
                    {
                    this.state = 3219;
                    this.match(SparkSqlParser.KW_OVER);
                    this.state = 3220;
                    this.windowSpec();
                    }
                    break;
                }
                }
                break;
            case 19:
                {
                this.state = 3223;
                this.identifier();
                this.state = 3224;
                this.match(SparkSqlParser.ARROW);
                this.state = 3225;
                this.expression();
                }
                break;
            case 20:
                {
                this.state = 3227;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3228;
                this.identifier();
                this.state = 3231;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3229;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3230;
                    this.identifier();
                    }
                    }
                    this.state = 3233;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 3235;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3236;
                this.match(SparkSqlParser.ARROW);
                this.state = 3237;
                this.expression();
                }
                break;
            case 21:
                {
                this.state = 3239;
                this.columnNamePath();
                }
                break;
            case 22:
                {
                this.state = 3240;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3241;
                this.expression();
                this.state = 3242;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 23:
                {
                this.state = 3244;
                this.match(SparkSqlParser.KW_EXTRACT);
                this.state = 3245;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3246;
                localContext._field = this.identifier();
                this.state = 3247;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3248;
                localContext._source = this.valueExpression(0);
                this.state = 3249;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 24:
                {
                this.state = 3251;
                _la = this.tokenStream.LA(1);
                if(!(_la === 287 || _la === 288)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3252;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3253;
                localContext._str = this.valueExpression(0);
                this.state = 3254;
                _la = this.tokenStream.LA(1);
                if(!(_la === 4 || _la === 123)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3255;
                localContext._pos = this.valueExpression(0);
                this.state = 3258;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4 || _la === 119) {
                    {
                    this.state = 3256;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 4 || _la === 119)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3257;
                    localContext._len = this.valueExpression(0);
                    }
                }

                this.state = 3260;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 25:
                {
                this.state = 3262;
                this.match(SparkSqlParser.KW_TRIM);
                this.state = 3263;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3265;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 444, this.context) ) {
                case 1:
                    {
                    this.state = 3264;
                    localContext._trimOption = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 28 || _la === 160 || _la === 311)) {
                        localContext._trimOption = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 3268;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 536839207) !== 0)) {
                    {
                    this.state = 3267;
                    localContext._trimStr = this.valueExpression(0);
                    }
                }

                this.state = 3270;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3271;
                localContext._srcStr = this.valueExpression(0);
                this.state = 3272;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 26:
                {
                this.state = 3274;
                this.match(SparkSqlParser.KW_OVERLAY);
                this.state = 3275;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3276;
                localContext._input = this.valueExpression(0);
                this.state = 3277;
                this.match(SparkSqlParser.KW_PLACING);
                this.state = 3278;
                localContext._replace = this.valueExpression(0);
                this.state = 3279;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3280;
                localContext._position = this.valueExpression(0);
                this.state = 3283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 3281;
                    this.match(SparkSqlParser.KW_FOR);
                    this.state = 3282;
                    localContext._length = this.valueExpression(0);
                    }
                }

                this.state = 3285;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 27:
                {
                this.state = 3287;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 220 || _la === 221)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3288;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3289;
                localContext._percentage = this.valueExpression(0);
                this.state = 3290;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3291;
                this.match(SparkSqlParser.KW_WITHIN);
                this.state = 3292;
                this.match(SparkSqlParser.KW_GROUP);
                this.state = 3293;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3294;
                this.match(SparkSqlParser.KW_ORDER);
                this.state = 3295;
                this.match(SparkSqlParser.KW_BY);
                this.state = 3296;
                this.sortItem();
                this.state = 3297;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3304;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 447, this.context) ) {
                case 1:
                    {
                    this.state = 3298;
                    this.match(SparkSqlParser.KW_FILTER);
                    this.state = 3299;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3300;
                    this.match(SparkSqlParser.KW_WHERE);
                    this.state = 3301;
                    localContext._where = this.booleanExpression(0);
                    this.state = 3302;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3308;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 448, this.context) ) {
                case 1:
                    {
                    this.state = 3306;
                    this.match(SparkSqlParser.KW_OVER);
                    this.state = 3307;
                    this.windowSpec();
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3322;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 451, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3320;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 450, this.context) ) {
                    case 1:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        localContext._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_primaryExpression);
                        this.state = 3312;
                        if (!(this.precpred(this.context, 9))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 9)");
                        }
                        this.state = 3313;
                        this.match(SparkSqlParser.LEFT_BRACKET);
                        this.state = 3314;
                        localContext._index = this.valueExpression(0);
                        this.state = 3315;
                        this.match(SparkSqlParser.RIGHT_BRACKET);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        localContext._base = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_primaryExpression);
                        this.state = 3317;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 3318;
                        this.match(SparkSqlParser.DOT);
                        this.state = 3319;
                        localContext._fieldName = this.identifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 3324;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 451, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public literalType(): LiteralTypeContext {
        let localContext = new LiteralTypeContext(this.context, this.state);
        this.enterRule(localContext, 250, SparkSqlParser.RULE_literalType);
        try {
            this.state = 3332;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 452, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3325;
                this.match(SparkSqlParser.KW_DATE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3326;
                this.match(SparkSqlParser.KW_TIMESTAMP);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3327;
                this.match(SparkSqlParser.KW_TIMESTAMP_LTZ);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3328;
                this.match(SparkSqlParser.KW_TIMESTAMP_NTZ);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3329;
                this.match(SparkSqlParser.KW_INTERVAL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3330;
                this.match(SparkSqlParser.KW_BINARY_HEX);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3331;
                localContext._unsupportedType = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constant(): ConstantContext {
        let localContext = new ConstantContext(this.context, this.state);
        this.enterRule(localContext, 252, SparkSqlParser.RULE_constant);
        try {
            let alternative: number;
            this.state = 3349;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 454, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3334;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3335;
                this.match(SparkSqlParser.QUESTION);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3336;
                this.match(SparkSqlParser.COLON);
                this.state = 3337;
                this.identifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3338;
                this.interval();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3339;
                this.literalType();
                this.state = 3340;
                this.stringLit();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3342;
                this.number_();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3343;
                this.booleanValue();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3345;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 3344;
                        this.stringLit();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3347;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 453, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 254, SparkSqlParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3351;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 255) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arithmeticOperator(): ArithmeticOperatorContext {
        let localContext = new ArithmeticOperatorContext(this.context, this.state);
        this.enterRule(localContext, 256, SparkSqlParser.RULE_arithmeticOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3353;
            _la = this.tokenStream.LA(1);
            if(!(_la === 94 || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 1023) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public predicateOperator(): PredicateOperatorContext {
        let localContext = new PredicateOperatorContext(this.context, this.state);
        this.enterRule(localContext, 258, SparkSqlParser.RULE_predicateOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3355;
            _la = this.tokenStream.LA(1);
            if(!(_la === 14 || _la === 140 || _la === 197 || _la === 208)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 260, SparkSqlParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3357;
            _la = this.tokenStream.LA(1);
            if(!(_la === 111 || _la === 316)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 262, SparkSqlParser.RULE_interval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3359;
            this.match(SparkSqlParser.KW_INTERVAL);
            this.state = 3362;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 455, this.context) ) {
            case 1:
                {
                this.state = 3360;
                this.errorCapturingMultiUnitsInterval();
                }
                break;
            case 2:
                {
                this.state = 3361;
                this.errorCapturingUnitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext {
        let localContext = new ErrorCapturingMultiUnitsIntervalContext(this.context, this.state);
        this.enterRule(localContext, 264, SparkSqlParser.RULE_errorCapturingMultiUnitsInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3364;
            localContext._body = this.multiUnitsInterval();
            this.state = 3366;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 456, this.context) ) {
            case 1:
                {
                this.state = 3365;
                this.unitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext {
        let localContext = new MultiUnitsIntervalContext(this.context, this.state);
        this.enterRule(localContext, 266, SparkSqlParser.RULE_multiUnitsInterval);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3371;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3368;
                    this.intervalValue();
                    this.state = 3369;
                    localContext._unitInMultiUnits = this.unitInMultiUnits();
                    localContext._unit.push(localContext._unitInMultiUnits);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3373;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 457, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext {
        let localContext = new ErrorCapturingUnitToUnitIntervalContext(this.context, this.state);
        this.enterRule(localContext, 268, SparkSqlParser.RULE_errorCapturingUnitToUnitInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3375;
            localContext._body = this.unitToUnitInterval();
            this.state = 3378;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 458, this.context) ) {
            case 1:
                {
                this.state = 3376;
                localContext._error1 = this.multiUnitsInterval();
                }
                break;
            case 2:
                {
                this.state = 3377;
                localContext._error2 = this.unitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext {
        let localContext = new UnitToUnitIntervalContext(this.context, this.state);
        this.enterRule(localContext, 270, SparkSqlParser.RULE_unitToUnitInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3380;
            localContext._value = this.intervalValue();
            this.state = 3381;
            this.unitInUnitToUnit();
            this.state = 3382;
            this.match(SparkSqlParser.KW_TO);
            this.state = 3383;
            this.unitInUnitToUnit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalValue(): IntervalValueContext {
        let localContext = new IntervalValueContext(this.context, this.state);
        this.enterRule(localContext, 272, SparkSqlParser.RULE_intervalValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3386;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 361 || _la === 362) {
                {
                this.state = 3385;
                _la = this.tokenStream.LA(1);
                if(!(_la === 361 || _la === 362)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3391;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.INTEGER_VALUE:
                {
                this.state = 3388;
                this.match(SparkSqlParser.INTEGER_VALUE);
                }
                break;
            case SparkSqlParser.DECIMAL_VALUE:
                {
                this.state = 3389;
                this.match(SparkSqlParser.DECIMAL_VALUE);
                }
                break;
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                {
                this.state = 3390;
                this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitInMultiUnits(): UnitInMultiUnitsContext {
        let localContext = new UnitInMultiUnitsContext(this.context, this.state);
        this.enterRule(localContext, 274, SparkSqlParser.RULE_unitInMultiUnits);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3393;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 68 || _la === 134 || _la === 135 || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 12543) !== 0) || _la === 259 || _la === 260 || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & 387) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitInUnitToUnit(): UnitInUnitToUnitContext {
        let localContext = new UnitInUnitToUnitContext(this.context, this.state);
        this.enterRule(localContext, 276, SparkSqlParser.RULE_unitInUnitToUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3395;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 134 || _la === 184 || _la === 186 || _la === 259 || _la === 348)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colPosition(): ColPositionContext {
        let localContext = new ColPositionContext(this.context, this.state);
        this.enterRule(localContext, 278, SparkSqlParser.RULE_colPosition);
        try {
            this.state = 3400;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_FIRST:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3397;
                localContext._position = this.match(SparkSqlParser.KW_FIRST);
                }
                break;
            case SparkSqlParser.KW_AFTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3398;
                localContext._position = this.match(SparkSqlParser.KW_AFTER);
                this.state = 3399;
                localContext._afterCol = this.errorCapturingIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_(): TypeContext {
        let localContext = new TypeContext(this.context, this.state);
        this.enterRule(localContext, 280, SparkSqlParser.RULE_type);
        try {
            this.state = 3432;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 462, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3402;
                this.match(SparkSqlParser.KW_BOOLEAN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3403;
                this.match(SparkSqlParser.KW_TINYINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3404;
                this.match(SparkSqlParser.KW_BYTE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3405;
                this.match(SparkSqlParser.KW_SMALLINT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3406;
                this.match(SparkSqlParser.KW_SHORT);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3407;
                this.match(SparkSqlParser.KW_INT);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3408;
                this.match(SparkSqlParser.KW_INTEGER);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3409;
                this.match(SparkSqlParser.KW_BIGINT);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3410;
                this.match(SparkSqlParser.KW_LONG);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3411;
                this.match(SparkSqlParser.KW_FLOAT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3412;
                this.match(SparkSqlParser.KW_REAL);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3413;
                this.match(SparkSqlParser.KW_DOUBLE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3414;
                this.match(SparkSqlParser.KW_DATE);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3415;
                this.match(SparkSqlParser.KW_TIMESTAMP);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3416;
                this.match(SparkSqlParser.KW_TIMESTAMP_NTZ);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3417;
                this.match(SparkSqlParser.KW_TIMESTAMP_LTZ);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3418;
                this.match(SparkSqlParser.KW_STRING);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 3419;
                this.match(SparkSqlParser.KW_CHARACTER);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 3420;
                this.match(SparkSqlParser.KW_CHAR);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 3421;
                this.match(SparkSqlParser.KW_VARCHAR);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 3422;
                this.match(SparkSqlParser.KW_BINARY);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 3423;
                this.match(SparkSqlParser.KW_DECIMAL);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 3424;
                this.match(SparkSqlParser.KW_DEC);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 3425;
                this.match(SparkSqlParser.KW_NUMERIC);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 3426;
                this.match(SparkSqlParser.KW_VOID);
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 3427;
                this.match(SparkSqlParser.KW_INTERVAL);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 3428;
                this.match(SparkSqlParser.KW_ARRAY);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 3429;
                this.match(SparkSqlParser.KW_STRUCT);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 3430;
                this.match(SparkSqlParser.KW_MAP);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 3431;
                localContext._unsupportedType = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataType(): DataTypeContext {
        let localContext = new DataTypeContext(this.context, this.state);
        this.enterRule(localContext, 282, SparkSqlParser.RULE_dataType);
        let _la: number;
        try {
            this.state = 3487;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 470, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3434;
                localContext._complex = this.match(SparkSqlParser.KW_ARRAY);
                this.state = 3435;
                this.match(SparkSqlParser.LT);
                this.state = 3436;
                this.dataType();
                this.state = 3437;
                this.match(SparkSqlParser.GT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3439;
                localContext._complex = this.match(SparkSqlParser.KW_MAP);
                this.state = 3440;
                this.match(SparkSqlParser.LT);
                this.state = 3441;
                this.dataType();
                this.state = 3442;
                this.match(SparkSqlParser.COMMA);
                this.state = 3443;
                this.dataType();
                this.state = 3444;
                this.match(SparkSqlParser.GT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3446;
                localContext._complex = this.match(SparkSqlParser.KW_STRUCT);
                this.state = 3460;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.LT:
                    {
                    this.state = 3447;
                    this.match(SparkSqlParser.LT);
                    this.state = 3456;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                        {
                        this.state = 3448;
                        this.complexColType();
                        this.state = 3453;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 3449;
                            this.match(SparkSqlParser.COMMA);
                            this.state = 3450;
                            this.complexColType();
                            }
                            }
                            this.state = 3455;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 3458;
                    this.match(SparkSqlParser.GT);
                    }
                    break;
                case SparkSqlParser.NEQ:
                    {
                    this.state = 3459;
                    this.match(SparkSqlParser.NEQ);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3462;
                this.match(SparkSqlParser.KW_INTERVAL);
                this.state = 3463;
                _la = this.tokenStream.LA(1);
                if(!(_la === 186 || _la === 348)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3466;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 466, this.context) ) {
                case 1:
                    {
                    this.state = 3464;
                    this.match(SparkSqlParser.KW_TO);
                    this.state = 3465;
                    this.match(SparkSqlParser.KW_MONTH);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3468;
                this.match(SparkSqlParser.KW_INTERVAL);
                this.state = 3469;
                _la = this.tokenStream.LA(1);
                if(!(_la === 67 || _la === 134 || _la === 184 || _la === 259)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3472;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 467, this.context) ) {
                case 1:
                    {
                    this.state = 3470;
                    this.match(SparkSqlParser.KW_TO);
                    this.state = 3471;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 134 || _la === 184 || _la === 259)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3474;
                this.type_();
                this.state = 3485;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 469, this.context) ) {
                case 1:
                    {
                    this.state = 3475;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3476;
                    this.match(SparkSqlParser.INTEGER_VALUE);
                    this.state = 3481;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3477;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3478;
                        this.match(SparkSqlParser.INTEGER_VALUE);
                        }
                        }
                        this.state = 3483;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3484;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionSeqForAdd(): QualifiedColTypeWithPositionSeqForAddContext {
        let localContext = new QualifiedColTypeWithPositionSeqForAddContext(this.context, this.state);
        this.enterRule(localContext, 284, SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForAdd);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3489;
            this.qualifiedColTypeWithPositionForAdd();
            this.state = 3494;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3490;
                this.match(SparkSqlParser.COMMA);
                this.state = 3491;
                this.qualifiedColTypeWithPositionForAdd();
                }
                }
                this.state = 3496;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext {
        let localContext = new QualifiedColTypeWithPositionForAddContext(this.context, this.state);
        this.enterRule(localContext, 286, SparkSqlParser.RULE_qualifiedColTypeWithPositionForAdd);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3497;
            localContext._name = this.columnNameCreate();
            this.state = 3498;
            this.dataType();
            this.state = 3502;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 472, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3499;
                    this.colDefinitionDescriptorWithPosition();
                    }
                    }
                }
                this.state = 3504;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 472, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionSeqForReplace(): QualifiedColTypeWithPositionSeqForReplaceContext {
        let localContext = new QualifiedColTypeWithPositionSeqForReplaceContext(this.context, this.state);
        this.enterRule(localContext, 288, SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForReplace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3505;
            this.qualifiedColTypeWithPositionForReplace();
            this.state = 3510;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3506;
                this.match(SparkSqlParser.COMMA);
                this.state = 3507;
                this.qualifiedColTypeWithPositionForReplace();
                }
                }
                this.state = 3512;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionForReplace(): QualifiedColTypeWithPositionForReplaceContext {
        let localContext = new QualifiedColTypeWithPositionForReplaceContext(this.context, this.state);
        this.enterRule(localContext, 290, SparkSqlParser.RULE_qualifiedColTypeWithPositionForReplace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3513;
            localContext._name = this.columnName();
            this.state = 3514;
            this.dataType();
            this.state = 3518;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 9 || _la === 51 || _la === 82 || _la === 116 || _la === 197) {
                {
                {
                this.state = 3515;
                this.colDefinitionDescriptorWithPosition();
                }
                }
                this.state = 3520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext {
        let localContext = new ColDefinitionDescriptorWithPositionContext(this.context, this.state);
        this.enterRule(localContext, 292, SparkSqlParser.RULE_colDefinitionDescriptorWithPosition);
        try {
            this.state = 3528;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3521;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3522;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case SparkSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3523;
                this.match(SparkSqlParser.KW_DEFAULT);
                this.state = 3524;
                this.expression();
                }
                break;
            case SparkSqlParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3525;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 3526;
                localContext._comment = this.stringLit();
                }
                break;
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_FIRST:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3527;
                this.colPosition();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDefaultExpression(): VariableDefaultExpressionContext {
        let localContext = new VariableDefaultExpressionContext(this.context, this.state);
        this.enterRule(localContext, 294, SparkSqlParser.RULE_variableDefaultExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3530;
            _la = this.tokenStream.LA(1);
            if(!(_la === 82 || _la === 352)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3531;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colTypeList(): ColTypeListContext {
        let localContext = new ColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 296, SparkSqlParser.RULE_colTypeList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3533;
            this.columnType();
            this.state = 3538;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 476, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3534;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3535;
                    this.columnType();
                    }
                    }
                }
                this.state = 3540;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 476, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnType(): ColumnTypeContext {
        let localContext = new ColumnTypeContext(this.context, this.state);
        this.enterRule(localContext, 298, SparkSqlParser.RULE_columnType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3541;
            localContext._colName = this.errorCapturingIdentifier();
            this.state = 3542;
            this.dataType();
            this.state = 3545;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 477, this.context) ) {
            case 1:
                {
                this.state = 3543;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3544;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            }
            this.state = 3549;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 478, this.context) ) {
            case 1:
                {
                this.state = 3547;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 3548;
                localContext._comment = this.stringLit();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext {
        let localContext = new CreateOrReplaceTableColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 300, SparkSqlParser.RULE_createOrReplaceTableColTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3551;
            this.createOrReplaceTableColType();
            this.state = 3556;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3552;
                this.match(SparkSqlParser.COMMA);
                this.state = 3553;
                this.createOrReplaceTableColType();
                }
                }
                this.state = 3558;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOrReplaceTableColType(): CreateOrReplaceTableColTypeContext {
        let localContext = new CreateOrReplaceTableColTypeContext(this.context, this.state);
        this.enterRule(localContext, 302, SparkSqlParser.RULE_createOrReplaceTableColType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3559;
            localContext._colName = this.columnNameCreate();
            this.state = 3560;
            localContext._colType = this.dataType();
            this.state = 3564;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 51 || _la === 82 || _la === 127 || _la === 197) {
                {
                {
                this.state = 3561;
                this.colDefinitionOption();
                }
                }
                this.state = 3566;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colDefinitionOption(): ColDefinitionOptionContext {
        let localContext = new ColDefinitionOptionContext(this.context, this.state);
        this.enterRule(localContext, 304, SparkSqlParser.RULE_colDefinitionOption);
        try {
            this.state = 3580;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3567;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3568;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case SparkSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3569;
                this.match(SparkSqlParser.KW_DEFAULT);
                this.state = 3570;
                this.expression();
                }
                break;
            case SparkSqlParser.KW_GENERATED:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3571;
                this.match(SparkSqlParser.KW_GENERATED);
                this.state = 3572;
                this.match(SparkSqlParser.KW_ALWAYS);
                this.state = 3573;
                this.match(SparkSqlParser.KW_AS);
                this.state = 3574;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3575;
                this.expression();
                this.state = 3576;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case SparkSqlParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3578;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 3579;
                localContext._comment = this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public complexColType(): ComplexColTypeContext {
        let localContext = new ComplexColTypeContext(this.context, this.state);
        this.enterRule(localContext, 306, SparkSqlParser.RULE_complexColType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3582;
            this.identifier();
            this.state = 3584;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 371) {
                {
                this.state = 3583;
                this.match(SparkSqlParser.COLON);
                }
            }

            this.state = 3586;
            this.dataType();
            this.state = 3589;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 197) {
                {
                this.state = 3587;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3588;
                this.match(SparkSqlParser.KW_NULL);
                }
            }

            this.state = 3593;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 3591;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 3592;
                localContext._comment = this.stringLit();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 308, SparkSqlParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3595;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 3596;
            localContext._condition = this.expression();
            this.state = 3597;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 3598;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 310, SparkSqlParser.RULE_windowClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3600;
            this.match(SparkSqlParser.KW_WINDOW);
            this.state = 3601;
            localContext._name = this.errorCapturingIdentifier();
            this.state = 3602;
            this.match(SparkSqlParser.KW_AS);
            this.state = 3603;
            this.windowSpec();
            this.state = 3611;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 485, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3604;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3605;
                    localContext._name = this.errorCapturingIdentifier();
                    this.state = 3606;
                    this.match(SparkSqlParser.KW_AS);
                    this.state = 3607;
                    this.windowSpec();
                    }
                    }
                }
                this.state = 3613;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 485, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zOrderClause(): ZOrderClauseContext {
        let localContext = new ZOrderClauseContext(this.context, this.state);
        this.enterRule(localContext, 312, SparkSqlParser.RULE_zOrderClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3614;
            this.match(SparkSqlParser.KW_ZORDER);
            this.state = 3615;
            this.match(SparkSqlParser.KW_BY);
            this.state = 3616;
            this.columnNameSeq();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpec(): WindowSpecContext {
        let localContext = new WindowSpecContext(this.context, this.state);
        this.enterRule(localContext, 314, SparkSqlParser.RULE_windowSpec);
        let _la: number;
        try {
            this.state = 3657;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 492, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3618;
                localContext._name = this.errorCapturingIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3619;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3620;
                localContext._name = this.errorCapturingIdentifier();
                this.state = 3621;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3623;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3651;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_CLUSTER:
                    {
                    this.state = 3624;
                    this.match(SparkSqlParser.KW_CLUSTER);
                    this.state = 3625;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 3626;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    this.state = 3631;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3627;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3628;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        }
                        }
                        this.state = 3633;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case SparkSqlParser.RIGHT_PAREN:
                case SparkSqlParser.KW_DISTRIBUTE:
                case SparkSqlParser.KW_ORDER:
                case SparkSqlParser.KW_PARTITION:
                case SparkSqlParser.KW_RANGE:
                case SparkSqlParser.KW_ROWS:
                case SparkSqlParser.KW_SORT:
                    {
                    this.state = 3644;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 93 || _la === 217) {
                        {
                        this.state = 3634;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 93 || _la === 217)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3635;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 3636;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        this.state = 3641;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 3637;
                            this.match(SparkSqlParser.COMMA);
                            this.state = 3638;
                            localContext._expression = this.expression();
                            localContext._partition.push(localContext._expression);
                            }
                            }
                            this.state = 3643;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 3649;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 209 || _la === 278) {
                        {
                        this.state = 3646;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 209 || _la === 278)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3647;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 3648;
                        this.orderOrSortByClause();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3654;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 233 || _la === 258) {
                    {
                    this.state = 3653;
                    this.windowFrame();
                    }
                }

                this.state = 3656;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 316, SparkSqlParser.RULE_windowFrame);
        let _la: number;
        try {
            this.state = 3667;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 493, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3659;
                localContext._frameType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 233 || _la === 258)) {
                    localContext._frameType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3660;
                localContext._start_ = this.frameBound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3661;
                localContext._frameType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 233 || _la === 258)) {
                    localContext._frameType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3662;
                this.match(SparkSqlParser.KW_BETWEEN);
                this.state = 3663;
                localContext._start_ = this.frameBound();
                this.state = 3664;
                this.match(SparkSqlParser.KW_AND);
                this.state = 3665;
                localContext._end = this.frameBound();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 318, SparkSqlParser.RULE_frameBound);
        let _la: number;
        try {
            this.state = 3676;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 494, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3669;
                this.match(SparkSqlParser.KW_UNBOUNDED);
                this.state = 3670;
                localContext._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 226)) {
                    localContext._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3671;
                localContext._boundType = this.match(SparkSqlParser.KW_CURRENT);
                this.state = 3672;
                this.match(SparkSqlParser.KW_ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3673;
                this.expression();
                this.state = 3674;
                localContext._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 226)) {
                    localContext._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedNameList(): QualifiedNameListContext {
        let localContext = new QualifiedNameListContext(this.context, this.state);
        this.enterRule(localContext, 320, SparkSqlParser.RULE_qualifiedNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3678;
            this.qualifiedName();
            this.state = 3683;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3679;
                this.match(SparkSqlParser.COMMA);
                this.state = 3680;
                this.qualifiedName();
                }
                }
                this.state = 3685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionName(): FunctionNameContext {
        let localContext = new FunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 322, SparkSqlParser.RULE_functionName);
        try {
            this.state = 3695;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 496, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3686;
                this.match(SparkSqlParser.KW_IDENTIFIER);
                this.state = 3687;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3688;
                this.expression();
                this.state = 3689;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3691;
                this.qualifiedName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3692;
                this.match(SparkSqlParser.KW_FILTER);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3693;
                this.match(SparkSqlParser.KW_LEFT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3694;
                this.match(SparkSqlParser.KW_RIGHT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        let localContext = new FunctionNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 324, SparkSqlParser.RULE_functionNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3697;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 326, SparkSqlParser.RULE_qualifiedName);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3699;
            this.identifier();
            this.state = 3704;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 497, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3700;
                    this.match(SparkSqlParser.DOT);
                    this.state = 3701;
                    this.identifier();
                    }
                    }
                }
                this.state = 3706;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 497, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        let localContext = new ErrorCapturingIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 328, SparkSqlParser.RULE_errorCapturingIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3707;
            this.identifier();
            this.state = 3708;
            this.errorCapturingIdentifierExtra();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        let localContext = new ErrorCapturingIdentifierExtraContext(this.context, this.state);
        this.enterRule(localContext, 330, SparkSqlParser.RULE_errorCapturingIdentifierExtra);
        try {
            let alternative: number;
            this.state = 3717;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 499, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3712;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 3710;
                        this.match(SparkSqlParser.MINUS);
                        this.state = 3711;
                        this.identifier();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3714;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 498, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 332, SparkSqlParser.RULE_identifier);
        try {
            this.state = 3721;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 500, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3719;
                this.strictIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3720;
                this.strictNonReserved();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public strictIdentifier(): StrictIdentifierContext {
        let localContext = new StrictIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 334, SparkSqlParser.RULE_strictIdentifier);
        try {
            this.state = 3727;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 501, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3723;
                this.match(SparkSqlParser.IDENTIFIER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3724;
                this.quotedIdentifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3725;
                this.ansiNonReserved();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3726;
                this.nonReserved();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotedIdentifier(): QuotedIdentifierContext {
        let localContext = new QuotedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 336, SparkSqlParser.RULE_quotedIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3729;
            _la = this.tokenStream.LA(1);
            if(!(_la === 378 || _la === 389)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 338, SparkSqlParser.RULE_number);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3732;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 362) {
                {
                this.state = 3731;
                this.match(SparkSqlParser.MINUS);
                }
            }

            this.state = 3734;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 511) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColumnAction(): AlterColumnActionContext {
        let localContext = new AlterColumnActionContext(this.context, this.state);
        this.enterRule(localContext, 340, SparkSqlParser.RULE_alterColumnAction);
        let _la: number;
        try {
            this.state = 3749;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 503, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3736;
                this.match(SparkSqlParser.KW_TYPE);
                this.state = 3737;
                this.dataType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3738;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 3739;
                localContext._comment = this.stringLit();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3740;
                this.colPosition();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3741;
                localContext._setOrDrop = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 96 || _la === 269)) {
                    localContext._setOrDrop = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3742;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3743;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3744;
                this.match(SparkSqlParser.KW_SET);
                this.state = 3745;
                this.match(SparkSqlParser.KW_DEFAULT);
                this.state = 3746;
                this.expression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3747;
                localContext._dropDefault = this.match(SparkSqlParser.KW_DROP);
                this.state = 3748;
                this.match(SparkSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLit(): StringLitContext {
        let localContext = new StringLitContext(this.context, this.state);
        this.enterRule(localContext, 342, SparkSqlParser.RULE_stringLit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3751;
            _la = this.tokenStream.LA(1);
            if(!(_la === 377 || _la === 378)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ansiNonReserved(): AnsiNonReservedContext {
        let localContext = new AnsiNonReservedContext(this.context, this.state);
        this.enterRule(localContext, 344, SparkSqlParser.RULE_ansiNonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3753;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4017011456) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 1711111143) !== 0) || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & 3187671039) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 1328796669) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 3316086655) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 1610612735) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4020201927) !== 0) || ((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & 4294442751) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 3758088175) !== 0) || ((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 3355402191) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 15892455) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public strictNonReserved(): StrictNonReservedContext {
        let localContext = new StrictNonReservedContext(this.context, this.state);
        this.enterRule(localContext, 346, SparkSqlParser.RULE_strictNonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3755;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 60 || _la === 102 || _la === 124 || ((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & 149521) !== 0) || _la === 194 || _la === 203 || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & 1064961) !== 0) || _la === 323 || _la === 332)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 348, SparkSqlParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3757;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294934272) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4026531839) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3892314047) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3085893631) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967293) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294965227) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4227858431) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294950527) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294963191) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 39:
            return this.columnName_sempred(localContext as ColumnNameContext, predIndex);
        case 48:
            return this.queryTerm_sempred(localContext as QueryTermContext, predIndex);
        case 120:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 122:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 124:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        }
        return true;
    }
    private columnName_sempred(localContext: ColumnNameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.shouldMatchEmpty();
        }
        return true;
    }
    private queryTerm_sempred(localContext: QueryTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return this.precpred(this.context, 3);
        case 2:
            return this.precpred(this.context, 2);
        case 3:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 4:
            return this.precpred(this.context, 2);
        case 5:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 6:
            return this.precpred(this.context, 6);
        case 7:
            return this.precpred(this.context, 5);
        case 8:
            return this.precpred(this.context, 4);
        case 9:
            return this.precpred(this.context, 3);
        case 10:
            return this.precpred(this.context, 2);
        case 11:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 12:
            return this.precpred(this.context, 9);
        case 13:
            return this.precpred(this.context, 7);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,393,3760,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,1,0,
        5,0,352,8,0,10,0,12,0,355,9,0,1,0,1,0,1,1,1,1,3,1,361,8,1,1,2,1,
        2,3,2,365,8,2,1,2,1,2,1,2,3,2,370,8,2,1,2,1,2,1,2,1,2,1,2,3,2,377,
        8,2,1,2,1,2,1,2,3,2,382,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,
        392,8,2,10,2,12,2,395,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,414,8,2,1,2,1,2,3,2,418,8,2,1,
        2,1,2,1,2,1,2,3,2,424,8,2,1,2,3,2,427,8,2,1,2,3,2,430,8,2,1,2,1,
        2,3,2,434,8,2,1,2,3,2,437,8,2,1,2,1,2,3,2,441,8,2,1,2,1,2,1,2,1,
        2,1,2,3,2,448,8,2,1,2,3,2,451,8,2,1,2,1,2,3,2,455,8,2,1,2,3,2,458,
        8,2,1,2,1,2,1,2,3,2,463,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,5,2,476,8,2,10,2,12,2,479,9,2,1,2,1,2,3,2,483,8,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,3,2,492,8,2,1,2,3,2,495,8,2,1,2,1,2,3,2,499,
        8,2,1,2,3,2,502,8,2,1,2,1,2,1,2,1,2,3,2,508,8,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,3,2,519,8,2,1,2,1,2,1,2,1,2,3,2,525,8,2,1,2,
        1,2,1,2,3,2,530,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,3,2,563,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        573,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,584,8,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,595,8,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,3,2,606,8,2,1,2,1,2,1,2,3,2,611,8,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,3,2,620,8,2,1,2,1,2,3,2,624,8,2,1,2,1,2,1,2,1,2,3,2,
        630,8,2,1,2,1,2,3,2,634,8,2,1,2,1,2,1,2,3,2,639,8,2,1,2,1,2,1,2,
        1,2,3,2,645,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,657,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,665,8,2,1,2,1,2,1,2,1,2,3,2,671,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,682,8,2,1,2,1,2,3,2,
        686,8,2,1,2,4,2,689,8,2,11,2,12,2,690,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,706,8,2,1,2,1,2,3,2,710,8,2,1,2,1,
        2,1,2,5,2,715,8,2,10,2,12,2,718,9,2,1,2,3,2,721,8,2,1,2,1,2,1,2,
        1,2,3,2,727,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        3,2,757,8,2,1,2,1,2,3,2,761,8,2,1,2,1,2,1,2,3,2,766,8,2,1,2,1,2,
        1,2,1,2,1,2,3,2,773,8,2,1,2,1,2,1,2,1,2,3,2,779,8,2,1,2,3,2,782,
        8,2,1,2,3,2,785,8,2,1,2,1,2,3,2,789,8,2,1,2,1,2,3,2,793,8,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,5,2,802,8,2,10,2,12,2,805,9,2,1,2,1,2,1,
        2,1,2,1,2,1,2,3,2,813,8,2,1,2,3,2,816,8,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,3,2,825,8,2,1,2,1,2,1,2,3,2,830,8,2,1,2,1,2,1,2,1,2,3,2,836,
        8,2,1,2,1,2,1,2,1,2,1,2,3,2,843,8,2,1,2,3,2,846,8,2,1,2,1,2,3,2,
        850,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,863,8,2,
        10,2,12,2,866,9,2,3,2,868,8,2,1,2,1,2,1,2,1,2,3,2,874,8,2,1,2,1,
        2,3,2,878,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,5,2,895,8,2,10,2,12,2,898,9,2,1,2,1,2,1,2,1,2,1,2,3,2,
        905,8,2,1,2,1,2,3,2,909,8,2,1,2,1,2,1,2,1,2,3,2,915,8,2,1,2,3,2,
        918,8,2,1,2,1,2,3,2,922,8,2,1,2,3,2,925,8,2,1,2,1,2,1,2,1,2,3,2,
        931,8,2,1,2,1,2,1,2,3,2,936,8,2,1,2,1,2,3,2,940,8,2,1,2,1,2,1,2,
        1,2,1,2,3,2,947,8,2,1,2,3,2,950,8,2,1,2,3,2,953,8,2,1,2,1,2,1,2,
        1,2,1,2,3,2,960,8,2,1,2,1,2,1,2,3,2,965,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,974,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,982,8,2,1,2,1,2,
        1,2,1,2,3,2,988,8,2,1,2,3,2,991,8,2,1,2,3,2,994,8,2,1,2,1,2,1,2,
        1,2,3,2,1000,8,2,1,2,1,2,3,2,1004,8,2,1,2,1,2,1,2,3,2,1009,8,2,1,
        2,3,2,1012,8,2,1,2,1,2,3,2,1016,8,2,3,2,1018,8,2,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,1026,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1034,8,2,1,2,3,
        2,1037,8,2,1,2,1,2,1,2,1,2,1,2,3,2,1044,8,2,1,2,3,2,1047,8,2,1,2,
        3,2,1050,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1059,8,2,1,2,1,2,1,
        2,3,2,1064,8,2,1,2,1,2,1,2,1,2,3,2,1070,8,2,1,2,1,2,1,2,3,2,1075,
        8,2,1,2,3,2,1078,8,2,1,2,1,2,3,2,1082,8,2,1,2,3,2,1085,8,2,1,2,1,
        2,3,2,1089,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1099,8,2,1,2,
        1,2,1,2,3,2,1104,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,1115,
        8,2,10,2,12,2,1118,9,2,3,2,1120,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        1128,8,2,1,2,1,2,1,2,1,2,3,2,1134,8,2,1,2,3,2,1137,8,2,1,2,3,2,1140,
        8,2,1,2,1,2,1,2,3,2,1145,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1153,8,
        2,1,2,1,2,1,2,3,2,1158,8,2,1,2,1,2,1,2,1,2,3,2,1164,8,2,1,2,1,2,
        1,2,1,2,3,2,1170,8,2,1,2,3,2,1173,8,2,1,2,1,2,1,2,1,2,1,2,3,2,1180,
        8,2,1,2,1,2,1,2,5,2,1185,8,2,10,2,12,2,1188,9,2,1,2,1,2,1,2,5,2,
        1193,8,2,10,2,12,2,1196,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        3,2,1207,8,2,1,2,1,2,1,2,1,2,5,2,1213,8,2,10,2,12,2,1216,9,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,5,2,1240,8,2,10,2,12,2,1243,9,2,3,2,1245,8,2,
        1,2,1,2,5,2,1249,8,2,10,2,12,2,1252,9,2,1,2,1,2,1,2,1,2,5,2,1258,
        8,2,10,2,12,2,1261,9,2,1,2,1,2,1,2,1,2,5,2,1267,8,2,10,2,12,2,1270,
        9,2,1,2,1,2,1,2,3,2,1275,8,2,1,2,1,2,1,2,3,2,1280,8,2,1,2,1,2,1,
        2,3,2,1285,8,2,1,2,1,2,1,2,1,2,1,2,3,2,1292,8,2,1,2,1,2,1,2,3,2,
        1297,8,2,1,2,1,2,1,2,3,2,1302,8,2,1,2,1,2,1,2,1,2,1,2,3,2,1309,8,
        2,1,2,1,2,1,2,1,2,5,2,1315,8,2,10,2,12,2,1318,9,2,3,2,1320,8,2,1,
        3,1,3,1,3,1,3,3,3,1326,8,3,1,3,1,3,1,3,1,3,1,3,3,3,1333,8,3,1,3,
        1,3,3,3,1337,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,3,3,1400,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,1408,8,3,1,3,1,3,1,
        3,1,3,1,3,3,3,1415,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,1423,8,4,1,4,
        1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1435,8,5,1,5,1,5,1,5,3,5,
        1440,8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,3,8,1449,8,8,1,8,1,8,1,8,1,
        9,1,9,1,9,3,9,1457,8,9,1,9,1,9,1,9,3,9,1462,8,9,3,9,1464,8,9,1,9,
        1,9,1,9,1,9,1,9,1,9,3,9,1472,8,9,1,9,1,9,1,9,3,9,1477,8,9,1,9,1,
        9,3,9,1481,8,9,1,9,3,9,1484,8,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1492,
        8,9,1,9,1,9,1,9,3,9,1497,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1506,
        8,9,1,9,1,9,1,9,3,9,1511,8,9,1,9,3,9,1514,8,9,1,9,1,9,1,9,3,9,1519,
        8,9,1,9,1,9,3,9,1523,8,9,1,9,1,9,1,9,3,9,1528,8,9,3,9,1530,8,9,1,
        10,1,10,1,10,3,10,1535,8,10,1,11,1,11,1,11,1,11,1,11,5,11,1542,8,
        11,10,11,12,11,1545,9,11,1,11,1,11,1,12,1,12,1,12,3,12,1552,8,12,
        1,12,1,12,1,12,1,12,3,12,1558,8,12,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,3,14,1567,8,14,1,15,1,15,1,15,5,15,1572,8,15,10,15,12,15,1575,
        9,15,1,16,1,16,1,16,1,16,5,16,1581,8,16,10,16,12,16,1584,9,16,1,
        17,1,17,3,17,1588,8,17,1,17,3,17,1591,8,17,1,17,1,17,1,17,1,17,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,5,19,1616,8,19,10,19,12,19,1619,9,19,
        1,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,1628,8,21,10,21,12,21,1631,
        9,21,1,21,1,21,1,22,1,22,3,22,1637,8,22,1,22,3,22,1640,8,22,1,23,
        1,23,1,23,5,23,1645,8,23,10,23,12,23,1648,9,23,1,23,3,23,1651,8,
        23,1,24,1,24,1,24,1,24,3,24,1657,8,24,1,25,1,25,1,25,1,25,5,25,1663,
        8,25,10,25,12,25,1666,9,25,1,25,1,25,1,26,1,26,3,26,1672,8,26,1,
        26,3,26,1675,8,26,1,27,1,27,1,27,1,27,5,27,1681,8,27,10,27,12,27,
        1684,9,27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,1692,8,28,10,28,12,
        28,1695,9,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,1705,8,
        29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1713,8,30,1,31,1,31,1,31,1,
        31,3,31,1719,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,4,32,1728,8,
        32,11,32,12,32,1729,1,32,1,32,1,32,1,32,1,32,3,32,1737,8,32,1,32,
        1,32,1,32,1,32,1,32,3,32,1744,8,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,3,32,1756,8,32,1,32,1,32,1,32,1,32,5,32,1762,
        8,32,10,32,12,32,1765,9,32,1,32,5,32,1768,8,32,10,32,12,32,1771,
        9,32,1,32,5,32,1774,8,32,10,32,12,32,1777,9,32,3,32,1779,8,32,1,
        33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,
        39,3,39,1795,8,39,1,40,1,40,1,41,1,41,1,41,5,41,1802,8,41,10,41,
        12,41,1805,9,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1815,
        8,43,1,44,1,44,1,44,3,44,1820,8,44,1,44,1,44,1,44,3,44,1825,8,44,
        1,44,1,44,1,44,3,44,1830,8,44,1,44,1,44,1,44,3,44,1835,8,44,1,44,
        3,44,1838,8,44,1,44,3,44,1841,8,44,1,44,1,44,3,44,1845,8,44,1,45,
        1,45,1,45,3,45,1850,8,45,1,46,1,46,1,46,5,46,1855,8,46,10,46,12,
        46,1858,9,46,1,47,1,47,1,47,5,47,1863,8,47,10,47,12,47,1866,9,47,
        1,48,1,48,1,48,1,48,1,48,1,48,3,48,1874,8,48,1,48,1,48,1,48,1,48,
        3,48,1880,8,48,1,48,1,48,1,48,1,48,3,48,1886,8,48,1,48,5,48,1889,
        8,48,10,48,12,48,1892,9,48,1,49,1,49,1,49,4,49,1897,8,49,11,49,12,
        49,1898,1,49,1,49,1,49,1,49,1,49,1,49,5,49,1907,8,49,10,49,12,49,
        1910,9,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1918,8,49,1,50,1,50,
        3,50,1922,8,50,1,50,3,50,1925,8,50,1,50,1,50,3,50,1929,8,50,1,51,
        1,51,3,51,1933,8,51,1,51,1,51,1,51,1,51,5,51,1939,8,51,10,51,12,
        51,1942,9,51,1,51,3,51,1945,8,51,1,51,3,51,1948,8,51,1,51,3,51,1951,
        8,51,1,51,3,51,1954,8,51,1,51,1,51,3,51,1958,8,51,1,52,1,52,3,52,
        1962,8,52,1,52,5,52,1965,8,52,10,52,12,52,1968,9,52,1,52,3,52,1971,
        8,52,1,52,3,52,1974,8,52,1,52,3,52,1977,8,52,1,52,3,52,1980,8,52,
        1,52,1,52,3,52,1984,8,52,1,52,5,52,1987,8,52,10,52,12,52,1990,9,
        52,1,52,3,52,1993,8,52,1,52,3,52,1996,8,52,1,52,3,52,1999,8,52,1,
        52,3,52,2002,8,52,3,52,2004,8,52,1,53,1,53,1,53,1,53,3,53,2010,8,
        53,1,53,1,53,1,53,1,53,1,53,3,53,2017,8,53,1,53,1,53,1,53,3,53,2022,
        8,53,1,53,3,53,2025,8,53,1,53,3,53,2028,8,53,1,53,1,53,3,53,2032,
        8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,2042,8,53,1,53,
        1,53,3,53,2046,8,53,3,53,2048,8,53,1,53,3,53,2051,8,53,1,53,1,53,
        3,53,2055,8,53,1,54,1,54,5,54,2059,8,54,10,54,12,54,2062,9,54,1,
        54,3,54,2065,8,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,3,
        56,2076,8,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,2084,8,56,3,56,2086,
        8,56,1,57,1,57,1,57,1,57,1,57,3,57,2093,8,57,1,57,1,57,3,57,2097,
        8,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,2109,
        8,58,1,58,1,58,1,58,1,58,1,58,3,58,2116,8,58,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2129,8,59,10,59,12,59,2132,
        9,59,1,59,1,59,3,59,2136,8,59,1,60,1,60,1,60,5,60,2141,8,60,10,60,
        12,60,2144,9,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,
        1,64,1,64,1,64,3,64,2159,8,64,1,64,5,64,2162,8,64,10,64,12,64,2165,
        9,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,5,65,2175,8,65,10,65,
        12,65,2178,9,65,1,65,1,65,3,65,2182,8,65,1,66,1,66,1,66,1,66,5,66,
        2188,8,66,10,66,12,66,2191,9,66,1,66,5,66,2194,8,66,10,66,12,66,
        2197,9,66,1,66,3,66,2200,8,66,1,66,3,66,2203,8,66,1,67,3,67,2206,
        8,67,1,67,1,67,1,67,1,67,1,67,3,67,2213,8,67,1,67,3,67,2216,8,67,
        1,67,1,67,1,67,1,67,3,67,2222,8,67,1,68,1,68,1,68,1,68,1,68,5,68,
        2229,8,68,10,68,12,68,2232,9,68,1,68,1,68,1,68,1,68,1,68,5,68,2239,
        8,68,10,68,12,68,2242,9,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,5,68,2254,8,68,10,68,12,68,2257,9,68,1,68,1,68,3,68,
        2261,8,68,3,68,2263,8,68,1,69,1,69,1,69,3,69,2268,8,69,1,70,1,70,
        1,70,1,70,1,70,5,70,2275,8,70,10,70,12,70,2278,9,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,3,70,2287,8,70,1,70,1,70,1,70,3,70,2292,8,
        70,5,70,2294,8,70,10,70,12,70,2297,9,70,1,70,1,70,3,70,2301,8,70,
        1,71,1,71,1,71,1,71,1,71,3,71,2308,8,71,1,71,1,71,1,71,3,71,2313,
        8,71,5,71,2315,8,71,10,71,12,71,2318,9,71,3,71,2320,8,71,1,71,3,
        71,2323,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,5,
        72,2335,8,72,10,72,12,72,2338,9,72,1,72,1,72,1,72,1,73,1,73,1,73,
        1,73,1,73,5,73,2348,8,73,10,73,12,73,2351,9,73,1,73,1,73,3,73,2355,
        8,73,1,74,1,74,3,74,2359,8,74,1,74,3,74,2362,8,74,1,75,1,75,1,75,
        3,75,2367,8,75,1,75,1,75,1,75,3,75,2372,8,75,1,75,1,75,3,75,2376,
        8,75,1,75,3,75,2379,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        5,76,2389,8,76,10,76,12,76,2392,9,76,1,76,1,76,1,77,1,77,1,77,1,
        77,5,77,2400,8,77,10,77,12,77,2403,9,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,5,77,2413,8,77,10,77,12,77,2416,9,77,1,77,1,77,1,
        78,1,78,1,78,1,78,5,78,2424,8,78,10,78,12,78,2427,9,78,1,78,1,78,
        3,78,2431,8,78,1,78,3,78,2434,8,78,1,79,1,79,3,79,2438,8,79,1,79,
        3,79,2441,8,79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,
        3,82,2453,8,82,1,82,1,82,1,82,1,82,1,82,5,82,2460,8,82,10,82,12,
        82,2463,9,82,3,82,2465,8,82,1,82,1,82,1,82,3,82,2470,8,82,1,82,1,
        82,1,82,5,82,2475,8,82,10,82,12,82,2478,9,82,3,82,2480,8,82,1,83,
        1,83,1,84,1,84,3,84,2486,8,84,1,84,1,84,1,84,1,84,5,84,2492,8,84,
        10,84,12,84,2495,9,84,3,84,2497,8,84,1,85,1,85,1,85,3,85,2502,8,
        85,1,85,1,85,3,85,2506,8,85,1,85,1,85,1,85,1,85,3,85,2512,8,85,1,
        85,1,85,3,85,2516,8,85,1,86,3,86,2519,8,86,1,86,1,86,1,86,3,86,2524,
        8,86,1,86,3,86,2527,8,86,1,86,1,86,1,86,3,86,2532,8,86,3,86,2534,
        8,86,1,87,1,87,1,87,1,87,3,87,2540,8,87,1,88,1,88,1,88,3,88,2545,
        8,88,1,88,1,88,1,88,1,88,1,88,3,88,2552,8,88,1,89,3,89,2555,8,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,3,89,2573,8,89,3,89,2575,8,89,1,89,3,89,2578,8,89,
        1,90,1,90,1,90,1,90,1,91,1,91,1,91,5,91,2587,8,91,10,91,12,91,2590,
        9,91,1,92,1,92,1,92,1,92,5,92,2596,8,92,10,92,12,92,2599,9,92,1,
        92,1,92,1,93,1,93,3,93,2605,8,93,1,94,1,94,1,94,1,94,5,94,2611,8,
        94,10,94,12,94,2614,9,94,1,94,1,94,1,95,1,95,1,95,3,95,2621,8,95,
        1,96,1,96,1,96,3,96,2626,8,96,1,96,3,96,2629,8,96,1,96,3,96,2632,
        8,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,2640,8,96,1,96,1,96,1,96,
        1,96,1,96,1,96,3,96,2648,8,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,
        2656,8,96,10,96,12,96,2659,9,96,1,96,1,96,1,96,1,96,1,96,1,96,1,
        96,5,96,2668,8,96,10,96,12,96,2671,9,96,3,96,2673,8,96,1,96,1,96,
        1,96,3,96,2678,8,96,1,97,1,97,1,97,3,97,2683,8,97,1,97,1,97,1,97,
        1,97,1,97,3,97,2690,8,97,1,97,1,97,1,97,1,97,1,97,3,97,2697,8,97,
        3,97,2699,8,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,5,98,
        2710,8,98,10,98,12,98,2713,9,98,1,98,1,98,1,98,3,98,2718,8,98,3,
        98,2720,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2729,8,98,3,
        98,2731,8,98,1,99,1,99,1,99,1,99,1,100,1,100,3,100,2739,8,100,1,
        101,1,101,3,101,2743,8,101,1,102,3,102,2746,8,102,1,102,1,102,3,
        102,2750,8,102,3,102,2752,8,102,1,103,1,103,1,103,1,103,1,103,1,
        103,1,103,3,103,2761,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
        103,1,103,1,103,1,103,3,103,2773,8,103,3,103,2775,8,103,1,103,1,
        103,1,103,1,103,1,103,3,103,2782,8,103,1,103,1,103,1,103,1,103,1,
        103,3,103,2789,8,103,1,103,1,103,1,103,1,103,3,103,2795,8,103,1,
        103,1,103,1,103,1,103,3,103,2801,8,103,3,103,2803,8,103,1,104,1,
        104,1,104,5,104,2808,8,104,10,104,12,104,2811,9,104,1,105,1,105,
        1,105,5,105,2816,8,105,10,105,12,105,2819,9,105,1,106,1,106,1,106,
        5,106,2824,8,106,10,106,12,106,2827,9,106,1,107,1,107,1,107,3,107,
        2832,8,107,1,108,1,108,1,108,3,108,2837,8,108,1,108,1,108,1,109,
        1,109,1,109,3,109,2844,8,109,1,109,1,109,1,110,1,110,3,110,2850,
        8,110,1,110,3,110,2853,8,110,1,110,1,110,3,110,2857,8,110,3,110,
        2859,8,110,1,111,1,111,1,111,5,111,2864,8,111,10,111,12,111,2867,
        9,111,1,112,1,112,1,112,1,112,5,112,2873,8,112,10,112,12,112,2876,
        9,112,1,112,1,112,1,113,1,113,3,113,2882,8,113,1,114,1,114,1,114,
        1,114,1,114,1,114,5,114,2890,8,114,10,114,12,114,2893,9,114,1,114,
        1,114,3,114,2897,8,114,1,115,1,115,3,115,2901,8,115,1,116,1,116,
        1,117,1,117,1,117,1,117,1,118,1,118,3,118,2911,8,118,1,119,1,119,
        1,119,5,119,2916,8,119,10,119,12,119,2919,9,119,1,120,1,120,1,120,
        1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,2931,8,120,3,120,
        2933,8,120,1,120,1,120,1,120,1,120,1,120,1,120,5,120,2941,8,120,
        10,120,12,120,2944,9,120,1,121,3,121,2947,8,121,1,121,1,121,1,121,
        1,121,1,121,1,121,3,121,2955,8,121,1,121,1,121,1,121,1,121,1,121,
        5,121,2962,8,121,10,121,12,121,2965,9,121,1,121,1,121,1,121,3,121,
        2970,8,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,2978,8,121,
        1,121,1,121,1,121,3,121,2983,8,121,1,121,1,121,1,121,1,121,1,121,
        1,121,1,121,1,121,5,121,2993,8,121,10,121,12,121,2996,9,121,1,121,
        1,121,3,121,3000,8,121,1,121,3,121,3003,8,121,1,121,1,121,1,121,
        1,121,3,121,3009,8,121,1,121,1,121,3,121,3013,8,121,1,121,1,121,
        1,121,3,121,3018,8,121,1,121,1,121,1,121,3,121,3023,8,121,1,121,
        1,121,1,121,3,121,3028,8,121,1,122,1,122,1,122,1,122,3,122,3034,
        8,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,5,122,3055,
        8,122,10,122,12,122,3058,9,122,1,123,1,123,1,124,1,124,1,124,1,124,
        1,124,1,124,3,124,3068,8,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,3,124,3080,8,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,4,124,3090,8,124,11,124,12,124,3091,1,124,
        1,124,3,124,3096,8,124,1,124,1,124,1,124,1,124,1,124,4,124,3103,
        8,124,11,124,12,124,3104,1,124,1,124,3,124,3109,8,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,5,124,3125,8,124,10,124,12,124,3128,9,124,3,124,3130,8,124,
        1,124,1,124,1,124,1,124,1,124,1,124,3,124,3138,8,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,3,124,3147,8,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,3,124,3156,8,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,4,124,3177,8,124,11,124,12,124,3178,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,3,124,3195,8,124,1,124,1,124,1,124,5,124,3200,8,124,
        10,124,12,124,3203,9,124,3,124,3205,8,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,3,124,3214,8,124,1,124,1,124,3,124,3218,8,124,
        1,124,1,124,3,124,3222,8,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,4,124,3232,8,124,11,124,12,124,3233,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,3259,
        8,124,1,124,1,124,1,124,1,124,1,124,3,124,3266,8,124,1,124,3,124,
        3269,8,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,3,124,3284,8,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,3,124,3305,8,124,1,124,1,124,3,124,3309,
        8,124,3,124,3311,8,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,5,124,3321,8,124,10,124,12,124,3324,9,124,1,125,1,125,1,125,
        1,125,1,125,1,125,1,125,3,125,3333,8,125,1,126,1,126,1,126,1,126,
        1,126,1,126,1,126,1,126,1,126,1,126,1,126,4,126,3346,8,126,11,126,
        12,126,3347,3,126,3350,8,126,1,127,1,127,1,128,1,128,1,129,1,129,
        1,130,1,130,1,131,1,131,1,131,3,131,3363,8,131,1,132,1,132,3,132,
        3367,8,132,1,133,1,133,1,133,4,133,3372,8,133,11,133,12,133,3373,
        1,134,1,134,1,134,3,134,3379,8,134,1,135,1,135,1,135,1,135,1,135,
        1,136,3,136,3387,8,136,1,136,1,136,1,136,3,136,3392,8,136,1,137,
        1,137,1,138,1,138,1,139,1,139,1,139,3,139,3401,8,139,1,140,1,140,
        1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
        1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
        1,140,1,140,1,140,1,140,1,140,1,140,3,140,3433,8,140,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,5,141,3452,8,141,10,141,12,141,3455,9,141,
        3,141,3457,8,141,1,141,1,141,3,141,3461,8,141,1,141,1,141,1,141,
        1,141,3,141,3467,8,141,1,141,1,141,1,141,1,141,3,141,3473,8,141,
        1,141,1,141,1,141,1,141,1,141,5,141,3480,8,141,10,141,12,141,3483,
        9,141,1,141,3,141,3486,8,141,3,141,3488,8,141,1,142,1,142,1,142,
        5,142,3493,8,142,10,142,12,142,3496,9,142,1,143,1,143,1,143,5,143,
        3501,8,143,10,143,12,143,3504,9,143,1,144,1,144,1,144,5,144,3509,
        8,144,10,144,12,144,3512,9,144,1,145,1,145,1,145,5,145,3517,8,145,
        10,145,12,145,3520,9,145,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        3,146,3529,8,146,1,147,1,147,1,147,1,148,1,148,1,148,5,148,3537,
        8,148,10,148,12,148,3540,9,148,1,149,1,149,1,149,1,149,3,149,3546,
        8,149,1,149,1,149,3,149,3550,8,149,1,150,1,150,1,150,5,150,3555,
        8,150,10,150,12,150,3558,9,150,1,151,1,151,1,151,5,151,3563,8,151,
        10,151,12,151,3566,9,151,1,152,1,152,1,152,1,152,1,152,1,152,1,152,
        1,152,1,152,1,152,1,152,1,152,1,152,3,152,3581,8,152,1,153,1,153,
        3,153,3585,8,153,1,153,1,153,1,153,3,153,3590,8,153,1,153,1,153,
        3,153,3594,8,153,1,154,1,154,1,154,1,154,1,154,1,155,1,155,1,155,
        1,155,1,155,1,155,1,155,1,155,1,155,5,155,3610,8,155,10,155,12,155,
        3613,9,155,1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,157,1,157,5,157,3630,8,157,10,157,12,157,
        3633,9,157,1,157,1,157,1,157,1,157,1,157,5,157,3640,8,157,10,157,
        12,157,3643,9,157,3,157,3645,8,157,1,157,1,157,1,157,3,157,3650,
        8,157,3,157,3652,8,157,1,157,3,157,3655,8,157,1,157,3,157,3658,8,
        157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,3,158,3668,8,
        158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,3677,8,159,1,
        160,1,160,1,160,5,160,3682,8,160,10,160,12,160,3685,9,160,1,161,
        1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,3,161,3696,8,161,
        1,162,1,162,1,163,1,163,1,163,5,163,3703,8,163,10,163,12,163,3706,
        9,163,1,164,1,164,1,164,1,165,1,165,4,165,3713,8,165,11,165,12,165,
        3714,1,165,3,165,3718,8,165,1,166,1,166,3,166,3722,8,166,1,167,1,
        167,1,167,1,167,3,167,3728,8,167,1,168,1,168,1,169,3,169,3733,8,
        169,1,169,1,169,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,1,170,1,170,3,170,3750,8,170,1,171,1,171,1,172,
        1,172,1,173,1,173,1,174,1,174,1,174,9,1116,1186,1194,1214,1241,1250,
        1259,1268,1316,4,96,240,244,248,175,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
        300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
        332,334,336,338,340,342,344,346,348,0,76,2,0,78,78,229,229,2,0,34,
        34,247,247,3,0,73,73,191,191,262,262,2,0,123,123,140,140,2,0,11,
        11,39,39,2,0,91,91,98,98,5,0,46,46,58,58,108,108,122,122,173,173,
        3,0,10,10,290,290,331,331,1,0,86,87,2,0,108,108,122,122,3,0,8,8,
        96,96,289,289,2,0,8,8,167,167,1,0,335,336,2,0,59,59,96,96,2,0,129,
        129,249,249,6,0,54,54,129,129,143,143,172,172,228,228,313,313,3,
        0,11,11,59,59,96,96,4,0,107,107,139,139,171,171,326,326,2,0,171,
        171,326,326,3,0,45,45,275,275,279,279,2,0,45,45,275,275,3,0,18,18,
        103,103,320,320,3,0,72,72,190,190,261,261,4,0,102,102,148,148,270,
        270,323,323,3,0,102,102,270,270,323,323,2,0,21,21,86,86,2,0,116,
        116,157,157,2,0,292,292,337,337,2,0,291,291,303,303,2,0,61,61,256,
        256,2,0,104,104,141,141,2,0,10,10,92,92,2,0,15,15,264,264,2,0,124,
        124,250,250,2,0,382,382,384,384,2,0,93,93,217,217,2,0,209,209,278,
        278,2,0,197,197,360,360,1,0,251,252,1,0,163,164,3,0,10,10,16,16,
        277,277,3,0,111,111,316,316,325,325,2,0,361,362,366,366,2,0,94,94,
        363,365,2,0,361,362,369,369,11,0,67,67,69,69,134,134,180,180,182,
        182,184,184,186,186,231,231,259,259,341,341,348,348,4,0,63,63,65,
        66,268,268,331,331,2,0,74,75,306,306,3,0,76,77,302,302,307,307,2,
        0,36,36,318,318,2,0,138,138,246,246,1,0,287,288,2,0,4,4,123,123,
        2,0,4,4,119,119,3,0,28,28,160,160,311,311,1,0,220,221,1,0,352,359,
        2,0,94,94,361,370,4,0,14,14,140,140,197,197,208,208,2,0,111,111,
        316,316,1,0,361,362,7,0,67,68,134,135,180,187,192,193,259,260,341,
        342,348,349,6,0,67,67,134,134,184,184,186,186,259,259,348,348,2,
        0,186,186,348,348,4,0,67,67,134,134,184,184,259,259,3,0,134,134,
        184,184,259,259,2,0,82,82,352,352,2,0,233,233,258,258,2,0,118,118,
        226,226,2,0,378,378,389,389,1,0,379,387,2,0,96,96,269,269,1,0,377,
        378,52,0,8,9,11,13,15,15,17,19,21,22,24,27,29,34,37,41,43,46,48,
        48,50,56,58,58,61,62,67,91,93,96,98,98,101,101,103,110,113,113,115,
        118,121,122,125,128,131,131,133,139,141,143,145,147,149,151,154,
        154,156,157,159,159,163,193,195,195,199,201,205,207,210,210,212,
        213,215,219,222,226,228,238,240,249,251,262,264,267,269,276,278,
        292,294,299,302,308,310,310,312,322,326,330,333,342,345,345,348,
        351,16,0,15,15,60,60,102,102,124,124,144,144,148,148,155,155,158,
        158,161,161,194,194,203,203,250,250,264,264,270,270,323,323,332,
        332,19,0,8,14,16,59,61,101,103,122,125,143,145,147,149,154,156,157,
        159,160,162,193,195,195,197,202,204,249,251,262,265,269,271,292,
        294,322,324,331,333,351,4353,0,353,1,0,0,0,2,358,1,0,0,0,4,1319,
        1,0,0,0,6,1414,1,0,0,0,8,1416,1,0,0,0,10,1428,1,0,0,0,12,1441,1,
        0,0,0,14,1444,1,0,0,0,16,1448,1,0,0,0,18,1529,1,0,0,0,20,1531,1,
        0,0,0,22,1536,1,0,0,0,24,1557,1,0,0,0,26,1559,1,0,0,0,28,1566,1,
        0,0,0,30,1568,1,0,0,0,32,1576,1,0,0,0,34,1585,1,0,0,0,36,1596,1,
        0,0,0,38,1617,1,0,0,0,40,1620,1,0,0,0,42,1623,1,0,0,0,44,1634,1,
        0,0,0,46,1650,1,0,0,0,48,1656,1,0,0,0,50,1658,1,0,0,0,52,1669,1,
        0,0,0,54,1676,1,0,0,0,56,1687,1,0,0,0,58,1704,1,0,0,0,60,1712,1,
        0,0,0,62,1714,1,0,0,0,64,1778,1,0,0,0,66,1780,1,0,0,0,68,1782,1,
        0,0,0,70,1784,1,0,0,0,72,1786,1,0,0,0,74,1788,1,0,0,0,76,1790,1,
        0,0,0,78,1794,1,0,0,0,80,1796,1,0,0,0,82,1798,1,0,0,0,84,1806,1,
        0,0,0,86,1814,1,0,0,0,88,1819,1,0,0,0,90,1846,1,0,0,0,92,1851,1,
        0,0,0,94,1859,1,0,0,0,96,1867,1,0,0,0,98,1917,1,0,0,0,100,1921,1,
        0,0,0,102,1957,1,0,0,0,104,2003,1,0,0,0,106,2024,1,0,0,0,108,2056,
        1,0,0,0,110,2068,1,0,0,0,112,2071,1,0,0,0,114,2087,1,0,0,0,116,2101,
        1,0,0,0,118,2135,1,0,0,0,120,2137,1,0,0,0,122,2145,1,0,0,0,124,2149,
        1,0,0,0,126,2152,1,0,0,0,128,2155,1,0,0,0,130,2181,1,0,0,0,132,2183,
        1,0,0,0,134,2221,1,0,0,0,136,2262,1,0,0,0,138,2267,1,0,0,0,140,2300,
        1,0,0,0,142,2322,1,0,0,0,144,2324,1,0,0,0,146,2354,1,0,0,0,148,2356,
        1,0,0,0,150,2363,1,0,0,0,152,2380,1,0,0,0,154,2395,1,0,0,0,156,2419,
        1,0,0,0,158,2435,1,0,0,0,160,2442,1,0,0,0,162,2446,1,0,0,0,164,2449,
        1,0,0,0,166,2481,1,0,0,0,168,2496,1,0,0,0,170,2515,1,0,0,0,172,2533,
        1,0,0,0,174,2539,1,0,0,0,176,2541,1,0,0,0,178,2577,1,0,0,0,180,2579,
        1,0,0,0,182,2583,1,0,0,0,184,2591,1,0,0,0,186,2602,1,0,0,0,188,2606,
        1,0,0,0,190,2617,1,0,0,0,192,2677,1,0,0,0,194,2698,1,0,0,0,196,2719,
        1,0,0,0,198,2732,1,0,0,0,200,2738,1,0,0,0,202,2742,1,0,0,0,204,2751,
        1,0,0,0,206,2802,1,0,0,0,208,2804,1,0,0,0,210,2812,1,0,0,0,212,2820,
        1,0,0,0,214,2828,1,0,0,0,216,2836,1,0,0,0,218,2843,1,0,0,0,220,2849,
        1,0,0,0,222,2860,1,0,0,0,224,2868,1,0,0,0,226,2881,1,0,0,0,228,2896,
        1,0,0,0,230,2900,1,0,0,0,232,2902,1,0,0,0,234,2904,1,0,0,0,236,2910,
        1,0,0,0,238,2912,1,0,0,0,240,2932,1,0,0,0,242,3027,1,0,0,0,244,3033,
        1,0,0,0,246,3059,1,0,0,0,248,3310,1,0,0,0,250,3332,1,0,0,0,252,3349,
        1,0,0,0,254,3351,1,0,0,0,256,3353,1,0,0,0,258,3355,1,0,0,0,260,3357,
        1,0,0,0,262,3359,1,0,0,0,264,3364,1,0,0,0,266,3371,1,0,0,0,268,3375,
        1,0,0,0,270,3380,1,0,0,0,272,3386,1,0,0,0,274,3393,1,0,0,0,276,3395,
        1,0,0,0,278,3400,1,0,0,0,280,3432,1,0,0,0,282,3487,1,0,0,0,284,3489,
        1,0,0,0,286,3497,1,0,0,0,288,3505,1,0,0,0,290,3513,1,0,0,0,292,3528,
        1,0,0,0,294,3530,1,0,0,0,296,3533,1,0,0,0,298,3541,1,0,0,0,300,3551,
        1,0,0,0,302,3559,1,0,0,0,304,3580,1,0,0,0,306,3582,1,0,0,0,308,3595,
        1,0,0,0,310,3600,1,0,0,0,312,3614,1,0,0,0,314,3657,1,0,0,0,316,3667,
        1,0,0,0,318,3676,1,0,0,0,320,3678,1,0,0,0,322,3695,1,0,0,0,324,3697,
        1,0,0,0,326,3699,1,0,0,0,328,3707,1,0,0,0,330,3717,1,0,0,0,332,3721,
        1,0,0,0,334,3727,1,0,0,0,336,3729,1,0,0,0,338,3732,1,0,0,0,340,3749,
        1,0,0,0,342,3751,1,0,0,0,344,3753,1,0,0,0,346,3755,1,0,0,0,348,3757,
        1,0,0,0,350,352,3,2,1,0,351,350,1,0,0,0,352,355,1,0,0,0,353,351,
        1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,355,353,1,0,0,0,356,357,
        5,0,0,1,357,1,1,0,0,0,358,360,3,4,2,0,359,361,5,1,0,0,360,359,1,
        0,0,0,360,361,1,0,0,0,361,3,1,0,0,0,362,1320,3,16,8,0,363,365,3,
        32,16,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,1320,
        3,64,32,0,367,369,5,330,0,0,368,370,3,26,13,0,369,368,1,0,0,0,369,
        370,1,0,0,0,370,371,1,0,0,0,371,1320,3,66,33,0,372,373,5,269,0,0,
        373,376,5,37,0,0,374,377,3,332,166,0,375,377,3,342,171,0,376,374,
        1,0,0,0,376,375,1,0,0,0,377,1320,1,0,0,0,378,379,5,59,0,0,379,381,
        3,26,13,0,380,382,3,160,80,0,381,380,1,0,0,0,381,382,1,0,0,0,382,
        383,1,0,0,0,383,393,3,68,34,0,384,385,5,51,0,0,385,392,3,342,171,
        0,386,387,5,170,0,0,387,392,3,342,171,0,388,389,5,346,0,0,389,390,
        7,0,0,0,390,392,3,42,21,0,391,384,1,0,0,0,391,386,1,0,0,0,391,388,
        1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,1320,
        1,0,0,0,395,393,1,0,0,0,396,397,5,11,0,0,397,398,3,26,13,0,398,399,
        3,66,33,0,399,400,5,269,0,0,400,401,7,0,0,0,401,402,3,42,21,0,402,
        1320,1,0,0,0,403,404,5,11,0,0,404,405,3,26,13,0,405,406,3,66,33,
        0,406,407,5,269,0,0,407,408,5,170,0,0,408,409,3,342,171,0,409,1320,
        1,0,0,0,410,411,5,96,0,0,411,413,3,26,13,0,412,414,3,162,81,0,413,
        412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,417,3,66,33,0,416,
        418,7,1,0,0,417,416,1,0,0,0,417,418,1,0,0,0,418,1320,1,0,0,0,419,
        420,5,273,0,0,420,423,7,2,0,0,421,422,7,3,0,0,422,424,3,210,105,
        0,423,421,1,0,0,0,423,424,1,0,0,0,424,429,1,0,0,0,425,427,5,163,
        0,0,426,425,1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,430,3,342,
        171,0,429,426,1,0,0,0,429,430,1,0,0,0,430,1320,1,0,0,0,431,433,5,
        59,0,0,432,434,5,298,0,0,433,432,1,0,0,0,433,434,1,0,0,0,434,436,
        1,0,0,0,435,437,5,109,0,0,436,435,1,0,0,0,436,437,1,0,0,0,437,438,
        1,0,0,0,438,440,5,293,0,0,439,441,3,160,80,0,440,439,1,0,0,0,440,
        441,1,0,0,0,441,442,1,0,0,0,442,447,3,70,35,0,443,444,5,2,0,0,444,
        445,3,300,150,0,445,446,5,3,0,0,446,448,1,0,0,0,447,443,1,0,0,0,
        447,448,1,0,0,0,448,450,1,0,0,0,449,451,3,36,18,0,450,449,1,0,0,
        0,450,451,1,0,0,0,451,452,1,0,0,0,452,457,3,38,19,0,453,455,5,20,
        0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,458,3,16,
        8,0,457,454,1,0,0,0,457,458,1,0,0,0,458,1320,1,0,0,0,459,460,5,59,
        0,0,460,462,5,293,0,0,461,463,3,160,80,0,462,461,1,0,0,0,462,463,
        1,0,0,0,463,464,1,0,0,0,464,465,3,70,35,0,465,466,5,163,0,0,466,
        477,3,72,36,0,467,476,3,36,18,0,468,476,3,206,103,0,469,476,3,58,
        29,0,470,471,5,170,0,0,471,476,3,342,171,0,472,473,5,297,0,0,473,
        476,3,42,21,0,474,476,3,40,20,0,475,467,1,0,0,0,475,468,1,0,0,0,
        475,469,1,0,0,0,475,470,1,0,0,0,475,472,1,0,0,0,475,474,1,0,0,0,
        476,479,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,1320,1,0,0,0,
        479,477,1,0,0,0,480,481,5,59,0,0,481,483,5,208,0,0,482,480,1,0,0,
        0,482,483,1,0,0,0,483,484,1,0,0,0,484,485,5,244,0,0,485,486,5,293,
        0,0,486,491,3,70,35,0,487,488,5,2,0,0,488,489,3,300,150,0,489,490,
        5,3,0,0,490,492,1,0,0,0,491,487,1,0,0,0,491,492,1,0,0,0,492,494,
        1,0,0,0,493,495,3,36,18,0,494,493,1,0,0,0,494,495,1,0,0,0,495,496,
        1,0,0,0,496,501,3,38,19,0,497,499,5,20,0,0,498,497,1,0,0,0,498,499,
        1,0,0,0,499,500,1,0,0,0,500,502,3,16,8,0,501,498,1,0,0,0,501,502,
        1,0,0,0,502,1320,1,0,0,0,503,504,5,13,0,0,504,505,5,293,0,0,505,
        507,3,72,36,0,506,508,3,22,11,0,507,506,1,0,0,0,507,508,1,0,0,0,
        508,509,1,0,0,0,509,510,5,55,0,0,510,518,5,282,0,0,511,519,5,196,
        0,0,512,513,5,119,0,0,513,514,5,50,0,0,514,519,3,82,41,0,515,516,
        5,119,0,0,516,517,5,10,0,0,517,519,5,50,0,0,518,511,1,0,0,0,518,
        512,1,0,0,0,518,515,1,0,0,0,518,519,1,0,0,0,519,1320,1,0,0,0,520,
        521,5,13,0,0,521,524,5,294,0,0,522,523,7,3,0,0,523,525,3,66,33,0,
        524,522,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,5,55,0,0,
        527,529,5,282,0,0,528,530,5,196,0,0,529,528,1,0,0,0,529,530,1,0,
        0,0,530,1320,1,0,0,0,531,532,5,11,0,0,532,533,5,293,0,0,533,534,
        3,72,36,0,534,535,5,8,0,0,535,536,5,49,0,0,536,537,3,286,143,0,537,
        1320,1,0,0,0,538,539,5,11,0,0,539,540,5,293,0,0,540,541,3,72,36,
        0,541,542,5,8,0,0,542,543,5,50,0,0,543,544,5,2,0,0,544,545,3,284,
        142,0,545,546,5,3,0,0,546,1320,1,0,0,0,547,548,5,11,0,0,548,549,
        5,293,0,0,549,550,3,72,36,0,550,551,5,241,0,0,551,552,5,49,0,0,552,
        553,3,78,39,0,553,554,5,309,0,0,554,555,3,84,42,0,555,1320,1,0,0,
        0,556,557,5,11,0,0,557,558,5,293,0,0,558,559,3,72,36,0,559,560,5,
        96,0,0,560,562,5,49,0,0,561,563,3,162,81,0,562,561,1,0,0,0,562,563,
        1,0,0,0,563,564,1,0,0,0,564,565,3,78,39,0,565,1320,1,0,0,0,566,567,
        5,11,0,0,567,568,5,293,0,0,568,569,3,72,36,0,569,570,5,96,0,0,570,
        572,5,50,0,0,571,573,3,162,81,0,572,571,1,0,0,0,572,573,1,0,0,0,
        573,574,1,0,0,0,574,575,5,2,0,0,575,576,3,82,41,0,576,577,5,3,0,
        0,577,1320,1,0,0,0,578,583,5,11,0,0,579,580,5,293,0,0,580,584,3,
        72,36,0,581,582,5,338,0,0,582,584,3,76,38,0,583,579,1,0,0,0,583,
        581,1,0,0,0,584,585,1,0,0,0,585,586,5,241,0,0,586,587,5,309,0,0,
        587,588,3,210,105,0,588,1320,1,0,0,0,589,594,5,11,0,0,590,591,5,
        293,0,0,591,595,3,72,36,0,592,593,5,338,0,0,593,595,3,76,38,0,594,
        590,1,0,0,0,594,592,1,0,0,0,595,596,1,0,0,0,596,597,5,269,0,0,597,
        598,5,297,0,0,598,599,3,42,21,0,599,1320,1,0,0,0,600,605,5,11,0,
        0,601,602,5,293,0,0,602,606,3,72,36,0,603,604,5,338,0,0,604,606,
        3,76,38,0,605,601,1,0,0,0,605,603,1,0,0,0,606,607,1,0,0,0,607,608,
        5,328,0,0,608,610,5,297,0,0,609,611,3,162,81,0,610,609,1,0,0,0,610,
        611,1,0,0,0,611,612,1,0,0,0,612,613,3,42,21,0,613,1320,1,0,0,0,614,
        615,5,11,0,0,615,616,5,293,0,0,616,617,3,72,36,0,617,619,7,4,0,0,
        618,620,5,49,0,0,619,618,1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,
        621,623,3,78,39,0,622,624,3,340,170,0,623,622,1,0,0,0,623,624,1,
        0,0,0,624,1320,1,0,0,0,625,626,5,11,0,0,626,627,5,293,0,0,627,629,
        3,72,36,0,628,630,3,22,11,0,629,628,1,0,0,0,629,630,1,0,0,0,630,
        631,1,0,0,0,631,633,5,39,0,0,632,634,5,49,0,0,633,632,1,0,0,0,633,
        634,1,0,0,0,634,635,1,0,0,0,635,636,3,78,39,0,636,638,3,298,149,
        0,637,639,3,278,139,0,638,637,1,0,0,0,638,639,1,0,0,0,639,1320,1,
        0,0,0,640,641,5,11,0,0,641,642,5,293,0,0,642,644,3,72,36,0,643,645,
        3,22,11,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,647,
        5,244,0,0,647,648,5,50,0,0,648,649,5,2,0,0,649,650,3,288,144,0,650,
        651,5,3,0,0,651,1320,1,0,0,0,652,653,5,11,0,0,653,654,5,293,0,0,
        654,656,3,72,36,0,655,657,3,22,11,0,656,655,1,0,0,0,656,657,1,0,
        0,0,657,658,1,0,0,0,658,659,5,269,0,0,659,660,5,266,0,0,660,664,
        3,342,171,0,661,662,5,346,0,0,662,663,5,267,0,0,663,665,3,42,21,
        0,664,661,1,0,0,0,664,665,1,0,0,0,665,1320,1,0,0,0,666,667,5,11,
        0,0,667,668,5,293,0,0,668,670,3,72,36,0,669,671,3,22,11,0,670,669,
        1,0,0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,673,5,269,0,0,673,674,
        5,267,0,0,674,675,3,42,21,0,675,1320,1,0,0,0,676,681,5,11,0,0,677,
        678,5,293,0,0,678,682,3,72,36,0,679,680,5,338,0,0,680,682,3,76,38,
        0,681,677,1,0,0,0,681,679,1,0,0,0,682,683,1,0,0,0,683,685,5,8,0,
        0,684,686,3,160,80,0,685,684,1,0,0,0,685,686,1,0,0,0,686,688,1,0,
        0,0,687,689,3,20,10,0,688,687,1,0,0,0,689,690,1,0,0,0,690,688,1,
        0,0,0,690,691,1,0,0,0,691,1320,1,0,0,0,692,693,5,11,0,0,693,694,
        5,293,0,0,694,695,3,72,36,0,695,696,3,22,11,0,696,697,5,241,0,0,
        697,698,5,309,0,0,698,699,3,22,11,0,699,1320,1,0,0,0,700,705,5,11,
        0,0,701,702,5,293,0,0,702,706,3,72,36,0,703,704,5,338,0,0,704,706,
        3,76,38,0,705,701,1,0,0,0,705,703,1,0,0,0,706,707,1,0,0,0,707,709,
        5,96,0,0,708,710,3,162,81,0,709,708,1,0,0,0,709,710,1,0,0,0,710,
        711,1,0,0,0,711,716,3,22,11,0,712,713,5,4,0,0,713,715,3,22,11,0,
        714,712,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,0,
        717,720,1,0,0,0,718,716,1,0,0,0,719,721,5,230,0,0,720,719,1,0,0,
        0,720,721,1,0,0,0,721,1320,1,0,0,0,722,723,5,11,0,0,723,724,5,293,
        0,0,724,726,3,72,36,0,725,727,3,22,11,0,726,725,1,0,0,0,726,727,
        1,0,0,0,727,728,1,0,0,0,728,729,5,269,0,0,729,730,5,170,0,0,730,
        731,3,342,171,0,731,1320,1,0,0,0,732,733,5,11,0,0,733,734,5,293,
        0,0,734,735,3,72,36,0,735,736,5,237,0,0,736,737,5,219,0,0,737,1320,
        1,0,0,0,738,739,5,11,0,0,739,740,5,176,0,0,740,741,5,338,0,0,741,
        742,3,76,38,0,742,743,7,5,0,0,743,744,5,248,0,0,744,1320,1,0,0,0,
        745,746,5,11,0,0,746,747,5,176,0,0,747,748,5,338,0,0,748,749,3,76,
        38,0,749,750,5,269,0,0,750,751,5,297,0,0,751,752,3,42,21,0,752,1320,
        1,0,0,0,753,754,5,96,0,0,754,756,5,293,0,0,755,757,3,162,81,0,756,
        755,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,760,3,72,36,0,759,
        761,5,230,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,1320,1,0,0,0,762,
        763,5,96,0,0,763,765,5,338,0,0,764,766,3,162,81,0,765,764,1,0,0,
        0,765,766,1,0,0,0,766,767,1,0,0,0,767,1320,3,76,38,0,768,769,5,96,
        0,0,769,770,5,176,0,0,770,772,5,338,0,0,771,773,3,162,81,0,772,771,
        1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,0,774,1320,3,76,38,0,775,778,
        5,59,0,0,776,777,5,208,0,0,777,779,5,244,0,0,778,776,1,0,0,0,778,
        779,1,0,0,0,779,784,1,0,0,0,780,782,5,128,0,0,781,780,1,0,0,0,781,
        782,1,0,0,0,782,783,1,0,0,0,783,785,5,298,0,0,784,781,1,0,0,0,784,
        785,1,0,0,0,785,786,1,0,0,0,786,788,5,338,0,0,787,789,3,160,80,0,
        788,787,1,0,0,0,788,789,1,0,0,0,789,790,1,0,0,0,790,792,3,74,37,
        0,791,793,3,188,94,0,792,791,1,0,0,0,792,793,1,0,0,0,793,803,1,0,
        0,0,794,795,5,51,0,0,795,802,3,342,171,0,796,797,5,218,0,0,797,798,
        5,203,0,0,798,802,3,180,90,0,799,800,5,297,0,0,800,802,3,42,21,0,
        801,794,1,0,0,0,801,796,1,0,0,0,801,799,1,0,0,0,802,805,1,0,0,0,
        803,801,1,0,0,0,803,804,1,0,0,0,804,806,1,0,0,0,805,803,1,0,0,0,
        806,807,5,20,0,0,807,808,3,16,8,0,808,1320,1,0,0,0,809,812,5,59,
        0,0,810,811,5,208,0,0,811,813,5,244,0,0,812,810,1,0,0,0,812,813,
        1,0,0,0,813,815,1,0,0,0,814,816,5,128,0,0,815,814,1,0,0,0,815,816,
        1,0,0,0,816,817,1,0,0,0,817,818,5,298,0,0,818,819,5,338,0,0,819,
        824,3,74,37,0,820,821,5,2,0,0,821,822,3,296,148,0,822,823,5,3,0,
        0,823,825,1,0,0,0,824,820,1,0,0,0,824,825,1,0,0,0,825,826,1,0,0,
        0,826,829,3,36,18,0,827,828,5,207,0,0,828,830,3,42,21,0,829,827,
        1,0,0,0,829,830,1,0,0,0,830,1320,1,0,0,0,831,832,5,11,0,0,832,833,
        5,338,0,0,833,835,3,76,38,0,834,836,5,20,0,0,835,834,1,0,0,0,835,
        836,1,0,0,0,836,837,1,0,0,0,837,838,3,16,8,0,838,1320,1,0,0,0,839,
        842,5,59,0,0,840,841,5,208,0,0,841,843,5,244,0,0,842,840,1,0,0,0,
        842,843,1,0,0,0,843,845,1,0,0,0,844,846,5,298,0,0,845,844,1,0,0,
        0,845,846,1,0,0,0,846,847,1,0,0,0,847,849,5,125,0,0,848,850,3,160,
        80,0,849,848,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,852,3,324,
        162,0,852,853,5,20,0,0,853,867,3,342,171,0,854,855,5,332,0,0,855,
        856,3,332,166,0,856,857,3,342,171,0,857,864,1,0,0,0,858,859,5,4,
        0,0,859,860,3,332,166,0,860,861,3,342,171,0,861,863,1,0,0,0,862,
        858,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,0,865,
        868,1,0,0,0,866,864,1,0,0,0,867,854,1,0,0,0,867,868,1,0,0,0,868,
        1320,1,0,0,0,869,870,5,59,0,0,870,871,5,176,0,0,871,873,5,338,0,
        0,872,874,3,160,80,0,873,872,1,0,0,0,873,874,1,0,0,0,874,875,1,0,
        0,0,875,877,3,74,37,0,876,878,3,36,18,0,877,876,1,0,0,0,877,878,
        1,0,0,0,878,896,1,0,0,0,879,880,5,207,0,0,880,895,3,42,21,0,881,
        882,5,218,0,0,882,883,5,31,0,0,883,895,3,224,112,0,884,895,3,10,
        5,0,885,895,3,8,4,0,886,895,3,206,103,0,887,895,3,58,29,0,888,889,
        5,170,0,0,889,895,3,342,171,0,890,891,5,51,0,0,891,895,3,342,171,
        0,892,893,5,297,0,0,893,895,3,42,21,0,894,879,1,0,0,0,894,881,1,
        0,0,0,894,884,1,0,0,0,894,885,1,0,0,0,894,886,1,0,0,0,894,887,1,
        0,0,0,894,888,1,0,0,0,894,890,1,0,0,0,894,892,1,0,0,0,895,898,1,
        0,0,0,896,894,1,0,0,0,896,897,1,0,0,0,897,899,1,0,0,0,898,896,1,
        0,0,0,899,900,5,20,0,0,900,901,3,16,8,0,901,1320,1,0,0,0,902,904,
        5,96,0,0,903,905,5,298,0,0,904,903,1,0,0,0,904,905,1,0,0,0,905,906,
        1,0,0,0,906,908,5,125,0,0,907,909,3,162,81,0,908,907,1,0,0,0,908,
        909,1,0,0,0,909,910,1,0,0,0,910,1320,3,322,161,0,911,914,5,81,0,
        0,912,913,5,208,0,0,913,915,5,244,0,0,914,912,1,0,0,0,914,915,1,
        0,0,0,915,917,1,0,0,0,916,918,5,336,0,0,917,916,1,0,0,0,917,918,
        1,0,0,0,918,919,1,0,0,0,919,921,3,322,161,0,920,922,3,282,141,0,
        921,920,1,0,0,0,921,922,1,0,0,0,922,924,1,0,0,0,923,925,3,294,147,
        0,924,923,1,0,0,0,924,925,1,0,0,0,925,1320,1,0,0,0,926,927,5,96,
        0,0,927,928,5,298,0,0,928,930,5,336,0,0,929,931,3,162,81,0,930,929,
        1,0,0,0,930,931,1,0,0,0,931,935,1,0,0,0,932,936,3,72,36,0,933,936,
        3,76,38,0,934,936,3,322,161,0,935,932,1,0,0,0,935,933,1,0,0,0,935,
        934,1,0,0,0,936,1320,1,0,0,0,937,939,5,106,0,0,938,940,7,6,0,0,939,
        938,1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,941,1320,3,4,2,0,942,
        943,5,273,0,0,943,946,5,294,0,0,944,945,7,3,0,0,945,947,3,66,33,
        0,946,944,1,0,0,0,946,947,1,0,0,0,947,952,1,0,0,0,948,950,5,163,
        0,0,949,948,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,953,3,342,
        171,0,952,949,1,0,0,0,952,953,1,0,0,0,953,1320,1,0,0,0,954,955,5,
        273,0,0,955,956,5,293,0,0,956,959,5,108,0,0,957,958,7,3,0,0,958,
        960,3,66,33,0,959,957,1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,
        962,5,163,0,0,962,964,3,342,171,0,963,965,3,22,11,0,964,963,1,0,
        0,0,964,965,1,0,0,0,965,1320,1,0,0,0,966,967,5,273,0,0,967,968,5,
        297,0,0,968,973,3,72,36,0,969,970,5,2,0,0,970,971,3,46,23,0,971,
        972,5,3,0,0,972,974,1,0,0,0,973,969,1,0,0,0,973,974,1,0,0,0,974,
        1320,1,0,0,0,975,976,5,273,0,0,976,977,5,50,0,0,977,978,7,3,0,0,
        978,981,3,72,36,0,979,980,7,3,0,0,980,982,3,66,33,0,981,979,1,0,
        0,0,981,982,1,0,0,0,982,1320,1,0,0,0,983,984,5,273,0,0,984,987,5,
        339,0,0,985,986,7,3,0,0,986,988,3,66,33,0,987,985,1,0,0,0,987,988,
        1,0,0,0,988,993,1,0,0,0,989,991,5,163,0,0,990,989,1,0,0,0,990,991,
        1,0,0,0,991,992,1,0,0,0,992,994,3,342,171,0,993,990,1,0,0,0,993,
        994,1,0,0,0,994,1320,1,0,0,0,995,996,5,273,0,0,996,997,5,219,0,0,
        997,999,3,72,36,0,998,1000,3,22,11,0,999,998,1,0,0,0,999,1000,1,
        0,0,0,1000,1320,1,0,0,0,1001,1003,5,273,0,0,1002,1004,7,7,0,0,1003,
        1002,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,1008,5,126,
        0,0,1006,1007,7,3,0,0,1007,1009,3,66,33,0,1008,1006,1,0,0,0,1008,
        1009,1,0,0,0,1009,1017,1,0,0,0,1010,1012,5,163,0,0,1011,1010,1,0,
        0,0,1011,1012,1,0,0,0,1012,1015,1,0,0,0,1013,1016,3,210,105,0,1014,
        1016,3,342,171,0,1015,1013,1,0,0,0,1015,1014,1,0,0,0,1016,1018,1,
        0,0,0,1017,1011,1,0,0,0,1017,1018,1,0,0,0,1018,1320,1,0,0,0,1019,
        1020,5,273,0,0,1020,1021,5,59,0,0,1021,1022,5,293,0,0,1022,1025,
        3,72,36,0,1023,1024,5,20,0,0,1024,1026,5,266,0,0,1025,1023,1,0,0,
        0,1025,1026,1,0,0,0,1026,1320,1,0,0,0,1027,1028,5,273,0,0,1028,1029,
        5,62,0,0,1029,1320,3,26,13,0,1030,1031,5,273,0,0,1031,1036,5,38,
        0,0,1032,1034,5,163,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,
        1035,1,0,0,0,1035,1037,3,342,171,0,1036,1033,1,0,0,0,1036,1037,1,
        0,0,0,1037,1320,1,0,0,0,1038,1039,5,273,0,0,1039,1040,5,176,0,0,
        1040,1043,5,339,0,0,1041,1042,7,3,0,0,1042,1044,3,66,33,0,1043,1041,
        1,0,0,0,1043,1044,1,0,0,0,1044,1049,1,0,0,0,1045,1047,5,163,0,0,
        1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,1048,1050,
        3,342,171,0,1049,1046,1,0,0,0,1049,1050,1,0,0,0,1050,1320,1,0,0,
        0,1051,1052,5,273,0,0,1052,1053,5,59,0,0,1053,1054,5,176,0,0,1054,
        1055,5,338,0,0,1055,1058,3,76,38,0,1056,1057,5,20,0,0,1057,1059,
        5,266,0,0,1058,1056,1,0,0,0,1058,1059,1,0,0,0,1059,1320,1,0,0,0,
        1060,1061,7,8,0,0,1061,1063,5,125,0,0,1062,1064,5,108,0,0,1063,1062,
        1,0,0,0,1063,1064,1,0,0,0,1064,1065,1,0,0,0,1065,1320,3,28,14,0,
        1066,1067,7,8,0,0,1067,1069,5,72,0,0,1068,1070,5,108,0,0,1069,1068,
        1,0,0,0,1069,1070,1,0,0,0,1070,1071,1,0,0,0,1071,1320,3,66,33,0,
        1072,1074,7,8,0,0,1073,1075,5,293,0,0,1074,1073,1,0,0,0,1074,1075,
        1,0,0,0,1075,1077,1,0,0,0,1076,1078,7,9,0,0,1077,1076,1,0,0,0,1077,
        1078,1,0,0,0,1078,1079,1,0,0,0,1079,1081,3,72,36,0,1080,1082,3,22,
        11,0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,1082,1084,1,0,0,0,1083,
        1085,3,30,15,0,1084,1083,1,0,0,0,1084,1085,1,0,0,0,1085,1320,1,0,
        0,0,1086,1088,7,8,0,0,1087,1089,5,232,0,0,1088,1087,1,0,0,0,1088,
        1089,1,0,0,0,1089,1090,1,0,0,0,1090,1320,3,16,8,0,1091,1092,5,51,
        0,0,1092,1098,5,203,0,0,1093,1094,3,26,13,0,1094,1095,3,66,33,0,
        1095,1099,1,0,0,0,1096,1097,5,293,0,0,1097,1099,3,72,36,0,1098,1093,
        1,0,0,0,1098,1096,1,0,0,0,1099,1100,1,0,0,0,1100,1103,5,153,0,0,
        1101,1104,3,342,171,0,1102,1104,5,198,0,0,1103,1101,1,0,0,0,1103,
        1102,1,0,0,0,1104,1320,1,0,0,0,1105,1106,5,240,0,0,1106,1107,5,293,
        0,0,1107,1320,3,72,36,0,1108,1109,5,240,0,0,1109,1110,5,125,0,0,
        1110,1320,3,322,161,0,1111,1119,5,240,0,0,1112,1120,3,342,171,0,
        1113,1115,9,0,0,0,1114,1113,1,0,0,0,1115,1118,1,0,0,0,1116,1117,
        1,0,0,0,1116,1114,1,0,0,0,1117,1120,1,0,0,0,1118,1116,1,0,0,0,1119,
        1112,1,0,0,0,1119,1116,1,0,0,0,1120,1320,1,0,0,0,1121,1122,5,240,
        0,0,1122,1123,5,176,0,0,1123,1124,5,338,0,0,1124,1320,3,76,38,0,
        1125,1127,5,33,0,0,1126,1128,5,159,0,0,1127,1126,1,0,0,0,1127,1128,
        1,0,0,0,1128,1129,1,0,0,0,1129,1130,5,293,0,0,1130,1133,3,72,36,
        0,1131,1132,5,207,0,0,1132,1134,3,42,21,0,1133,1131,1,0,0,0,1133,
        1134,1,0,0,0,1134,1139,1,0,0,0,1135,1137,5,20,0,0,1136,1135,1,0,
        0,0,1136,1137,1,0,0,0,1137,1138,1,0,0,0,1138,1140,3,16,8,0,1139,
        1136,1,0,0,0,1139,1140,1,0,0,0,1140,1320,1,0,0,0,1141,1142,5,322,
        0,0,1142,1144,5,293,0,0,1143,1145,3,162,81,0,1144,1143,1,0,0,0,1144,
        1145,1,0,0,0,1145,1146,1,0,0,0,1146,1320,3,72,36,0,1147,1148,5,43,
        0,0,1148,1320,5,33,0,0,1149,1150,5,168,0,0,1150,1152,5,70,0,0,1151,
        1153,5,169,0,0,1152,1151,1,0,0,0,1152,1153,1,0,0,0,1153,1154,1,0,
        0,0,1154,1155,5,145,0,0,1155,1157,3,342,171,0,1156,1158,5,216,0,
        0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,0,0,1159,1160,
        5,152,0,0,1160,1161,5,293,0,0,1161,1163,3,72,36,0,1162,1164,3,22,
        11,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,1320,1,0,0,0,1165,
        1166,5,317,0,0,1166,1167,5,293,0,0,1167,1169,3,72,36,0,1168,1170,
        3,22,11,0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,1320,1,0,0,0,
        1171,1173,5,188,0,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,1173,1174,
        1,0,0,0,1174,1175,5,242,0,0,1175,1176,5,293,0,0,1176,1179,3,72,36,
        0,1177,1178,7,10,0,0,1178,1180,5,219,0,0,1179,1177,1,0,0,0,1179,
        1180,1,0,0,0,1180,1320,1,0,0,0,1181,1182,7,11,0,0,1182,1186,3,332,
        166,0,1183,1185,9,0,0,0,1184,1183,1,0,0,0,1185,1188,1,0,0,0,1186,
        1187,1,0,0,0,1186,1184,1,0,0,0,1187,1320,1,0,0,0,1188,1186,1,0,0,
        0,1189,1190,5,269,0,0,1190,1194,5,253,0,0,1191,1193,9,0,0,0,1192,
        1191,1,0,0,0,1193,1196,1,0,0,0,1194,1195,1,0,0,0,1194,1192,1,0,0,
        0,1195,1320,1,0,0,0,1196,1194,1,0,0,0,1197,1198,5,269,0,0,1198,1199,
        5,301,0,0,1199,1200,5,350,0,0,1200,1320,3,262,131,0,1201,1202,5,
        269,0,0,1202,1203,5,301,0,0,1203,1206,5,350,0,0,1204,1207,3,342,
        171,0,1205,1207,5,169,0,0,1206,1204,1,0,0,0,1206,1205,1,0,0,0,1207,
        1320,1,0,0,0,1208,1209,5,269,0,0,1209,1210,5,301,0,0,1210,1214,5,
        350,0,0,1211,1213,9,0,0,0,1212,1211,1,0,0,0,1213,1216,1,0,0,0,1214,
        1215,1,0,0,0,1214,1212,1,0,0,0,1215,1320,1,0,0,0,1216,1214,1,0,0,
        0,1217,1218,5,269,0,0,1218,1219,7,12,0,0,1219,1320,3,120,60,0,1220,
        1221,5,269,0,0,1221,1222,7,12,0,0,1222,1223,5,2,0,0,1223,1224,3,
        208,104,0,1224,1225,5,3,0,0,1225,1226,5,352,0,0,1226,1227,5,2,0,
        0,1227,1228,3,16,8,0,1228,1229,5,3,0,0,1229,1320,1,0,0,0,1230,1231,
        5,269,0,0,1231,1232,3,336,168,0,1232,1233,5,352,0,0,1233,1234,5,
        389,0,0,1234,1320,1,0,0,0,1235,1236,5,269,0,0,1236,1244,3,336,168,
        0,1237,1241,5,352,0,0,1238,1240,9,0,0,0,1239,1238,1,0,0,0,1240,1243,
        1,0,0,0,1241,1242,1,0,0,0,1241,1239,1,0,0,0,1242,1245,1,0,0,0,1243,
        1241,1,0,0,0,1244,1237,1,0,0,0,1244,1245,1,0,0,0,1245,1320,1,0,0,
        0,1246,1250,5,269,0,0,1247,1249,9,0,0,0,1248,1247,1,0,0,0,1249,1252,
        1,0,0,0,1250,1251,1,0,0,0,1250,1248,1,0,0,0,1251,1253,1,0,0,0,1252,
        1250,1,0,0,0,1253,1254,5,352,0,0,1254,1320,5,389,0,0,1255,1259,5,
        269,0,0,1256,1258,9,0,0,0,1257,1256,1,0,0,0,1258,1261,1,0,0,0,1259,
        1260,1,0,0,0,1259,1257,1,0,0,0,1260,1320,1,0,0,0,1261,1259,1,0,0,
        0,1262,1263,5,245,0,0,1263,1320,3,336,168,0,1264,1268,5,245,0,0,
        1265,1267,9,0,0,0,1266,1265,1,0,0,0,1267,1270,1,0,0,0,1268,1269,
        1,0,0,0,1268,1266,1,0,0,0,1269,1320,1,0,0,0,1270,1268,1,0,0,0,1271,
        1272,5,59,0,0,1272,1274,5,142,0,0,1273,1275,3,160,80,0,1274,1273,
        1,0,0,0,1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,1277,3,332,166,
        0,1277,1279,5,203,0,0,1278,1280,5,293,0,0,1279,1278,1,0,0,0,1279,
        1280,1,0,0,0,1280,1281,1,0,0,0,1281,1284,3,72,36,0,1282,1283,5,332,
        0,0,1283,1285,3,332,166,0,1284,1282,1,0,0,0,1284,1285,1,0,0,0,1285,
        1286,1,0,0,0,1286,1287,5,2,0,0,1287,1288,3,212,106,0,1288,1291,5,
        3,0,0,1289,1290,5,207,0,0,1290,1292,3,42,21,0,1291,1289,1,0,0,0,
        1291,1292,1,0,0,0,1292,1320,1,0,0,0,1293,1294,5,96,0,0,1294,1296,
        5,142,0,0,1295,1297,3,162,81,0,1296,1295,1,0,0,0,1296,1297,1,0,0,
        0,1297,1298,1,0,0,0,1298,1299,3,332,166,0,1299,1301,5,203,0,0,1300,
        1302,5,293,0,0,1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,
        0,0,1303,1304,3,72,36,0,1304,1320,1,0,0,0,1305,1306,5,205,0,0,1306,
        1308,3,72,36,0,1307,1309,3,124,62,0,1308,1307,1,0,0,0,1308,1309,
        1,0,0,0,1309,1310,1,0,0,0,1310,1311,3,312,156,0,1311,1320,1,0,0,
        0,1312,1316,3,6,3,0,1313,1315,9,0,0,0,1314,1313,1,0,0,0,1315,1318,
        1,0,0,0,1316,1317,1,0,0,0,1316,1314,1,0,0,0,1317,1320,1,0,0,0,1318,
        1316,1,0,0,0,1319,362,1,0,0,0,1319,364,1,0,0,0,1319,367,1,0,0,0,
        1319,372,1,0,0,0,1319,378,1,0,0,0,1319,396,1,0,0,0,1319,403,1,0,
        0,0,1319,410,1,0,0,0,1319,419,1,0,0,0,1319,431,1,0,0,0,1319,459,
        1,0,0,0,1319,482,1,0,0,0,1319,503,1,0,0,0,1319,520,1,0,0,0,1319,
        531,1,0,0,0,1319,538,1,0,0,0,1319,547,1,0,0,0,1319,556,1,0,0,0,1319,
        566,1,0,0,0,1319,578,1,0,0,0,1319,589,1,0,0,0,1319,600,1,0,0,0,1319,
        614,1,0,0,0,1319,625,1,0,0,0,1319,640,1,0,0,0,1319,652,1,0,0,0,1319,
        666,1,0,0,0,1319,676,1,0,0,0,1319,692,1,0,0,0,1319,700,1,0,0,0,1319,
        722,1,0,0,0,1319,732,1,0,0,0,1319,738,1,0,0,0,1319,745,1,0,0,0,1319,
        753,1,0,0,0,1319,762,1,0,0,0,1319,768,1,0,0,0,1319,775,1,0,0,0,1319,
        809,1,0,0,0,1319,831,1,0,0,0,1319,839,1,0,0,0,1319,869,1,0,0,0,1319,
        902,1,0,0,0,1319,911,1,0,0,0,1319,926,1,0,0,0,1319,937,1,0,0,0,1319,
        942,1,0,0,0,1319,954,1,0,0,0,1319,966,1,0,0,0,1319,975,1,0,0,0,1319,
        983,1,0,0,0,1319,995,1,0,0,0,1319,1001,1,0,0,0,1319,1019,1,0,0,0,
        1319,1027,1,0,0,0,1319,1030,1,0,0,0,1319,1038,1,0,0,0,1319,1051,
        1,0,0,0,1319,1060,1,0,0,0,1319,1066,1,0,0,0,1319,1072,1,0,0,0,1319,
        1086,1,0,0,0,1319,1091,1,0,0,0,1319,1105,1,0,0,0,1319,1108,1,0,0,
        0,1319,1111,1,0,0,0,1319,1121,1,0,0,0,1319,1125,1,0,0,0,1319,1141,
        1,0,0,0,1319,1147,1,0,0,0,1319,1149,1,0,0,0,1319,1165,1,0,0,0,1319,
        1172,1,0,0,0,1319,1181,1,0,0,0,1319,1189,1,0,0,0,1319,1197,1,0,0,
        0,1319,1201,1,0,0,0,1319,1208,1,0,0,0,1319,1217,1,0,0,0,1319,1220,
        1,0,0,0,1319,1230,1,0,0,0,1319,1235,1,0,0,0,1319,1246,1,0,0,0,1319,
        1255,1,0,0,0,1319,1262,1,0,0,0,1319,1264,1,0,0,0,1319,1271,1,0,0,
        0,1319,1293,1,0,0,0,1319,1305,1,0,0,0,1319,1312,1,0,0,0,1320,5,1,
        0,0,0,1321,1322,7,13,0,0,1322,1415,5,253,0,0,1323,1325,7,14,0,0,
        1324,1326,5,253,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1415,
        1,0,0,0,1327,1328,5,273,0,0,1328,1415,7,15,0,0,1329,1330,5,273,0,
        0,1330,1332,5,253,0,0,1331,1333,5,129,0,0,1332,1331,1,0,0,0,1332,
        1333,1,0,0,0,1333,1415,1,0,0,0,1334,1336,5,273,0,0,1335,1337,5,62,
        0,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1415,
        5,254,0,0,1339,1340,5,273,0,0,1340,1341,5,59,0,0,1341,1415,5,293,
        0,0,1342,1343,7,16,0,0,1343,1415,5,142,0,0,1344,1345,7,17,0,0,1345,
        1415,5,293,0,0,1346,1347,7,18,0,0,1347,1415,5,72,0,0,1348,1349,7,
        13,0,0,1349,1350,5,298,0,0,1350,1415,5,175,0,0,1351,1352,5,11,0,
        0,1352,1353,5,293,0,0,1353,1354,3,72,36,0,1354,1355,5,197,0,0,1355,
        1356,7,19,0,0,1356,1415,1,0,0,0,1357,1358,5,11,0,0,1358,1359,5,293,
        0,0,1359,1360,3,72,36,0,1360,1361,7,20,0,0,1361,1362,5,31,0,0,1362,
        1415,1,0,0,0,1363,1364,5,11,0,0,1364,1365,5,293,0,0,1365,1366,3,
        72,36,0,1366,1367,5,275,0,0,1367,1368,5,31,0,0,1368,1415,1,0,0,0,
        1369,1370,5,11,0,0,1370,1371,5,293,0,0,1371,1372,3,72,36,0,1372,
        1373,5,197,0,0,1373,1374,5,283,0,0,1374,1375,5,20,0,0,1375,1376,
        5,89,0,0,1376,1415,1,0,0,0,1377,1378,5,11,0,0,1378,1379,5,293,0,
        0,1379,1380,3,72,36,0,1380,1381,5,269,0,0,1381,1382,5,275,0,0,1382,
        1383,5,170,0,0,1383,1415,1,0,0,0,1384,1385,5,11,0,0,1385,1386,5,
        293,0,0,1386,1387,3,72,36,0,1387,1388,7,21,0,0,1388,1389,5,217,0,
        0,1389,1415,1,0,0,0,1390,1391,5,11,0,0,1391,1392,5,293,0,0,1392,
        1393,3,72,36,0,1393,1394,5,310,0,0,1394,1415,1,0,0,0,1395,1396,5,
        11,0,0,1396,1397,5,293,0,0,1397,1399,3,72,36,0,1398,1400,3,22,11,
        0,1399,1398,1,0,0,0,1399,1400,1,0,0,0,1400,1407,1,0,0,0,1401,1408,
        5,53,0,0,1402,1408,5,56,0,0,1403,1404,5,269,0,0,1404,1408,5,115,
        0,0,1405,1406,5,244,0,0,1406,1408,5,50,0,0,1407,1401,1,0,0,0,1407,
        1402,1,0,0,0,1407,1403,1,0,0,0,1407,1405,1,0,0,0,1408,1415,1,0,0,
        0,1409,1410,5,281,0,0,1410,1415,5,312,0,0,1411,1415,5,52,0,0,1412,
        1415,5,255,0,0,1413,1415,5,88,0,0,1414,1321,1,0,0,0,1414,1323,1,
        0,0,0,1414,1327,1,0,0,0,1414,1329,1,0,0,0,1414,1334,1,0,0,0,1414,
        1339,1,0,0,0,1414,1342,1,0,0,0,1414,1344,1,0,0,0,1414,1346,1,0,0,
        0,1414,1348,1,0,0,0,1414,1351,1,0,0,0,1414,1357,1,0,0,0,1414,1363,
        1,0,0,0,1414,1369,1,0,0,0,1414,1377,1,0,0,0,1414,1384,1,0,0,0,1414,
        1390,1,0,0,0,1414,1395,1,0,0,0,1414,1409,1,0,0,0,1414,1411,1,0,0,
        0,1414,1412,1,0,0,0,1414,1413,1,0,0,0,1415,7,1,0,0,0,1416,1417,5,
        45,0,0,1417,1418,5,31,0,0,1418,1422,3,180,90,0,1419,1420,5,279,0,
        0,1420,1421,5,31,0,0,1421,1423,3,184,92,0,1422,1419,1,0,0,0,1422,
        1423,1,0,0,0,1423,1424,1,0,0,0,1424,1425,5,152,0,0,1425,1426,5,382,
        0,0,1426,1427,5,30,0,0,1427,9,1,0,0,0,1428,1429,5,275,0,0,1429,1430,
        5,31,0,0,1430,1431,3,180,90,0,1431,1434,5,203,0,0,1432,1435,3,54,
        27,0,1433,1435,3,56,28,0,1434,1432,1,0,0,0,1434,1433,1,0,0,0,1435,
        1439,1,0,0,0,1436,1437,5,283,0,0,1437,1438,5,20,0,0,1438,1440,5,
        89,0,0,1439,1436,1,0,0,0,1439,1440,1,0,0,0,1440,11,1,0,0,0,1441,
        1442,5,170,0,0,1442,1443,3,342,171,0,1443,13,1,0,0,0,1444,1445,5,
        51,0,0,1445,1446,3,342,171,0,1446,15,1,0,0,0,1447,1449,3,32,16,0,
        1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1450,1,0,0,0,1450,1451,
        3,96,48,0,1451,1452,3,88,44,0,1452,17,1,0,0,0,1453,1454,5,147,0,
        0,1454,1456,5,216,0,0,1455,1457,5,293,0,0,1456,1455,1,0,0,0,1456,
        1457,1,0,0,0,1457,1458,1,0,0,0,1458,1463,3,72,36,0,1459,1461,3,22,
        11,0,1460,1462,3,160,80,0,1461,1460,1,0,0,0,1461,1462,1,0,0,0,1462,
        1464,1,0,0,0,1463,1459,1,0,0,0,1463,1464,1,0,0,0,1464,1471,1,0,0,
        0,1465,1466,5,31,0,0,1466,1472,5,189,0,0,1467,1468,5,2,0,0,1468,
        1469,3,82,41,0,1469,1470,5,3,0,0,1470,1472,1,0,0,0,1471,1465,1,0,
        0,0,1471,1467,1,0,0,0,1471,1472,1,0,0,0,1472,1530,1,0,0,0,1473,1474,
        5,147,0,0,1474,1476,5,152,0,0,1475,1477,5,293,0,0,1476,1475,1,0,
        0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1480,3,72,36,0,1479,
        1481,3,22,11,0,1480,1479,1,0,0,0,1480,1481,1,0,0,0,1481,1483,1,0,
        0,0,1482,1484,3,160,80,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,
        1491,1,0,0,0,1485,1486,5,31,0,0,1486,1492,5,189,0,0,1487,1488,5,
        2,0,0,1488,1489,3,82,41,0,1489,1490,5,3,0,0,1490,1492,1,0,0,0,1491,
        1485,1,0,0,0,1491,1487,1,0,0,0,1491,1492,1,0,0,0,1492,1530,1,0,0,
        0,1493,1494,5,147,0,0,1494,1496,5,152,0,0,1495,1497,5,293,0,0,1496,
        1495,1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,1498,1499,3,72,
        36,0,1499,1500,5,244,0,0,1500,1501,3,124,62,0,1501,1530,1,0,0,0,
        1502,1503,5,147,0,0,1503,1505,5,216,0,0,1504,1506,5,169,0,0,1505,
        1504,1,0,0,0,1505,1506,1,0,0,0,1506,1507,1,0,0,0,1507,1508,5,90,
        0,0,1508,1510,3,342,171,0,1509,1511,3,206,103,0,1510,1509,1,0,0,
        0,1510,1511,1,0,0,0,1511,1513,1,0,0,0,1512,1514,3,58,29,0,1513,1512,
        1,0,0,0,1513,1514,1,0,0,0,1514,1530,1,0,0,0,1515,1516,5,147,0,0,
        1516,1518,5,216,0,0,1517,1519,5,169,0,0,1518,1517,1,0,0,0,1518,1519,
        1,0,0,0,1519,1520,1,0,0,0,1520,1522,5,90,0,0,1521,1523,3,342,171,
        0,1522,1521,1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1527,
        3,36,18,0,1525,1526,5,207,0,0,1526,1528,3,42,21,0,1527,1525,1,0,
        0,0,1527,1528,1,0,0,0,1528,1530,1,0,0,0,1529,1453,1,0,0,0,1529,1473,
        1,0,0,0,1529,1493,1,0,0,0,1529,1502,1,0,0,0,1529,1515,1,0,0,0,1530,
        19,1,0,0,0,1531,1534,3,22,11,0,1532,1533,5,170,0,0,1533,1535,3,342,
        171,0,1534,1532,1,0,0,0,1534,1535,1,0,0,0,1535,21,1,0,0,0,1536,1537,
        5,217,0,0,1537,1538,5,2,0,0,1538,1543,3,24,12,0,1539,1540,5,4,0,
        0,1540,1542,3,24,12,0,1541,1539,1,0,0,0,1542,1545,1,0,0,0,1543,1541,
        1,0,0,0,1543,1544,1,0,0,0,1544,1546,1,0,0,0,1545,1543,1,0,0,0,1546,
        1547,5,3,0,0,1547,23,1,0,0,0,1548,1551,3,332,166,0,1549,1550,5,352,
        0,0,1550,1552,3,252,126,0,1551,1549,1,0,0,0,1551,1552,1,0,0,0,1552,
        1558,1,0,0,0,1553,1554,3,332,166,0,1554,1555,5,352,0,0,1555,1556,
        5,82,0,0,1556,1558,1,0,0,0,1557,1548,1,0,0,0,1557,1553,1,0,0,0,1558,
        25,1,0,0,0,1559,1560,7,22,0,0,1560,27,1,0,0,0,1561,1567,3,86,43,
        0,1562,1567,3,342,171,0,1563,1567,3,254,127,0,1564,1567,3,256,128,
        0,1565,1567,3,258,129,0,1566,1561,1,0,0,0,1566,1562,1,0,0,0,1566,
        1563,1,0,0,0,1566,1564,1,0,0,0,1566,1565,1,0,0,0,1567,29,1,0,0,0,
        1568,1573,3,332,166,0,1569,1570,5,5,0,0,1570,1572,3,332,166,0,1571,
        1569,1,0,0,0,1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,
        0,1574,31,1,0,0,0,1575,1573,1,0,0,0,1576,1577,5,346,0,0,1577,1582,
        3,34,17,0,1578,1579,5,4,0,0,1579,1581,3,34,17,0,1580,1578,1,0,0,
        0,1581,1584,1,0,0,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,33,
        1,0,0,0,1584,1582,1,0,0,0,1585,1587,3,328,164,0,1586,1588,3,180,
        90,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1590,1,0,0,0,1589,
        1591,5,20,0,0,1590,1589,1,0,0,0,1590,1591,1,0,0,0,1591,1592,1,0,
        0,0,1592,1593,5,2,0,0,1593,1594,3,16,8,0,1594,1595,5,3,0,0,1595,
        35,1,0,0,0,1596,1597,5,332,0,0,1597,1598,3,210,105,0,1598,37,1,0,
        0,0,1599,1600,5,207,0,0,1600,1616,3,50,25,0,1601,1602,5,218,0,0,
        1602,1603,5,31,0,0,1603,1616,3,224,112,0,1604,1616,3,10,5,0,1605,
        1616,3,8,4,0,1606,1616,3,206,103,0,1607,1616,3,58,29,0,1608,1609,
        5,170,0,0,1609,1616,3,342,171,0,1610,1611,5,51,0,0,1611,1616,3,342,
        171,0,1612,1613,5,297,0,0,1613,1616,3,42,21,0,1614,1616,3,40,20,
        0,1615,1599,1,0,0,0,1615,1601,1,0,0,0,1615,1604,1,0,0,0,1615,1605,
        1,0,0,0,1615,1606,1,0,0,0,1615,1607,1,0,0,0,1615,1608,1,0,0,0,1615,
        1610,1,0,0,0,1615,1612,1,0,0,0,1615,1614,1,0,0,0,1616,1619,1,0,0,
        0,1617,1615,1,0,0,0,1617,1618,1,0,0,0,1618,39,1,0,0,0,1619,1617,
        1,0,0,0,1620,1621,5,162,0,0,1621,1622,5,382,0,0,1622,41,1,0,0,0,
        1623,1624,5,2,0,0,1624,1629,3,44,22,0,1625,1626,5,4,0,0,1626,1628,
        3,44,22,0,1627,1625,1,0,0,0,1628,1631,1,0,0,0,1629,1627,1,0,0,0,
        1629,1630,1,0,0,0,1630,1632,1,0,0,0,1631,1629,1,0,0,0,1632,1633,
        5,3,0,0,1633,43,1,0,0,0,1634,1639,3,46,23,0,1635,1637,5,352,0,0,
        1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1638,1,0,0,0,1638,1640,
        3,48,24,0,1639,1636,1,0,0,0,1639,1640,1,0,0,0,1640,45,1,0,0,0,1641,
        1646,3,332,166,0,1642,1643,5,5,0,0,1643,1645,3,332,166,0,1644,1642,
        1,0,0,0,1645,1648,1,0,0,0,1646,1644,1,0,0,0,1646,1647,1,0,0,0,1647,
        1651,1,0,0,0,1648,1646,1,0,0,0,1649,1651,3,342,171,0,1650,1641,1,
        0,0,0,1650,1649,1,0,0,0,1651,47,1,0,0,0,1652,1657,5,382,0,0,1653,
        1657,5,384,0,0,1654,1657,3,260,130,0,1655,1657,3,342,171,0,1656,
        1652,1,0,0,0,1656,1653,1,0,0,0,1656,1654,1,0,0,0,1656,1655,1,0,0,
        0,1657,49,1,0,0,0,1658,1659,5,2,0,0,1659,1664,3,52,26,0,1660,1661,
        5,4,0,0,1661,1663,3,52,26,0,1662,1660,1,0,0,0,1663,1666,1,0,0,0,
        1664,1662,1,0,0,0,1664,1665,1,0,0,0,1665,1667,1,0,0,0,1666,1664,
        1,0,0,0,1667,1668,5,3,0,0,1668,51,1,0,0,0,1669,1674,3,46,23,0,1670,
        1672,5,352,0,0,1671,1670,1,0,0,0,1671,1672,1,0,0,0,1672,1673,1,0,
        0,0,1673,1675,3,232,116,0,1674,1671,1,0,0,0,1674,1675,1,0,0,0,1675,
        53,1,0,0,0,1676,1677,5,2,0,0,1677,1682,3,252,126,0,1678,1679,5,4,
        0,0,1679,1681,3,252,126,0,1680,1678,1,0,0,0,1681,1684,1,0,0,0,1682,
        1680,1,0,0,0,1682,1683,1,0,0,0,1683,1685,1,0,0,0,1684,1682,1,0,0,
        0,1685,1686,5,3,0,0,1686,55,1,0,0,0,1687,1688,5,2,0,0,1688,1693,
        3,54,27,0,1689,1690,5,4,0,0,1690,1692,3,54,27,0,1691,1689,1,0,0,
        0,1692,1695,1,0,0,0,1693,1691,1,0,0,0,1693,1694,1,0,0,0,1694,1696,
        1,0,0,0,1695,1693,1,0,0,0,1696,1697,5,3,0,0,1697,57,1,0,0,0,1698,
        1699,5,283,0,0,1699,1700,5,20,0,0,1700,1705,3,60,30,0,1701,1702,
        5,283,0,0,1702,1703,5,31,0,0,1703,1705,3,62,31,0,1704,1698,1,0,0,
        0,1704,1701,1,0,0,0,1705,59,1,0,0,0,1706,1707,5,146,0,0,1707,1708,
        3,342,171,0,1708,1709,5,212,0,0,1709,1710,3,342,171,0,1710,1713,
        1,0,0,0,1711,1713,3,332,166,0,1712,1706,1,0,0,0,1712,1711,1,0,0,
        0,1713,61,1,0,0,0,1714,1718,3,342,171,0,1715,1716,5,346,0,0,1716,
        1717,5,267,0,0,1717,1719,3,42,21,0,1718,1715,1,0,0,0,1718,1719,1,
        0,0,0,1719,63,1,0,0,0,1720,1721,3,18,9,0,1721,1722,3,16,8,0,1722,
        1779,1,0,0,0,1723,1727,3,132,66,0,1724,1725,3,18,9,0,1725,1726,3,
        102,51,0,1726,1728,1,0,0,0,1727,1724,1,0,0,0,1728,1729,1,0,0,0,1729,
        1727,1,0,0,0,1729,1730,1,0,0,0,1730,1779,1,0,0,0,1731,1732,5,84,
        0,0,1732,1733,5,123,0,0,1733,1734,3,72,36,0,1734,1736,3,204,102,
        0,1735,1737,3,124,62,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,
        1779,1,0,0,0,1738,1739,5,329,0,0,1739,1740,3,72,36,0,1740,1741,3,
        204,102,0,1741,1743,3,110,55,0,1742,1744,3,124,62,0,1743,1742,1,
        0,0,0,1743,1744,1,0,0,0,1744,1779,1,0,0,0,1745,1746,5,179,0,0,1746,
        1747,5,152,0,0,1747,1748,3,72,36,0,1748,1749,3,204,102,0,1749,1755,
        5,332,0,0,1750,1756,3,86,43,0,1751,1752,5,2,0,0,1752,1753,3,16,8,
        0,1753,1754,5,3,0,0,1754,1756,1,0,0,0,1755,1750,1,0,0,0,1755,1751,
        1,0,0,0,1756,1757,1,0,0,0,1757,1758,3,204,102,0,1758,1759,5,203,
        0,0,1759,1763,3,240,120,0,1760,1762,3,112,56,0,1761,1760,1,0,0,0,
        1762,1765,1,0,0,0,1763,1761,1,0,0,0,1763,1764,1,0,0,0,1764,1769,
        1,0,0,0,1765,1763,1,0,0,0,1766,1768,3,114,57,0,1767,1766,1,0,0,0,
        1768,1771,1,0,0,0,1769,1767,1,0,0,0,1769,1770,1,0,0,0,1770,1775,
        1,0,0,0,1771,1769,1,0,0,0,1772,1774,3,116,58,0,1773,1772,1,0,0,0,
        1774,1777,1,0,0,0,1775,1773,1,0,0,0,1775,1776,1,0,0,0,1776,1779,
        1,0,0,0,1777,1775,1,0,0,0,1778,1720,1,0,0,0,1778,1723,1,0,0,0,1778,
        1731,1,0,0,0,1778,1738,1,0,0,0,1778,1745,1,0,0,0,1779,65,1,0,0,0,
        1780,1781,3,86,43,0,1781,67,1,0,0,0,1782,1783,3,86,43,0,1783,69,
        1,0,0,0,1784,1785,3,216,108,0,1785,71,1,0,0,0,1786,1787,3,216,108,
        0,1787,73,1,0,0,0,1788,1789,3,218,109,0,1789,75,1,0,0,0,1790,1791,
        3,218,109,0,1791,77,1,0,0,0,1792,1795,3,210,105,0,1793,1795,4,39,
        0,0,1794,1792,1,0,0,0,1794,1793,1,0,0,0,1795,79,1,0,0,0,1796,1797,
        3,210,105,0,1797,81,1,0,0,0,1798,1803,3,78,39,0,1799,1800,5,4,0,
        0,1800,1802,3,78,39,0,1801,1799,1,0,0,0,1802,1805,1,0,0,0,1803,1801,
        1,0,0,0,1803,1804,1,0,0,0,1804,83,1,0,0,0,1805,1803,1,0,0,0,1806,
        1807,3,328,164,0,1807,85,1,0,0,0,1808,1809,5,136,0,0,1809,1810,5,
        2,0,0,1810,1811,3,232,116,0,1811,1812,5,3,0,0,1812,1815,1,0,0,0,
        1813,1815,3,210,105,0,1814,1808,1,0,0,0,1814,1813,1,0,0,0,1815,87,
        1,0,0,0,1816,1817,5,209,0,0,1817,1818,5,31,0,0,1818,1820,3,92,46,
        0,1819,1816,1,0,0,0,1819,1820,1,0,0,0,1820,1824,1,0,0,0,1821,1822,
        5,44,0,0,1822,1823,5,31,0,0,1823,1825,3,94,47,0,1824,1821,1,0,0,
        0,1824,1825,1,0,0,0,1825,1829,1,0,0,0,1826,1827,5,93,0,0,1827,1828,
        5,31,0,0,1828,1830,3,94,47,0,1829,1826,1,0,0,0,1829,1830,1,0,0,0,
        1830,1834,1,0,0,0,1831,1832,5,278,0,0,1832,1833,5,31,0,0,1833,1835,
        3,92,46,0,1834,1831,1,0,0,0,1834,1835,1,0,0,0,1835,1837,1,0,0,0,
        1836,1838,3,310,155,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1840,
        1,0,0,0,1839,1841,3,90,45,0,1840,1839,1,0,0,0,1840,1841,1,0,0,0,
        1841,1844,1,0,0,0,1842,1843,5,202,0,0,1843,1845,3,232,116,0,1844,
        1842,1,0,0,0,1844,1845,1,0,0,0,1845,89,1,0,0,0,1846,1849,5,165,0,
        0,1847,1850,5,10,0,0,1848,1850,3,232,116,0,1849,1847,1,0,0,0,1849,
        1848,1,0,0,0,1850,91,1,0,0,0,1851,1856,3,100,50,0,1852,1853,5,4,
        0,0,1853,1855,3,100,50,0,1854,1852,1,0,0,0,1855,1858,1,0,0,0,1856,
        1854,1,0,0,0,1856,1857,1,0,0,0,1857,93,1,0,0,0,1858,1856,1,0,0,0,
        1859,1864,3,232,116,0,1860,1861,5,4,0,0,1861,1863,3,232,116,0,1862,
        1860,1,0,0,0,1863,1866,1,0,0,0,1864,1862,1,0,0,0,1864,1865,1,0,0,
        0,1865,95,1,0,0,0,1866,1864,1,0,0,0,1867,1868,6,48,-1,0,1868,1869,
        3,98,49,0,1869,1890,1,0,0,0,1870,1871,10,3,0,0,1871,1873,7,23,0,
        0,1872,1874,3,166,83,0,1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,
        1875,1,0,0,0,1875,1889,3,96,48,4,1876,1877,10,2,0,0,1877,1879,5,
        148,0,0,1878,1880,3,166,83,0,1879,1878,1,0,0,0,1879,1880,1,0,0,0,
        1880,1881,1,0,0,0,1881,1889,3,96,48,3,1882,1883,10,1,0,0,1883,1885,
        7,24,0,0,1884,1886,3,166,83,0,1885,1884,1,0,0,0,1885,1886,1,0,0,
        0,1886,1887,1,0,0,0,1887,1889,3,96,48,2,1888,1870,1,0,0,0,1888,1876,
        1,0,0,0,1888,1882,1,0,0,0,1889,1892,1,0,0,0,1890,1888,1,0,0,0,1890,
        1891,1,0,0,0,1891,97,1,0,0,0,1892,1890,1,0,0,0,1893,1918,3,104,52,
        0,1894,1896,3,132,66,0,1895,1897,3,102,51,0,1896,1895,1,0,0,0,1897,
        1898,1,0,0,0,1898,1896,1,0,0,0,1898,1899,1,0,0,0,1899,1918,1,0,0,
        0,1900,1901,5,293,0,0,1901,1918,3,72,36,0,1902,1903,5,333,0,0,1903,
        1908,3,232,116,0,1904,1905,5,4,0,0,1905,1907,3,232,116,0,1906,1904,
        1,0,0,0,1907,1910,1,0,0,0,1908,1906,1,0,0,0,1908,1909,1,0,0,0,1909,
        1911,1,0,0,0,1910,1908,1,0,0,0,1911,1912,3,204,102,0,1912,1918,1,
        0,0,0,1913,1914,5,2,0,0,1914,1915,3,16,8,0,1915,1916,5,3,0,0,1916,
        1918,1,0,0,0,1917,1893,1,0,0,0,1917,1894,1,0,0,0,1917,1900,1,0,0,
        0,1917,1902,1,0,0,0,1917,1913,1,0,0,0,1918,99,1,0,0,0,1919,1922,
        3,78,39,0,1920,1922,3,232,116,0,1921,1919,1,0,0,0,1921,1920,1,0,
        0,0,1922,1924,1,0,0,0,1923,1925,7,25,0,0,1924,1923,1,0,0,0,1924,
        1925,1,0,0,0,1925,1928,1,0,0,0,1926,1927,5,199,0,0,1927,1929,7,26,
        0,0,1928,1926,1,0,0,0,1928,1929,1,0,0,0,1929,101,1,0,0,0,1930,1932,
        3,106,53,0,1931,1933,3,124,62,0,1932,1931,1,0,0,0,1932,1933,1,0,
        0,0,1933,1934,1,0,0,0,1934,1935,3,88,44,0,1935,1958,1,0,0,0,1936,
        1940,3,108,54,0,1937,1939,3,164,82,0,1938,1937,1,0,0,0,1939,1942,
        1,0,0,0,1940,1938,1,0,0,0,1940,1941,1,0,0,0,1941,1944,1,0,0,0,1942,
        1940,1,0,0,0,1943,1945,3,124,62,0,1944,1943,1,0,0,0,1944,1945,1,
        0,0,0,1945,1947,1,0,0,0,1946,1948,3,136,68,0,1947,1946,1,0,0,0,1947,
        1948,1,0,0,0,1948,1950,1,0,0,0,1949,1951,3,126,63,0,1950,1949,1,
        0,0,0,1950,1951,1,0,0,0,1951,1953,1,0,0,0,1952,1954,3,310,155,0,
        1953,1952,1,0,0,0,1953,1954,1,0,0,0,1954,1955,1,0,0,0,1955,1956,
        3,88,44,0,1956,1958,1,0,0,0,1957,1930,1,0,0,0,1957,1936,1,0,0,0,
        1958,103,1,0,0,0,1959,1961,3,106,53,0,1960,1962,3,132,66,0,1961,
        1960,1,0,0,0,1961,1962,1,0,0,0,1962,1966,1,0,0,0,1963,1965,3,164,
        82,0,1964,1963,1,0,0,0,1965,1968,1,0,0,0,1966,1964,1,0,0,0,1966,
        1967,1,0,0,0,1967,1970,1,0,0,0,1968,1966,1,0,0,0,1969,1971,3,124,
        62,0,1970,1969,1,0,0,0,1970,1971,1,0,0,0,1971,1973,1,0,0,0,1972,
        1974,3,136,68,0,1973,1972,1,0,0,0,1973,1974,1,0,0,0,1974,1976,1,
        0,0,0,1975,1977,3,126,63,0,1976,1975,1,0,0,0,1976,1977,1,0,0,0,1977,
        1979,1,0,0,0,1978,1980,3,310,155,0,1979,1978,1,0,0,0,1979,1980,1,
        0,0,0,1980,2004,1,0,0,0,1981,1983,3,108,54,0,1982,1984,3,132,66,
        0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1988,1,0,0,0,1985,1987,
        3,164,82,0,1986,1985,1,0,0,0,1987,1990,1,0,0,0,1988,1986,1,0,0,0,
        1988,1989,1,0,0,0,1989,1992,1,0,0,0,1990,1988,1,0,0,0,1991,1993,
        3,124,62,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,1995,1,0,0,0,
        1994,1996,3,136,68,0,1995,1994,1,0,0,0,1995,1996,1,0,0,0,1996,1998,
        1,0,0,0,1997,1999,3,126,63,0,1998,1997,1,0,0,0,1998,1999,1,0,0,0,
        1999,2001,1,0,0,0,2000,2002,3,310,155,0,2001,2000,1,0,0,0,2001,2002,
        1,0,0,0,2002,2004,1,0,0,0,2003,1959,1,0,0,0,2003,1981,1,0,0,0,2004,
        105,1,0,0,0,2005,2006,5,263,0,0,2006,2007,5,314,0,0,2007,2009,5,
        2,0,0,2008,2010,3,166,83,0,2009,2008,1,0,0,0,2009,2010,1,0,0,0,2010,
        2011,1,0,0,0,2011,2012,3,238,119,0,2012,2013,5,3,0,0,2013,2025,1,
        0,0,0,2014,2016,5,177,0,0,2015,2017,3,166,83,0,2016,2015,1,0,0,0,
        2016,2017,1,0,0,0,2017,2018,1,0,0,0,2018,2025,3,238,119,0,2019,2021,
        5,238,0,0,2020,2022,3,166,83,0,2021,2020,1,0,0,0,2021,2022,1,0,0,
        0,2022,2023,1,0,0,0,2023,2025,3,238,119,0,2024,2005,1,0,0,0,2024,
        2014,1,0,0,0,2024,2019,1,0,0,0,2025,2027,1,0,0,0,2026,2028,3,206,
        103,0,2027,2026,1,0,0,0,2027,2028,1,0,0,0,2028,2031,1,0,0,0,2029,
        2030,5,236,0,0,2030,2032,3,342,171,0,2031,2029,1,0,0,0,2031,2032,
        1,0,0,0,2032,2033,1,0,0,0,2033,2034,5,332,0,0,2034,2047,3,342,171,
        0,2035,2045,5,20,0,0,2036,2046,3,182,91,0,2037,2046,3,296,148,0,
        2038,2041,5,2,0,0,2039,2042,3,182,91,0,2040,2042,3,296,148,0,2041,
        2039,1,0,0,0,2041,2040,1,0,0,0,2042,2043,1,0,0,0,2043,2044,5,3,0,
        0,2044,2046,1,0,0,0,2045,2036,1,0,0,0,2045,2037,1,0,0,0,2045,2038,
        1,0,0,0,2046,2048,1,0,0,0,2047,2035,1,0,0,0,2047,2048,1,0,0,0,2048,
        2050,1,0,0,0,2049,2051,3,206,103,0,2050,2049,1,0,0,0,2050,2051,1,
        0,0,0,2051,2054,1,0,0,0,2052,2053,5,235,0,0,2053,2055,3,342,171,
        0,2054,2052,1,0,0,0,2054,2055,1,0,0,0,2055,107,1,0,0,0,2056,2060,
        5,263,0,0,2057,2059,3,128,64,0,2058,2057,1,0,0,0,2059,2062,1,0,0,
        0,2060,2058,1,0,0,0,2060,2061,1,0,0,0,2061,2064,1,0,0,0,2062,2060,
        1,0,0,0,2063,2065,3,166,83,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,
        2065,2066,1,0,0,0,2066,2067,3,222,111,0,2067,109,1,0,0,0,2068,2069,
        5,269,0,0,2069,2070,3,120,60,0,2070,111,1,0,0,0,2071,2072,5,343,
        0,0,2072,2075,5,178,0,0,2073,2074,5,14,0,0,2074,2076,3,240,120,0,
        2075,2073,1,0,0,0,2075,2076,1,0,0,0,2076,2077,1,0,0,0,2077,2085,
        5,300,0,0,2078,2086,5,84,0,0,2079,2080,5,329,0,0,2080,2083,5,269,
        0,0,2081,2084,5,363,0,0,2082,2084,3,120,60,0,2083,2081,1,0,0,0,2083,
        2082,1,0,0,0,2084,2086,1,0,0,0,2085,2078,1,0,0,0,2085,2079,1,0,0,
        0,2086,113,1,0,0,0,2087,2088,5,343,0,0,2088,2089,5,197,0,0,2089,
        2092,5,178,0,0,2090,2091,5,31,0,0,2091,2093,5,296,0,0,2092,2090,
        1,0,0,0,2092,2093,1,0,0,0,2093,2096,1,0,0,0,2094,2095,5,14,0,0,2095,
        2097,3,240,120,0,2096,2094,1,0,0,0,2096,2097,1,0,0,0,2097,2098,1,
        0,0,0,2098,2099,5,300,0,0,2099,2100,3,118,59,0,2100,115,1,0,0,0,
        2101,2102,5,343,0,0,2102,2103,5,197,0,0,2103,2104,5,178,0,0,2104,
        2105,5,31,0,0,2105,2108,5,280,0,0,2106,2107,5,14,0,0,2107,2109,3,
        240,120,0,2108,2106,1,0,0,0,2108,2109,1,0,0,0,2109,2110,1,0,0,0,
        2110,2115,5,300,0,0,2111,2116,5,84,0,0,2112,2113,5,329,0,0,2113,
        2114,5,269,0,0,2114,2116,3,120,60,0,2115,2111,1,0,0,0,2115,2112,
        1,0,0,0,2116,117,1,0,0,0,2117,2118,5,147,0,0,2118,2136,5,363,0,0,
        2119,2120,5,147,0,0,2120,2121,5,2,0,0,2121,2122,3,208,104,0,2122,
        2123,5,3,0,0,2123,2124,5,333,0,0,2124,2125,5,2,0,0,2125,2130,3,232,
        116,0,2126,2127,5,4,0,0,2127,2129,3,232,116,0,2128,2126,1,0,0,0,
        2129,2132,1,0,0,0,2130,2128,1,0,0,0,2130,2131,1,0,0,0,2131,2133,
        1,0,0,0,2132,2130,1,0,0,0,2133,2134,5,3,0,0,2134,2136,1,0,0,0,2135,
        2117,1,0,0,0,2135,2119,1,0,0,0,2136,119,1,0,0,0,2137,2142,3,122,
        61,0,2138,2139,5,4,0,0,2139,2141,3,122,61,0,2140,2138,1,0,0,0,2141,
        2144,1,0,0,0,2142,2140,1,0,0,0,2142,2143,1,0,0,0,2143,121,1,0,0,
        0,2144,2142,1,0,0,0,2145,2146,3,210,105,0,2146,2147,5,352,0,0,2147,
        2148,3,232,116,0,2148,123,1,0,0,0,2149,2150,5,344,0,0,2150,2151,
        3,240,120,0,2151,125,1,0,0,0,2152,2153,5,132,0,0,2153,2154,3,240,
        120,0,2154,127,1,0,0,0,2155,2156,5,374,0,0,2156,2163,3,130,65,0,
        2157,2159,5,4,0,0,2158,2157,1,0,0,0,2158,2159,1,0,0,0,2159,2160,
        1,0,0,0,2160,2162,3,130,65,0,2161,2158,1,0,0,0,2162,2165,1,0,0,0,
        2163,2161,1,0,0,0,2163,2164,1,0,0,0,2164,2166,1,0,0,0,2165,2163,
        1,0,0,0,2166,2167,5,375,0,0,2167,129,1,0,0,0,2168,2182,3,332,166,
        0,2169,2170,3,332,166,0,2170,2171,5,2,0,0,2171,2176,3,248,124,0,
        2172,2173,5,4,0,0,2173,2175,3,248,124,0,2174,2172,1,0,0,0,2175,2178,
        1,0,0,0,2176,2174,1,0,0,0,2176,2177,1,0,0,0,2177,2179,1,0,0,0,2178,
        2176,1,0,0,0,2179,2180,5,3,0,0,2180,2182,1,0,0,0,2181,2168,1,0,0,
        0,2181,2169,1,0,0,0,2182,131,1,0,0,0,2183,2184,5,123,0,0,2184,2189,
        3,168,84,0,2185,2186,5,4,0,0,2186,2188,3,168,84,0,2187,2185,1,0,
        0,0,2188,2191,1,0,0,0,2189,2187,1,0,0,0,2189,2190,1,0,0,0,2190,2195,
        1,0,0,0,2191,2189,1,0,0,0,2192,2194,3,164,82,0,2193,2192,1,0,0,0,
        2194,2197,1,0,0,0,2195,2193,1,0,0,0,2195,2196,1,0,0,0,2196,2199,
        1,0,0,0,2197,2195,1,0,0,0,2198,2200,3,144,72,0,2199,2198,1,0,0,0,
        2199,2200,1,0,0,0,2200,2202,1,0,0,0,2201,2203,3,150,75,0,2202,2201,
        1,0,0,0,2202,2203,1,0,0,0,2203,133,1,0,0,0,2204,2206,5,119,0,0,2205,
        2204,1,0,0,0,2205,2206,1,0,0,0,2206,2207,1,0,0,0,2207,2208,7,27,
        0,0,2208,2209,5,20,0,0,2209,2212,5,201,0,0,2210,2213,5,382,0,0,2211,
        2213,3,342,171,0,2212,2210,1,0,0,0,2212,2211,1,0,0,0,2213,2222,1,
        0,0,0,2214,2216,5,119,0,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,
        2217,1,0,0,0,2217,2218,7,28,0,0,2218,2219,5,20,0,0,2219,2220,5,201,
        0,0,2220,2222,3,244,122,0,2221,2205,1,0,0,0,2221,2215,1,0,0,0,2222,
        135,1,0,0,0,2223,2224,5,130,0,0,2224,2225,5,31,0,0,2225,2230,3,138,
        69,0,2226,2227,5,4,0,0,2227,2229,3,138,69,0,2228,2226,1,0,0,0,2229,
        2232,1,0,0,0,2230,2228,1,0,0,0,2230,2231,1,0,0,0,2231,2263,1,0,0,
        0,2232,2230,1,0,0,0,2233,2234,5,130,0,0,2234,2235,5,31,0,0,2235,
        2240,3,232,116,0,2236,2237,5,4,0,0,2237,2239,3,232,116,0,2238,2236,
        1,0,0,0,2239,2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,1,0,0,0,2241,
        2260,1,0,0,0,2242,2240,1,0,0,0,2243,2244,5,346,0,0,2244,2261,5,256,
        0,0,2245,2246,5,346,0,0,2246,2261,5,61,0,0,2247,2248,5,131,0,0,2248,
        2249,5,271,0,0,2249,2250,5,2,0,0,2250,2255,3,142,71,0,2251,2252,
        5,4,0,0,2252,2254,3,142,71,0,2253,2251,1,0,0,0,2254,2257,1,0,0,0,
        2255,2253,1,0,0,0,2255,2256,1,0,0,0,2256,2258,1,0,0,0,2257,2255,
        1,0,0,0,2258,2259,5,3,0,0,2259,2261,1,0,0,0,2260,2243,1,0,0,0,2260,
        2245,1,0,0,0,2260,2247,1,0,0,0,2260,2261,1,0,0,0,2261,2263,1,0,0,
        0,2262,2223,1,0,0,0,2262,2233,1,0,0,0,2263,137,1,0,0,0,2264,2268,
        3,78,39,0,2265,2268,3,140,70,0,2266,2268,3,232,116,0,2267,2264,1,
        0,0,0,2267,2265,1,0,0,0,2267,2266,1,0,0,0,2268,139,1,0,0,0,2269,
        2270,7,29,0,0,2270,2271,5,2,0,0,2271,2276,3,142,71,0,2272,2273,5,
        4,0,0,2273,2275,3,142,71,0,2274,2272,1,0,0,0,2275,2278,1,0,0,0,2276,
        2274,1,0,0,0,2276,2277,1,0,0,0,2277,2279,1,0,0,0,2278,2276,1,0,0,
        0,2279,2280,5,3,0,0,2280,2301,1,0,0,0,2281,2282,5,131,0,0,2282,2283,
        5,271,0,0,2283,2286,5,2,0,0,2284,2287,3,140,70,0,2285,2287,3,142,
        71,0,2286,2284,1,0,0,0,2286,2285,1,0,0,0,2287,2295,1,0,0,0,2288,
        2291,5,4,0,0,2289,2292,3,140,70,0,2290,2292,3,142,71,0,2291,2289,
        1,0,0,0,2291,2290,1,0,0,0,2292,2294,1,0,0,0,2293,2288,1,0,0,0,2294,
        2297,1,0,0,0,2295,2293,1,0,0,0,2295,2296,1,0,0,0,2296,2298,1,0,0,
        0,2297,2295,1,0,0,0,2298,2299,5,3,0,0,2299,2301,1,0,0,0,2300,2269,
        1,0,0,0,2300,2281,1,0,0,0,2301,141,1,0,0,0,2302,2323,3,78,39,0,2303,
        2323,3,232,116,0,2304,2319,5,2,0,0,2305,2308,3,78,39,0,2306,2308,
        3,232,116,0,2307,2305,1,0,0,0,2307,2306,1,0,0,0,2308,2316,1,0,0,
        0,2309,2312,5,4,0,0,2310,2313,3,78,39,0,2311,2313,3,232,116,0,2312,
        2310,1,0,0,0,2312,2311,1,0,0,0,2313,2315,1,0,0,0,2314,2309,1,0,0,
        0,2315,2318,1,0,0,0,2316,2314,1,0,0,0,2316,2317,1,0,0,0,2317,2320,
        1,0,0,0,2318,2316,1,0,0,0,2319,2307,1,0,0,0,2319,2320,1,0,0,0,2320,
        2321,1,0,0,0,2321,2323,5,3,0,0,2322,2302,1,0,0,0,2322,2303,1,0,0,
        0,2322,2304,1,0,0,0,2323,143,1,0,0,0,2324,2325,5,223,0,0,2325,2326,
        5,2,0,0,2326,2327,3,222,111,0,2327,2328,5,119,0,0,2328,2329,3,146,
        73,0,2329,2330,5,140,0,0,2330,2331,5,2,0,0,2331,2336,3,148,74,0,
        2332,2333,5,4,0,0,2333,2335,3,148,74,0,2334,2332,1,0,0,0,2335,2338,
        1,0,0,0,2336,2334,1,0,0,0,2336,2337,1,0,0,0,2337,2339,1,0,0,0,2338,
        2336,1,0,0,0,2339,2340,5,3,0,0,2340,2341,5,3,0,0,2341,145,1,0,0,
        0,2342,2355,3,332,166,0,2343,2344,5,2,0,0,2344,2349,3,332,166,0,
        2345,2346,5,4,0,0,2346,2348,3,332,166,0,2347,2345,1,0,0,0,2348,2351,
        1,0,0,0,2349,2347,1,0,0,0,2349,2350,1,0,0,0,2350,2352,1,0,0,0,2351,
        2349,1,0,0,0,2352,2353,5,3,0,0,2353,2355,1,0,0,0,2354,2342,1,0,0,
        0,2354,2343,1,0,0,0,2355,147,1,0,0,0,2356,2361,3,232,116,0,2357,
        2359,5,20,0,0,2358,2357,1,0,0,0,2358,2359,1,0,0,0,2359,2360,1,0,
        0,0,2360,2362,3,332,166,0,2361,2358,1,0,0,0,2361,2362,1,0,0,0,2362,
        149,1,0,0,0,2363,2366,5,327,0,0,2364,2365,7,30,0,0,2365,2367,5,199,
        0,0,2366,2364,1,0,0,0,2366,2367,1,0,0,0,2367,2368,1,0,0,0,2368,2371,
        5,2,0,0,2369,2372,3,152,76,0,2370,2372,3,154,77,0,2371,2369,1,0,
        0,0,2371,2370,1,0,0,0,2372,2373,1,0,0,0,2373,2378,5,3,0,0,2374,2376,
        5,20,0,0,2375,2374,1,0,0,0,2375,2376,1,0,0,0,2376,2377,1,0,0,0,2377,
        2379,3,332,166,0,2378,2375,1,0,0,0,2378,2379,1,0,0,0,2379,151,1,
        0,0,0,2380,2381,3,332,166,0,2381,2382,5,119,0,0,2382,2383,3,332,
        166,0,2383,2384,5,140,0,0,2384,2385,5,2,0,0,2385,2390,3,158,79,0,
        2386,2387,5,4,0,0,2387,2389,3,158,79,0,2388,2386,1,0,0,0,2389,2392,
        1,0,0,0,2390,2388,1,0,0,0,2390,2391,1,0,0,0,2391,2393,1,0,0,0,2392,
        2390,1,0,0,0,2393,2394,5,3,0,0,2394,153,1,0,0,0,2395,2396,5,2,0,
        0,2396,2401,3,332,166,0,2397,2398,5,4,0,0,2398,2400,3,332,166,0,
        2399,2397,1,0,0,0,2400,2403,1,0,0,0,2401,2399,1,0,0,0,2401,2402,
        1,0,0,0,2402,2404,1,0,0,0,2403,2401,1,0,0,0,2404,2405,5,3,0,0,2405,
        2406,5,119,0,0,2406,2407,3,332,166,0,2407,2408,5,140,0,0,2408,2409,
        5,2,0,0,2409,2414,3,156,78,0,2410,2411,5,4,0,0,2411,2413,3,156,78,
        0,2412,2410,1,0,0,0,2413,2416,1,0,0,0,2414,2412,1,0,0,0,2414,2415,
        1,0,0,0,2415,2417,1,0,0,0,2416,2414,1,0,0,0,2417,2418,5,3,0,0,2418,
        155,1,0,0,0,2419,2420,5,2,0,0,2420,2425,3,210,105,0,2421,2422,5,
        4,0,0,2422,2424,3,210,105,0,2423,2421,1,0,0,0,2424,2427,1,0,0,0,
        2425,2423,1,0,0,0,2425,2426,1,0,0,0,2426,2428,1,0,0,0,2427,2425,
        1,0,0,0,2428,2433,5,3,0,0,2429,2431,5,20,0,0,2430,2429,1,0,0,0,2430,
        2431,1,0,0,0,2431,2432,1,0,0,0,2432,2434,3,332,166,0,2433,2430,1,
        0,0,0,2433,2434,1,0,0,0,2434,157,1,0,0,0,2435,2440,3,210,105,0,2436,
        2438,5,20,0,0,2437,2436,1,0,0,0,2437,2438,1,0,0,0,2438,2439,1,0,
        0,0,2439,2441,3,332,166,0,2440,2437,1,0,0,0,2440,2441,1,0,0,0,2441,
        159,1,0,0,0,2442,2443,5,137,0,0,2443,2444,5,197,0,0,2444,2445,5,
        105,0,0,2445,161,1,0,0,0,2446,2447,5,137,0,0,2447,2448,5,105,0,0,
        2448,163,1,0,0,0,2449,2450,5,158,0,0,2450,2452,5,338,0,0,2451,2453,
        5,211,0,0,2452,2451,1,0,0,0,2452,2453,1,0,0,0,2453,2454,1,0,0,0,
        2454,2455,3,76,38,0,2455,2464,5,2,0,0,2456,2461,3,232,116,0,2457,
        2458,5,4,0,0,2458,2460,3,232,116,0,2459,2457,1,0,0,0,2460,2463,1,
        0,0,0,2461,2459,1,0,0,0,2461,2462,1,0,0,0,2462,2465,1,0,0,0,2463,
        2461,1,0,0,0,2464,2456,1,0,0,0,2464,2465,1,0,0,0,2465,2466,1,0,0,
        0,2466,2467,5,3,0,0,2467,2479,3,204,102,0,2468,2470,5,20,0,0,2469,
        2468,1,0,0,0,2469,2470,1,0,0,0,2470,2471,1,0,0,0,2471,2476,3,332,
        166,0,2472,2473,5,4,0,0,2473,2475,3,332,166,0,2474,2472,1,0,0,0,
        2475,2478,1,0,0,0,2476,2474,1,0,0,0,2476,2477,1,0,0,0,2477,2480,
        1,0,0,0,2478,2476,1,0,0,0,2479,2469,1,0,0,0,2479,2480,1,0,0,0,2480,
        165,1,0,0,0,2481,2482,7,31,0,0,2482,167,1,0,0,0,2483,2497,3,72,36,
        0,2484,2486,5,158,0,0,2485,2484,1,0,0,0,2485,2486,1,0,0,0,2486,2487,
        1,0,0,0,2487,2493,3,192,96,0,2488,2492,3,170,85,0,2489,2492,3,144,
        72,0,2490,2492,3,150,75,0,2491,2488,1,0,0,0,2491,2489,1,0,0,0,2491,
        2490,1,0,0,0,2492,2495,1,0,0,0,2493,2491,1,0,0,0,2493,2494,1,0,0,
        0,2494,2497,1,0,0,0,2495,2493,1,0,0,0,2496,2483,1,0,0,0,2496,2485,
        1,0,0,0,2497,169,1,0,0,0,2498,2499,3,172,86,0,2499,2501,5,155,0,
        0,2500,2502,5,158,0,0,2501,2500,1,0,0,0,2501,2502,1,0,0,0,2502,2503,
        1,0,0,0,2503,2505,3,192,96,0,2504,2506,3,174,87,0,2505,2504,1,0,
        0,0,2505,2506,1,0,0,0,2506,2516,1,0,0,0,2507,2508,5,194,0,0,2508,
        2509,3,172,86,0,2509,2511,5,155,0,0,2510,2512,5,158,0,0,2511,2510,
        1,0,0,0,2511,2512,1,0,0,0,2512,2513,1,0,0,0,2513,2514,3,192,96,0,
        2514,2516,1,0,0,0,2515,2498,1,0,0,0,2515,2507,1,0,0,0,2516,171,1,
        0,0,0,2517,2519,5,144,0,0,2518,2517,1,0,0,0,2518,2519,1,0,0,0,2519,
        2534,1,0,0,0,2520,2534,5,60,0,0,2521,2523,5,161,0,0,2522,2524,5,
        211,0,0,2523,2522,1,0,0,0,2523,2524,1,0,0,0,2524,2534,1,0,0,0,2525,
        2527,5,161,0,0,2526,2525,1,0,0,0,2526,2527,1,0,0,0,2527,2528,1,0,
        0,0,2528,2534,7,32,0,0,2529,2531,7,33,0,0,2530,2532,5,211,0,0,2531,
        2530,1,0,0,0,2531,2532,1,0,0,0,2532,2534,1,0,0,0,2533,2518,1,0,0,
        0,2533,2520,1,0,0,0,2533,2521,1,0,0,0,2533,2526,1,0,0,0,2533,2529,
        1,0,0,0,2534,173,1,0,0,0,2535,2536,5,203,0,0,2536,2540,3,240,120,
        0,2537,2538,5,332,0,0,2538,2540,3,180,90,0,2539,2535,1,0,0,0,2539,
        2537,1,0,0,0,2540,175,1,0,0,0,2541,2542,5,295,0,0,2542,2544,5,2,
        0,0,2543,2545,3,178,89,0,2544,2543,1,0,0,0,2544,2545,1,0,0,0,2545,
        2546,1,0,0,0,2546,2551,5,3,0,0,2547,2548,5,243,0,0,2548,2549,5,2,
        0,0,2549,2550,5,382,0,0,2550,2552,5,3,0,0,2551,2547,1,0,0,0,2551,
        2552,1,0,0,0,2552,177,1,0,0,0,2553,2555,5,362,0,0,2554,2553,1,0,
        0,0,2554,2555,1,0,0,0,2555,2556,1,0,0,0,2556,2557,7,34,0,0,2557,
        2578,5,222,0,0,2558,2559,3,232,116,0,2559,2560,5,258,0,0,2560,2578,
        1,0,0,0,2561,2562,5,29,0,0,2562,2563,5,382,0,0,2563,2564,5,210,0,
        0,2564,2565,5,201,0,0,2565,2574,5,382,0,0,2566,2572,5,203,0,0,2567,
        2573,3,332,166,0,2568,2569,3,326,163,0,2569,2570,5,2,0,0,2570,2571,
        5,3,0,0,2571,2573,1,0,0,0,2572,2567,1,0,0,0,2572,2568,1,0,0,0,2573,
        2575,1,0,0,0,2574,2566,1,0,0,0,2574,2575,1,0,0,0,2575,2578,1,0,0,
        0,2576,2578,3,232,116,0,2577,2554,1,0,0,0,2577,2558,1,0,0,0,2577,
        2561,1,0,0,0,2577,2576,1,0,0,0,2578,179,1,0,0,0,2579,2580,5,2,0,
        0,2580,2581,3,182,91,0,2581,2582,5,3,0,0,2582,181,1,0,0,0,2583,2588,
        3,328,164,0,2584,2585,5,4,0,0,2585,2587,3,328,164,0,2586,2584,1,
        0,0,0,2587,2590,1,0,0,0,2588,2586,1,0,0,0,2588,2589,1,0,0,0,2589,
        183,1,0,0,0,2590,2588,1,0,0,0,2591,2592,5,2,0,0,2592,2597,3,186,
        93,0,2593,2594,5,4,0,0,2594,2596,3,186,93,0,2595,2593,1,0,0,0,2596,
        2599,1,0,0,0,2597,2595,1,0,0,0,2597,2598,1,0,0,0,2598,2600,1,0,0,
        0,2599,2597,1,0,0,0,2600,2601,5,3,0,0,2601,185,1,0,0,0,2602,2604,
        3,328,164,0,2603,2605,7,25,0,0,2604,2603,1,0,0,0,2604,2605,1,0,0,
        0,2605,187,1,0,0,0,2606,2607,5,2,0,0,2607,2612,3,190,95,0,2608,2609,
        5,4,0,0,2609,2611,3,190,95,0,2610,2608,1,0,0,0,2611,2614,1,0,0,0,
        2612,2610,1,0,0,0,2612,2613,1,0,0,0,2613,2615,1,0,0,0,2614,2612,
        1,0,0,0,2615,2616,5,3,0,0,2616,189,1,0,0,0,2617,2620,3,84,42,0,2618,
        2619,5,51,0,0,2619,2621,3,342,171,0,2620,2618,1,0,0,0,2620,2621,
        1,0,0,0,2621,191,1,0,0,0,2622,2626,3,72,36,0,2623,2626,3,76,38,0,
        2624,2626,3,86,43,0,2625,2622,1,0,0,0,2625,2623,1,0,0,0,2625,2624,
        1,0,0,0,2626,2628,1,0,0,0,2627,2629,3,134,67,0,2628,2627,1,0,0,0,
        2628,2629,1,0,0,0,2629,2631,1,0,0,0,2630,2632,3,176,88,0,2631,2630,
        1,0,0,0,2631,2632,1,0,0,0,2632,2633,1,0,0,0,2633,2634,3,204,102,
        0,2634,2678,1,0,0,0,2635,2636,5,2,0,0,2636,2637,3,16,8,0,2637,2639,
        5,3,0,0,2638,2640,3,176,88,0,2639,2638,1,0,0,0,2639,2640,1,0,0,0,
        2640,2641,1,0,0,0,2641,2642,3,204,102,0,2642,2678,1,0,0,0,2643,2644,
        5,2,0,0,2644,2645,3,168,84,0,2645,2647,5,3,0,0,2646,2648,3,176,88,
        0,2647,2646,1,0,0,0,2647,2648,1,0,0,0,2648,2649,1,0,0,0,2649,2650,
        3,204,102,0,2650,2678,1,0,0,0,2651,2652,5,333,0,0,2652,2657,3,232,
        116,0,2653,2654,5,4,0,0,2654,2656,3,232,116,0,2655,2653,1,0,0,0,
        2656,2659,1,0,0,0,2657,2655,1,0,0,0,2657,2658,1,0,0,0,2658,2660,
        1,0,0,0,2659,2657,1,0,0,0,2660,2661,3,204,102,0,2661,2678,1,0,0,
        0,2662,2663,3,322,161,0,2663,2672,5,2,0,0,2664,2669,3,202,101,0,
        2665,2666,5,4,0,0,2666,2668,3,202,101,0,2667,2665,1,0,0,0,2668,2671,
        1,0,0,0,2669,2667,1,0,0,0,2669,2670,1,0,0,0,2670,2673,1,0,0,0,2671,
        2669,1,0,0,0,2672,2664,1,0,0,0,2672,2673,1,0,0,0,2673,2674,1,0,0,
        0,2674,2675,5,3,0,0,2675,2676,3,204,102,0,2676,2678,1,0,0,0,2677,
        2625,1,0,0,0,2677,2635,1,0,0,0,2677,2643,1,0,0,0,2677,2651,1,0,0,
        0,2677,2662,1,0,0,0,2678,193,1,0,0,0,2679,2680,5,293,0,0,2680,2682,
        3,72,36,0,2681,2683,3,196,98,0,2682,2681,1,0,0,0,2682,2683,1,0,0,
        0,2683,2699,1,0,0,0,2684,2685,5,293,0,0,2685,2686,5,2,0,0,2686,2687,
        3,72,36,0,2687,2689,5,3,0,0,2688,2690,3,196,98,0,2689,2688,1,0,0,
        0,2689,2690,1,0,0,0,2690,2699,1,0,0,0,2691,2692,5,293,0,0,2692,2693,
        5,2,0,0,2693,2694,3,16,8,0,2694,2696,5,3,0,0,2695,2697,3,196,98,
        0,2696,2695,1,0,0,0,2696,2697,1,0,0,0,2697,2699,1,0,0,0,2698,2679,
        1,0,0,0,2698,2684,1,0,0,0,2698,2691,1,0,0,0,2699,195,1,0,0,0,2700,
        2701,5,346,0,0,2701,2702,5,274,0,0,2702,2720,5,217,0,0,2703,2704,
        7,35,0,0,2704,2717,5,31,0,0,2705,2706,5,2,0,0,2706,2711,3,232,116,
        0,2707,2708,5,4,0,0,2708,2710,3,232,116,0,2709,2707,1,0,0,0,2710,
        2713,1,0,0,0,2711,2709,1,0,0,0,2711,2712,1,0,0,0,2712,2714,1,0,0,
        0,2713,2711,1,0,0,0,2714,2715,5,3,0,0,2715,2718,1,0,0,0,2716,2718,
        3,232,116,0,2717,2705,1,0,0,0,2717,2716,1,0,0,0,2718,2720,1,0,0,
        0,2719,2700,1,0,0,0,2719,2703,1,0,0,0,2720,2730,1,0,0,0,2721,2722,
        7,36,0,0,2722,2728,5,31,0,0,2723,2724,5,2,0,0,2724,2725,3,92,46,
        0,2725,2726,5,3,0,0,2726,2729,1,0,0,0,2727,2729,3,100,50,0,2728,
        2723,1,0,0,0,2728,2727,1,0,0,0,2729,2731,1,0,0,0,2730,2721,1,0,0,
        0,2730,2731,1,0,0,0,2731,197,1,0,0,0,2732,2733,3,332,166,0,2733,
        2734,5,373,0,0,2734,2735,3,194,97,0,2735,199,1,0,0,0,2736,2739,3,
        194,97,0,2737,2739,3,198,99,0,2738,2736,1,0,0,0,2738,2737,1,0,0,
        0,2739,201,1,0,0,0,2740,2743,3,200,100,0,2741,2743,3,236,118,0,2742,
        2740,1,0,0,0,2742,2741,1,0,0,0,2743,203,1,0,0,0,2744,2746,5,20,0,
        0,2745,2744,1,0,0,0,2745,2746,1,0,0,0,2746,2747,1,0,0,0,2747,2749,
        3,334,167,0,2748,2750,3,180,90,0,2749,2748,1,0,0,0,2749,2750,1,0,
        0,0,2750,2752,1,0,0,0,2751,2745,1,0,0,0,2751,2752,1,0,0,0,2752,205,
        1,0,0,0,2753,2754,5,257,0,0,2754,2755,5,121,0,0,2755,2756,5,266,
        0,0,2756,2760,3,342,171,0,2757,2758,5,346,0,0,2758,2759,5,267,0,
        0,2759,2761,3,42,21,0,2760,2757,1,0,0,0,2760,2761,1,0,0,0,2761,2803,
        1,0,0,0,2762,2763,5,257,0,0,2763,2764,5,121,0,0,2764,2774,5,85,0,
        0,2765,2766,5,113,0,0,2766,2767,5,299,0,0,2767,2768,5,31,0,0,2768,
        2772,3,342,171,0,2769,2770,5,101,0,0,2770,2771,5,31,0,0,2771,2773,
        3,342,171,0,2772,2769,1,0,0,0,2772,2773,1,0,0,0,2773,2775,1,0,0,
        0,2774,2765,1,0,0,0,2774,2775,1,0,0,0,2775,2781,1,0,0,0,2776,2777,
        5,48,0,0,2777,2778,5,154,0,0,2778,2779,5,299,0,0,2779,2780,5,31,
        0,0,2780,2782,3,342,171,0,2781,2776,1,0,0,0,2781,2782,1,0,0,0,2782,
        2788,1,0,0,0,2783,2784,5,177,0,0,2784,2785,5,156,0,0,2785,2786,5,
        299,0,0,2786,2787,5,31,0,0,2787,2789,3,342,171,0,2788,2783,1,0,0,
        0,2788,2789,1,0,0,0,2789,2794,1,0,0,0,2790,2791,5,166,0,0,2791,2792,
        5,299,0,0,2792,2793,5,31,0,0,2793,2795,3,342,171,0,2794,2790,1,0,
        0,0,2794,2795,1,0,0,0,2795,2800,1,0,0,0,2796,2797,5,198,0,0,2797,
        2798,5,83,0,0,2798,2799,5,20,0,0,2799,2801,3,342,171,0,2800,2796,
        1,0,0,0,2800,2801,1,0,0,0,2801,2803,1,0,0,0,2802,2753,1,0,0,0,2802,
        2762,1,0,0,0,2803,207,1,0,0,0,2804,2809,3,210,105,0,2805,2806,5,
        4,0,0,2806,2808,3,210,105,0,2807,2805,1,0,0,0,2808,2811,1,0,0,0,
        2809,2807,1,0,0,0,2809,2810,1,0,0,0,2810,209,1,0,0,0,2811,2809,1,
        0,0,0,2812,2817,3,328,164,0,2813,2814,5,5,0,0,2814,2816,3,328,164,
        0,2815,2813,1,0,0,0,2816,2819,1,0,0,0,2817,2815,1,0,0,0,2817,2818,
        1,0,0,0,2818,211,1,0,0,0,2819,2817,1,0,0,0,2820,2825,3,214,107,0,
        2821,2822,5,4,0,0,2822,2824,3,214,107,0,2823,2821,1,0,0,0,2824,2827,
        1,0,0,0,2825,2823,1,0,0,0,2825,2826,1,0,0,0,2826,213,1,0,0,0,2827,
        2825,1,0,0,0,2828,2831,3,210,105,0,2829,2830,5,207,0,0,2830,2832,
        3,42,21,0,2831,2829,1,0,0,0,2831,2832,1,0,0,0,2832,215,1,0,0,0,2833,
        2834,3,328,164,0,2834,2835,5,5,0,0,2835,2837,1,0,0,0,2836,2833,1,
        0,0,0,2836,2837,1,0,0,0,2837,2838,1,0,0,0,2838,2839,3,328,164,0,
        2839,217,1,0,0,0,2840,2841,3,328,164,0,2841,2842,5,5,0,0,2842,2844,
        1,0,0,0,2843,2840,1,0,0,0,2843,2844,1,0,0,0,2844,2845,1,0,0,0,2845,
        2846,3,328,164,0,2846,219,1,0,0,0,2847,2850,3,78,39,0,2848,2850,
        3,232,116,0,2849,2847,1,0,0,0,2849,2848,1,0,0,0,2850,2858,1,0,0,
        0,2851,2853,5,20,0,0,2852,2851,1,0,0,0,2852,2853,1,0,0,0,2853,2856,
        1,0,0,0,2854,2857,3,328,164,0,2855,2857,3,180,90,0,2856,2854,1,0,
        0,0,2856,2855,1,0,0,0,2857,2859,1,0,0,0,2858,2852,1,0,0,0,2858,2859,
        1,0,0,0,2859,221,1,0,0,0,2860,2865,3,220,110,0,2861,2862,5,4,0,0,
        2862,2864,3,220,110,0,2863,2861,1,0,0,0,2864,2867,1,0,0,0,2865,2863,
        1,0,0,0,2865,2866,1,0,0,0,2866,223,1,0,0,0,2867,2865,1,0,0,0,2868,
        2869,5,2,0,0,2869,2874,3,226,113,0,2870,2871,5,4,0,0,2871,2873,3,
        226,113,0,2872,2870,1,0,0,0,2873,2876,1,0,0,0,2874,2872,1,0,0,0,
        2874,2875,1,0,0,0,2875,2877,1,0,0,0,2876,2874,1,0,0,0,2877,2878,
        5,3,0,0,2878,225,1,0,0,0,2879,2882,3,228,114,0,2880,2882,3,298,149,
        0,2881,2879,1,0,0,0,2881,2880,1,0,0,0,2882,227,1,0,0,0,2883,2897,
        3,326,163,0,2884,2885,3,332,166,0,2885,2886,5,2,0,0,2886,2891,3,
        230,115,0,2887,2888,5,4,0,0,2888,2890,3,230,115,0,2889,2887,1,0,
        0,0,2890,2893,1,0,0,0,2891,2889,1,0,0,0,2891,2892,1,0,0,0,2892,2894,
        1,0,0,0,2893,2891,1,0,0,0,2894,2895,5,3,0,0,2895,2897,1,0,0,0,2896,
        2883,1,0,0,0,2896,2884,1,0,0,0,2897,229,1,0,0,0,2898,2901,3,326,
        163,0,2899,2901,3,252,126,0,2900,2898,1,0,0,0,2900,2899,1,0,0,0,
        2901,231,1,0,0,0,2902,2903,3,240,120,0,2903,233,1,0,0,0,2904,2905,
        3,332,166,0,2905,2906,5,373,0,0,2906,2907,3,232,116,0,2907,235,1,
        0,0,0,2908,2911,3,232,116,0,2909,2911,3,234,117,0,2910,2908,1,0,
        0,0,2910,2909,1,0,0,0,2911,237,1,0,0,0,2912,2917,3,232,116,0,2913,
        2914,5,4,0,0,2914,2916,3,232,116,0,2915,2913,1,0,0,0,2916,2919,1,
        0,0,0,2917,2915,1,0,0,0,2917,2918,1,0,0,0,2918,239,1,0,0,0,2919,
        2917,1,0,0,0,2920,2921,6,120,-1,0,2921,2922,7,37,0,0,2922,2933,3,
        240,120,5,2923,2924,5,105,0,0,2924,2925,5,2,0,0,2925,2926,3,16,8,
        0,2926,2927,5,3,0,0,2927,2933,1,0,0,0,2928,2930,3,244,122,0,2929,
        2931,3,242,121,0,2930,2929,1,0,0,0,2930,2931,1,0,0,0,2931,2933,1,
        0,0,0,2932,2920,1,0,0,0,2932,2923,1,0,0,0,2932,2928,1,0,0,0,2933,
        2942,1,0,0,0,2934,2935,10,2,0,0,2935,2936,5,14,0,0,2936,2941,3,240,
        120,3,2937,2938,10,1,0,0,2938,2939,5,208,0,0,2939,2941,3,240,120,
        2,2940,2934,1,0,0,0,2940,2937,1,0,0,0,2941,2944,1,0,0,0,2942,2940,
        1,0,0,0,2942,2943,1,0,0,0,2943,241,1,0,0,0,2944,2942,1,0,0,0,2945,
        2947,5,197,0,0,2946,2945,1,0,0,0,2946,2947,1,0,0,0,2947,2948,1,0,
        0,0,2948,2949,5,24,0,0,2949,2950,3,244,122,0,2950,2951,5,14,0,0,
        2951,2952,3,244,122,0,2952,3028,1,0,0,0,2953,2955,5,197,0,0,2954,
        2953,1,0,0,0,2954,2955,1,0,0,0,2955,2956,1,0,0,0,2956,2957,5,140,
        0,0,2957,2958,5,2,0,0,2958,2963,3,232,116,0,2959,2960,5,4,0,0,2960,
        2962,3,232,116,0,2961,2959,1,0,0,0,2962,2965,1,0,0,0,2963,2961,1,
        0,0,0,2963,2964,1,0,0,0,2964,2966,1,0,0,0,2965,2963,1,0,0,0,2966,
        2967,5,3,0,0,2967,3028,1,0,0,0,2968,2970,5,197,0,0,2969,2968,1,0,
        0,0,2969,2970,1,0,0,0,2970,2971,1,0,0,0,2971,2972,5,140,0,0,2972,
        2973,5,2,0,0,2973,2974,3,16,8,0,2974,2975,5,3,0,0,2975,3028,1,0,
        0,0,2976,2978,5,197,0,0,2977,2976,1,0,0,0,2977,2978,1,0,0,0,2978,
        2979,1,0,0,0,2979,2980,7,38,0,0,2980,3028,3,244,122,0,2981,2983,
        5,197,0,0,2982,2981,1,0,0,0,2982,2983,1,0,0,0,2983,2984,1,0,0,0,
        2984,2985,7,39,0,0,2985,2999,7,40,0,0,2986,2987,5,2,0,0,2987,3000,
        5,3,0,0,2988,2989,5,2,0,0,2989,2994,3,232,116,0,2990,2991,5,4,0,
        0,2991,2993,3,232,116,0,2992,2990,1,0,0,0,2993,2996,1,0,0,0,2994,
        2992,1,0,0,0,2994,2995,1,0,0,0,2995,2997,1,0,0,0,2996,2994,1,0,0,
        0,2997,2998,5,3,0,0,2998,3000,1,0,0,0,2999,2986,1,0,0,0,2999,2988,
        1,0,0,0,3000,3028,1,0,0,0,3001,3003,5,197,0,0,3002,3001,1,0,0,0,
        3002,3003,1,0,0,0,3003,3004,1,0,0,0,3004,3005,7,39,0,0,3005,3008,
        3,244,122,0,3006,3007,5,100,0,0,3007,3009,3,342,171,0,3008,3006,
        1,0,0,0,3008,3009,1,0,0,0,3009,3028,1,0,0,0,3010,3012,5,153,0,0,
        3011,3013,5,197,0,0,3012,3011,1,0,0,0,3012,3013,1,0,0,0,3013,3014,
        1,0,0,0,3014,3028,5,198,0,0,3015,3017,5,153,0,0,3016,3018,5,197,
        0,0,3017,3016,1,0,0,0,3017,3018,1,0,0,0,3018,3019,1,0,0,0,3019,3028,
        7,41,0,0,3020,3022,5,153,0,0,3021,3023,5,197,0,0,3022,3021,1,0,0,
        0,3022,3023,1,0,0,0,3023,3024,1,0,0,0,3024,3025,5,92,0,0,3025,3026,
        5,123,0,0,3026,3028,3,244,122,0,3027,2946,1,0,0,0,3027,2954,1,0,
        0,0,3027,2969,1,0,0,0,3027,2977,1,0,0,0,3027,2982,1,0,0,0,3027,3002,
        1,0,0,0,3027,3010,1,0,0,0,3027,3015,1,0,0,0,3027,3020,1,0,0,0,3028,
        243,1,0,0,0,3029,3030,6,122,-1,0,3030,3034,3,248,124,0,3031,3032,
        7,42,0,0,3032,3034,3,244,122,7,3033,3029,1,0,0,0,3033,3031,1,0,0,
        0,3034,3056,1,0,0,0,3035,3036,10,6,0,0,3036,3037,7,43,0,0,3037,3055,
        3,244,122,7,3038,3039,10,5,0,0,3039,3040,7,44,0,0,3040,3055,3,244,
        122,6,3041,3042,10,4,0,0,3042,3043,5,367,0,0,3043,3055,3,244,122,
        5,3044,3045,10,3,0,0,3045,3046,5,370,0,0,3046,3055,3,244,122,4,3047,
        3048,10,2,0,0,3048,3049,5,368,0,0,3049,3055,3,244,122,3,3050,3051,
        10,1,0,0,3051,3052,3,254,127,0,3052,3053,3,244,122,2,3053,3055,1,
        0,0,0,3054,3035,1,0,0,0,3054,3038,1,0,0,0,3054,3041,1,0,0,0,3054,
        3044,1,0,0,0,3054,3047,1,0,0,0,3054,3050,1,0,0,0,3055,3058,1,0,0,
        0,3056,3054,1,0,0,0,3056,3057,1,0,0,0,3057,245,1,0,0,0,3058,3056,
        1,0,0,0,3059,3060,7,45,0,0,3060,247,1,0,0,0,3061,3062,6,124,-1,0,
        3062,3311,7,46,0,0,3063,3064,7,47,0,0,3064,3067,5,2,0,0,3065,3068,
        3,246,123,0,3066,3068,3,342,171,0,3067,3065,1,0,0,0,3067,3066,1,
        0,0,0,3068,3069,1,0,0,0,3069,3070,5,4,0,0,3070,3071,3,244,122,0,
        3071,3072,5,4,0,0,3072,3073,3,244,122,0,3073,3074,5,3,0,0,3074,3311,
        1,0,0,0,3075,3076,7,48,0,0,3076,3079,5,2,0,0,3077,3080,3,246,123,
        0,3078,3080,3,342,171,0,3079,3077,1,0,0,0,3079,3078,1,0,0,0,3080,
        3081,1,0,0,0,3081,3082,5,4,0,0,3082,3083,3,244,122,0,3083,3084,5,
        4,0,0,3084,3085,3,244,122,0,3085,3086,5,3,0,0,3086,3311,1,0,0,0,
        3087,3089,5,35,0,0,3088,3090,3,308,154,0,3089,3088,1,0,0,0,3090,
        3091,1,0,0,0,3091,3089,1,0,0,0,3091,3092,1,0,0,0,3092,3095,1,0,0,
        0,3093,3094,5,97,0,0,3094,3096,3,232,116,0,3095,3093,1,0,0,0,3095,
        3096,1,0,0,0,3096,3097,1,0,0,0,3097,3098,5,99,0,0,3098,3311,1,0,
        0,0,3099,3100,5,35,0,0,3100,3102,3,232,116,0,3101,3103,3,308,154,
        0,3102,3101,1,0,0,0,3103,3104,1,0,0,0,3104,3102,1,0,0,0,3104,3105,
        1,0,0,0,3105,3108,1,0,0,0,3106,3107,5,97,0,0,3107,3109,3,232,116,
        0,3108,3106,1,0,0,0,3108,3109,1,0,0,0,3109,3110,1,0,0,0,3110,3111,
        5,99,0,0,3111,3311,1,0,0,0,3112,3113,7,49,0,0,3113,3114,5,2,0,0,
        3114,3115,3,232,116,0,3115,3116,5,20,0,0,3116,3117,3,282,141,0,3117,
        3118,5,3,0,0,3118,3311,1,0,0,0,3119,3120,5,286,0,0,3120,3129,5,2,
        0,0,3121,3126,3,220,110,0,3122,3123,5,4,0,0,3123,3125,3,220,110,
        0,3124,3122,1,0,0,0,3125,3128,1,0,0,0,3126,3124,1,0,0,0,3126,3127,
        1,0,0,0,3127,3130,1,0,0,0,3128,3126,1,0,0,0,3129,3121,1,0,0,0,3129,
        3130,1,0,0,0,3130,3131,1,0,0,0,3131,3311,5,3,0,0,3132,3133,5,116,
        0,0,3133,3134,5,2,0,0,3134,3137,3,232,116,0,3135,3136,5,138,0,0,
        3136,3138,5,199,0,0,3137,3135,1,0,0,0,3137,3138,1,0,0,0,3138,3139,
        1,0,0,0,3139,3140,5,3,0,0,3140,3311,1,0,0,0,3141,3142,5,17,0,0,3142,
        3143,5,2,0,0,3143,3146,3,232,116,0,3144,3145,5,138,0,0,3145,3147,
        5,199,0,0,3146,3144,1,0,0,0,3146,3147,1,0,0,0,3147,3148,1,0,0,0,
        3148,3149,5,3,0,0,3149,3311,1,0,0,0,3150,3151,5,157,0,0,3151,3152,
        5,2,0,0,3152,3155,3,232,116,0,3153,3154,5,138,0,0,3154,3156,5,199,
        0,0,3155,3153,1,0,0,0,3155,3156,1,0,0,0,3156,3157,1,0,0,0,3157,3158,
        5,3,0,0,3158,3311,1,0,0,0,3159,3160,5,225,0,0,3160,3161,5,2,0,0,
        3161,3162,3,244,122,0,3162,3163,5,140,0,0,3163,3164,3,244,122,0,
        3164,3165,5,3,0,0,3165,3311,1,0,0,0,3166,3311,3,252,126,0,3167,3311,
        5,363,0,0,3168,3169,3,326,163,0,3169,3170,5,5,0,0,3170,3171,5,363,
        0,0,3171,3311,1,0,0,0,3172,3173,5,2,0,0,3173,3176,3,220,110,0,3174,
        3175,5,4,0,0,3175,3177,3,220,110,0,3176,3174,1,0,0,0,3177,3178,1,
        0,0,0,3178,3176,1,0,0,0,3178,3179,1,0,0,0,3179,3180,1,0,0,0,3180,
        3181,5,3,0,0,3181,3311,1,0,0,0,3182,3183,5,2,0,0,3183,3184,3,16,
        8,0,3184,3185,5,3,0,0,3185,3311,1,0,0,0,3186,3187,5,136,0,0,3187,
        3188,5,2,0,0,3188,3189,3,232,116,0,3189,3190,5,3,0,0,3190,3311,1,
        0,0,0,3191,3192,3,322,161,0,3192,3204,5,2,0,0,3193,3195,3,166,83,
        0,3194,3193,1,0,0,0,3194,3195,1,0,0,0,3195,3196,1,0,0,0,3196,3201,
        3,236,118,0,3197,3198,5,4,0,0,3198,3200,3,236,118,0,3199,3197,1,
        0,0,0,3200,3203,1,0,0,0,3201,3199,1,0,0,0,3201,3202,1,0,0,0,3202,
        3205,1,0,0,0,3203,3201,1,0,0,0,3204,3194,1,0,0,0,3204,3205,1,0,0,
        0,3205,3206,1,0,0,0,3206,3213,5,3,0,0,3207,3208,5,114,0,0,3208,3209,
        5,2,0,0,3209,3210,5,344,0,0,3210,3211,3,240,120,0,3211,3212,5,3,
        0,0,3212,3214,1,0,0,0,3213,3207,1,0,0,0,3213,3214,1,0,0,0,3214,3217,
        1,0,0,0,3215,3216,7,50,0,0,3216,3218,5,199,0,0,3217,3215,1,0,0,0,
        3217,3218,1,0,0,0,3218,3221,1,0,0,0,3219,3220,5,213,0,0,3220,3222,
        3,314,157,0,3221,3219,1,0,0,0,3221,3222,1,0,0,0,3222,3311,1,0,0,
        0,3223,3224,3,332,166,0,3224,3225,5,372,0,0,3225,3226,3,232,116,
        0,3226,3311,1,0,0,0,3227,3228,5,2,0,0,3228,3231,3,332,166,0,3229,
        3230,5,4,0,0,3230,3232,3,332,166,0,3231,3229,1,0,0,0,3232,3233,1,
        0,0,0,3233,3231,1,0,0,0,3233,3234,1,0,0,0,3234,3235,1,0,0,0,3235,
        3236,5,3,0,0,3236,3237,5,372,0,0,3237,3238,3,232,116,0,3238,3311,
        1,0,0,0,3239,3311,3,80,40,0,3240,3241,5,2,0,0,3241,3242,3,232,116,
        0,3242,3243,5,3,0,0,3243,3311,1,0,0,0,3244,3245,5,110,0,0,3245,3246,
        5,2,0,0,3246,3247,3,332,166,0,3247,3248,5,123,0,0,3248,3249,3,244,
        122,0,3249,3250,5,3,0,0,3250,3311,1,0,0,0,3251,3252,7,51,0,0,3252,
        3253,5,2,0,0,3253,3254,3,244,122,0,3254,3255,7,52,0,0,3255,3258,
        3,244,122,0,3256,3257,7,53,0,0,3257,3259,3,244,122,0,3258,3256,1,
        0,0,0,3258,3259,1,0,0,0,3259,3260,1,0,0,0,3260,3261,5,3,0,0,3261,
        3311,1,0,0,0,3262,3263,5,315,0,0,3263,3265,5,2,0,0,3264,3266,7,54,
        0,0,3265,3264,1,0,0,0,3265,3266,1,0,0,0,3266,3268,1,0,0,0,3267,3269,
        3,244,122,0,3268,3267,1,0,0,0,3268,3269,1,0,0,0,3269,3270,1,0,0,
        0,3270,3271,5,123,0,0,3271,3272,3,244,122,0,3272,3273,5,3,0,0,3273,
        3311,1,0,0,0,3274,3275,5,215,0,0,3275,3276,5,2,0,0,3276,3277,3,244,
        122,0,3277,3278,5,224,0,0,3278,3279,3,244,122,0,3279,3280,5,123,
        0,0,3280,3283,3,244,122,0,3281,3282,5,119,0,0,3282,3284,3,244,122,
        0,3283,3281,1,0,0,0,3283,3284,1,0,0,0,3284,3285,1,0,0,0,3285,3286,
        5,3,0,0,3286,3311,1,0,0,0,3287,3288,7,55,0,0,3288,3289,5,2,0,0,3289,
        3290,3,244,122,0,3290,3291,5,3,0,0,3291,3292,5,347,0,0,3292,3293,
        5,130,0,0,3293,3294,5,2,0,0,3294,3295,5,209,0,0,3295,3296,5,31,0,
        0,3296,3297,3,100,50,0,3297,3304,5,3,0,0,3298,3299,5,114,0,0,3299,
        3300,5,2,0,0,3300,3301,5,344,0,0,3301,3302,3,240,120,0,3302,3303,
        5,3,0,0,3303,3305,1,0,0,0,3304,3298,1,0,0,0,3304,3305,1,0,0,0,3305,
        3308,1,0,0,0,3306,3307,5,213,0,0,3307,3309,3,314,157,0,3308,3306,
        1,0,0,0,3308,3309,1,0,0,0,3309,3311,1,0,0,0,3310,3061,1,0,0,0,3310,
        3063,1,0,0,0,3310,3075,1,0,0,0,3310,3087,1,0,0,0,3310,3099,1,0,0,
        0,3310,3112,1,0,0,0,3310,3119,1,0,0,0,3310,3132,1,0,0,0,3310,3141,
        1,0,0,0,3310,3150,1,0,0,0,3310,3159,1,0,0,0,3310,3166,1,0,0,0,3310,
        3167,1,0,0,0,3310,3168,1,0,0,0,3310,3172,1,0,0,0,3310,3182,1,0,0,
        0,3310,3186,1,0,0,0,3310,3191,1,0,0,0,3310,3223,1,0,0,0,3310,3227,
        1,0,0,0,3310,3239,1,0,0,0,3310,3240,1,0,0,0,3310,3244,1,0,0,0,3310,
        3251,1,0,0,0,3310,3262,1,0,0,0,3310,3274,1,0,0,0,3310,3287,1,0,0,
        0,3311,3322,1,0,0,0,3312,3313,10,9,0,0,3313,3314,5,6,0,0,3314,3315,
        3,244,122,0,3315,3316,5,7,0,0,3316,3321,1,0,0,0,3317,3318,10,7,0,
        0,3318,3319,5,5,0,0,3319,3321,3,332,166,0,3320,3312,1,0,0,0,3320,
        3317,1,0,0,0,3321,3324,1,0,0,0,3322,3320,1,0,0,0,3322,3323,1,0,0,
        0,3323,249,1,0,0,0,3324,3322,1,0,0,0,3325,3333,5,71,0,0,3326,3333,
        5,303,0,0,3327,3333,5,304,0,0,3328,3333,5,305,0,0,3329,3333,5,149,
        0,0,3330,3333,5,133,0,0,3331,3333,3,332,166,0,3332,3325,1,0,0,0,
        3332,3326,1,0,0,0,3332,3327,1,0,0,0,3332,3328,1,0,0,0,3332,3329,
        1,0,0,0,3332,3330,1,0,0,0,3332,3331,1,0,0,0,3333,251,1,0,0,0,3334,
        3350,5,198,0,0,3335,3350,5,376,0,0,3336,3337,5,371,0,0,3337,3350,
        3,332,166,0,3338,3350,3,262,131,0,3339,3340,3,250,125,0,3340,3341,
        3,342,171,0,3341,3350,1,0,0,0,3342,3350,3,338,169,0,3343,3350,3,
        260,130,0,3344,3346,3,342,171,0,3345,3344,1,0,0,0,3346,3347,1,0,
        0,0,3347,3345,1,0,0,0,3347,3348,1,0,0,0,3348,3350,1,0,0,0,3349,3334,
        1,0,0,0,3349,3335,1,0,0,0,3349,3336,1,0,0,0,3349,3338,1,0,0,0,3349,
        3339,1,0,0,0,3349,3342,1,0,0,0,3349,3343,1,0,0,0,3349,3345,1,0,0,
        0,3350,253,1,0,0,0,3351,3352,7,56,0,0,3352,255,1,0,0,0,3353,3354,
        7,57,0,0,3354,257,1,0,0,0,3355,3356,7,58,0,0,3356,259,1,0,0,0,3357,
        3358,7,59,0,0,3358,261,1,0,0,0,3359,3362,5,149,0,0,3360,3363,3,264,
        132,0,3361,3363,3,268,134,0,3362,3360,1,0,0,0,3362,3361,1,0,0,0,
        3363,263,1,0,0,0,3364,3366,3,266,133,0,3365,3367,3,270,135,0,3366,
        3365,1,0,0,0,3366,3367,1,0,0,0,3367,265,1,0,0,0,3368,3369,3,272,
        136,0,3369,3370,3,274,137,0,3370,3372,1,0,0,0,3371,3368,1,0,0,0,
        3372,3373,1,0,0,0,3373,3371,1,0,0,0,3373,3374,1,0,0,0,3374,267,1,
        0,0,0,3375,3378,3,270,135,0,3376,3379,3,266,133,0,3377,3379,3,270,
        135,0,3378,3376,1,0,0,0,3378,3377,1,0,0,0,3378,3379,1,0,0,0,3379,
        269,1,0,0,0,3380,3381,3,272,136,0,3381,3382,3,276,138,0,3382,3383,
        5,309,0,0,3383,3384,3,276,138,0,3384,271,1,0,0,0,3385,3387,7,60,
        0,0,3386,3385,1,0,0,0,3386,3387,1,0,0,0,3387,3391,1,0,0,0,3388,3392,
        5,382,0,0,3389,3392,5,384,0,0,3390,3392,3,342,171,0,3391,3388,1,
        0,0,0,3391,3389,1,0,0,0,3391,3390,1,0,0,0,3392,273,1,0,0,0,3393,
        3394,7,61,0,0,3394,275,1,0,0,0,3395,3396,7,62,0,0,3396,277,1,0,0,
        0,3397,3401,5,116,0,0,3398,3399,5,9,0,0,3399,3401,3,328,164,0,3400,
        3397,1,0,0,0,3400,3398,1,0,0,0,3401,279,1,0,0,0,3402,3433,5,27,0,
        0,3403,3433,5,308,0,0,3404,3433,5,32,0,0,3405,3433,5,276,0,0,3406,
        3433,5,272,0,0,3407,3433,5,150,0,0,3408,3433,5,151,0,0,3409,3433,
        5,25,0,0,3410,3433,5,174,0,0,3411,3433,5,117,0,0,3412,3433,5,234,
        0,0,3413,3433,5,95,0,0,3414,3433,5,71,0,0,3415,3433,5,303,0,0,3416,
        3433,5,305,0,0,3417,3433,5,304,0,0,3418,3433,5,285,0,0,3419,3433,
        5,41,0,0,3420,3433,5,40,0,0,3421,3433,5,334,0,0,3422,3433,5,26,0,
        0,3423,3433,5,80,0,0,3424,3433,5,79,0,0,3425,3433,5,200,0,0,3426,
        3433,5,340,0,0,3427,3433,5,149,0,0,3428,3433,5,19,0,0,3429,3433,
        5,286,0,0,3430,3433,5,177,0,0,3431,3433,3,332,166,0,3432,3402,1,
        0,0,0,3432,3403,1,0,0,0,3432,3404,1,0,0,0,3432,3405,1,0,0,0,3432,
        3406,1,0,0,0,3432,3407,1,0,0,0,3432,3408,1,0,0,0,3432,3409,1,0,0,
        0,3432,3410,1,0,0,0,3432,3411,1,0,0,0,3432,3412,1,0,0,0,3432,3413,
        1,0,0,0,3432,3414,1,0,0,0,3432,3415,1,0,0,0,3432,3416,1,0,0,0,3432,
        3417,1,0,0,0,3432,3418,1,0,0,0,3432,3419,1,0,0,0,3432,3420,1,0,0,
        0,3432,3421,1,0,0,0,3432,3422,1,0,0,0,3432,3423,1,0,0,0,3432,3424,
        1,0,0,0,3432,3425,1,0,0,0,3432,3426,1,0,0,0,3432,3427,1,0,0,0,3432,
        3428,1,0,0,0,3432,3429,1,0,0,0,3432,3430,1,0,0,0,3432,3431,1,0,0,
        0,3433,281,1,0,0,0,3434,3435,5,19,0,0,3435,3436,5,356,0,0,3436,3437,
        3,282,141,0,3437,3438,5,358,0,0,3438,3488,1,0,0,0,3439,3440,5,177,
        0,0,3440,3441,5,356,0,0,3441,3442,3,282,141,0,3442,3443,5,4,0,0,
        3443,3444,3,282,141,0,3444,3445,5,358,0,0,3445,3488,1,0,0,0,3446,
        3460,5,286,0,0,3447,3456,5,356,0,0,3448,3453,3,306,153,0,3449,3450,
        5,4,0,0,3450,3452,3,306,153,0,3451,3449,1,0,0,0,3452,3455,1,0,0,
        0,3453,3451,1,0,0,0,3453,3454,1,0,0,0,3454,3457,1,0,0,0,3455,3453,
        1,0,0,0,3456,3448,1,0,0,0,3456,3457,1,0,0,0,3457,3458,1,0,0,0,3458,
        3461,5,358,0,0,3459,3461,5,354,0,0,3460,3447,1,0,0,0,3460,3459,1,
        0,0,0,3461,3488,1,0,0,0,3462,3463,5,149,0,0,3463,3466,7,63,0,0,3464,
        3465,5,309,0,0,3465,3467,5,186,0,0,3466,3464,1,0,0,0,3466,3467,1,
        0,0,0,3467,3488,1,0,0,0,3468,3469,5,149,0,0,3469,3472,7,64,0,0,3470,
        3471,5,309,0,0,3471,3473,7,65,0,0,3472,3470,1,0,0,0,3472,3473,1,
        0,0,0,3473,3488,1,0,0,0,3474,3485,3,280,140,0,3475,3476,5,2,0,0,
        3476,3481,5,382,0,0,3477,3478,5,4,0,0,3478,3480,5,382,0,0,3479,3477,
        1,0,0,0,3480,3483,1,0,0,0,3481,3479,1,0,0,0,3481,3482,1,0,0,0,3482,
        3484,1,0,0,0,3483,3481,1,0,0,0,3484,3486,5,3,0,0,3485,3475,1,0,0,
        0,3485,3486,1,0,0,0,3486,3488,1,0,0,0,3487,3434,1,0,0,0,3487,3439,
        1,0,0,0,3487,3446,1,0,0,0,3487,3462,1,0,0,0,3487,3468,1,0,0,0,3487,
        3474,1,0,0,0,3488,283,1,0,0,0,3489,3494,3,286,143,0,3490,3491,5,
        4,0,0,3491,3493,3,286,143,0,3492,3490,1,0,0,0,3493,3496,1,0,0,0,
        3494,3492,1,0,0,0,3494,3495,1,0,0,0,3495,285,1,0,0,0,3496,3494,1,
        0,0,0,3497,3498,3,84,42,0,3498,3502,3,282,141,0,3499,3501,3,292,
        146,0,3500,3499,1,0,0,0,3501,3504,1,0,0,0,3502,3500,1,0,0,0,3502,
        3503,1,0,0,0,3503,287,1,0,0,0,3504,3502,1,0,0,0,3505,3510,3,290,
        145,0,3506,3507,5,4,0,0,3507,3509,3,290,145,0,3508,3506,1,0,0,0,
        3509,3512,1,0,0,0,3510,3508,1,0,0,0,3510,3511,1,0,0,0,3511,289,1,
        0,0,0,3512,3510,1,0,0,0,3513,3514,3,78,39,0,3514,3518,3,282,141,
        0,3515,3517,3,292,146,0,3516,3515,1,0,0,0,3517,3520,1,0,0,0,3518,
        3516,1,0,0,0,3518,3519,1,0,0,0,3519,291,1,0,0,0,3520,3518,1,0,0,
        0,3521,3522,5,197,0,0,3522,3529,5,198,0,0,3523,3524,5,82,0,0,3524,
        3529,3,232,116,0,3525,3526,5,51,0,0,3526,3529,3,342,171,0,3527,3529,
        3,278,139,0,3528,3521,1,0,0,0,3528,3523,1,0,0,0,3528,3525,1,0,0,
        0,3528,3527,1,0,0,0,3529,293,1,0,0,0,3530,3531,7,66,0,0,3531,3532,
        3,232,116,0,3532,295,1,0,0,0,3533,3538,3,298,149,0,3534,3535,5,4,
        0,0,3535,3537,3,298,149,0,3536,3534,1,0,0,0,3537,3540,1,0,0,0,3538,
        3536,1,0,0,0,3538,3539,1,0,0,0,3539,297,1,0,0,0,3540,3538,1,0,0,
        0,3541,3542,3,328,164,0,3542,3545,3,282,141,0,3543,3544,5,197,0,
        0,3544,3546,5,198,0,0,3545,3543,1,0,0,0,3545,3546,1,0,0,0,3546,3549,
        1,0,0,0,3547,3548,5,51,0,0,3548,3550,3,342,171,0,3549,3547,1,0,0,
        0,3549,3550,1,0,0,0,3550,299,1,0,0,0,3551,3556,3,302,151,0,3552,
        3553,5,4,0,0,3553,3555,3,302,151,0,3554,3552,1,0,0,0,3555,3558,1,
        0,0,0,3556,3554,1,0,0,0,3556,3557,1,0,0,0,3557,301,1,0,0,0,3558,
        3556,1,0,0,0,3559,3560,3,84,42,0,3560,3564,3,282,141,0,3561,3563,
        3,304,152,0,3562,3561,1,0,0,0,3563,3566,1,0,0,0,3564,3562,1,0,0,
        0,3564,3565,1,0,0,0,3565,303,1,0,0,0,3566,3564,1,0,0,0,3567,3568,
        5,197,0,0,3568,3581,5,198,0,0,3569,3570,5,82,0,0,3570,3581,3,232,
        116,0,3571,3572,5,127,0,0,3572,3573,5,12,0,0,3573,3574,5,20,0,0,
        3574,3575,5,2,0,0,3575,3576,3,232,116,0,3576,3577,5,3,0,0,3577,3581,
        1,0,0,0,3578,3579,5,51,0,0,3579,3581,3,342,171,0,3580,3567,1,0,0,
        0,3580,3569,1,0,0,0,3580,3571,1,0,0,0,3580,3578,1,0,0,0,3581,305,
        1,0,0,0,3582,3584,3,332,166,0,3583,3585,5,371,0,0,3584,3583,1,0,
        0,0,3584,3585,1,0,0,0,3585,3586,1,0,0,0,3586,3589,3,282,141,0,3587,
        3588,5,197,0,0,3588,3590,5,198,0,0,3589,3587,1,0,0,0,3589,3590,1,
        0,0,0,3590,3593,1,0,0,0,3591,3592,5,51,0,0,3592,3594,3,342,171,0,
        3593,3591,1,0,0,0,3593,3594,1,0,0,0,3594,307,1,0,0,0,3595,3596,5,
        343,0,0,3596,3597,3,232,116,0,3597,3598,5,300,0,0,3598,3599,3,232,
        116,0,3599,309,1,0,0,0,3600,3601,5,345,0,0,3601,3602,3,328,164,0,
        3602,3603,5,20,0,0,3603,3611,3,314,157,0,3604,3605,5,4,0,0,3605,
        3606,3,328,164,0,3606,3607,5,20,0,0,3607,3608,3,314,157,0,3608,3610,
        1,0,0,0,3609,3604,1,0,0,0,3610,3613,1,0,0,0,3611,3609,1,0,0,0,3611,
        3612,1,0,0,0,3612,311,1,0,0,0,3613,3611,1,0,0,0,3614,3615,5,351,
        0,0,3615,3616,5,31,0,0,3616,3617,3,82,41,0,3617,313,1,0,0,0,3618,
        3658,3,328,164,0,3619,3620,5,2,0,0,3620,3621,3,328,164,0,3621,3622,
        5,3,0,0,3622,3658,1,0,0,0,3623,3651,5,2,0,0,3624,3625,5,44,0,0,3625,
        3626,5,31,0,0,3626,3631,3,232,116,0,3627,3628,5,4,0,0,3628,3630,
        3,232,116,0,3629,3627,1,0,0,0,3630,3633,1,0,0,0,3631,3629,1,0,0,
        0,3631,3632,1,0,0,0,3632,3652,1,0,0,0,3633,3631,1,0,0,0,3634,3635,
        7,35,0,0,3635,3636,5,31,0,0,3636,3641,3,232,116,0,3637,3638,5,4,
        0,0,3638,3640,3,232,116,0,3639,3637,1,0,0,0,3640,3643,1,0,0,0,3641,
        3639,1,0,0,0,3641,3642,1,0,0,0,3642,3645,1,0,0,0,3643,3641,1,0,0,
        0,3644,3634,1,0,0,0,3644,3645,1,0,0,0,3645,3649,1,0,0,0,3646,3647,
        7,36,0,0,3647,3648,5,31,0,0,3648,3650,3,92,46,0,3649,3646,1,0,0,
        0,3649,3650,1,0,0,0,3650,3652,1,0,0,0,3651,3624,1,0,0,0,3651,3644,
        1,0,0,0,3652,3654,1,0,0,0,3653,3655,3,316,158,0,3654,3653,1,0,0,
        0,3654,3655,1,0,0,0,3655,3656,1,0,0,0,3656,3658,5,3,0,0,3657,3618,
        1,0,0,0,3657,3619,1,0,0,0,3657,3623,1,0,0,0,3658,315,1,0,0,0,3659,
        3660,7,67,0,0,3660,3668,3,318,159,0,3661,3662,7,67,0,0,3662,3663,
        5,24,0,0,3663,3664,3,318,159,0,3664,3665,5,14,0,0,3665,3666,3,318,
        159,0,3666,3668,1,0,0,0,3667,3659,1,0,0,0,3667,3661,1,0,0,0,3668,
        317,1,0,0,0,3669,3670,5,321,0,0,3670,3677,7,68,0,0,3671,3672,5,62,
        0,0,3672,3677,5,257,0,0,3673,3674,3,232,116,0,3674,3675,7,68,0,0,
        3675,3677,1,0,0,0,3676,3669,1,0,0,0,3676,3671,1,0,0,0,3676,3673,
        1,0,0,0,3677,319,1,0,0,0,3678,3683,3,326,163,0,3679,3680,5,4,0,0,
        3680,3682,3,326,163,0,3681,3679,1,0,0,0,3682,3685,1,0,0,0,3683,3681,
        1,0,0,0,3683,3684,1,0,0,0,3684,321,1,0,0,0,3685,3683,1,0,0,0,3686,
        3687,5,136,0,0,3687,3688,5,2,0,0,3688,3689,3,232,116,0,3689,3690,
        5,3,0,0,3690,3696,1,0,0,0,3691,3696,3,326,163,0,3692,3696,5,114,
        0,0,3693,3696,5,161,0,0,3694,3696,5,250,0,0,3695,3686,1,0,0,0,3695,
        3691,1,0,0,0,3695,3692,1,0,0,0,3695,3693,1,0,0,0,3695,3694,1,0,0,
        0,3696,323,1,0,0,0,3697,3698,3,326,163,0,3698,325,1,0,0,0,3699,3704,
        3,332,166,0,3700,3701,5,5,0,0,3701,3703,3,332,166,0,3702,3700,1,
        0,0,0,3703,3706,1,0,0,0,3704,3702,1,0,0,0,3704,3705,1,0,0,0,3705,
        327,1,0,0,0,3706,3704,1,0,0,0,3707,3708,3,332,166,0,3708,3709,3,
        330,165,0,3709,329,1,0,0,0,3710,3711,5,362,0,0,3711,3713,3,332,166,
        0,3712,3710,1,0,0,0,3713,3714,1,0,0,0,3714,3712,1,0,0,0,3714,3715,
        1,0,0,0,3715,3718,1,0,0,0,3716,3718,1,0,0,0,3717,3712,1,0,0,0,3717,
        3716,1,0,0,0,3718,331,1,0,0,0,3719,3722,3,334,167,0,3720,3722,3,
        346,173,0,3721,3719,1,0,0,0,3721,3720,1,0,0,0,3722,333,1,0,0,0,3723,
        3728,5,388,0,0,3724,3728,3,336,168,0,3725,3728,3,344,172,0,3726,
        3728,3,348,174,0,3727,3723,1,0,0,0,3727,3724,1,0,0,0,3727,3725,1,
        0,0,0,3727,3726,1,0,0,0,3728,335,1,0,0,0,3729,3730,7,69,0,0,3730,
        337,1,0,0,0,3731,3733,5,362,0,0,3732,3731,1,0,0,0,3732,3733,1,0,
        0,0,3733,3734,1,0,0,0,3734,3735,7,70,0,0,3735,339,1,0,0,0,3736,3737,
        5,319,0,0,3737,3750,3,282,141,0,3738,3739,5,51,0,0,3739,3750,3,342,
        171,0,3740,3750,3,278,139,0,3741,3742,7,71,0,0,3742,3743,5,197,0,
        0,3743,3750,5,198,0,0,3744,3745,5,269,0,0,3745,3746,5,82,0,0,3746,
        3750,3,232,116,0,3747,3748,5,96,0,0,3748,3750,5,82,0,0,3749,3736,
        1,0,0,0,3749,3738,1,0,0,0,3749,3740,1,0,0,0,3749,3741,1,0,0,0,3749,
        3744,1,0,0,0,3749,3747,1,0,0,0,3750,341,1,0,0,0,3751,3752,7,72,0,
        0,3752,343,1,0,0,0,3753,3754,7,73,0,0,3754,345,1,0,0,0,3755,3756,
        7,74,0,0,3756,347,1,0,0,0,3757,3758,7,75,0,0,3758,349,1,0,0,0,504,
        353,360,364,369,376,381,391,393,413,417,423,426,429,433,436,440,
        447,450,454,457,462,475,477,482,491,494,498,501,507,518,524,529,
        562,572,583,594,605,610,619,623,629,633,638,644,656,664,670,681,
        685,690,705,709,716,720,726,756,760,765,772,778,781,784,788,792,
        801,803,812,815,824,829,835,842,845,849,864,867,873,877,894,896,
        904,908,914,917,921,924,930,935,939,946,949,952,959,964,973,981,
        987,990,993,999,1003,1008,1011,1015,1017,1025,1033,1036,1043,1046,
        1049,1058,1063,1069,1074,1077,1081,1084,1088,1098,1103,1116,1119,
        1127,1133,1136,1139,1144,1152,1157,1163,1169,1172,1179,1186,1194,
        1206,1214,1241,1244,1250,1259,1268,1274,1279,1284,1291,1296,1301,
        1308,1316,1319,1325,1332,1336,1399,1407,1414,1422,1434,1439,1448,
        1456,1461,1463,1471,1476,1480,1483,1491,1496,1505,1510,1513,1518,
        1522,1527,1529,1534,1543,1551,1557,1566,1573,1582,1587,1590,1615,
        1617,1629,1636,1639,1646,1650,1656,1664,1671,1674,1682,1693,1704,
        1712,1718,1729,1736,1743,1755,1763,1769,1775,1778,1794,1803,1814,
        1819,1824,1829,1834,1837,1840,1844,1849,1856,1864,1873,1879,1885,
        1888,1890,1898,1908,1917,1921,1924,1928,1932,1940,1944,1947,1950,
        1953,1957,1961,1966,1970,1973,1976,1979,1983,1988,1992,1995,1998,
        2001,2003,2009,2016,2021,2024,2027,2031,2041,2045,2047,2050,2054,
        2060,2064,2075,2083,2085,2092,2096,2108,2115,2130,2135,2142,2158,
        2163,2176,2181,2189,2195,2199,2202,2205,2212,2215,2221,2230,2240,
        2255,2260,2262,2267,2276,2286,2291,2295,2300,2307,2312,2316,2319,
        2322,2336,2349,2354,2358,2361,2366,2371,2375,2378,2390,2401,2414,
        2425,2430,2433,2437,2440,2452,2461,2464,2469,2476,2479,2485,2491,
        2493,2496,2501,2505,2511,2515,2518,2523,2526,2531,2533,2539,2544,
        2551,2554,2572,2574,2577,2588,2597,2604,2612,2620,2625,2628,2631,
        2639,2647,2657,2669,2672,2677,2682,2689,2696,2698,2711,2717,2719,
        2728,2730,2738,2742,2745,2749,2751,2760,2772,2774,2781,2788,2794,
        2800,2802,2809,2817,2825,2831,2836,2843,2849,2852,2856,2858,2865,
        2874,2881,2891,2896,2900,2910,2917,2930,2932,2940,2942,2946,2954,
        2963,2969,2977,2982,2994,2999,3002,3008,3012,3017,3022,3027,3033,
        3054,3056,3067,3079,3091,3095,3104,3108,3126,3129,3137,3146,3155,
        3178,3194,3201,3204,3213,3217,3221,3233,3258,3265,3268,3283,3304,
        3308,3310,3320,3322,3332,3347,3349,3362,3366,3373,3378,3386,3391,
        3400,3432,3453,3456,3460,3466,3472,3481,3485,3487,3494,3502,3510,
        3518,3528,3538,3545,3549,3556,3564,3580,3584,3589,3593,3611,3631,
        3641,3644,3649,3651,3654,3657,3667,3676,3683,3695,3704,3714,3717,
        3721,3727,3732,3749
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!SparkSqlParser.__ATN) {
            SparkSqlParser.__ATN = new antlr.ATNDeserializer().deserialize(SparkSqlParser._serializedATN);
        }

        return SparkSqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(SparkSqlParser.literalNames, SparkSqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return SparkSqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = SparkSqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EOF, 0)!;
    }
    public singleStatement(): SingleStatementContext[];
    public singleStatement(i: number): SingleStatementContext | null;
    public singleStatement(i?: number): SingleStatementContext[] | SingleStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SingleStatementContext);
        }

        return this.getRuleContext(i, SingleStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_program;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_singleStatement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSingleStatement) {
             listener.enterSingleStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSingleStatement) {
             listener.exitSingleStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSingleStatement) {
            return visitor.visitSingleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_statement;
    }
    public override copyFrom(ctx: StatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ResetAnyContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RESET, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterResetAny) {
             listener.enterResetAny(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitResetAny) {
             listener.exitResetAny(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResetAny) {
            return visitor.visitResetAny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableDropColumnContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterTableDropColumn) {
             listener.enterAlterTableDropColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterTableDropColumn) {
             listener.exitAlterTableDropColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableDropColumn) {
            return visitor.visitAlterTableDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropMaterializedView) {
             listener.enterDropMaterializedView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropMaterializedView) {
             listener.exitDropMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropMaterializedView) {
            return visitor.visitDropMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterViewQueryContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterViewQuery) {
             listener.enterAlterViewQuery(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterViewQuery) {
             listener.exitAlterViewQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterViewQuery) {
            return visitor.visitAlterViewQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASCADE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropNamespace) {
             listener.enterDropNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropNamespace) {
             listener.exitDropNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropNamespace) {
            return visitor.visitDropNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTempViewUsingContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public tableProvider(): TableProviderContext {
        return this.getRuleContext(0, TableProviderContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public colTypeList(): ColTypeListContext | null {
        return this.getRuleContext(0, ColTypeListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTempViewUsing) {
             listener.enterCreateTempViewUsing(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTempViewUsing) {
             listener.exitCreateTempViewUsing(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTempViewUsing) {
            return visitor.visitCreateTempViewUsing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TO, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRenameTable) {
             listener.enterRenameTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRenameTable) {
             listener.exitRenameTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameTable) {
            return visitor.visitRenameTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeclareVariableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DECLARE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DECLARE, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public variableDefaultExpression(): VariableDefaultExpressionContext | null {
        return this.getRuleContext(0, VariableDefaultExpressionContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDeclareVariable) {
             listener.enterDeclareVariable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDeclareVariable) {
             listener.exitDeclareVariable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclareVariable) {
            return visitor.visitDeclareVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FailNativeCommandContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ROLE, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFailNativeCommand) {
             listener.enterFailNativeCommand(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFailNativeCommand) {
             listener.exitFailNativeCommand(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFailNativeCommand) {
            return visitor.visitFailNativeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetCatalogContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_CATALOG(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CATALOG, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetCatalog) {
             listener.enterSetCatalog(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetCatalog) {
             listener.exitSetCatalog(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetCatalog) {
            return visitor.visitSetCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterMaterializedViewPropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public propertyList(): PropertyListContext {
        return this.getRuleContext(0, PropertyListContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterMaterializedViewProperties) {
             listener.enterAlterMaterializedViewProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterMaterializedViewProperties) {
             listener.exitAlterMaterializedViewProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterMaterializedViewProperties) {
            return visitor.visitAlterMaterializedViewProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ClearCacheContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CLEAR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CLEAR, 0)!;
    }
    public KW_CACHE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CACHE, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterClearCache) {
             listener.enterClearCache(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitClearCache) {
             listener.exitClearCache(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitClearCache) {
            return visitor.visitClearCache(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesContext extends StatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_TABLES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLES, 0)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowTables) {
             listener.enterShowTables(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowTables) {
             listener.exitShowTables(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTables) {
            return visitor.visitShowTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RecoverPartitionsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_RECOVER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RECOVER, 0)!;
    }
    public KW_PARTITIONS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRecoverPartitions) {
             listener.enterRecoverPartitions(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRecoverPartitions) {
             listener.exitRecoverPartitions(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRecoverPartitions) {
            return visitor.visitRecoverPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropIndexContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INDEX, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropIndex) {
             listener.enterDropIndex(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropIndex) {
             listener.exitDropIndex(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndex) {
            return visitor.visitDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneIntervalContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ZONE, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTimeZoneInterval) {
             listener.enterSetTimeZoneInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTimeZoneInterval) {
             listener.exitSetTimeZoneInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZoneInterval) {
            return visitor.visitSetTimeZoneInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogsContext extends StatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_CATALOGS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CATALOGS, 0)!;
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowCatalogs) {
             listener.enterShowCatalogs(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowCatalogs) {
             listener.exitShowCatalogs(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCatalogs) {
            return visitor.visitShowCatalogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCurrentNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowCurrentNamespace) {
             listener.enterShowCurrentNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowCurrentNamespace) {
             listener.exitShowCurrentNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCurrentNamespace) {
            return visitor.visitShowCurrentNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTablePartitionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TO, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRenameTablePartition) {
             listener.enterRenameTablePartition(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRenameTablePartition) {
             listener.exitRenameTablePartition(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameTablePartition) {
            return visitor.visitRenameTablePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepairTableContext extends StatementContext {
    public _option?: Token | null;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REPAIR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REPAIR, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MSCK, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYNC, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRepairTable) {
             listener.enterRepairTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRepairTable) {
             listener.exitRepairTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRepairTable) {
            return visitor.visitRepairTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshResourceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0)!;
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRefreshResource) {
             listener.enterRefreshResource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRefreshResource) {
             listener.exitRefreshResource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshResource) {
            return visitor.visitRefreshResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetVariableAssignmentContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public assignmentList(): AssignmentListContext {
        return this.getRuleContext(0, AssignmentListContext)!;
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetVariableAssignment) {
             listener.enterSetVariableAssignment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetVariableAssignment) {
             listener.exitSetVariableAssignment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetVariableAssignment) {
            return visitor.visitSetVariableAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowCreateTable) {
             listener.enterShowCreateTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowCreateTable) {
             listener.exitShowCreateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTable) {
            return visitor.visitShowCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowNamespacesContext extends StatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACES, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASES, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMAS, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowNamespaces) {
             listener.enterShowNamespaces(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowNamespaces) {
             listener.exitShowNamespaces(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowNamespaces) {
            return visitor.visitShowNamespaces(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnsContext extends StatementContext {
    public _table?: TableNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode[];
    public KW_FROM(i: number): antlr.TerminalNode | null;
    public KW_FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_FROM);
    	} else {
    		return this.getToken(SparkSqlParser.KW_FROM, i);
    	}
    }
    public KW_IN(): antlr.TerminalNode[];
    public KW_IN(i: number): antlr.TerminalNode | null;
    public KW_IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_IN);
    	} else {
    		return this.getToken(SparkSqlParser.KW_IN, i);
    	}
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowColumns) {
             listener.enterShowColumns(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowColumns) {
             listener.exitShowColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowColumns) {
            return visitor.visitShowColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReplaceTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public createTableClauses(): CreateTableClausesContext {
        return this.getRuleContext(0, CreateTableClausesContext)!;
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CREATE, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext | null {
        return this.getRuleContext(0, CreateOrReplaceTableColTypeListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterReplaceTable) {
             listener.enterReplaceTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitReplaceTable) {
             listener.exitReplaceTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceTable) {
            return visitor.visitReplaceTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeTablesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0)!;
    }
    public KW_TABLES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLES, 0)!;
    }
    public KW_COMPUTE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOSCAN, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAnalyzeTables) {
             listener.enterAnalyzeTables(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAnalyzeTables) {
             listener.exitAnalyzeTables(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeTables) {
            return visitor.visitAnalyzeTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddTablePartitionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ADD, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public partitionSpecLocation(): PartitionSpecLocationContext[];
    public partitionSpecLocation(i: number): PartitionSpecLocationContext | null;
    public partitionSpecLocation(i?: number): PartitionSpecLocationContext[] | PartitionSpecLocationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecLocationContext);
        }

        return this.getRuleContext(i, PartitionSpecLocationContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAddTablePartition) {
             listener.enterAddTablePartition(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAddTablePartition) {
             listener.exitAddTablePartition(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAddTablePartition) {
            return visitor.visitAddTablePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetNamespaceLocationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetNamespaceLocation) {
             listener.enterSetNamespaceLocation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetNamespaceLocation) {
             listener.exitSetNamespaceLocation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetNamespaceLocation) {
            return visitor.visitSetNamespaceLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRefreshTable) {
             listener.enterRefreshTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRefreshTable) {
             listener.exitRefreshTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshTable) {
            return visitor.visitRefreshTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetAnyContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetAny) {
             listener.enterSetAny(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetAny) {
             listener.exitSetAny(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetAny) {
            return visitor.visitSetAny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetConfigContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RESET, 0)!;
    }
    public quotedIdentifier(): QuotedIdentifierContext {
        return this.getRuleContext(0, QuotedIdentifierContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterResetConfig) {
             listener.enterResetConfig(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitResetConfig) {
             listener.exitResetConfig(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResetConfig) {
            return visitor.visitResetConfig(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetConfigAnyKeyContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EQ, 0)!;
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.BACKQUOTED_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetConfigAnyKey) {
             listener.enterSetConfigAnyKey(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetConfigAnyKey) {
             listener.exitSetConfigAnyKey(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetConfigAnyKey) {
            return visitor.visitSetConfigAnyKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetNamespacePropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public propertyList(): PropertyListContext {
        return this.getRuleContext(0, PropertyListContext)!;
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PROPERTIES, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetNamespaceProperties) {
             listener.enterSetNamespaceProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetNamespaceProperties) {
             listener.exitSetNamespaceProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetNamespaceProperties) {
            return visitor.visitSetNamespaceProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ManageResourceContext extends StatementContext {
    public _op?: Token | null;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIST, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterManageResource) {
             listener.enterManageResource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitManageResource) {
             listener.exitManageResource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitManageResource) {
            return visitor.visitManageResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainStatementContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_EXPLAIN, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOGICAL, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CODEGEN, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COST, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExplainStatement) {
             listener.enterExplainStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExplainStatement) {
             listener.exitExplainStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_COMPUTE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOSCAN, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public columnNameSeq(): ColumnNameSeqContext | null {
        return this.getRuleContext(0, ColumnNameSeqContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAnalyze) {
             listener.enterAnalyze(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAnalyze) {
             listener.exitAnalyze(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyze) {
            return visitor.visitAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateFunctionContext extends StatementContext {
    public _className?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0)!;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        return this.getRuleContext(0, FunctionNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateFunction) {
             listener.enterCreateFunction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateFunction) {
             listener.exitCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnCacheTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UNCACHE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_UNCACHE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnCacheTable) {
             listener.enterUnCacheTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnCacheTable) {
             listener.exitUnCacheTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnCacheTable) {
            return visitor.visitUnCacheTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableAddColumnsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ADD, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public qualifiedColTypeWithPositionSeqForAdd(): QualifiedColTypeWithPositionSeqForAddContext {
        return this.getRuleContext(0, QualifiedColTypeWithPositionSeqForAddContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterTableAddColumns) {
             listener.enterAlterTableAddColumns(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterTableAddColumns) {
             listener.exitAlterTableAddColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableAddColumns) {
            return visitor.visitAlterTableAddColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class HiveReplaceColumnsContext extends StatementContext {
    public _table?: TableNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public qualifiedColTypeWithPositionSeqForReplace(): QualifiedColTypeWithPositionSeqForReplaceContext {
        return this.getRuleContext(0, QualifiedColTypeWithPositionSeqForReplaceContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHiveReplaceColumns) {
             listener.enterHiveReplaceColumns(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHiveReplaceColumns) {
             listener.exitHiveReplaceColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHiveReplaceColumns) {
            return visitor.visitHiveReplaceColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableAddColumnContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ADD, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0)!;
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext {
        return this.getRuleContext(0, QualifiedColTypeWithPositionForAddContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterTableAddColumn) {
             listener.enterAlterTableAddColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterTableAddColumn) {
             listener.exitAlterTableAddColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableAddColumn) {
            return visitor.visitAlterTableAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public createTableClauses(): CreateTableClausesContext {
        return this.getRuleContext(0, CreateTableClausesContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTERNAL, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext | null {
        return this.getRuleContext(0, CreateOrReplaceTableColTypeListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DmlStatementContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public dmlStatementNoWith(): DmlStatementNoWithContext {
        return this.getRuleContext(0, DmlStatementNoWithContext)!;
    }
    public ctes(): CtesContext | null {
        return this.getRuleContext(0, CtesContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDmlStatement) {
             listener.enterDmlStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDmlStatement) {
             listener.exitDmlStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDmlStatement) {
            return visitor.visitDmlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterMaterializedViewRewriteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public KW_REWRITE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REWRITE, 0)!;
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ENABLE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISABLE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterMaterializedViewRewrite) {
             listener.enterAlterMaterializedViewRewrite(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterMaterializedViewRewrite) {
             listener.exitAlterMaterializedViewRewrite(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterMaterializedViewRewrite) {
            return visitor.visitAlterMaterializedViewRewrite(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableLikeContext extends StatementContext {
    public _target?: TableNameCreateContext;
    public _source?: TableNameContext;
    public _tableProps?: PropertyListContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LIKE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public tableProvider(): TableProviderContext[];
    public tableProvider(i: number): TableProviderContext | null;
    public tableProvider(i?: number): TableProviderContext[] | TableProviderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableProviderContext);
        }

        return this.getRuleContext(i, TableProviderContext);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext[];
    public createFileFormat(i: number): CreateFileFormatContext | null;
    public createFileFormat(i?: number): CreateFileFormatContext[] | CreateFileFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFileFormatContext);
        }

        return this.getRuleContext(i, CreateFileFormatContext);
    }
    public tableLifecycle(): TableLifecycleContext[];
    public tableLifecycle(i: number): TableLifecycleContext | null;
    public tableLifecycle(i?: number): TableLifecycleContext[] | TableLifecycleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableLifecycleContext);
        }

        return this.getRuleContext(i, TableLifecycleContext);
    }
    public KW_LOCATION(): antlr.TerminalNode[];
    public KW_LOCATION(i: number): antlr.TerminalNode | null;
    public KW_LOCATION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_LOCATION);
    	} else {
    		return this.getToken(SparkSqlParser.KW_LOCATION, i);
    	}
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTableLike) {
             listener.enterCreateTableLike(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTableLike) {
             listener.exitCreateTableLike(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableLike) {
            return visitor.visitCreateTableLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropFunction) {
             listener.enterDropFunction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropFunction) {
             listener.exitDropFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetVariableMultiAssignmentContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public multipartIdentifierList(): MultipartIdentifierListContext {
        return this.getRuleContext(0, MultipartIdentifierListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EQ, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetVariableMultiAssignment) {
             listener.enterSetVariableMultiAssignment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetVariableMultiAssignment) {
             listener.exitSetVariableMultiAssignment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetVariableMultiAssignment) {
            return visitor.visitSetVariableMultiAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeRelationContext extends StatementContext {
    public _option?: Token | null;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public describeColName(): DescribeColNameContext | null {
        return this.getRuleContext(0, DescribeColNameContext);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeRelation) {
             listener.enterDescribeRelation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeRelation) {
             listener.exitDescribeRelation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeRelation) {
            return visitor.visitDescribeRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LoadDataContext extends StatementContext {
    public _path?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LOAD, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DATA, 0)!;
    }
    public KW_INPATH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INPATH, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INTO, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLoadData) {
             listener.enterLoadData(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLoadData) {
             listener.exitLoadData(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadData) {
            return visitor.visitLoadData(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowPartitionsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_PARTITIONS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowPartitions) {
             listener.enterShowPartitions(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowPartitions) {
             listener.exitShowPartitions(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowPartitions) {
            return visitor.visitShowPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0)!;
    }
    public describeFuncName(): DescribeFuncNameContext {
        return this.getRuleContext(0, DescribeFuncNameContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeFunction) {
             listener.enterDescribeFunction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeFunction) {
             listener.exitDescribeFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeFunction) {
            return visitor.visitDescribeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTableColumnContext extends StatementContext {
    public _table?: TableNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RENAME, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TO, 0)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRenameTableColumn) {
             listener.enterRenameTableColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRenameTableColumn) {
             listener.exitRenameTableColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameTableColumn) {
            return visitor.visitRenameTableColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetConfigContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public quotedIdentifier(): QuotedIdentifierContext {
        return this.getRuleContext(0, QuotedIdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EQ, 0)!;
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.BACKQUOTED_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetConfig) {
             listener.enterSetConfig(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetConfig) {
             listener.exitSetConfig(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetConfig) {
            return visitor.visitSetConfig(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnsupportHiveCommandsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public unsupportedHiveNativeCommands(): UnsupportedHiveNativeCommandsContext {
        return this.getRuleContext(0, UnsupportedHiveNativeCommandsContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnsupportHiveCommands) {
             listener.enterUnsupportHiveCommands(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnsupportHiveCommands) {
             listener.exitUnsupportHiveCommands(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnsupportHiveCommands) {
            return visitor.visitUnsupportHiveCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementDefaultContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStatementDefault) {
             listener.enterStatementDefault(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStatementDefault) {
             listener.exitStatementDefault(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStatementDefault) {
            return visitor.visitStatementDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class HiveChangeColumnContext extends StatementContext {
    public _table?: TableNameContext;
    public _colName?: ColumnNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public KW_CHANGE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0)!;
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHiveChangeColumn) {
             listener.enterHiveChangeColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHiveChangeColumn) {
             listener.exitHiveChangeColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHiveChangeColumn) {
            return visitor.visitHiveChangeColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OptimizeTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_OPTIMIZE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public zOrderClause(): ZOrderClauseContext {
        return this.getRuleContext(0, ZOrderClauseContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterOptimizeTable) {
             listener.enterOptimizeTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitOptimizeTable) {
             listener.exitOptimizeTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptimizeTable) {
            return visitor.visitOptimizeTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ZONE, 0)!;
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTimeZone) {
             listener.enterSetTimeZone(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTimeZone) {
             listener.exitSetTimeZone(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZone) {
            return visitor.visitSetTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeQueryContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUERY, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeQuery) {
             listener.enterDescribeQuery(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeQuery) {
             listener.exitDescribeQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeQuery) {
            return visitor.visitDescribeQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TruncateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TRUNCATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTruncateTable) {
             listener.enterTruncateTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTruncateTable) {
             listener.exitTruncateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetConfigAndValueContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public quotedIdentifier(): QuotedIdentifierContext {
        return this.getRuleContext(0, QuotedIdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetConfigAndValue) {
             listener.enterSetConfigAndValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetConfigAndValue) {
             listener.exitSetConfigAndValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetConfigAndValue) {
            return visitor.visitSetConfigAndValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateMaterializedViewContext extends StatementContext {
    public _options?: PropertyListContext;
    public _partitioning?: PartitionFieldListContext;
    public _comment?: StringLitContext;
    public _tableProps?: PropertyListContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public skewSpec(): SkewSpecContext[];
    public skewSpec(i: number): SkewSpecContext | null;
    public skewSpec(i?: number): SkewSpecContext[] | SkewSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewSpecContext);
        }

        return this.getRuleContext(i, SkewSpecContext);
    }
    public bucketSpec(): BucketSpecContext[];
    public bucketSpec(i: number): BucketSpecContext | null;
    public bucketSpec(i?: number): BucketSpecContext[] | BucketSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BucketSpecContext);
        }

        return this.getRuleContext(i, BucketSpecContext);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext[];
    public createFileFormat(i: number): CreateFileFormatContext | null;
    public createFileFormat(i?: number): CreateFileFormatContext[] | CreateFileFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFileFormatContext);
        }

        return this.getRuleContext(i, CreateFileFormatContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode[];
    public KW_OPTIONS(i: number): antlr.TerminalNode | null;
    public KW_OPTIONS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_OPTIONS);
    	} else {
    		return this.getToken(SparkSqlParser.KW_OPTIONS, i);
    	}
    }
    public KW_PARTITIONED(): antlr.TerminalNode[];
    public KW_PARTITIONED(i: number): antlr.TerminalNode | null;
    public KW_PARTITIONED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PARTITIONED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PARTITIONED, i);
    	}
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_LOCATION(): antlr.TerminalNode[];
    public KW_LOCATION(i: number): antlr.TerminalNode | null;
    public KW_LOCATION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_LOCATION);
    	} else {
    		return this.getToken(SparkSqlParser.KW_LOCATION, i);
    	}
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_COMMENT(): antlr.TerminalNode[];
    public KW_COMMENT(i: number): antlr.TerminalNode | null;
    public KW_COMMENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_COMMENT);
    	} else {
    		return this.getToken(SparkSqlParser.KW_COMMENT, i);
    	}
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public partitionFieldList(): PartitionFieldListContext[];
    public partitionFieldList(i: number): PartitionFieldListContext | null;
    public partitionFieldList(i?: number): PartitionFieldListContext[] | PartitionFieldListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldListContext);
        }

        return this.getRuleContext(i, PartitionFieldListContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateMaterializedView) {
             listener.enterCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateMaterializedView) {
             listener.exitCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedView) {
            return visitor.visitCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableSerDeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SERDE, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTableSerDe) {
             listener.enterSetTableSerDe(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTableSerDe) {
             listener.exitSetTableSerDe(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableSerDe) {
            return visitor.visitSetTableSerDe(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateViewContext extends StatementContext {
    public _comment?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public identifierCommentList(): IdentifierCommentListContext | null {
        return this.getRuleContext(0, IdentifierCommentListContext);
    }
    public KW_COMMENT(): antlr.TerminalNode[];
    public KW_COMMENT(i: number): antlr.TerminalNode | null;
    public KW_COMMENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_COMMENT);
    	} else {
    		return this.getToken(SparkSqlParser.KW_COMMENT, i);
    	}
    }
    public KW_PARTITIONED(): antlr.TerminalNode[];
    public KW_PARTITIONED(i: number): antlr.TerminalNode | null;
    public KW_PARTITIONED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PARTITIONED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PARTITIONED, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_ON);
    	} else {
    		return this.getToken(SparkSqlParser.KW_ON, i);
    	}
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneAnyContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ZONE, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTimeZoneAny) {
             listener.enterSetTimeZoneAny(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTimeZoneAny) {
             listener.exitSetTimeZoneAny(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZoneAny) {
            return visitor.visitSetTimeZoneAny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTablePartitionsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropTablePartitions) {
             listener.enterDropTablePartitions(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropTablePartitions) {
             listener.exitDropTablePartitions(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTablePartitions) {
            return visitor.visitDropTablePartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTableExtendedContext extends StatementContext {
    public _ns?: NamespaceNameContext;
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public KW_EXTENDED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0)!;
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LIKE, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowTableExtended) {
             listener.enterShowTableExtended(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowTableExtended) {
             listener.exitShowTableExtended(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTableExtended) {
            return visitor.visitShowTableExtended(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeNamespace) {
             listener.enterDescribeNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeNamespace) {
             listener.exitDescribeNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeNamespace) {
            return visitor.visitDescribeNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableAlterColumnContext extends StatementContext {
    public _table?: TableNameContext;
    public _column?: ColumnNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode[];
    public KW_ALTER(i: number): antlr.TerminalNode | null;
    public KW_ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_ALTER);
    	} else {
    		return this.getToken(SparkSqlParser.KW_ALTER, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0);
    }
    public alterColumnAction(): AlterColumnActionContext | null {
        return this.getRuleContext(0, AlterColumnActionContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterTableAlterColumn) {
             listener.enterAlterTableAlterColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterTableAlterColumn) {
             listener.exitAlterTableAlterColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableAlterColumn) {
            return visitor.visitAlterTableAlterColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRefreshFunction) {
             listener.enterRefreshFunction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRefreshFunction) {
             listener.exitRefreshFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshFunction) {
            return visitor.visitRefreshFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IS, 0)!;
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public namespace(): NamespaceContext | null {
        return this.getRuleContext(0, NamespaceContext);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCommentTable) {
             listener.enterCommentTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCommentTable) {
             listener.exitCommentTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentTable) {
            return visitor.visitCommentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowMaterializedViewsContext extends StatementContext {
    public _db_name?: NamespaceNameContext;
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEWS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowMaterializedViews) {
             listener.enterShowMaterializedViews(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowMaterializedViews) {
             listener.exitShowMaterializedViews(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowMaterializedViews) {
            return visitor.visitShowMaterializedViews(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateIndexContext extends StatementContext {
    public _indexType?: IdentifierContext;
    public _options?: PropertyListContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INDEX, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public multipartIdentifierPropertyList(): MultipartIdentifierPropertyListContext {
        return this.getRuleContext(0, MultipartIdentifierPropertyListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateIndex) {
             listener.enterCreateIndex(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateIndex) {
             listener.exitCreateIndex(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndex) {
            return visitor.visitCreateIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UseNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_USE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_USE, 0)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public namespace(): NamespaceContext | null {
        return this.getRuleContext(0, NamespaceContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUseNamespace) {
             listener.enterUseNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUseNamespace) {
             listener.exitUseNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUseNamespace) {
            return visitor.visitUseNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropVariableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0)!;
    }
    public KW_VARIABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropVariable) {
             listener.enterDropVariable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropVariable) {
             listener.exitDropVariable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropVariable) {
            return visitor.visitDropVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateNamespaceContext extends StatementContext {
    public _comment?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceNameCreate(): NamespaceNameCreateContext {
        return this.getRuleContext(0, NamespaceNameCreateContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_COMMENT(): antlr.TerminalNode[];
    public KW_COMMENT(i: number): antlr.TerminalNode | null;
    public KW_COMMENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_COMMENT);
    	} else {
    		return this.getToken(SparkSqlParser.KW_COMMENT, i);
    	}
    }
    public KW_LOCATION(): antlr.TerminalNode[];
    public KW_LOCATION(i: number): antlr.TerminalNode | null;
    public KW_LOCATION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_LOCATION);
    	} else {
    		return this.getToken(SparkSqlParser.KW_LOCATION, i);
    	}
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_WITH(): antlr.TerminalNode[];
    public KW_WITH(i: number): antlr.TerminalNode | null;
    public KW_WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_WITH);
    	} else {
    		return this.getToken(SparkSqlParser.KW_WITH, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode[];
    public KW_DBPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_DBPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_DBPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_DBPROPERTIES, i);
    	}
    }
    public KW_PROPERTIES(): antlr.TerminalNode[];
    public KW_PROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_PROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PROPERTIES, i);
    	}
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateNamespace) {
             listener.enterCreateNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateNamespace) {
             listener.exitCreateNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateNamespace) {
            return visitor.visitCreateNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableSerDePropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0)!;
    }
    public propertyList(): PropertyListContext {
        return this.getRuleContext(0, PropertyListContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTableSerDeProperties) {
             listener.enterSetTableSerDeProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTableSerDeProperties) {
             listener.exitSetTableSerDeProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableSerDeProperties) {
            return visitor.visitSetTableSerDeProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRefreshMaterializedView) {
             listener.enterRefreshMaterializedView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRefreshMaterializedView) {
             listener.exitRefreshMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshMaterializedView) {
            return visitor.visitRefreshMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTblPropertiesContext extends StatementContext {
    public _table?: TableNameContext;
    public _key?: PropertyKeyContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public propertyKey(): PropertyKeyContext | null {
        return this.getRuleContext(0, PropertyKeyContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowTblProperties) {
             listener.enterShowTblProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowTblProperties) {
             listener.exitShowTblProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTblProperties) {
            return visitor.visitShowTblProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowCreateMaterializedView) {
             listener.enterShowCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowCreateMaterializedView) {
             listener.exitShowCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateMaterializedView) {
            return visitor.visitShowCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnsetTablePropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_UNSET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_UNSET, 0)!;
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public propertyList(): PropertyListContext {
        return this.getRuleContext(0, PropertyListContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnsetTableProperties) {
             listener.enterUnsetTableProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnsetTableProperties) {
             listener.exitUnsetTableProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnsetTableProperties) {
            return visitor.visitUnsetTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableLocationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTableLocation) {
             listener.enterSetTableLocation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTableLocation) {
             listener.exitSetTableLocation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableLocation) {
            return visitor.visitSetTableLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableColumnsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public columnNameSeq(): ColumnNameSeqContext {
        return this.getRuleContext(0, ColumnNameSeqContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropTableColumns) {
             listener.enterDropTableColumns(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropTableColumns) {
             listener.exitDropTableColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTableColumns) {
            return visitor.visitDropTableColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowViewsContext extends StatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_VIEWS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowViews) {
             listener.enterShowViews(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowViews) {
             listener.exitShowViews(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowViews) {
            return visitor.visitShowViews(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowFunctionsContext extends StatementContext {
    public _ns?: NamespaceNameContext;
    public _legacy?: MultipartIdentifierContext;
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_FUNCTIONS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FUNCTIONS, 0)!;
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USER, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowFunctions) {
             listener.enterShowFunctions(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowFunctions) {
             listener.exitShowFunctions(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowFunctions) {
            return visitor.visitShowFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CacheTableContext extends StatementContext {
    public _options?: PropertyListContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CACHE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CACHE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAZY, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCacheTable) {
             listener.enterCacheTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCacheTable) {
             listener.exitCacheTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCacheTable) {
            return visitor.visitCacheTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTablePropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public propertyList(): PropertyListContext {
        return this.getRuleContext(0, PropertyListContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTableProperties) {
             listener.enterSetTableProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTableProperties) {
             listener.exitSetTableProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableProperties) {
            return visitor.visitSetTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedHiveNativeCommandsContext extends antlr.ParserRuleContext {
    public _kw1?: Token | null;
    public _kw2?: Token | null;
    public _kw3?: Token | null;
    public _kw4?: Token | null;
    public _kw5?: Token | null;
    public _kw6?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLE, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CREATE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GRANT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REVOKE, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHOW, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEXES, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCKS, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLES, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEX, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALTER, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPORT, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IMPORT, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCK, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNLOCK, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MACRO, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCHANGE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARCHIVE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TOUCH, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACT, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONCATENATE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_START, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTION, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMIT, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLBACK, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DFS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unsupportedHiveNativeCommands;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnsupportedHiveNativeCommands) {
             listener.enterUnsupportedHiveNativeCommands(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnsupportedHiveNativeCommands) {
             listener.exitUnsupportedHiveNativeCommands(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnsupportedHiveNativeCommands) {
            return visitor.visitUnsupportedHiveNativeCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BucketSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INTO, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0)!;
    }
    public KW_BUCKETS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BUCKETS, 0)!;
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public orderedIdentifierList(): OrderedIdentifierListContext | null {
        return this.getRuleContext(0, OrderedIdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_bucketSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBucketSpec) {
             listener.enterBucketSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBucketSpec) {
             listener.exitBucketSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBucketSpec) {
            return visitor.visitBucketSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SKEWED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public constantList(): ConstantListContext | null {
        return this.getRuleContext(0, ConstantListContext);
    }
    public nestedConstantList(): NestedConstantListContext | null {
        return this.getRuleContext(0, NestedConstantListContext);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_skewSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSkewSpec) {
             listener.enterSkewSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSkewSpec) {
             listener.exitSkewSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewSpec) {
            return visitor.visitSkewSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocationSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_locationSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLocationSpec) {
             listener.enterLocationSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLocationSpec) {
             listener.exitLocationSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLocationSpec) {
            return visitor.visitLocationSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommentSpecContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_commentSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCommentSpec) {
             listener.enterCommentSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCommentSpec) {
             listener.exitCommentSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentSpec) {
            return visitor.visitCommentSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_query;
    }
    public override copyFrom(ctx: QueryContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryStatementContext extends QueryContext {
    public constructor(ctx: QueryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryTerm(): QueryTermContext {
        return this.getRuleContext(0, QueryTermContext)!;
    }
    public queryOrganization(): QueryOrganizationContext {
        return this.getRuleContext(0, QueryOrganizationContext)!;
    }
    public ctes(): CtesContext | null {
        return this.getRuleContext(0, CtesContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryStatement) {
             listener.enterQueryStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryStatement) {
             listener.exitQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryStatement) {
            return visitor.visitQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertIntoContext extends antlr.ParserRuleContext {
    public _path?: StringLitContext;
    public _options?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INSERT, 0)!;
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAME, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public columnNameSeq(): ColumnNameSeqContext | null {
        return this.getRuleContext(0, ColumnNameSeqContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTO, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORY, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public rowFormat(): RowFormatContext | null {
        return this.getRuleContext(0, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext | null {
        return this.getRuleContext(0, CreateFileFormatContext);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_insertInto;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInsertInto) {
             listener.enterInsertInto(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInsertInto) {
             listener.exitInsertInto(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertInto) {
            return visitor.visitInsertInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecLocationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionSpec(): PartitionSpecContext {
        return this.getRuleContext(0, PartitionSpecContext)!;
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionSpecLocation;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionSpecLocation) {
             listener.enterPartitionSpecLocation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionSpecLocation) {
             listener.exitPartitionSpecLocation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpecLocation) {
            return visitor.visitPartitionSpecLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public partitionVal(): PartitionValContext[];
    public partitionVal(i: number): PartitionValContext | null;
    public partitionVal(i?: number): PartitionValContext[] | PartitionValContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValContext);
        }

        return this.getRuleContext(i, PartitionValContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionSpec) {
             listener.enterPartitionSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionSpec) {
             listener.exitPartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpec) {
            return visitor.visitPartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionVal;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionVal) {
             listener.enterPartitionVal(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionVal) {
             listener.exitPartitionVal(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionVal) {
            return visitor.visitPartitionVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACE, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namespace;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamespace) {
             listener.enterNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamespace) {
             listener.exitNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamespace) {
            return visitor.visitNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeFuncNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public comparisonOperator(): ComparisonOperatorContext | null {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    public arithmeticOperator(): ArithmeticOperatorContext | null {
        return this.getRuleContext(0, ArithmeticOperatorContext);
    }
    public predicateOperator(): PredicateOperatorContext | null {
        return this.getRuleContext(0, PredicateOperatorContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_describeFuncName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeFuncName) {
             listener.enterDescribeFuncName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeFuncName) {
             listener.exitDescribeFuncName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeFuncName) {
            return visitor.visitDescribeFuncName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeColNameContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _nameParts: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_describeColName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeColName) {
             listener.enterDescribeColName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeColName) {
             listener.exitDescribeColName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeColName) {
            return visitor.visitDescribeColName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CtesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ctes;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCtes) {
             listener.enterCtes(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCtes) {
             listener.exitCtes(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCtes) {
            return visitor.visitCtes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public _columnAliases?: IdentifierListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedQuery;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedQuery) {
             listener.enterNamedQuery(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedQuery) {
             listener.exitNamedQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableProviderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_USING, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableProvider;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableProvider) {
             listener.enterTableProvider(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableProvider) {
             listener.exitTableProvider(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableProvider) {
            return visitor.visitTableProvider(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableClausesContext extends antlr.ParserRuleContext {
    public _options?: ExpressionPropertyListContext;
    public _partitioning?: PartitionFieldListContext;
    public _comment?: StringLitContext;
    public _tableProps?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewSpec(): SkewSpecContext[];
    public skewSpec(i: number): SkewSpecContext | null;
    public skewSpec(i?: number): SkewSpecContext[] | SkewSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewSpecContext);
        }

        return this.getRuleContext(i, SkewSpecContext);
    }
    public bucketSpec(): BucketSpecContext[];
    public bucketSpec(i: number): BucketSpecContext | null;
    public bucketSpec(i?: number): BucketSpecContext[] | BucketSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BucketSpecContext);
        }

        return this.getRuleContext(i, BucketSpecContext);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext[];
    public createFileFormat(i: number): CreateFileFormatContext | null;
    public createFileFormat(i?: number): CreateFileFormatContext[] | CreateFileFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFileFormatContext);
        }

        return this.getRuleContext(i, CreateFileFormatContext);
    }
    public KW_LOCATION(): antlr.TerminalNode[];
    public KW_LOCATION(i: number): antlr.TerminalNode | null;
    public KW_LOCATION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_LOCATION);
    	} else {
    		return this.getToken(SparkSqlParser.KW_LOCATION, i);
    	}
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_COMMENT(): antlr.TerminalNode[];
    public KW_COMMENT(i: number): antlr.TerminalNode | null;
    public KW_COMMENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_COMMENT);
    	} else {
    		return this.getToken(SparkSqlParser.KW_COMMENT, i);
    	}
    }
    public tableLifecycle(): TableLifecycleContext[];
    public tableLifecycle(i: number): TableLifecycleContext | null;
    public tableLifecycle(i?: number): TableLifecycleContext[] | TableLifecycleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableLifecycleContext);
        }

        return this.getRuleContext(i, TableLifecycleContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode[];
    public KW_OPTIONS(i: number): antlr.TerminalNode | null;
    public KW_OPTIONS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_OPTIONS);
    	} else {
    		return this.getToken(SparkSqlParser.KW_OPTIONS, i);
    	}
    }
    public KW_PARTITIONED(): antlr.TerminalNode[];
    public KW_PARTITIONED(i: number): antlr.TerminalNode | null;
    public KW_PARTITIONED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PARTITIONED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PARTITIONED, i);
    	}
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public expressionPropertyList(): ExpressionPropertyListContext[];
    public expressionPropertyList(i: number): ExpressionPropertyListContext | null;
    public expressionPropertyList(i?: number): ExpressionPropertyListContext[] | ExpressionPropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionPropertyListContext);
        }

        return this.getRuleContext(i, ExpressionPropertyListContext);
    }
    public partitionFieldList(): PartitionFieldListContext[];
    public partitionFieldList(i: number): PartitionFieldListContext | null;
    public partitionFieldList(i?: number): PartitionFieldListContext[] | PartitionFieldListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldListContext);
        }

        return this.getRuleContext(i, PartitionFieldListContext);
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createTableClauses;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTableClauses) {
             listener.enterCreateTableClauses(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTableClauses) {
             listener.exitCreateTableClauses(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableClauses) {
            return visitor.visitCreateTableClauses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableLifecycleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIFECYCLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LIFECYCLE, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableLifecycle;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableLifecycle) {
             listener.enterTableLifecycle(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableLifecycle) {
             listener.exitTableLifecycle(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableLifecycle) {
            return visitor.visitTableLifecycle(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public property(): PropertyContext[];
    public property(i: number): PropertyContext | null;
    public property(i?: number): PropertyContext[] | PropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyContext);
        }

        return this.getRuleContext(i, PropertyContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_propertyList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPropertyList) {
             listener.enterPropertyList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPropertyList) {
             listener.exitPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyList) {
            return visitor.visitPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyContext extends antlr.ParserRuleContext {
    public _key?: PropertyKeyContext;
    public _value?: PropertyValueContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyKey(): PropertyKeyContext {
        return this.getRuleContext(0, PropertyKeyContext)!;
    }
    public propertyValue(): PropertyValueContext | null {
        return this.getRuleContext(0, PropertyValueContext);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_property;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterProperty) {
             listener.enterProperty(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitProperty) {
             listener.exitProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProperty) {
            return visitor.visitProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_propertyKey;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPropertyKey) {
             listener.enterPropertyKey(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPropertyKey) {
             listener.exitPropertyKey(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyKey) {
            return visitor.visitPropertyKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public booleanValue(): BooleanValueContext | null {
        return this.getRuleContext(0, BooleanValueContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_propertyValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPropertyValue) {
             listener.enterPropertyValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPropertyValue) {
             listener.exitPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyValue) {
            return visitor.visitPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionPropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public expressionProperty(): ExpressionPropertyContext[];
    public expressionProperty(i: number): ExpressionPropertyContext | null;
    public expressionProperty(i?: number): ExpressionPropertyContext[] | ExpressionPropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionPropertyContext);
        }

        return this.getRuleContext(i, ExpressionPropertyContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expressionPropertyList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpressionPropertyList) {
             listener.enterExpressionPropertyList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpressionPropertyList) {
             listener.exitExpressionPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionPropertyList) {
            return visitor.visitExpressionPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionPropertyContext extends antlr.ParserRuleContext {
    public _key?: PropertyKeyContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyKey(): PropertyKeyContext {
        return this.getRuleContext(0, PropertyKeyContext)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expressionProperty;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpressionProperty) {
             listener.enterExpressionProperty(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpressionProperty) {
             listener.exitExpressionProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionProperty) {
            return visitor.visitExpressionProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_constantList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterConstantList) {
             listener.enterConstantList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitConstantList) {
             listener.exitConstantList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstantList) {
            return visitor.visitConstantList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NestedConstantListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public constantList(): ConstantListContext[];
    public constantList(i: number): ConstantListContext | null;
    public constantList(i?: number): ConstantListContext[] | ConstantListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantListContext);
        }

        return this.getRuleContext(i, ConstantListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_nestedConstantList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNestedConstantList) {
             listener.enterNestedConstantList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNestedConstantList) {
             listener.exitNestedConstantList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNestedConstantList) {
            return visitor.visitNestedConstantList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFileFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_STORED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public fileFormat(): FileFormatContext | null {
        return this.getRuleContext(0, FileFormatContext);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public storageHandler(): StorageHandlerContext | null {
        return this.getRuleContext(0, StorageHandlerContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createFileFormat;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateFileFormat) {
             listener.enterCreateFileFormat(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateFileFormat) {
             listener.exitCreateFileFormat(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFileFormat) {
            return visitor.visitCreateFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: StringLitContext;
    public _outFmt?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fileFormat;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFileFormat) {
             listener.enterFileFormat(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFileFormat) {
             listener.exitFileFormat(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFileFormat) {
            return visitor.visitFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StorageHandlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_storageHandler;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStorageHandler) {
             listener.enterStorageHandler(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStorageHandler) {
             listener.exitStorageHandler(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStorageHandler) {
            return visitor.visitStorageHandler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DmlStatementNoWithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_dmlStatementNoWith;
    }
    public override copyFrom(ctx: DmlStatementNoWithContext): void {
        super.copyFrom(ctx);
    }
}
export class DeleteFromTableContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DELETE, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FROM, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDeleteFromTable) {
             listener.enterDeleteFromTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDeleteFromTable) {
             listener.exitDeleteFromTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteFromTable) {
            return visitor.visitDeleteFromTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MultipleInsertContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public insertInto(): InsertIntoContext[];
    public insertInto(i: number): InsertIntoContext | null;
    public insertInto(i?: number): InsertIntoContext[] | InsertIntoContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InsertIntoContext);
        }

        return this.getRuleContext(i, InsertIntoContext);
    }
    public fromStatementBody(): FromStatementBodyContext[];
    public fromStatementBody(i: number): FromStatementBodyContext | null;
    public fromStatementBody(i?: number): FromStatementBodyContext[] | FromStatementBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FromStatementBodyContext);
        }

        return this.getRuleContext(i, FromStatementBodyContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipleInsert) {
             listener.enterMultipleInsert(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipleInsert) {
             listener.exitMultipleInsert(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipleInsert) {
            return visitor.visitMultipleInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UpdateTableContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public setClause(): SetClauseContext {
        return this.getRuleContext(0, SetClauseContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUpdateTable) {
             listener.enterUpdateTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUpdateTable) {
             listener.exitUpdateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateTable) {
            return visitor.visitUpdateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InsertFromQueryContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public insertInto(): InsertIntoContext {
        return this.getRuleContext(0, InsertIntoContext)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInsertFromQuery) {
             listener.enterInsertFromQuery(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInsertFromQuery) {
             listener.exitInsertFromQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertFromQuery) {
            return visitor.visitInsertFromQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeIntoTableContext extends DmlStatementNoWithContext {
    public _target?: TableNameContext;
    public _targetAlias?: TableAliasContext;
    public _source?: IdentifierReferenceContext;
    public _sourceQuery?: QueryContext;
    public _sourceAlias?: TableAliasContext;
    public _mergeCondition?: BooleanExpressionContext;
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_MERGE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MERGE, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INTO, 0)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_USING, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableAlias(): TableAliasContext[];
    public tableAlias(i: number): TableAliasContext | null;
    public tableAlias(i?: number): TableAliasContext[] | TableAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableAliasContext);
        }

        return this.getRuleContext(i, TableAliasContext);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public matchedClause(): MatchedClauseContext[];
    public matchedClause(i: number): MatchedClauseContext | null;
    public matchedClause(i?: number): MatchedClauseContext[] | MatchedClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MatchedClauseContext);
        }

        return this.getRuleContext(i, MatchedClauseContext);
    }
    public notMatchedClause(): NotMatchedClauseContext[];
    public notMatchedClause(i: number): NotMatchedClauseContext | null;
    public notMatchedClause(i?: number): NotMatchedClauseContext[] | NotMatchedClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NotMatchedClauseContext);
        }

        return this.getRuleContext(i, NotMatchedClauseContext);
    }
    public notMatchedBySourceClause(): NotMatchedBySourceClauseContext[];
    public notMatchedBySourceClause(i: number): NotMatchedBySourceClauseContext | null;
    public notMatchedBySourceClause(i?: number): NotMatchedBySourceClauseContext[] | NotMatchedBySourceClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NotMatchedBySourceClauseContext);
        }

        return this.getRuleContext(i, NotMatchedBySourceClauseContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMergeIntoTable) {
             listener.enterMergeIntoTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMergeIntoTable) {
             listener.exitMergeIntoTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMergeIntoTable) {
            return visitor.visitMergeIntoTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamespaceNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext {
        return this.getRuleContext(0, IdentifierReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namespaceName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamespaceName) {
             listener.enterNamespaceName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamespaceName) {
             listener.exitNamespaceName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamespaceName) {
            return visitor.visitNamespaceName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamespaceNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext {
        return this.getRuleContext(0, IdentifierReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namespaceNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamespaceNameCreate) {
             listener.enterNamespaceNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamespaceNameCreate) {
             listener.exitNamespaceNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamespaceNameCreate) {
            return visitor.visitNamespaceNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableNameCreate) {
             listener.enterTableNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableNameCreate) {
             listener.exitTableNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNameCreate) {
            return visitor.visitTableNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_viewNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterViewNameCreate) {
             listener.enterViewNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitViewNameCreate) {
             listener.exitViewNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewNameCreate) {
            return visitor.visitViewNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_viewName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNamePathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnNamePath;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnNamePath) {
             listener.enterColumnNamePath(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnNamePath) {
             listener.exitColumnNamePath(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNamePath) {
            return visitor.visitColumnNamePath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnNameSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnNameSeq) {
             listener.enterColumnNameSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnNameSeq) {
             listener.exitColumnNameSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameSeq) {
            return visitor.visitColumnNameSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnNameCreate) {
             listener.enterColumnNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnNameCreate) {
             listener.exitColumnNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierReference;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierReference) {
             listener.enterIdentifierReference(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierReference) {
             listener.exitIdentifierReference(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierReference) {
            return visitor.visitIdentifierReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryOrganizationContext extends antlr.ParserRuleContext {
    public _offset?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public orderOrSortByClause(): OrderOrSortByClauseContext[];
    public orderOrSortByClause(i: number): OrderOrSortByClauseContext | null;
    public orderOrSortByClause(i?: number): OrderOrSortByClauseContext[] | OrderOrSortByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderOrSortByClauseContext);
        }

        return this.getRuleContext(i, OrderOrSortByClauseContext);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public clusterOrDistributeBy(): ClusterOrDistributeByContext[];
    public clusterOrDistributeBy(i: number): ClusterOrDistributeByContext | null;
    public clusterOrDistributeBy(i?: number): ClusterOrDistributeByContext[] | ClusterOrDistributeByContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ClusterOrDistributeByContext);
        }

        return this.getRuleContext(i, ClusterOrDistributeByContext);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OFFSET, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_queryOrganization;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryOrganization) {
             listener.enterQueryOrganization(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryOrganization) {
             listener.exitQueryOrganization(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryOrganization) {
            return visitor.visitQueryOrganization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public _limit?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIMIT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LIMIT, 0)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_limitClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLimitClause) {
             listener.enterLimitClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLimitClause) {
             listener.exitLimitClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderOrSortByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_orderOrSortByClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterOrderOrSortByClause) {
             listener.enterOrderOrSortByClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitOrderOrSortByClause) {
             listener.exitOrderOrSortByClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderOrSortByClause) {
            return visitor.visitOrderOrSortByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterOrDistributeByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_clusterOrDistributeBy;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterClusterOrDistributeBy) {
             listener.enterClusterOrDistributeBy(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitClusterOrDistributeBy) {
             listener.exitClusterOrDistributeBy(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitClusterOrDistributeBy) {
            return visitor.visitClusterOrDistributeBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryTermContext extends antlr.ParserRuleContext {
    public _left?: QueryTermContext;
    public _operator?: Token | null;
    public _right?: QueryTermContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryPrimary(): QueryPrimaryContext | null {
        return this.getRuleContext(0, QueryPrimaryContext);
    }
    public queryTerm(): QueryTermContext[];
    public queryTerm(i: number): QueryTermContext | null;
    public queryTerm(i?: number): QueryTermContext[] | QueryTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryTermContext);
        }

        return this.getRuleContext(i, QueryTermContext);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERSECT, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNION, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCEPT, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUS, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_queryTerm;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryTerm) {
             listener.enterQueryTerm(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryTerm) {
             listener.exitQueryTerm(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryTerm) {
            return visitor.visitQueryTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public querySpecification(): QuerySpecificationContext | null {
        return this.getRuleContext(0, QuerySpecificationContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public fromStatementBody(): FromStatementBodyContext[];
    public fromStatementBody(i: number): FromStatementBodyContext | null;
    public fromStatementBody(i?: number): FromStatementBodyContext[] | FromStatementBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FromStatementBodyContext);
        }

        return this.getRuleContext(i, FromStatementBodyContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_queryPrimary;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryPrimary) {
             listener.enterQueryPrimary(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryPrimary) {
             listener.exitQueryPrimary(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryPrimary) {
            return visitor.visitQueryPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortItemContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public _nullOrder?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_sortItem;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSortItem) {
             listener.enterSortItem(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSortItem) {
             listener.exitSortItem(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSortItem) {
            return visitor.visitSortItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromStatementBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transformClause(): TransformClauseContext | null {
        return this.getRuleContext(0, TransformClauseContext);
    }
    public queryOrganization(): QueryOrganizationContext {
        return this.getRuleContext(0, QueryOrganizationContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public aggregationClause(): AggregationClauseContext | null {
        return this.getRuleContext(0, AggregationClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fromStatementBody;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFromStatementBody) {
             listener.enterFromStatementBody(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFromStatementBody) {
             listener.exitFromStatementBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromStatementBody) {
            return visitor.visitFromStatementBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transformClause(): TransformClauseContext | null {
        return this.getRuleContext(0, TransformClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public aggregationClause(): AggregationClauseContext | null {
        return this.getRuleContext(0, AggregationClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_querySpecification;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQuerySpecification) {
             listener.enterQuerySpecification(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQuerySpecification) {
             listener.exitQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformClauseContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _inRowFormat?: RowFormatContext;
    public _recordWriter?: StringLitContext;
    public _script?: StringLitContext;
    public _outRowFormat?: RowFormatContext;
    public _recordReader?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_USING, 0)!;
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SELECT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public expressionSeq(): ExpressionSeqContext | null {
        return this.getRuleContext(0, ExpressionSeqContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSFORM, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REDUCE, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDREADER, 0);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public identifierSeq(): IdentifierSeqContext | null {
        return this.getRuleContext(0, IdentifierSeqContext);
    }
    public colTypeList(): ColTypeListContext | null {
        return this.getRuleContext(0, ColTypeListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_transformClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTransformClause) {
             listener.enterTransformClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTransformClause) {
             listener.exitTransformClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransformClause) {
            return visitor.visitTransformClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectClauseContext extends antlr.ParserRuleContext {
    public _hint?: HintContext;
    public _hints: HintContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SELECT, 0)!;
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public hint(): HintContext[];
    public hint(i: number): HintContext | null;
    public hint(i?: number): HintContext[] | HintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }

        return this.getRuleContext(i, HintContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_selectClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSelectClause) {
             listener.enterSelectClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSelectClause) {
             listener.exitSelectClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public assignmentList(): AssignmentListContext {
        return this.getRuleContext(0, AssignmentListContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_setClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetClause) {
             listener.enterSetClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetClause) {
             listener.exitSetClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetClause) {
            return visitor.visitSetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchedClauseContext extends antlr.ParserRuleContext {
    public _matchedCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public assignmentList(): AssignmentListContext | null {
        return this.getRuleContext(0, AssignmentListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_matchedClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMatchedClause) {
             listener.enterMatchedClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMatchedClause) {
             listener.exitMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMatchedClause) {
            return visitor.visitMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedClauseContext extends antlr.ParserRuleContext {
    public _notMatchedCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public notMatchedAction(): NotMatchedActionContext {
        return this.getRuleContext(0, NotMatchedActionContext)!;
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TARGET, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedClause) {
             listener.enterNotMatchedClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedClause) {
             listener.exitNotMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedClause) {
            return visitor.visitNotMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedBySourceClauseContext extends antlr.ParserRuleContext {
    public _notMatchedBySourceCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public KW_SOURCE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SOURCE, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public assignmentList(): AssignmentListContext | null {
        return this.getRuleContext(0, AssignmentListContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedBySourceClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedBySourceClause) {
             listener.enterNotMatchedBySourceClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedBySourceClause) {
             listener.exitNotMatchedBySourceClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedBySourceClause) {
            return visitor.visitNotMatchedBySourceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INSERT, 0)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public multipartIdentifierList(): MultipartIdentifierListContext | null {
        return this.getRuleContext(0, MultipartIdentifierListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedAction;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedAction) {
             listener.enterNotMatchedAction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedAction) {
             listener.exitNotMatchedAction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedAction) {
            return visitor.visitNotMatchedAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignment(): AssignmentContext[];
    public assignment(i: number): AssignmentContext | null;
    public assignment(i?: number): AssignmentContext[] | AssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentContext);
        }

        return this.getRuleContext(i, AssignmentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_assignmentList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAssignmentList) {
             listener.enterAssignmentList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAssignmentList) {
             listener.exitAssignmentList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentList) {
            return visitor.visitAssignmentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentContext extends antlr.ParserRuleContext {
    public _key?: MultipartIdentifierContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EQ, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_assignment;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAssignment) {
             listener.enterAssignment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAssignment) {
             listener.exitAssignment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignment) {
            return visitor.visitAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_whereClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HAVING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_HAVING, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_havingClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintContext extends antlr.ParserRuleContext {
    public _hintStatement?: HintStatementContext;
    public _hintStatements: HintStatementContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HENT_START(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.HENT_START, 0)!;
    }
    public HENT_END(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.HENT_END, 0)!;
    }
    public hintStatement(): HintStatementContext[];
    public hintStatement(i: number): HintStatementContext | null;
    public hintStatement(i?: number): HintStatementContext[] | HintStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintStatementContext);
        }

        return this.getRuleContext(i, HintStatementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_hint;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHint) {
             listener.enterHint(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHint) {
             listener.exitHint(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHint) {
            return visitor.visitHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintStatementContext extends antlr.ParserRuleContext {
    public _hintName?: IdentifierContext;
    public _primaryExpression?: PrimaryExpressionContext;
    public _parameters: PrimaryExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public primaryExpression(): PrimaryExpressionContext[];
    public primaryExpression(i: number): PrimaryExpressionContext | null;
    public primaryExpression(i?: number): PrimaryExpressionContext[] | PrimaryExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryExpressionContext);
        }

        return this.getRuleContext(i, PrimaryExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_hintStatement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHintStatement) {
             listener.enterHintStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHintStatement) {
             listener.exitHintStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHintStatement) {
            return visitor.visitHintStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FROM, 0)!;
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public pivotClause(): PivotClauseContext | null {
        return this.getRuleContext(0, PivotClauseContext);
    }
    public unPivotClause(): UnPivotClauseContext | null {
        return this.getRuleContext(0, UnPivotClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fromClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalClauseContext extends antlr.ParserRuleContext {
    public _timestamp?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public KW_OF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_OF, 0)!;
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VERSION, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_temporalClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTemporalClause) {
             listener.enterTemporalClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTemporalClause) {
             listener.exitTemporalClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTemporalClause) {
            return visitor.visitTemporalClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregationClauseContext extends antlr.ParserRuleContext {
    public _groupByClause?: GroupByClauseContext;
    public _groupingExpressionsWithGroupingAnalytics: GroupByClauseContext[] = [];
    public _expression?: ExpressionContext;
    public _groupingExpressions: ExpressionContext[] = [];
    public _kind?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public groupByClause(): GroupByClauseContext[];
    public groupByClause(i: number): GroupByClauseContext | null;
    public groupByClause(i?: number): GroupByClauseContext[] | GroupByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupByClauseContext);
        }

        return this.getRuleContext(i, GroupByClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_aggregationClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAggregationClause) {
             listener.enterAggregationClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAggregationClause) {
             listener.exitAggregationClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregationClause) {
            return visitor.visitAggregationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public groupingAnalytics(): GroupingAnalyticsContext | null {
        return this.getRuleContext(0, GroupingAnalyticsContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupByClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingAnalyticsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public groupingAnalytics(): GroupingAnalyticsContext[];
    public groupingAnalytics(i: number): GroupingAnalyticsContext | null;
    public groupingAnalytics(i?: number): GroupingAnalyticsContext[] | GroupingAnalyticsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingAnalyticsContext);
        }

        return this.getRuleContext(i, GroupingAnalyticsContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupingAnalytics;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupingAnalytics) {
             listener.enterGroupingAnalytics(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupingAnalytics) {
             listener.exitGroupingAnalytics(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingAnalytics) {
            return visitor.visitGroupingAnalytics(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupingSet;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupingSet) {
             listener.enterGroupingSet(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupingSet) {
             listener.exitGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotClauseContext extends antlr.ParserRuleContext {
    public _aggregates?: NamedExpressionSeqContext;
    public _pivotValue?: PivotValueContext;
    public _pivotValues: PivotValueContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PIVOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_PIVOT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FOR, 0)!;
    }
    public pivotColumn(): PivotColumnContext {
        return this.getRuleContext(0, PivotColumnContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public pivotValue(): PivotValueContext[];
    public pivotValue(i: number): PivotValueContext | null;
    public pivotValue(i?: number): PivotValueContext[] | PivotValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PivotValueContext);
        }

        return this.getRuleContext(i, PivotValueContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_pivotClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPivotClause) {
             listener.enterPivotClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPivotClause) {
             listener.exitPivotClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotClause) {
            return visitor.visitPivotClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotColumnContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _identifiers: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_pivotColumn;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPivotColumn) {
             listener.enterPivotColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPivotColumn) {
             listener.exitPivotColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotColumn) {
            return visitor.visitPivotColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_pivotValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPivotValue) {
             listener.enterPivotValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPivotValue) {
             listener.exitPivotValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotValue) {
            return visitor.visitPivotValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnPivotClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNPIVOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_UNPIVOT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public unPivotSingleValueColumnClause(): UnPivotSingleValueColumnClauseContext | null {
        return this.getRuleContext(0, UnPivotSingleValueColumnClauseContext);
    }
    public unPivotMultiValueColumnClause(): UnPivotMultiValueColumnClauseContext | null {
        return this.getRuleContext(0, UnPivotMultiValueColumnClauseContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INCLUDE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCLUDE, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unPivotClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnPivotClause) {
             listener.enterUnPivotClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnPivotClause) {
             listener.exitUnPivotClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnPivotClause) {
            return visitor.visitUnPivotClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnPivotSingleValueColumnClauseContext extends antlr.ParserRuleContext {
    public _unPivotColumnAndAlias?: UnPivotColumnAndAliasContext;
    public _unPivotColumns: UnPivotColumnAndAliasContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FOR, 0)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IN, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public unPivotColumnAndAlias(): UnPivotColumnAndAliasContext[];
    public unPivotColumnAndAlias(i: number): UnPivotColumnAndAliasContext | null;
    public unPivotColumnAndAlias(i?: number): UnPivotColumnAndAliasContext[] | UnPivotColumnAndAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnPivotColumnAndAliasContext);
        }

        return this.getRuleContext(i, UnPivotColumnAndAliasContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unPivotSingleValueColumnClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnPivotSingleValueColumnClause) {
             listener.enterUnPivotSingleValueColumnClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnPivotSingleValueColumnClause) {
             listener.exitUnPivotSingleValueColumnClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnPivotSingleValueColumnClause) {
            return visitor.visitUnPivotSingleValueColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnPivotMultiValueColumnClauseContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _unPivotValueColumns: IdentifierContext[] = [];
    public _unPivotColumnSet?: UnPivotColumnSetContext;
    public _unPivotColumnSets: UnPivotColumnSetContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FOR, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IN, 0)!;
    }
    public unPivotColumnSet(): UnPivotColumnSetContext[];
    public unPivotColumnSet(i: number): UnPivotColumnSetContext | null;
    public unPivotColumnSet(i?: number): UnPivotColumnSetContext[] | UnPivotColumnSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnPivotColumnSetContext);
        }

        return this.getRuleContext(i, UnPivotColumnSetContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unPivotMultiValueColumnClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnPivotMultiValueColumnClause) {
             listener.enterUnPivotMultiValueColumnClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnPivotMultiValueColumnClause) {
             listener.exitUnPivotMultiValueColumnClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnPivotMultiValueColumnClause) {
            return visitor.visitUnPivotMultiValueColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnPivotColumnSetContext extends antlr.ParserRuleContext {
    public _multipartIdentifier?: MultipartIdentifierContext;
    public _unPivotColumns: MultipartIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unPivotColumnSet;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnPivotColumnSet) {
             listener.enterUnPivotColumnSet(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnPivotColumnSet) {
             listener.exitUnPivotColumnSet(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnPivotColumnSet) {
            return visitor.visitUnPivotColumnSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnPivotColumnAndAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unPivotColumnAndAlias;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnPivotColumnAndAlias) {
             listener.enterUnPivotColumnAndAlias(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnPivotColumnAndAlias) {
             listener.exitUnPivotColumnAndAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnPivotColumnAndAlias) {
            return visitor.visitUnPivotColumnAndAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ifNotExists;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ifExists;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LateralViewContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _colName: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTER, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_lateralView;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLateralView) {
             listener.enterLateralView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLateralView) {
             listener.exitLateralView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLateralView) {
            return visitor.visitLateralView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTINCT, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_setQuantifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public relationPrimary(): RelationPrimaryContext | null {
        return this.getRuleContext(0, RelationPrimaryContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0);
    }
    public joinRelation(): JoinRelationContext[];
    public joinRelation(i: number): JoinRelationContext | null;
    public joinRelation(i?: number): JoinRelationContext[] | JoinRelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinRelationContext);
        }

        return this.getRuleContext(i, JoinRelationContext);
    }
    public pivotClause(): PivotClauseContext[];
    public pivotClause(i: number): PivotClauseContext | null;
    public pivotClause(i?: number): PivotClauseContext[] | PivotClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PivotClauseContext);
        }

        return this.getRuleContext(i, PivotClauseContext);
    }
    public unPivotClause(): UnPivotClauseContext[];
    public unPivotClause(i: number): UnPivotClauseContext | null;
    public unPivotClause(i?: number): UnPivotClauseContext[] | UnPivotClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnPivotClauseContext);
        }

        return this.getRuleContext(i, UnPivotClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_relation;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRelation) {
             listener.enterRelation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRelation) {
             listener.exitRelation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation) {
            return visitor.visitRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinRelationContext extends antlr.ParserRuleContext {
    public _right?: RelationPrimaryContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_JOIN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_JOIN, 0)!;
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public joinType(): JoinTypeContext | null {
        return this.getRuleContext(0, JoinTypeContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NATURAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_joinRelation;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterJoinRelation) {
             listener.enterJoinRelation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitJoinRelation) {
             listener.exitJoinRelation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinRelation) {
            return visitor.visitJoinRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INNER, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CROSS, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEFT, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTER, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEMI, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANTI, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RIGHT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FULL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_joinType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterJoinType) {
             listener.enterJoinType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitJoinType) {
             listener.exitJoinType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ON, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_joinCriteria;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterJoinCriteria) {
             listener.enterJoinCriteria(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitJoinCriteria) {
             listener.exitJoinCriteria(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleContext extends antlr.ParserRuleContext {
    public _seed?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLESAMPLE, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public sampleMethod(): SampleMethodContext | null {
        return this.getRuleContext(0, SampleMethodContext);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPEATABLE, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_sample;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSample) {
             listener.enterSample(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSample) {
             listener.exitSample(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSample) {
            return visitor.visitSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleMethodContext extends antlr.ParserRuleContext {
    public _negativeSign?: Token | null;
    public _percentage?: Token | null;
    public _sampleType?: Token | null;
    public _numerator?: Token | null;
    public _denominator?: Token | null;
    public _bytes?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTLIT, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(SparkSqlParser.INTEGER_VALUE, i);
    	}
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OF, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKET, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ON, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_sampleMethod;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSampleMethod) {
             listener.enterSampleMethod(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSampleMethod) {
             listener.exitSampleMethod(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSampleMethod) {
            return visitor.visitSampleMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public identifierSeq(): IdentifierSeqContext {
        return this.getRuleContext(0, IdentifierSeqContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierList) {
             listener.enterIdentifierList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierList) {
             listener.exitIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierSeqContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _ident: ErrorCapturingIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierSeq) {
             listener.enterIdentifierSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierSeq) {
             listener.exitIdentifierSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierSeq) {
            return visitor.visitIdentifierSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderedIdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public orderedIdentifier(): OrderedIdentifierContext[];
    public orderedIdentifier(i: number): OrderedIdentifierContext | null;
    public orderedIdentifier(i?: number): OrderedIdentifierContext[] | OrderedIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderedIdentifierContext);
        }

        return this.getRuleContext(i, OrderedIdentifierContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_orderedIdentifierList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterOrderedIdentifierList) {
             listener.enterOrderedIdentifierList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitOrderedIdentifierList) {
             listener.exitOrderedIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderedIdentifierList) {
            return visitor.visitOrderedIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderedIdentifierContext extends antlr.ParserRuleContext {
    public _ident?: ErrorCapturingIdentifierContext;
    public _ordering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_orderedIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterOrderedIdentifier) {
             listener.enterOrderedIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitOrderedIdentifier) {
             listener.exitOrderedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderedIdentifier) {
            return visitor.visitOrderedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierCommentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public identifierComment(): IdentifierCommentContext[];
    public identifierComment(i: number): IdentifierCommentContext | null;
    public identifierComment(i?: number): IdentifierCommentContext[] | IdentifierCommentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierCommentContext);
        }

        return this.getRuleContext(i, IdentifierCommentContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierCommentList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierCommentList) {
             listener.enterIdentifierCommentList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierCommentList) {
             listener.exitIdentifierCommentList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierCommentList) {
            return visitor.visitIdentifierCommentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierCommentContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierComment;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierComment) {
             listener.enterIdentifierComment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierComment) {
             listener.exitIdentifierComment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierComment) {
            return visitor.visitIdentifierComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public temporalClause(): TemporalClauseContext | null {
        return this.getRuleContext(0, TemporalClauseContext);
    }
    public sample(): SampleContext | null {
        return this.getRuleContext(0, SampleContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public relation(): RelationContext | null {
        return this.getRuleContext(0, RelationContext);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public functionTableArgument(): FunctionTableArgumentContext[];
    public functionTableArgument(i: number): FunctionTableArgumentContext | null;
    public functionTableArgument(i?: number): FunctionTableArgumentContext[] | FunctionTableArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionTableArgumentContext);
        }

        return this.getRuleContext(i, FunctionTableArgumentContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_relationPrimary;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRelationPrimary) {
             listener.enterRelationPrimary(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRelationPrimary) {
             listener.exitRelationPrimary(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelationPrimary) {
            return visitor.visitRelationPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableSubqueryArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public tableArgumentPartitioning(): TableArgumentPartitioningContext | null {
        return this.getRuleContext(0, TableArgumentPartitioningContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableSubqueryArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableSubqueryArgument) {
             listener.enterFunctionTableSubqueryArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableSubqueryArgument) {
             listener.exitFunctionTableSubqueryArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableSubqueryArgument) {
            return visitor.visitFunctionTableSubqueryArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentPartitioningContext extends antlr.ParserRuleContext {
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SINGLE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public sortItem(): SortItemContext | null {
        return this.getRuleContext(0, SortItemContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public orderOrSortByClause(): OrderOrSortByClauseContext | null {
        return this.getRuleContext(0, OrderOrSortByClauseContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableArgumentPartitioning;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableArgumentPartitioning) {
             listener.enterTableArgumentPartitioning(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableArgumentPartitioning) {
             listener.exitTableArgumentPartitioning(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentPartitioning) {
            return visitor.visitTableArgumentPartitioning(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableNamedArgumentExpressionContext extends antlr.ParserRuleContext {
    public _key?: IdentifierContext;
    public _table?: FunctionTableSubqueryArgumentContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAT_ARROW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.FAT_ARROW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext {
        return this.getRuleContext(0, FunctionTableSubqueryArgumentContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableNamedArgumentExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableNamedArgumentExpression) {
             listener.enterFunctionTableNamedArgumentExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableNamedArgumentExpression) {
             listener.exitFunctionTableNamedArgumentExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableNamedArgumentExpression) {
            return visitor.visitFunctionTableNamedArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableReferenceArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext | null {
        return this.getRuleContext(0, FunctionTableSubqueryArgumentContext);
    }
    public functionTableNamedArgumentExpression(): FunctionTableNamedArgumentExpressionContext | null {
        return this.getRuleContext(0, FunctionTableNamedArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableReferenceArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableReferenceArgument) {
             listener.enterFunctionTableReferenceArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableReferenceArgument) {
             listener.exitFunctionTableReferenceArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableReferenceArgument) {
            return visitor.visitFunctionTableReferenceArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionTableReferenceArgument(): FunctionTableReferenceArgumentContext | null {
        return this.getRuleContext(0, FunctionTableReferenceArgumentContext);
    }
    public functionArgument(): FunctionArgumentContext | null {
        return this.getRuleContext(0, FunctionArgumentContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableArgument) {
             listener.enterFunctionTableArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableArgument) {
             listener.exitFunctionTableArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableArgument) {
            return visitor.visitFunctionTableArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends antlr.ParserRuleContext {
    public _alias?: StrictIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public strictIdentifier(): StrictIdentifierContext | null {
        return this.getRuleContext(0, StrictIdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableAlias;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatContext extends antlr.ParserRuleContext {
    public _name?: StringLitContext;
    public _props?: PropertyListContext;
    public _fieldsTerminatedBy?: StringLitContext;
    public _escapedBy?: StringLitContext;
    public _collectionItemsTerminatedBy?: StringLitContext;
    public _keysTerminatedBy?: StringLitContext;
    public _linesSeparatedBy?: StringLitContext;
    public _nullDefinedAs?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELIMITED, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIELDS, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode[];
    public KW_TERMINATED(i: number): antlr.TerminalNode | null;
    public KW_TERMINATED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TERMINATED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TERMINATED, i);
    	}
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLECTION, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ITEMS, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_KEYS, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LINES, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFINED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPED, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_rowFormat;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRowFormat) {
             listener.enterRowFormat(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRowFormat) {
             listener.exitRowFormat(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowFormat) {
            return visitor.visitRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifierList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifierList) {
             listener.enterMultipartIdentifierList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifierList) {
             listener.exitMultipartIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierList) {
            return visitor.visitMultipartIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _parts: ErrorCapturingIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifier) {
             listener.enterMultipartIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifier) {
             listener.exitMultipartIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifier) {
            return visitor.visitMultipartIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierPropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifierProperty(): MultipartIdentifierPropertyContext[];
    public multipartIdentifierProperty(i: number): MultipartIdentifierPropertyContext | null;
    public multipartIdentifierProperty(i?: number): MultipartIdentifierPropertyContext[] | MultipartIdentifierPropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierPropertyContext);
        }

        return this.getRuleContext(i, MultipartIdentifierPropertyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifierPropertyList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifierPropertyList) {
             listener.enterMultipartIdentifierPropertyList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifierPropertyList) {
             listener.exitMultipartIdentifierPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierPropertyList) {
            return visitor.visitMultipartIdentifierPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierPropertyContext extends antlr.ParserRuleContext {
    public _options?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifierProperty;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifierProperty) {
             listener.enterMultipartIdentifierProperty(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifierProperty) {
             listener.exitMultipartIdentifierProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierProperty) {
            return visitor.visitMultipartIdentifierProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentifierContext extends antlr.ParserRuleContext {
    public _db?: ErrorCapturingIdentifierContext;
    public _table?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableIdentifier) {
             listener.enterTableIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableIdentifier) {
             listener.exitTableIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifier) {
            return visitor.visitTableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewIdentifierContext extends antlr.ParserRuleContext {
    public _db?: ErrorCapturingIdentifierContext;
    public _view?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_viewIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterViewIdentifier) {
             listener.enterViewIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitViewIdentifier) {
             listener.exitViewIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewIdentifier) {
            return visitor.visitViewIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedExpressionContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedExpression) {
             listener.enterNamedExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedExpression) {
             listener.exitNamedExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedExpression) {
            return visitor.visitNamedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedExpressionSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedExpression(): NamedExpressionContext[];
    public namedExpression(i: number): NamedExpressionContext | null;
    public namedExpression(i?: number): NamedExpressionContext[] | NamedExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedExpressionContext);
        }

        return this.getRuleContext(i, NamedExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedExpressionSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedExpressionSeq) {
             listener.enterNamedExpressionSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedExpressionSeq) {
             listener.exitNamedExpressionSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedExpressionSeq) {
            return visitor.visitNamedExpressionSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionFieldListContext extends antlr.ParserRuleContext {
    public _partitionField?: PartitionFieldContext;
    public _fields: PartitionFieldContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public partitionField(): PartitionFieldContext[];
    public partitionField(i: number): PartitionFieldContext | null;
    public partitionField(i?: number): PartitionFieldContext[] | PartitionFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldContext);
        }

        return this.getRuleContext(i, PartitionFieldContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionFieldList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionFieldList) {
             listener.enterPartitionFieldList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionFieldList) {
             listener.exitPartitionFieldList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionFieldList) {
            return visitor.visitPartitionFieldList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transform(): TransformContext | null {
        return this.getRuleContext(0, TransformContext);
    }
    public columnType(): ColumnTypeContext | null {
        return this.getRuleContext(0, ColumnTypeContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionField;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionField) {
             listener.enterPartitionField(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionField) {
             listener.exitPartitionField(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionField) {
            return visitor.visitPartitionField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformContext extends antlr.ParserRuleContext {
    public _transformName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public transformArgument(): TransformArgumentContext[];
    public transformArgument(i: number): TransformArgumentContext | null;
    public transformArgument(i?: number): TransformArgumentContext[] | TransformArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransformArgumentContext);
        }

        return this.getRuleContext(i, TransformArgumentContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_transform;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTransform) {
             listener.enterTransform(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTransform) {
             listener.exitTransform(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransform) {
            return visitor.visitTransform(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_transformArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTransformArgument) {
             listener.enterTransformArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTransformArgument) {
             listener.exitTransformArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransformArgument) {
            return visitor.visitTransformArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedArgumentExpressionContext extends antlr.ParserRuleContext {
    public _key?: IdentifierContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAT_ARROW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.FAT_ARROW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedArgumentExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedArgumentExpression) {
             listener.enterNamedArgumentExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedArgumentExpression) {
             listener.exitNamedArgumentExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedArgumentExpression) {
            return visitor.visitNamedArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public namedArgumentExpression(): NamedArgumentExpressionContext | null {
        return this.getRuleContext(0, NamedArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionArgument) {
             listener.enterFunctionArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionArgument) {
             listener.exitFunctionArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArgument) {
            return visitor.visitFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expressionSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpressionSeq) {
             listener.enterExpressionSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpressionSeq) {
             listener.exitExpressionSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionSeq) {
            return visitor.visitExpressionSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public _left?: BooleanExpressionContext;
    public _operator?: Token | null;
    public _right?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NOT, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_booleanExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBooleanExpression) {
             listener.enterBooleanExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBooleanExpression) {
             listener.exitBooleanExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanExpression) {
            return visitor.visitBooleanExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public _pattern?: ValueExpressionContext;
    public _quantifier?: Token | null;
    public _escapeChar?: StringLitContext;
    public _right?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REGEXP, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ILIKE, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOME, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IS, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FALSE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNKNOWN, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_predicate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPredicate) {
             listener.enterPredicate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPredicate) {
             listener.exitPredicate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicate) {
            return visitor.visitPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PLUS, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.TILDE, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PERCENT, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public CONCAT_PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.CONCAT_PIPE, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.AMPERSAND, 0);
    }
    public HAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.HAT, 0);
    }
    public PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PIPE, 0);
    }
    public comparisonOperator(): ComparisonOperatorContext | null {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_valueExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterValueExpression) {
             listener.enterValueExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitValueExpression) {
             listener.exitValueExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpression) {
            return visitor.visitValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUARTER, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_datetimeUnit;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDatetimeUnit) {
             listener.enterDatetimeUnit(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDatetimeUnit) {
             listener.exitDatetimeUnit(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatetimeUnit) {
            return visitor.visitDatetimeUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public _value?: PrimaryExpressionContext;
    public _base?: PrimaryExpressionContext;
    public _name?: Token | null;
    public _unit?: DatetimeUnitContext;
    public _invalidUnit?: StringLitContext;
    public _unitsAmount?: ValueExpressionContext;
    public _timestamp?: ValueExpressionContext;
    public _startTimestamp?: ValueExpressionContext;
    public _endTimestamp?: ValueExpressionContext;
    public _elseExpression?: ExpressionContext;
    public _substr?: ValueExpressionContext;
    public _str?: ValueExpressionContext;
    public _where?: BooleanExpressionContext;
    public _nullsOption?: Token | null;
    public _field?: IdentifierContext;
    public _source?: ValueExpressionContext;
    public _pos?: ValueExpressionContext;
    public _len?: ValueExpressionContext;
    public _trimOption?: Token | null;
    public _trimStr?: ValueExpressionContext;
    public _srcStr?: ValueExpressionContext;
    public _input?: ValueExpressionContext;
    public _replace?: ValueExpressionContext;
    public _position?: ValueExpressionContext;
    public _length?: ValueExpressionContext;
    public _percentage?: ValueExpressionContext;
    public _index?: ValueExpressionContext;
    public _fieldName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USER, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SESSION_USER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_ADD, 0);
    }
    public datetimeUnit(): DatetimeUnitContext | null {
        return this.getRuleContext(0, DatetimeUnitContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_DIFF, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMEDIFF, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_END, 0);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ELSE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CAST, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRY_CAST, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public namedExpression(): NamedExpressionContext[];
    public namedExpression(i: number): NamedExpressionContext | null;
    public namedExpression(i?: number): NamedExpressionContext[] | NamedExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedExpressionContext);
        }

        return this.getRuleContext(i, NamedExpressionContext);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IGNORE, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY_VALUE, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_POSITION, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOT, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public functionArgument(): FunctionArgumentContext[];
    public functionArgument(i: number): FunctionArgumentContext | null;
    public functionArgument(i?: number): FunctionArgumentContext[] | FunctionArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionArgumentContext);
        }

        return this.getRuleContext(i, FunctionArgumentContext);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILTER, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WHERE, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVER, 0);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(0, WindowSpecContext);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESPECT, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ARROW, 0);
    }
    public columnNamePath(): ColumnNamePathContext | null {
        return this.getRuleContext(0, ColumnNamePathContext);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTRACT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTRING, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRIM, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOTH, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRAILING, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAY, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PLACING, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITHIN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUP, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public sortItem(): SortItemContext | null {
        return this.getRuleContext(0, SortItemContext);
    }
    public KW_PERCENTILE_CONT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_CONT, 0);
    }
    public KW_PERCENTILE_DISC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_DISC, 0);
    }
    public LEFT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_BRACKET, 0);
    }
    public RIGHT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_BRACKET, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_primaryExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPrimaryExpression) {
             listener.enterPrimaryExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPrimaryExpression) {
             listener.exitPrimaryExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryExpression) {
            return visitor.visitPrimaryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralTypeContext extends antlr.ParserRuleContext {
    public _unsupportedType?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY_HEX, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_literalType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLiteralType) {
             listener.enterLiteralType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLiteralType) {
             listener.exitLiteralType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLiteralType) {
            return visitor.visitLiteralType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public QUESTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.QUESTION, 0);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.COLON, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public literalType(): LiteralTypeContext | null {
        return this.getRuleContext(0, LiteralTypeContext);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public booleanValue(): BooleanValueContext | null {
        return this.getRuleContext(0, BooleanValueContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_constant;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterConstant) {
             listener.enterConstant(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitConstant) {
             listener.exitConstant(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstant) {
            return visitor.visitConstant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NEQ, 0);
    }
    public NEQJ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NEQJ, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LT, 0);
    }
    public LTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LTE, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.GT, 0);
    }
    public GTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.GTE, 0);
    }
    public NSEQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NSEQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArithmeticOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PERCENT, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.TILDE, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.AMPERSAND, 0);
    }
    public PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PIPE, 0);
    }
    public CONCAT_PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.CONCAT_PIPE, 0);
    }
    public HAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.HAT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_arithmeticOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterArithmeticOperator) {
             listener.enterArithmeticOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitArithmeticOperator) {
             listener.exitArithmeticOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticOperator) {
            return visitor.visitArithmeticOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_predicateOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPredicateOperator) {
             listener.enterPredicateOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPredicateOperator) {
             listener.exitPredicateOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicateOperator) {
            return visitor.visitPredicateOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FALSE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_booleanValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBooleanValue) {
             listener.enterBooleanValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBooleanValue) {
             listener.exitBooleanValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTERVAL(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0)!;
    }
    public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext | null {
        return this.getRuleContext(0, ErrorCapturingMultiUnitsIntervalContext);
    }
    public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext | null {
        return this.getRuleContext(0, ErrorCapturingUnitToUnitIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_interval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingMultiUnitsIntervalContext extends antlr.ParserRuleContext {
    public _body?: MultiUnitsIntervalContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext {
        return this.getRuleContext(0, MultiUnitsIntervalContext)!;
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext | null {
        return this.getRuleContext(0, UnitToUnitIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingMultiUnitsInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingMultiUnitsInterval) {
             listener.enterErrorCapturingMultiUnitsInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingMultiUnitsInterval) {
             listener.exitErrorCapturingMultiUnitsInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingMultiUnitsInterval) {
            return visitor.visitErrorCapturingMultiUnitsInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultiUnitsIntervalContext extends antlr.ParserRuleContext {
    public _unitInMultiUnits?: UnitInMultiUnitsContext;
    public _unit: UnitInMultiUnitsContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalValue(): IntervalValueContext[];
    public intervalValue(i: number): IntervalValueContext | null;
    public intervalValue(i?: number): IntervalValueContext[] | IntervalValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalValueContext);
        }

        return this.getRuleContext(i, IntervalValueContext);
    }
    public unitInMultiUnits(): UnitInMultiUnitsContext[];
    public unitInMultiUnits(i: number): UnitInMultiUnitsContext | null;
    public unitInMultiUnits(i?: number): UnitInMultiUnitsContext[] | UnitInMultiUnitsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitInMultiUnitsContext);
        }

        return this.getRuleContext(i, UnitInMultiUnitsContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multiUnitsInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultiUnitsInterval) {
             listener.enterMultiUnitsInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultiUnitsInterval) {
             listener.exitMultiUnitsInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultiUnitsInterval) {
            return visitor.visitMultiUnitsInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingUnitToUnitIntervalContext extends antlr.ParserRuleContext {
    public _body?: UnitToUnitIntervalContext;
    public _error1?: MultiUnitsIntervalContext;
    public _error2?: UnitToUnitIntervalContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext[];
    public unitToUnitInterval(i: number): UnitToUnitIntervalContext | null;
    public unitToUnitInterval(i?: number): UnitToUnitIntervalContext[] | UnitToUnitIntervalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitToUnitIntervalContext);
        }

        return this.getRuleContext(i, UnitToUnitIntervalContext);
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext | null {
        return this.getRuleContext(0, MultiUnitsIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingUnitToUnitInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingUnitToUnitInterval) {
             listener.enterErrorCapturingUnitToUnitInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingUnitToUnitInterval) {
             listener.exitErrorCapturingUnitToUnitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingUnitToUnitInterval) {
            return visitor.visitErrorCapturingUnitToUnitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitToUnitIntervalContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unitInUnitToUnit(): UnitInUnitToUnitContext[];
    public unitInUnitToUnit(i: number): UnitInUnitToUnitContext | null;
    public unitInUnitToUnit(i?: number): UnitInUnitToUnitContext[] | UnitInUnitToUnitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitInUnitToUnitContext);
        }

        return this.getRuleContext(i, UnitInUnitToUnitContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TO, 0)!;
    }
    public intervalValue(): IntervalValueContext {
        return this.getRuleContext(0, IntervalValueContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unitToUnitInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnitToUnitInterval) {
             listener.enterUnitToUnitInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnitToUnitInterval) {
             listener.exitUnitToUnitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitToUnitInterval) {
            return visitor.visitUnitToUnitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_intervalValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIntervalValue) {
             listener.enterIntervalValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIntervalValue) {
             listener.exitIntervalValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalValue) {
            return visitor.visitIntervalValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitInMultiUnitsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECONDS, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECONDS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTES, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOURS, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYS, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEKS, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTHS, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEARS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unitInMultiUnits;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnitInMultiUnits) {
             listener.enterUnitInMultiUnits(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnitInMultiUnits) {
             listener.exitUnitInMultiUnits(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitInMultiUnits) {
            return visitor.visitUnitInMultiUnits(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitInUnitToUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unitInUnitToUnit;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnitInUnitToUnit) {
             listener.enterUnitInUnitToUnit(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnitInUnitToUnit) {
             listener.exitUnitInUnitToUnit(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitInUnitToUnit) {
            return visitor.visitUnitInUnitToUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColPositionContext extends antlr.ParserRuleContext {
    public _position?: Token | null;
    public _afterCol?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AFTER, 0);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colPosition;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColPosition) {
             listener.enterColPosition(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColPosition) {
             listener.exitColPosition(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColPosition) {
            return visitor.visitColPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public _unsupportedType?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOOLEAN, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TINYINT, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BYTE, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SMALLINT, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHORT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTEGER, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BIGINT, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LONG, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FLOAT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REAL, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DOUBLE, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRING, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHARACTER, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHAR, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARCHAR, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECIMAL, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEC, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NUMERIC, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VOID, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_type;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterType) {
             listener.enterType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitType) {
             listener.exitType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitType) {
            return visitor.visitType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeContext extends antlr.ParserRuleContext {
    public _complex?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LT, 0);
    }
    public dataType(): DataTypeContext[];
    public dataType(i: number): DataTypeContext | null;
    public dataType(i?: number): DataTypeContext[] | DataTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeContext);
        }

        return this.getRuleContext(i, DataTypeContext);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.GT, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NEQ, 0);
    }
    public complexColType(): ComplexColTypeContext[];
    public complexColType(i: number): ComplexColTypeContext | null;
    public complexColType(i?: number): ComplexColTypeContext[] | ComplexColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ComplexColTypeContext);
        }

        return this.getRuleContext(i, ComplexColTypeContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_MONTH(): antlr.TerminalNode[];
    public KW_MONTH(i: number): antlr.TerminalNode | null;
    public KW_MONTH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_MONTH);
    	} else {
    		return this.getToken(SparkSqlParser.KW_MONTH, i);
    	}
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TO, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode[];
    public KW_HOUR(i: number): antlr.TerminalNode | null;
    public KW_HOUR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_HOUR);
    	} else {
    		return this.getToken(SparkSqlParser.KW_HOUR, i);
    	}
    }
    public KW_MINUTE(): antlr.TerminalNode[];
    public KW_MINUTE(i: number): antlr.TerminalNode | null;
    public KW_MINUTE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_MINUTE);
    	} else {
    		return this.getToken(SparkSqlParser.KW_MINUTE, i);
    	}
    }
    public KW_SECOND(): antlr.TerminalNode[];
    public KW_SECOND(i: number): antlr.TerminalNode | null;
    public KW_SECOND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_SECOND);
    	} else {
    		return this.getToken(SparkSqlParser.KW_SECOND, i);
    	}
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(SparkSqlParser.INTEGER_VALUE, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_dataType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDataType) {
             listener.enterDataType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDataType) {
             listener.exitDataType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDataType) {
            return visitor.visitDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionSeqForAddContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext[];
    public qualifiedColTypeWithPositionForAdd(i: number): QualifiedColTypeWithPositionForAddContext | null;
    public qualifiedColTypeWithPositionForAdd(i?: number): QualifiedColTypeWithPositionForAddContext[] | QualifiedColTypeWithPositionForAddContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedColTypeWithPositionForAddContext);
        }

        return this.getRuleContext(i, QualifiedColTypeWithPositionForAddContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForAdd;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionSeqForAdd) {
             listener.enterQualifiedColTypeWithPositionSeqForAdd(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionSeqForAdd) {
             listener.exitQualifiedColTypeWithPositionSeqForAdd(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionSeqForAdd) {
            return visitor.visitQualifiedColTypeWithPositionSeqForAdd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionForAddContext extends antlr.ParserRuleContext {
    public _name?: ColumnNameCreateContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext[];
    public colDefinitionDescriptorWithPosition(i: number): ColDefinitionDescriptorWithPositionContext | null;
    public colDefinitionDescriptorWithPosition(i?: number): ColDefinitionDescriptorWithPositionContext[] | ColDefinitionDescriptorWithPositionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionDescriptorWithPositionContext);
        }

        return this.getRuleContext(i, ColDefinitionDescriptorWithPositionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionForAdd;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionForAdd) {
             listener.enterQualifiedColTypeWithPositionForAdd(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionForAdd) {
             listener.exitQualifiedColTypeWithPositionForAdd(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionForAdd) {
            return visitor.visitQualifiedColTypeWithPositionForAdd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionSeqForReplaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedColTypeWithPositionForReplace(): QualifiedColTypeWithPositionForReplaceContext[];
    public qualifiedColTypeWithPositionForReplace(i: number): QualifiedColTypeWithPositionForReplaceContext | null;
    public qualifiedColTypeWithPositionForReplace(i?: number): QualifiedColTypeWithPositionForReplaceContext[] | QualifiedColTypeWithPositionForReplaceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedColTypeWithPositionForReplaceContext);
        }

        return this.getRuleContext(i, QualifiedColTypeWithPositionForReplaceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForReplace;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionSeqForReplace) {
             listener.enterQualifiedColTypeWithPositionSeqForReplace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionSeqForReplace) {
             listener.exitQualifiedColTypeWithPositionSeqForReplace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionSeqForReplace) {
            return visitor.visitQualifiedColTypeWithPositionSeqForReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionForReplaceContext extends antlr.ParserRuleContext {
    public _name?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext[];
    public colDefinitionDescriptorWithPosition(i: number): ColDefinitionDescriptorWithPositionContext | null;
    public colDefinitionDescriptorWithPosition(i?: number): ColDefinitionDescriptorWithPositionContext[] | ColDefinitionDescriptorWithPositionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionDescriptorWithPositionContext);
        }

        return this.getRuleContext(i, ColDefinitionDescriptorWithPositionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionForReplace;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionForReplace) {
             listener.enterQualifiedColTypeWithPositionForReplace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionForReplace) {
             listener.exitQualifiedColTypeWithPositionForReplace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionForReplace) {
            return visitor.visitQualifiedColTypeWithPositionForReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColDefinitionDescriptorWithPositionContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colDefinitionDescriptorWithPosition;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColDefinitionDescriptorWithPosition) {
             listener.enterColDefinitionDescriptorWithPosition(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColDefinitionDescriptorWithPosition) {
             listener.exitColDefinitionDescriptorWithPosition(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColDefinitionDescriptorWithPosition) {
            return visitor.visitColDefinitionDescriptorWithPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDefaultExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_variableDefaultExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterVariableDefaultExpression) {
             listener.enterVariableDefaultExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitVariableDefaultExpression) {
             listener.exitVariableDefaultExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableDefaultExpression) {
            return visitor.visitVariableDefaultExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnType(): ColumnTypeContext[];
    public columnType(i: number): ColumnTypeContext | null;
    public columnType(i?: number): ColumnTypeContext[] | ColumnTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }

        return this.getRuleContext(i, ColumnTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colTypeList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColTypeList) {
             listener.enterColTypeList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColTypeList) {
             listener.exitColTypeList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColTypeList) {
            return visitor.visitColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeContext extends antlr.ParserRuleContext {
    public _colName?: ErrorCapturingIdentifierContext;
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnType) {
             listener.enterColumnType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnType) {
             listener.exitColumnType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnType) {
            return visitor.visitColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOrReplaceTableColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createOrReplaceTableColType(): CreateOrReplaceTableColTypeContext[];
    public createOrReplaceTableColType(i: number): CreateOrReplaceTableColTypeContext | null;
    public createOrReplaceTableColType(i?: number): CreateOrReplaceTableColTypeContext[] | CreateOrReplaceTableColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateOrReplaceTableColTypeContext);
        }

        return this.getRuleContext(i, CreateOrReplaceTableColTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createOrReplaceTableColTypeList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateOrReplaceTableColTypeList) {
             listener.enterCreateOrReplaceTableColTypeList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateOrReplaceTableColTypeList) {
             listener.exitCreateOrReplaceTableColTypeList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOrReplaceTableColTypeList) {
            return visitor.visitCreateOrReplaceTableColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOrReplaceTableColTypeContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _colType?: DataTypeContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public colDefinitionOption(): ColDefinitionOptionContext[];
    public colDefinitionOption(i: number): ColDefinitionOptionContext | null;
    public colDefinitionOption(i?: number): ColDefinitionOptionContext[] | ColDefinitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionOptionContext);
        }

        return this.getRuleContext(i, ColDefinitionOptionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createOrReplaceTableColType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateOrReplaceTableColType) {
             listener.enterCreateOrReplaceTableColType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateOrReplaceTableColType) {
             listener.exitCreateOrReplaceTableColType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOrReplaceTableColType) {
            return visitor.visitCreateOrReplaceTableColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColDefinitionOptionContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GENERATED, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALWAYS, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colDefinitionOption;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColDefinitionOption) {
             listener.enterColDefinitionOption(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColDefinitionOption) {
             listener.exitColDefinitionOption(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColDefinitionOption) {
            return visitor.visitColDefinitionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComplexColTypeContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.COLON, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_complexColType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterComplexColType) {
             listener.enterComplexColType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitComplexColType) {
             listener.exitComplexColType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComplexColType) {
            return visitor.visitComplexColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_whenClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWhenClause) {
             listener.enterWhenClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWhenClause) {
             listener.exitWhenClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WINDOW, 0)!;
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_AS);
    	} else {
    		return this.getToken(SparkSqlParser.KW_AS, i);
    	}
    }
    public windowSpec(): WindowSpecContext[];
    public windowSpec(i: number): WindowSpecContext | null;
    public windowSpec(i?: number): WindowSpecContext[] | WindowSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowSpecContext);
        }

        return this.getRuleContext(i, WindowSpecContext);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_windowClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWindowClause) {
             listener.enterWindowClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWindowClause) {
             listener.exitWindowClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZOrderClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ZORDER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ZORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public columnNameSeq(): ColumnNameSeqContext {
        return this.getRuleContext(0, ColumnNameSeqContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_zOrderClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterZOrderClause) {
             listener.enterZOrderClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitZOrderClause) {
             listener.exitZOrderClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitZOrderClause) {
            return visitor.visitZOrderClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public orderOrSortByClause(): OrderOrSortByClauseContext | null {
        return this.getRuleContext(0, OrderOrSortByClauseContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_windowSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWindowSpec) {
             listener.enterWindowSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWindowSpec) {
             listener.exitWindowSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowSpec) {
            return visitor.visitWindowSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public _frameType?: Token | null;
    public _start_?: FrameBoundContext;
    public _end?: FrameBoundContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frameBound(): FrameBoundContext[];
    public frameBound(i: number): FrameBoundContext | null;
    public frameBound(i?: number): FrameBoundContext[] | FrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundContext);
        }

        return this.getRuleContext(i, FrameBoundContext);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RANGE, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_windowFrame;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWindowFrame) {
             listener.enterWindowFrame(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWindowFrame) {
             listener.exitWindowFrame(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public _boundType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOLLOWING, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROW, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_frameBound;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFrameBound) {
             listener.enterFrameBound(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFrameBound) {
             listener.exitFrameBound(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBound) {
            return visitor.visitFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedNameList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedNameList) {
             listener.enterQualifiedNameList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedNameList) {
             listener.exitQualifiedNameList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedNameList) {
            return visitor.visitQualifiedNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILTER, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RIGHT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionNameCreate) {
             listener.enterFunctionNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionNameCreate) {
             listener.exitFunctionNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierExtraContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingIdentifier) {
             listener.enterErrorCapturingIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingIdentifier) {
             listener.exitErrorCapturingIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingIdentifier) {
            return visitor.visitErrorCapturingIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierExtraContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.MINUS);
    	} else {
    		return this.getToken(SparkSqlParser.MINUS, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingIdentifierExtra;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingIdentifierExtra) {
             listener.enterErrorCapturingIdentifierExtra(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingIdentifierExtra) {
             listener.exitErrorCapturingIdentifierExtra(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingIdentifierExtra) {
            return visitor.visitErrorCapturingIdentifierExtra(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public strictIdentifier(): StrictIdentifierContext | null {
        return this.getRuleContext(0, StrictIdentifierContext);
    }
    public strictNonReserved(): StrictNonReservedContext | null {
        return this.getRuleContext(0, StrictNonReservedContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StrictIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.IDENTIFIER, 0);
    }
    public quotedIdentifier(): QuotedIdentifierContext | null {
        return this.getRuleContext(0, QuotedIdentifierContext);
    }
    public ansiNonReserved(): AnsiNonReservedContext | null {
        return this.getRuleContext(0, AnsiNonReservedContext);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_strictIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStrictIdentifier) {
             listener.enterStrictIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStrictIdentifier) {
             listener.exitStrictIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStrictIdentifier) {
            return visitor.visitStrictIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotedIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.BACKQUOTED_IDENTIFIER, 0);
    }
    public DOUBLEQUOTED_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOUBLEQUOTED_STRING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_quotedIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQuotedIdentifier) {
             listener.enterQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQuotedIdentifier) {
             listener.exitQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifier) {
            return visitor.visitQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPONENT_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EXPONENT_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public BIGINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.BIGINT_LITERAL, 0);
    }
    public SMALLINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SMALLINT_LITERAL, 0);
    }
    public TINYINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.TINYINT_LITERAL, 0);
    }
    public DOUBLE_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOUBLE_LITERAL, 0);
    }
    public FLOAT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.FLOAT_LITERAL, 0);
    }
    public BIGDECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.BIGDECIMAL_LITERAL, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_number;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNumber) {
             listener.enterNumber(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNumber) {
             listener.exitNumber(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumber) {
            return visitor.visitNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColumnActionContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public _setOrDrop?: Token | null;
    public _dropDefault?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TYPE, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_alterColumnAction;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterColumnAction) {
             listener.enterAlterColumnAction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterColumnAction) {
             listener.exitAlterColumnAction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColumnAction) {
            return visitor.visitAlterColumnAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.STRING_LITERAL, 0);
    }
    public DOUBLEQUOTED_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOUBLEQUOTED_STRING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_stringLit;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStringLit) {
             listener.enterStringLit(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStringLit) {
             listener.exitStringLit(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStringLit) {
            return visitor.visitStringLit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnsiNonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AFTER, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALWAYS, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANTI, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY_VALUE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARCHIVE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AT, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY_HEX, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOOLEAN, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKETS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BYTE, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASCADE, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOG, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOGS, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHAR, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHARACTER, 0);
    }
    public KW_CLEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLEAR, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CODEGEN, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLECTION, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMIT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONCATENATE, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COST, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASES, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_ADD, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_DIFF, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYS, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECIMAL, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFINED, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELIMITED, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DFS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISABLE, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ENABLE, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPED, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCHANGE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPORT, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTRACT, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIELDS, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FLOAT, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOLLOWING, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOURS, 0);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IF, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IGNORE, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IMPORT, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INCLUDE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPATH, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INSERT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ITEMS, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_KEYS, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAZY, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ILIKE, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LINES, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIST, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOGICAL, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LONG, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MACRO, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MERGE, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTES, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTHS, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MSCK, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAME, 0);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACE, 0);
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACES, 0);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECONDS, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NO, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NUMERIC, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OF, 0);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIMIZE, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVER, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAY, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTLIT, 0);
    }
    public KW_PIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PIVOT, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PLACING, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_POSITION, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRECEDING, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PROPERTIES, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUERY, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RANGE, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REAL, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECOVER, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REDUCE, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RENAME, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPAIR, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESET, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESTRICT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REVOKE, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REWRITE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REGEXP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLES, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECONDS, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEMI, 0);
    }
    public KW_SEPARATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEPARATED, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUS, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHORT, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHOW, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SINGLE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SMALLINT, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public KW_SOURCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOURCE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_START, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_STRATIFY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRATIFY, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTRING, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYNC, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLES, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TARGET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TERMINATED, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMEDIFF, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TINYINT, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TOUCH, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRIM, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRY_CAST, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNCACHE, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNLOCK, 0);
    }
    public KW_UNPIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNPIVOT, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNSET, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USE, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARCHAR, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VOID, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEKS, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WINDOW, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZONE, 0);
    }
    public KW_ZORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZORDER, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ansiNonReserved;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAnsiNonReserved) {
             listener.enterAnsiNonReserved(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAnsiNonReserved) {
             listener.exitAnsiNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnsiNonReserved) {
            return visitor.visitAnsiNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StrictNonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANTI, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CROSS, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCEPT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FULL, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INNER, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERSECT, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_JOIN, 0);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEFT, 0);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NATURAL, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ON, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RIGHT, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEMI, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUS, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNION, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_strictNonReserved;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStrictNonReserved) {
             listener.enterStrictNonReserved(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStrictNonReserved) {
             listener.exitStrictNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStrictNonReserved) {
            return visitor.visitStrictNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AFTER, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALWAYS, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY_VALUE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARCHIVE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AT, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY_HEX, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOOLEAN, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOTH, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKETS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BYTE, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASCADE, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASE, 0);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CAST, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOG, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOGS, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHAR, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHARACTER, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHECK, 0);
    }
    public KW_CLEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLEAR, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CODEGEN, 0);
    }
    public KW_COLLATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLATE, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLECTION, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMIT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONCATENATE, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COST, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CREATE, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_TIME, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASES, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_ADD, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_DIFF, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYS, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECIMAL, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFINED, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELIMITED, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DFS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISABLE, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTINCT, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ELSE, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ENABLE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_END, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPE, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPED, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCHANGE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPORT, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTRACT, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FALSE, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FETCH, 0);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILTER, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIELDS, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FLOAT, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOLLOWING, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOREIGN, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GRANT, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUP, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public KW_HAVING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HAVING, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOURS, 0);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IF, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IGNORE, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IMPORT, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INCLUDE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPATH, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INSERT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTO, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IS, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ITEMS, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_KEYS, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAZY, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEADING, 0);
    }
    public KW_LIFECYCLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIFECYCLE, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LONG, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ILIKE, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LINES, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIST, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOGICAL, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MACRO, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MERGE, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTES, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTHS, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MSCK, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAME, 0);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACE, 0);
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACES, 0);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECONDS, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NO, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NUMERIC, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OF, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OFFSET, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ONLY, 0);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIMIZE, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUT, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTER, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVER, 0);
    }
    public KW_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAPS, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAY, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0);
    }
    public KW_PERCENTILE_CONT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_CONT, 0);
    }
    public KW_PERCENTILE_DISC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_DISC, 0);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTLIT, 0);
    }
    public KW_PIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PIVOT, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PLACING, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_POSITION, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRECEDING, 0);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRIMARY, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PROPERTIES, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUERY, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RANGE, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REAL, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECOVER, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REDUCE, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REFERENCES, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RENAME, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPAIR, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESET, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESTRICT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REVOKE, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REWRITE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REGEXP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLES, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECONDS, 0);
    }
    public KW_SEPARATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEPARATED, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SESSION_USER, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHORT, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHOW, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SINGLE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SMALLINT, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOME, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public KW_SOURCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOURCE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_START, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_STRATIFY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRATIFY, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTRING, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYNC, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLES, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TARGET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TERMINATED, 0);
    }
    public KW_THEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_THEN, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIME, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMEDIFF, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TINYINT, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TO, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TOUCH, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRAILING, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRIM, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRY_CAST, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNCACHE, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNIQUE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNKNOWN, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNLOCK, 0);
    }
    public KW_UNPIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNPIVOT, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNSET, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USER, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARCHAR, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VOID, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEKS, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WHEN, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WHERE, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WINDOW, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITHIN, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZONE, 0);
    }
    public KW_ZORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZORDER, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_nonReserved;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
